
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e1c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08007ffc  08007ffc  00017ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008134  08008134  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008134  08008134  00018134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800813c  0800813c  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800813c  0800813c  0001813c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008140  08008140  00018140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  08008144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000474  200000d4  08008218  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000548  08008218  00020548  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b445  00000000  00000000  00020147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003883  00000000  00000000  0003b58c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015a0  00000000  00000000  0003ee10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010b1  00000000  00000000  000403b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029d32  00000000  00000000  00041461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c5d1  00000000  00000000  0006b193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00112313  00000000  00000000  00087764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005fec  00000000  00000000  00199a78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  0019fa64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000d4 	.word	0x200000d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007fe4 	.word	0x08007fe4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000d8 	.word	0x200000d8
 800021c:	08007fe4 	.word	0x08007fe4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08c      	sub	sp, #48	; 0x30
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2220      	movs	r2, #32
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f007 f869 	bl	80076dc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800060a:	4b32      	ldr	r3, [pc, #200]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800060c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000610:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000612:	4b30      	ldr	r3, [pc, #192]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000614:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000618:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800061a:	4b2e      	ldr	r3, [pc, #184]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000620:	4b2c      	ldr	r3, [pc, #176]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000626:	4b2b      	ldr	r3, [pc, #172]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800062c:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800062e:	2200      	movs	r2, #0
 8000630:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000632:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000634:	2204      	movs	r2, #4
 8000636:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000638:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800063a:	2200      	movs	r2, #0
 800063c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800063e:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000640:	2200      	movs	r2, #0
 8000642:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000644:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000646:	2201      	movs	r2, #1
 8000648:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800064a:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800064c:	2200      	movs	r2, #0
 800064e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000652:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000654:	2200      	movs	r2, #0
 8000656:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000658:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800065a:	2200      	movs	r2, #0
 800065c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800065e:	4b1d      	ldr	r3, [pc, #116]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000660:	2200      	movs	r2, #0
 8000662:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000666:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000668:	2200      	movs	r2, #0
 800066a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800066c:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800066e:	2200      	movs	r2, #0
 8000670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000674:	4817      	ldr	r0, [pc, #92]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000676:	f001 fa21 	bl	8001abc <HAL_ADC_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000680:	f000 fae4 	bl	8000c4c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000684:	2300      	movs	r3, #0
 8000686:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800068c:	4619      	mov	r1, r3
 800068e:	4811      	ldr	r0, [pc, #68]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000690:	f002 f83c 	bl	800270c <HAL_ADCEx_MultiModeConfigChannel>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800069a:	f000 fad7 	bl	8000c4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_ADC1_Init+0xec>)
 80006a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a2:	2306      	movs	r3, #6
 80006a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006aa:	237f      	movs	r3, #127	; 0x7f
 80006ac:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006ae:	2304      	movs	r3, #4
 80006b0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	4619      	mov	r1, r3
 80006ba:	4806      	ldr	r0, [pc, #24]	; (80006d4 <MX_ADC1_Init+0xe8>)
 80006bc:	f001 fbc0 	bl	8001e40 <HAL_ADC_ConfigChannel>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006c6:	f000 fac1 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	3730      	adds	r7, #48	; 0x30
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	200000f0 	.word	0x200000f0
 80006d8:	21800100 	.word	0x21800100

080006dc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006e2:	463b      	mov	r3, r7
 80006e4:	2220      	movs	r2, #32
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f006 fff7 	bl	80076dc <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006ee:	4b2b      	ldr	r3, [pc, #172]	; (800079c <MX_ADC2_Init+0xc0>)
 80006f0:	4a2b      	ldr	r2, [pc, #172]	; (80007a0 <MX_ADC2_Init+0xc4>)
 80006f2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006f4:	4b29      	ldr	r3, [pc, #164]	; (800079c <MX_ADC2_Init+0xc0>)
 80006f6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006fa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006fc:	4b27      	ldr	r3, [pc, #156]	; (800079c <MX_ADC2_Init+0xc0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000702:	4b26      	ldr	r3, [pc, #152]	; (800079c <MX_ADC2_Init+0xc0>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000708:	4b24      	ldr	r3, [pc, #144]	; (800079c <MX_ADC2_Init+0xc0>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800070e:	4b23      	ldr	r3, [pc, #140]	; (800079c <MX_ADC2_Init+0xc0>)
 8000710:	2200      	movs	r2, #0
 8000712:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000714:	4b21      	ldr	r3, [pc, #132]	; (800079c <MX_ADC2_Init+0xc0>)
 8000716:	2204      	movs	r2, #4
 8000718:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800071a:	4b20      	ldr	r3, [pc, #128]	; (800079c <MX_ADC2_Init+0xc0>)
 800071c:	2200      	movs	r2, #0
 800071e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000720:	4b1e      	ldr	r3, [pc, #120]	; (800079c <MX_ADC2_Init+0xc0>)
 8000722:	2200      	movs	r2, #0
 8000724:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000726:	4b1d      	ldr	r3, [pc, #116]	; (800079c <MX_ADC2_Init+0xc0>)
 8000728:	2201      	movs	r2, #1
 800072a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800072c:	4b1b      	ldr	r3, [pc, #108]	; (800079c <MX_ADC2_Init+0xc0>)
 800072e:	2200      	movs	r2, #0
 8000730:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000734:	4b19      	ldr	r3, [pc, #100]	; (800079c <MX_ADC2_Init+0xc0>)
 8000736:	2200      	movs	r2, #0
 8000738:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <MX_ADC2_Init+0xc0>)
 800073c:	2200      	movs	r2, #0
 800073e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000740:	4b16      	ldr	r3, [pc, #88]	; (800079c <MX_ADC2_Init+0xc0>)
 8000742:	2200      	movs	r2, #0
 8000744:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_ADC2_Init+0xc0>)
 800074a:	2200      	movs	r2, #0
 800074c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_ADC2_Init+0xc0>)
 8000750:	2200      	movs	r2, #0
 8000752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000756:	4811      	ldr	r0, [pc, #68]	; (800079c <MX_ADC2_Init+0xc0>)
 8000758:	f001 f9b0 	bl	8001abc <HAL_ADC_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000762:	f000 fa73 	bl	8000c4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_ADC2_Init+0xc8>)
 8000768:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800076a:	2306      	movs	r3, #6
 800076c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000772:	237f      	movs	r3, #127	; 0x7f
 8000774:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000776:	2304      	movs	r3, #4
 8000778:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800077e:	463b      	mov	r3, r7
 8000780:	4619      	mov	r1, r3
 8000782:	4806      	ldr	r0, [pc, #24]	; (800079c <MX_ADC2_Init+0xc0>)
 8000784:	f001 fb5c 	bl	8001e40 <HAL_ADC_ConfigChannel>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800078e:	f000 fa5d 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	3720      	adds	r7, #32
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	2000015c 	.word	0x2000015c
 80007a0:	50000100 	.word	0x50000100
 80007a4:	19200040 	.word	0x19200040

080007a8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b0a4      	sub	sp, #144	; 0x90
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007c4:	2254      	movs	r2, #84	; 0x54
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f006 ff87 	bl	80076dc <memset>
  if(adcHandle->Instance==ADC1)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007d6:	d174      	bne.n	80008c2 <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007de:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80007e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007e8:	4618      	mov	r0, r3
 80007ea:	f003 fa0f 	bl	8003c0c <HAL_RCCEx_PeriphCLKConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80007f4:	f000 fa2a 	bl	8000c4c <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007f8:	4b63      	ldr	r3, [pc, #396]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	3301      	adds	r3, #1
 80007fe:	4a62      	ldr	r2, [pc, #392]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 8000800:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000802:	4b61      	ldr	r3, [pc, #388]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d10b      	bne.n	8000822 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800080a:	4b60      	ldr	r3, [pc, #384]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	4a5f      	ldr	r2, [pc, #380]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000810:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000816:	4b5d      	ldr	r3, [pc, #372]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
 8000820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	4b5a      	ldr	r3, [pc, #360]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	4a59      	ldr	r2, [pc, #356]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082e:	4b57      	ldr	r3, [pc, #348]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	623b      	str	r3, [r7, #32]
 8000838:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b54      	ldr	r3, [pc, #336]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	4a53      	ldr	r2, [pc, #332]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000846:	4b51      	ldr	r3, [pc, #324]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	61fb      	str	r3, [r7, #28]
 8000850:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	4b4e      	ldr	r3, [pc, #312]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	4a4d      	ldr	r2, [pc, #308]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085e:	4b4b      	ldr	r3, [pc, #300]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	61bb      	str	r3, [r7, #24]
 8000868:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 800086a:	2304      	movs	r3, #4
 800086c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800086e:	2303      	movs	r3, #3
 8000870:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800087e:	4619      	mov	r1, r3
 8000880:	4843      	ldr	r0, [pc, #268]	; (8000990 <HAL_ADC_MspInit+0x1e8>)
 8000882:	f002 f9eb 	bl	8002c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 8000886:	2302      	movs	r3, #2
 8000888:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800088a:	2303      	movs	r3, #3
 800088c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800089a:	4619      	mov	r1, r3
 800089c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a0:	f002 f9dc 	bl	8002c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008a4:	2303      	movs	r3, #3
 80008a6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008a8:	2303      	movs	r3, #3
 80008aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80008b8:	4619      	mov	r1, r3
 80008ba:	4836      	ldr	r0, [pc, #216]	; (8000994 <HAL_ADC_MspInit+0x1ec>)
 80008bc:	f002 f9ce 	bl	8002c5c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80008c0:	e05e      	b.n	8000980 <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a34      	ldr	r2, [pc, #208]	; (8000998 <HAL_ADC_MspInit+0x1f0>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d159      	bne.n	8000980 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80008cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008d2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80008d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008dc:	4618      	mov	r0, r3
 80008de:	f003 f995 	bl	8003c0c <HAL_RCCEx_PeriphCLKConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <HAL_ADC_MspInit+0x144>
      Error_Handler();
 80008e8:	f000 f9b0 	bl	8000c4c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008ec:	4b26      	ldr	r3, [pc, #152]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	3301      	adds	r3, #1
 80008f2:	4a25      	ldr	r2, [pc, #148]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 80008f4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008f6:	4b24      	ldr	r3, [pc, #144]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d10b      	bne.n	8000916 <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008fe:	4b23      	ldr	r3, [pc, #140]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	4a22      	ldr	r2, [pc, #136]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000904:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090a:	4b20      	ldr	r3, [pc, #128]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000912:	617b      	str	r3, [r7, #20]
 8000914:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	4b1d      	ldr	r3, [pc, #116]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	4a1c      	ldr	r2, [pc, #112]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000922:	4b1a      	ldr	r3, [pc, #104]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b17      	ldr	r3, [pc, #92]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	4a16      	ldr	r2, [pc, #88]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093a:	4b14      	ldr	r3, [pc, #80]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 8000946:	230b      	movs	r3, #11
 8000948:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800094a:	2303      	movs	r3, #3
 800094c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000956:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800095a:	4619      	mov	r1, r3
 800095c:	480c      	ldr	r0, [pc, #48]	; (8000990 <HAL_ADC_MspInit+0x1e8>)
 800095e:	f002 f97d 	bl	8002c5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8000962:	2301      	movs	r3, #1
 8000964:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000966:	2303      	movs	r3, #3
 8000968:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000976:	4619      	mov	r1, r3
 8000978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097c:	f002 f96e 	bl	8002c5c <HAL_GPIO_Init>
}
 8000980:	bf00      	nop
 8000982:	3790      	adds	r7, #144	; 0x90
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	200001c8 	.word	0x200001c8
 800098c:	40021000 	.word	0x40021000
 8000990:	48000800 	.word	0x48000800
 8000994:	48000400 	.word	0x48000400
 8000998:	50000100 	.word	0x50000100

0800099c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	; 0x28
 80009a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b2:	4b3f      	ldr	r3, [pc, #252]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	4a3e      	ldr	r2, [pc, #248]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009be:	4b3c      	ldr	r3, [pc, #240]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ca:	4b39      	ldr	r3, [pc, #228]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	4a38      	ldr	r2, [pc, #224]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009d0:	f043 0320 	orr.w	r3, r3, #32
 80009d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d6:	4b36      	ldr	r3, [pc, #216]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	f003 0320 	and.w	r3, r3, #32
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	4b33      	ldr	r3, [pc, #204]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	4a32      	ldr	r2, [pc, #200]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ee:	4b30      	ldr	r3, [pc, #192]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	4b2d      	ldr	r3, [pc, #180]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	4a2c      	ldr	r2, [pc, #176]	; (8000ab0 <MX_GPIO_Init+0x114>)
 8000a00:	f043 0302 	orr.w	r3, r3, #2
 8000a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a06:	4b2a      	ldr	r3, [pc, #168]	; (8000ab0 <MX_GPIO_Init+0x114>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a12:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <MX_GPIO_Init+0x114>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	4a26      	ldr	r2, [pc, #152]	; (8000ab0 <MX_GPIO_Init+0x114>)
 8000a18:	f043 0308 	orr.w	r3, r3, #8
 8000a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1e:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <MX_GPIO_Init+0x114>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	f003 0308 	and.w	r3, r3, #8
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2120      	movs	r1, #32
 8000a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a32:	f002 fa95 	bl	8002f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2104      	movs	r1, #4
 8000a3a:	481e      	ldr	r0, [pc, #120]	; (8000ab4 <MX_GPIO_Init+0x118>)
 8000a3c:	f002 fa90 	bl	8002f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000a40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a46:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	4818      	ldr	r0, [pc, #96]	; (8000ab8 <MX_GPIO_Init+0x11c>)
 8000a58:	f002 f900 	bl	8002c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000a5c:	2320      	movs	r3, #32
 8000a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a76:	f002 f8f1 	bl	8002c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000a7a:	2304      	movs	r3, #4
 8000a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4808      	ldr	r0, [pc, #32]	; (8000ab4 <MX_GPIO_Init+0x118>)
 8000a92:	f002 f8e3 	bl	8002c5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2028      	movs	r0, #40	; 0x28
 8000a9c:	f001 fff6 	bl	8002a8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000aa0:	2028      	movs	r0, #40	; 0x28
 8000aa2:	f002 f80d 	bl	8002ac0 <HAL_NVIC_EnableIRQ>

}
 8000aa6:	bf00      	nop
 8000aa8:	3728      	adds	r7, #40	; 0x28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	48000c00 	.word	0x48000c00
 8000ab8:	48000800 	.word	0x48000800

08000abc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac0:	f000 fdeb 	bl	800169a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac4:	f000 f84a 	bl	8000b5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac8:	f7ff ff68 	bl	800099c <MX_GPIO_Init>
  MX_ADC2_Init();
 8000acc:	f7ff fe06 	bl	80006dc <MX_ADC2_Init>
  MX_ADC1_Init();
 8000ad0:	f7ff fd8c 	bl	80005ec <MX_ADC1_Init>
  MX_TIM1_Init();
 8000ad4:	f000 fa9e 	bl	8001014 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000ad8:	f000 fb48 	bl	800116c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000adc:	f000 fc7c 	bl	80013d8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000ae0:	f000 fcc6 	bl	8001470 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, uartRxBuffer, 1);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	4917      	ldr	r1, [pc, #92]	; (8000b44 <main+0x88>)
 8000ae8:	4817      	ldr	r0, [pc, #92]	; (8000b48 <main+0x8c>)
 8000aea:	f004 fe33 	bl	8005754 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(it_uart2){
 8000aee:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <main+0x90>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d0fb      	beq.n	8000aee <main+0x32>
		  if(uartRxBuffer[0]==ENTER){
 8000af6:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <main+0x88>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b0d      	cmp	r3, #13
 8000afc:	d112      	bne.n	8000b24 <main+0x68>
			  HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);
 8000afe:	f04f 33ff 	mov.w	r3, #4294967295
 8000b02:	2202      	movs	r2, #2
 8000b04:	4912      	ldr	r1, [pc, #72]	; (8000b50 <main+0x94>)
 8000b06:	4810      	ldr	r0, [pc, #64]	; (8000b48 <main+0x8c>)
 8000b08:	f004 fd8e 	bl	8005628 <HAL_UART_Transmit>
			  processCommand(command); // Traitez la commande
 8000b0c:	4811      	ldr	r0, [pc, #68]	; (8000b54 <main+0x98>)
 8000b0e:	f000 f8ef 	bl	8000cf0 <processCommand>
			  memset(command, 0, sizeof(command)); // Réinitialisez le tableau
 8000b12:	2220      	movs	r2, #32
 8000b14:	2100      	movs	r1, #0
 8000b16:	480f      	ldr	r0, [pc, #60]	; (8000b54 <main+0x98>)
 8000b18:	f006 fde0 	bl	80076dc <memset>
			  idx=0;
 8000b1c:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <main+0x9c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	701a      	strb	r2, [r3, #0]
 8000b22:	e00a      	b.n	8000b3a <main+0x7e>
		  }
		  else{
			  command[idx++]=uartRxBuffer[0];
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <main+0x9c>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	1c5a      	adds	r2, r3, #1
 8000b2a:	b2d1      	uxtb	r1, r2
 8000b2c:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <main+0x9c>)
 8000b2e:	7011      	strb	r1, [r2, #0]
 8000b30:	461a      	mov	r2, r3
 8000b32:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <main+0x88>)
 8000b34:	7819      	ldrb	r1, [r3, #0]
 8000b36:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <main+0x98>)
 8000b38:	5499      	strb	r1, [r3, r2]
		  }
		  it_uart2 = 0;
 8000b3a:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <main+0x90>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
	  if(it_uart2){
 8000b40:	e7d5      	b.n	8000aee <main+0x32>
 8000b42:	bf00      	nop
 8000b44:	200001cc 	.word	0x200001cc
 8000b48:	200002dc 	.word	0x200002dc
 8000b4c:	200001cd 	.word	0x200001cd
 8000b50:	08007ffc 	.word	0x08007ffc
 8000b54:	200001d0 	.word	0x200001d0
 8000b58:	200001f0 	.word	0x200001f0

08000b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b094      	sub	sp, #80	; 0x50
 8000b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b62:	f107 0318 	add.w	r3, r7, #24
 8000b66:	2238      	movs	r2, #56	; 0x38
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f006 fdb6 	bl	80076dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
 8000b7c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f002 fa2a 	bl	8002fd8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b84:	2301      	movs	r3, #1
 8000b86:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b8c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b92:	2303      	movs	r3, #3
 8000b94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000b96:	2306      	movs	r3, #6
 8000b98:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000b9a:	2355      	movs	r3, #85	; 0x55
 8000b9c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000baa:	f107 0318 	add.w	r3, r7, #24
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f002 fac6 	bl	8003140 <HAL_RCC_OscConfig>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000bba:	f000 f847 	bl	8000c4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bbe:	230f      	movs	r3, #15
 8000bc0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	2104      	movs	r1, #4
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f002 fdca 	bl	8003770 <HAL_RCC_ClockConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000be2:	f000 f833 	bl	8000c4c <Error_Handler>
  }
}
 8000be6:	bf00      	nop
 8000be8:	3750      	adds	r7, #80	; 0x50
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, uartRxBuffer, 1, 100);
 8000bf8:	2364      	movs	r3, #100	; 0x64
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	4907      	ldr	r1, [pc, #28]	; (8000c1c <HAL_UART_RxCpltCallback+0x2c>)
 8000bfe:	4808      	ldr	r0, [pc, #32]	; (8000c20 <HAL_UART_RxCpltCallback+0x30>)
 8000c00:	f004 fd12 	bl	8005628 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, 1);
 8000c04:	2201      	movs	r2, #1
 8000c06:	4905      	ldr	r1, [pc, #20]	; (8000c1c <HAL_UART_RxCpltCallback+0x2c>)
 8000c08:	4805      	ldr	r0, [pc, #20]	; (8000c20 <HAL_UART_RxCpltCallback+0x30>)
 8000c0a:	f004 fda3 	bl	8005754 <HAL_UART_Receive_IT>
	it_uart2 = 1;
 8000c0e:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <HAL_UART_RxCpltCallback+0x34>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	701a      	strb	r2, [r3, #0]
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	200001cc 	.word	0x200001cc
 8000c20:	200002dc 	.word	0x200002dc
 8000c24:	200001cd 	.word	0x200001cd

08000c28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d101      	bne.n	8000c3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c3a:	f000 fd47 	bl	80016cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40001000 	.word	0x40001000

08000c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c50:	b672      	cpsid	i
}
 8000c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <Error_Handler+0x8>
	...

08000c58 <pinout>:
    {"PA1", "GPIO", "OUT"},
    // Ajoutez d'autres broches et leurs informations ici
};


void pinout() {
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b09d      	sub	sp, #116	; 0x74
 8000c5c:	af02      	add	r7, sp, #8
    HAL_UART_Transmit(&huart2, "Pinout:\r\n", strlen("Pinout:\r\n"), HAL_MAX_DELAY);
 8000c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c62:	2209      	movs	r2, #9
 8000c64:	491e      	ldr	r1, [pc, #120]	; (8000ce0 <pinout+0x88>)
 8000c66:	481f      	ldr	r0, [pc, #124]	; (8000ce4 <pinout+0x8c>)
 8000c68:	f004 fcde 	bl	8005628 <HAL_UART_Transmit>

    for (int i = 0; i < sizeof(pins) / sizeof(pins[0]); i++) {
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	667b      	str	r3, [r7, #100]	; 0x64
 8000c70:	e02e      	b.n	8000cd0 <pinout+0x78>
        char message[100];
        snprintf(message, sizeof(message), "Pin %s: Function - %s, State - %s\r\n", pins[i].name, pins[i].function, pins[i].state);
 8000c72:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000c74:	4613      	mov	r3, r2
 8000c76:	011b      	lsls	r3, r3, #4
 8000c78:	1a9b      	subs	r3, r3, r2
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	4a1a      	ldr	r2, [pc, #104]	; (8000ce8 <pinout+0x90>)
 8000c7e:	189c      	adds	r4, r3, r2
 8000c80:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000c82:	4613      	mov	r3, r2
 8000c84:	011b      	lsls	r3, r3, #4
 8000c86:	1a9b      	subs	r3, r3, r2
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	3310      	adds	r3, #16
 8000c8c:	4a16      	ldr	r2, [pc, #88]	; (8000ce8 <pinout+0x90>)
 8000c8e:	4413      	add	r3, r2
 8000c90:	1d19      	adds	r1, r3, #4
 8000c92:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000c94:	4613      	mov	r3, r2
 8000c96:	011b      	lsls	r3, r3, #4
 8000c98:	1a9b      	subs	r3, r3, r2
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	3328      	adds	r3, #40	; 0x28
 8000c9e:	4a12      	ldr	r2, [pc, #72]	; (8000ce8 <pinout+0x90>)
 8000ca0:	4413      	add	r3, r2
 8000ca2:	4638      	mov	r0, r7
 8000ca4:	9301      	str	r3, [sp, #4]
 8000ca6:	9100      	str	r1, [sp, #0]
 8000ca8:	4623      	mov	r3, r4
 8000caa:	4a10      	ldr	r2, [pc, #64]	; (8000cec <pinout+0x94>)
 8000cac:	2164      	movs	r1, #100	; 0x64
 8000cae:	f006 fce1 	bl	8007674 <sniprintf>
        HAL_UART_Transmit(&huart2, message, strlen(message), HAL_MAX_DELAY);
 8000cb2:	463b      	mov	r3, r7
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fabd 	bl	8000234 <strlen>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc4:	4807      	ldr	r0, [pc, #28]	; (8000ce4 <pinout+0x8c>)
 8000cc6:	f004 fcaf 	bl	8005628 <HAL_UART_Transmit>
    for (int i = 0; i < sizeof(pins) / sizeof(pins[0]); i++) {
 8000cca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ccc:	3301      	adds	r3, #1
 8000cce:	667b      	str	r3, [r7, #100]	; 0x64
 8000cd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d9cd      	bls.n	8000c72 <pinout+0x1a>
    }
}
 8000cd6:	bf00      	nop
 8000cd8:	bf00      	nop
 8000cda:	376c      	adds	r7, #108	; 0x6c
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd90      	pop	{r4, r7, pc}
 8000ce0:	08008000 	.word	0x08008000
 8000ce4:	200002dc 	.word	0x200002dc
 8000ce8:	20000000 	.word	0x20000000
 8000cec:	0800800c 	.word	0x0800800c

08000cf0 <processCommand>:
#include "string.h"
#include "pinout.h"
#include "startMotor.h"
#include "stopMotor.h"

void processCommand(char* command) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  if (strcmp(command, "help") == 0) {
 8000cf8:	491e      	ldr	r1, [pc, #120]	; (8000d74 <processCommand+0x84>)
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f7ff fa90 	bl	8000220 <strcmp>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d10e      	bne.n	8000d24 <processCommand+0x34>
    // Affiche le message d'aide
    HAL_UART_Transmit(&huart2, "Commandes disponibles :\r\n", strlen("Commandes disponibles :\r\n"), HAL_MAX_DELAY);
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	2219      	movs	r2, #25
 8000d0c:	491a      	ldr	r1, [pc, #104]	; (8000d78 <processCommand+0x88>)
 8000d0e:	481b      	ldr	r0, [pc, #108]	; (8000d7c <processCommand+0x8c>)
 8000d10:	f004 fc8a 	bl	8005628 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, " - help : Affiche ce message d'aide\r\n", strlen(" - help : Affiche ce message d'aide\r\n"), HAL_MAX_DELAY);
 8000d14:	f04f 33ff 	mov.w	r3, #4294967295
 8000d18:	2225      	movs	r2, #37	; 0x25
 8000d1a:	4919      	ldr	r1, [pc, #100]	; (8000d80 <processCommand+0x90>)
 8000d1c:	4817      	ldr	r0, [pc, #92]	; (8000d7c <processCommand+0x8c>)
 8000d1e:	f004 fc83 	bl	8005628 <HAL_UART_Transmit>
    // Ajoutez d'autres commandes et leurs descriptions ici
    return 0;
 8000d22:	e024      	b.n	8000d6e <processCommand+0x7e>
  }
  if (strcmp(command, "pinout") == 0) {
 8000d24:	4917      	ldr	r1, [pc, #92]	; (8000d84 <processCommand+0x94>)
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff fa7a 	bl	8000220 <strcmp>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d102      	bne.n	8000d38 <processCommand+0x48>
	  pinout(); // Appeler la fonction pinout
 8000d32:	f7ff ff91 	bl	8000c58 <pinout>
	  return 0;
 8000d36:	e01a      	b.n	8000d6e <processCommand+0x7e>
  }
  if (strcmp(command, "start") == 0) {
 8000d38:	4913      	ldr	r1, [pc, #76]	; (8000d88 <processCommand+0x98>)
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff fa70 	bl	8000220 <strcmp>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d102      	bne.n	8000d4c <processCommand+0x5c>
	  startMotor(); // Appeler la fonction startMotor
 8000d46:	f000 f825 	bl	8000d94 <startMotor>
	  return 0;
 8000d4a:	e010      	b.n	8000d6e <processCommand+0x7e>
  }
  if (strcmp(command, "stop") == 0) {
 8000d4c:	490f      	ldr	r1, [pc, #60]	; (8000d8c <processCommand+0x9c>)
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff fa66 	bl	8000220 <strcmp>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d102      	bne.n	8000d60 <processCommand+0x70>
	  stopMotor(); // Appeler la fonction stopMotor
 8000d5a:	f000 f903 	bl	8000f64 <stopMotor>
	  return 0;
 8000d5e:	e006      	b.n	8000d6e <processCommand+0x7e>
    }
  else {
	  HAL_UART_Transmit(&huart2, "Command not found\r\n", strlen("Command not found\r\n"), HAL_MAX_DELAY);
 8000d60:	f04f 33ff 	mov.w	r3, #4294967295
 8000d64:	2213      	movs	r2, #19
 8000d66:	490a      	ldr	r1, [pc, #40]	; (8000d90 <processCommand+0xa0>)
 8000d68:	4804      	ldr	r0, [pc, #16]	; (8000d7c <processCommand+0x8c>)
 8000d6a:	f004 fc5d 	bl	8005628 <HAL_UART_Transmit>
  }
  // Ajoutez d'autres conditions pour d'autres commandes si nécessaire
}
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	08008030 	.word	0x08008030
 8000d78:	08008038 	.word	0x08008038
 8000d7c:	200002dc 	.word	0x200002dc
 8000d80:	08008054 	.word	0x08008054
 8000d84:	0800807c 	.word	0x0800807c
 8000d88:	08008084 	.word	0x08008084
 8000d8c:	0800808c 	.word	0x0800808c
 8000d90:	08008094 	.word	0x08008094

08000d94 <startMotor>:
#include "tim.h"
#include "usart.h"
#include "gpio.h"
#include "string.h"

void startMotor() {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
    // Activez l'étage de puissance du moteur (code pour activer le moteur)

    // Affichez le message "Power ON" dans la console
    HAL_UART_Transmit(&huart2, "Power ON\r\n", strlen("Power ON\r\n"), HAL_MAX_DELAY);
 8000d98:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9c:	220a      	movs	r2, #10
 8000d9e:	4903      	ldr	r1, [pc, #12]	; (8000dac <startMotor+0x18>)
 8000da0:	4803      	ldr	r0, [pc, #12]	; (8000db0 <startMotor+0x1c>)
 8000da2:	f004 fc41 	bl	8005628 <HAL_UART_Transmit>
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	080080a8 	.word	0x080080a8
 8000db0:	200002dc 	.word	0x200002dc

08000db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dba:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <HAL_MspInit+0x44>)
 8000dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dbe:	4a0e      	ldr	r2, [pc, #56]	; (8000df8 <HAL_MspInit+0x44>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6613      	str	r3, [r2, #96]	; 0x60
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <HAL_MspInit+0x44>)
 8000dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <HAL_MspInit+0x44>)
 8000dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd6:	4a08      	ldr	r2, [pc, #32]	; (8000df8 <HAL_MspInit+0x44>)
 8000dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ddc:	6593      	str	r3, [r2, #88]	; 0x58
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HAL_MspInit+0x44>)
 8000de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de6:	603b      	str	r3, [r7, #0]
 8000de8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000dea:	f002 f999 	bl	8003120 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40021000 	.word	0x40021000

08000dfc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08c      	sub	sp, #48	; 0x30
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e0c:	4b2c      	ldr	r3, [pc, #176]	; (8000ec0 <HAL_InitTick+0xc4>)
 8000e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e10:	4a2b      	ldr	r2, [pc, #172]	; (8000ec0 <HAL_InitTick+0xc4>)
 8000e12:	f043 0310 	orr.w	r3, r3, #16
 8000e16:	6593      	str	r3, [r2, #88]	; 0x58
 8000e18:	4b29      	ldr	r3, [pc, #164]	; (8000ec0 <HAL_InitTick+0xc4>)
 8000e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1c:	f003 0310 	and.w	r3, r3, #16
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e24:	f107 020c 	add.w	r2, r7, #12
 8000e28:	f107 0310 	add.w	r3, r7, #16
 8000e2c:	4611      	mov	r1, r2
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f002 fe74 	bl	8003b1c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e34:	f002 fe46 	bl	8003ac4 <HAL_RCC_GetPCLK1Freq>
 8000e38:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e3c:	4a21      	ldr	r2, [pc, #132]	; (8000ec4 <HAL_InitTick+0xc8>)
 8000e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e42:	0c9b      	lsrs	r3, r3, #18
 8000e44:	3b01      	subs	r3, #1
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e48:	4b1f      	ldr	r3, [pc, #124]	; (8000ec8 <HAL_InitTick+0xcc>)
 8000e4a:	4a20      	ldr	r2, [pc, #128]	; (8000ecc <HAL_InitTick+0xd0>)
 8000e4c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ec8 <HAL_InitTick+0xcc>)
 8000e50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e54:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e56:	4a1c      	ldr	r2, [pc, #112]	; (8000ec8 <HAL_InitTick+0xcc>)
 8000e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <HAL_InitTick+0xcc>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e62:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <HAL_InitTick+0xcc>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000e68:	4817      	ldr	r0, [pc, #92]	; (8000ec8 <HAL_InitTick+0xcc>)
 8000e6a:	f003 f91d 	bl	80040a8 <HAL_TIM_Base_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000e74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d11b      	bne.n	8000eb4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e7c:	4812      	ldr	r0, [pc, #72]	; (8000ec8 <HAL_InitTick+0xcc>)
 8000e7e:	f003 f975 	bl	800416c <HAL_TIM_Base_Start_IT>
 8000e82:	4603      	mov	r3, r0
 8000e84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000e88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d111      	bne.n	8000eb4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e90:	2036      	movs	r0, #54	; 0x36
 8000e92:	f001 fe15 	bl	8002ac0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b0f      	cmp	r3, #15
 8000e9a:	d808      	bhi.n	8000eae <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	2036      	movs	r0, #54	; 0x36
 8000ea2:	f001 fdf3 	bl	8002a8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <HAL_InitTick+0xd4>)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6013      	str	r3, [r2, #0]
 8000eac:	e002      	b.n	8000eb4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000eb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3730      	adds	r7, #48	; 0x30
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	431bde83 	.word	0x431bde83
 8000ec8:	200001f4 	.word	0x200001f4
 8000ecc:	40001000 	.word	0x40001000
 8000ed0:	2000007c 	.word	0x2000007c

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <NMI_Handler+0x4>

08000eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <HardFault_Handler+0x4>

08000ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <MemManage_Handler+0x4>

08000ee6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <BusFault_Handler+0x4>

08000eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <UsageFault_Handler+0x4>

08000ef2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
	...

08000f2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f30:	4802      	ldr	r0, [pc, #8]	; (8000f3c <USART2_IRQHandler+0x10>)
 8000f32:	f004 fc65 	bl	8005800 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200002dc 	.word	0x200002dc

08000f40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8000f44:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f48:	f002 f822 	bl	8002f90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f54:	4802      	ldr	r0, [pc, #8]	; (8000f60 <TIM6_DAC_IRQHandler+0x10>)
 8000f56:	f003 f9d8 	bl	800430a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	200001f4 	.word	0x200001f4

08000f64 <stopMotor>:
#include "tim.h"
#include "usart.h"
#include "gpio.h"
#include "string.h"

void stopMotor() {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
    // Desactivez l'étage de puissance du moteur (code pour desactiver le moteur)

    // Affichez le message "Power OFF" dans la console
    HAL_UART_Transmit(&huart2, "Power OFF\r\n", strlen("Power OFF\r\n"), HAL_MAX_DELAY);
 8000f68:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6c:	220b      	movs	r2, #11
 8000f6e:	4903      	ldr	r1, [pc, #12]	; (8000f7c <stopMotor+0x18>)
 8000f70:	4803      	ldr	r0, [pc, #12]	; (8000f80 <stopMotor+0x1c>)
 8000f72:	f004 fb59 	bl	8005628 <HAL_UART_Transmit>
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	080080b4 	.word	0x080080b4
 8000f80:	200002dc 	.word	0x200002dc

08000f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f8c:	4a14      	ldr	r2, [pc, #80]	; (8000fe0 <_sbrk+0x5c>)
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <_sbrk+0x60>)
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f98:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <_sbrk+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d102      	bne.n	8000fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <_sbrk+0x64>)
 8000fa2:	4a12      	ldr	r2, [pc, #72]	; (8000fec <_sbrk+0x68>)
 8000fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <_sbrk+0x64>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d207      	bcs.n	8000fc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fb4:	f006 fb9a 	bl	80076ec <__errno>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	220c      	movs	r2, #12
 8000fbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc2:	e009      	b.n	8000fd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <_sbrk+0x64>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fca:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <_sbrk+0x64>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <_sbrk+0x64>)
 8000fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20020000 	.word	0x20020000
 8000fe4:	00000400 	.word	0x00000400
 8000fe8:	20000240 	.word	0x20000240
 8000fec:	20000548 	.word	0x20000548

08000ff0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <SystemInit+0x20>)
 8000ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ffa:	4a05      	ldr	r2, [pc, #20]	; (8001010 <SystemInit+0x20>)
 8000ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001000:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b098      	sub	sp, #96	; 0x60
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800101a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001026:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]
 8001034:	611a      	str	r2, [r3, #16]
 8001036:	615a      	str	r2, [r3, #20]
 8001038:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	2234      	movs	r2, #52	; 0x34
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f006 fb4b 	bl	80076dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001046:	4b47      	ldr	r3, [pc, #284]	; (8001164 <MX_TIM1_Init+0x150>)
 8001048:	4a47      	ldr	r2, [pc, #284]	; (8001168 <MX_TIM1_Init+0x154>)
 800104a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800104c:	4b45      	ldr	r3, [pc, #276]	; (8001164 <MX_TIM1_Init+0x150>)
 800104e:	2200      	movs	r2, #0
 8001050:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001052:	4b44      	ldr	r3, [pc, #272]	; (8001164 <MX_TIM1_Init+0x150>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001058:	4b42      	ldr	r3, [pc, #264]	; (8001164 <MX_TIM1_Init+0x150>)
 800105a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800105e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001060:	4b40      	ldr	r3, [pc, #256]	; (8001164 <MX_TIM1_Init+0x150>)
 8001062:	2200      	movs	r2, #0
 8001064:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001066:	4b3f      	ldr	r3, [pc, #252]	; (8001164 <MX_TIM1_Init+0x150>)
 8001068:	2200      	movs	r2, #0
 800106a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800106c:	4b3d      	ldr	r3, [pc, #244]	; (8001164 <MX_TIM1_Init+0x150>)
 800106e:	2200      	movs	r2, #0
 8001070:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001072:	483c      	ldr	r0, [pc, #240]	; (8001164 <MX_TIM1_Init+0x150>)
 8001074:	f003 f8f2 	bl	800425c <HAL_TIM_PWM_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800107e:	f7ff fde5 	bl	8000c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001082:	2300      	movs	r3, #0
 8001084:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001086:	2300      	movs	r3, #0
 8001088:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800108a:	2300      	movs	r3, #0
 800108c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800108e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001092:	4619      	mov	r1, r3
 8001094:	4833      	ldr	r0, [pc, #204]	; (8001164 <MX_TIM1_Init+0x150>)
 8001096:	f004 f8e9 	bl	800526c <HAL_TIMEx_MasterConfigSynchronization>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80010a0:	f7ff fdd4 	bl	8000c4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010a4:	2360      	movs	r3, #96	; 0x60
 80010a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ac:	2300      	movs	r3, #0
 80010ae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010b0:	2300      	movs	r3, #0
 80010b2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010b4:	2300      	movs	r3, #0
 80010b6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010b8:	2300      	movs	r3, #0
 80010ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010bc:	2300      	movs	r3, #0
 80010be:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010c4:	2200      	movs	r2, #0
 80010c6:	4619      	mov	r1, r3
 80010c8:	4826      	ldr	r0, [pc, #152]	; (8001164 <MX_TIM1_Init+0x150>)
 80010ca:	f003 fa9d 	bl	8004608 <HAL_TIM_PWM_ConfigChannel>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80010d4:	f7ff fdba 	bl	8000c4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010dc:	2204      	movs	r2, #4
 80010de:	4619      	mov	r1, r3
 80010e0:	4820      	ldr	r0, [pc, #128]	; (8001164 <MX_TIM1_Init+0x150>)
 80010e2:	f003 fa91 	bl	8004608 <HAL_TIM_PWM_ConfigChannel>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80010ec:	f7ff fdae 	bl	8000c4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010f4:	2208      	movs	r2, #8
 80010f6:	4619      	mov	r1, r3
 80010f8:	481a      	ldr	r0, [pc, #104]	; (8001164 <MX_TIM1_Init+0x150>)
 80010fa:	f003 fa85 	bl	8004608 <HAL_TIM_PWM_ConfigChannel>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001104:	f7ff fda2 	bl	8000c4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001108:	2300      	movs	r3, #0
 800110a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800110c:	2300      	movs	r3, #0
 800110e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800111c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001120:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001126:	2300      	movs	r3, #0
 8001128:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800112e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001132:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001138:	2300      	movs	r3, #0
 800113a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800113c:	2300      	movs	r3, #0
 800113e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	4619      	mov	r1, r3
 8001144:	4807      	ldr	r0, [pc, #28]	; (8001164 <MX_TIM1_Init+0x150>)
 8001146:	f004 f927 	bl	8005398 <HAL_TIMEx_ConfigBreakDeadTime>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001150:	f7ff fd7c 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001154:	4803      	ldr	r0, [pc, #12]	; (8001164 <MX_TIM1_Init+0x150>)
 8001156:	f000 f8d7 	bl	8001308 <HAL_TIM_MspPostInit>

}
 800115a:	bf00      	nop
 800115c:	3760      	adds	r7, #96	; 0x60
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000244 	.word	0x20000244
 8001168:	40012c00 	.word	0x40012c00

0800116c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001172:	f107 0310 	add.w	r3, r7, #16
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800118a:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <MX_TIM3_Init+0x90>)
 800118c:	4a1c      	ldr	r2, [pc, #112]	; (8001200 <MX_TIM3_Init+0x94>)
 800118e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001190:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <MX_TIM3_Init+0x90>)
 8001192:	2200      	movs	r2, #0
 8001194:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001196:	4b19      	ldr	r3, [pc, #100]	; (80011fc <MX_TIM3_Init+0x90>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800119c:	4b17      	ldr	r3, [pc, #92]	; (80011fc <MX_TIM3_Init+0x90>)
 800119e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a4:	4b15      	ldr	r3, [pc, #84]	; (80011fc <MX_TIM3_Init+0x90>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011aa:	4b14      	ldr	r3, [pc, #80]	; (80011fc <MX_TIM3_Init+0x90>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011b0:	2300      	movs	r3, #0
 80011b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 80011c0:	f107 0310 	add.w	r3, r7, #16
 80011c4:	4619      	mov	r1, r3
 80011c6:	480d      	ldr	r0, [pc, #52]	; (80011fc <MX_TIM3_Init+0x90>)
 80011c8:	f003 ffa0 	bl	800510c <HAL_TIMEx_HallSensor_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80011d2:	f7ff fd3b 	bl	8000c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80011d6:	2350      	movs	r3, #80	; 0x50
 80011d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	4619      	mov	r1, r3
 80011e2:	4806      	ldr	r0, [pc, #24]	; (80011fc <MX_TIM3_Init+0x90>)
 80011e4:	f004 f842 	bl	800526c <HAL_TIMEx_MasterConfigSynchronization>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80011ee:	f7ff fd2d 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011f2:	bf00      	nop
 80011f4:	3720      	adds	r7, #32
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000290 	.word	0x20000290
 8001200:	40000400 	.word	0x40000400

08001204 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a0a      	ldr	r2, [pc, #40]	; (800123c <HAL_TIM_PWM_MspInit+0x38>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d10b      	bne.n	800122e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001216:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <HAL_TIM_PWM_MspInit+0x3c>)
 8001218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800121a:	4a09      	ldr	r2, [pc, #36]	; (8001240 <HAL_TIM_PWM_MspInit+0x3c>)
 800121c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001220:	6613      	str	r3, [r2, #96]	; 0x60
 8001222:	4b07      	ldr	r3, [pc, #28]	; (8001240 <HAL_TIM_PWM_MspInit+0x3c>)
 8001224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001226:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800122e:	bf00      	nop
 8001230:	3714      	adds	r7, #20
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40012c00 	.word	0x40012c00
 8001240:	40021000 	.word	0x40021000

08001244 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	; 0x28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a26      	ldr	r2, [pc, #152]	; (80012fc <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d145      	bne.n	80012f2 <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001266:	4b26      	ldr	r3, [pc, #152]	; (8001300 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126a:	4a25      	ldr	r2, [pc, #148]	; (8001300 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800126c:	f043 0302 	orr.w	r3, r3, #2
 8001270:	6593      	str	r3, [r2, #88]	; 0x58
 8001272:	4b23      	ldr	r3, [pc, #140]	; (8001300 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	4b20      	ldr	r3, [pc, #128]	; (8001300 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	4a1f      	ldr	r2, [pc, #124]	; (8001300 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128a:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001296:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	4a19      	ldr	r2, [pc, #100]	; (8001300 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800129c:	f043 0304 	orr.w	r3, r3, #4
 80012a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a2:	4b17      	ldr	r3, [pc, #92]	; (8001300 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	f003 0304 	and.w	r3, r3, #4
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80012ae:	2350      	movs	r3, #80	; 0x50
 80012b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012be:	2302      	movs	r3, #2
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	4619      	mov	r1, r3
 80012c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012cc:	f001 fcc6 	bl	8002c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012e2:	2302      	movs	r3, #2
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4619      	mov	r1, r3
 80012ec:	4805      	ldr	r0, [pc, #20]	; (8001304 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 80012ee:	f001 fcb5 	bl	8002c5c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80012f2:	bf00      	nop
 80012f4:	3728      	adds	r7, #40	; 0x28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40000400 	.word	0x40000400
 8001300:	40021000 	.word	0x40021000
 8001304:	48000800 	.word	0x48000800

08001308 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a29      	ldr	r2, [pc, #164]	; (80013cc <HAL_TIM_MspPostInit+0xc4>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d14b      	bne.n	80013c2 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132a:	4b29      	ldr	r3, [pc, #164]	; (80013d0 <HAL_TIM_MspPostInit+0xc8>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132e:	4a28      	ldr	r2, [pc, #160]	; (80013d0 <HAL_TIM_MspPostInit+0xc8>)
 8001330:	f043 0302 	orr.w	r3, r3, #2
 8001334:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001336:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <HAL_TIM_MspPostInit+0xc8>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001342:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <HAL_TIM_MspPostInit+0xc8>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	4a22      	ldr	r2, [pc, #136]	; (80013d0 <HAL_TIM_MspPostInit+0xc8>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134e:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <HAL_TIM_MspPostInit+0xc8>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 800135a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800135e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	2302      	movs	r3, #2
 8001362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	2300      	movs	r3, #0
 800136a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800136c:	2306      	movs	r3, #6
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4619      	mov	r1, r3
 8001376:	4817      	ldr	r0, [pc, #92]	; (80013d4 <HAL_TIM_MspPostInit+0xcc>)
 8001378:	f001 fc70 	bl	8002c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 800137c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001380:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800138e:	2304      	movs	r3, #4
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	4619      	mov	r1, r3
 8001398:	480e      	ldr	r0, [pc, #56]	; (80013d4 <HAL_TIM_MspPostInit+0xcc>)
 800139a:	f001 fc5f 	bl	8002c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 800139e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80013a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a4:	2302      	movs	r3, #2
 80013a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	2300      	movs	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80013b0:	2306      	movs	r3, #6
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	4619      	mov	r1, r3
 80013ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013be:	f001 fc4d 	bl	8002c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80013c2:	bf00      	nop
 80013c4:	3728      	adds	r7, #40	; 0x28
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40012c00 	.word	0x40012c00
 80013d0:	40021000 	.word	0x40021000
 80013d4:	48000400 	.word	0x48000400

080013d8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013dc:	4b22      	ldr	r3, [pc, #136]	; (8001468 <MX_USART2_UART_Init+0x90>)
 80013de:	4a23      	ldr	r2, [pc, #140]	; (800146c <MX_USART2_UART_Init+0x94>)
 80013e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013e2:	4b21      	ldr	r3, [pc, #132]	; (8001468 <MX_USART2_UART_Init+0x90>)
 80013e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ea:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <MX_USART2_UART_Init+0x90>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013f0:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <MX_USART2_UART_Init+0x90>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013f6:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <MX_USART2_UART_Init+0x90>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013fc:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <MX_USART2_UART_Init+0x90>)
 80013fe:	220c      	movs	r2, #12
 8001400:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001402:	4b19      	ldr	r3, [pc, #100]	; (8001468 <MX_USART2_UART_Init+0x90>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001408:	4b17      	ldr	r3, [pc, #92]	; (8001468 <MX_USART2_UART_Init+0x90>)
 800140a:	2200      	movs	r2, #0
 800140c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800140e:	4b16      	ldr	r3, [pc, #88]	; (8001468 <MX_USART2_UART_Init+0x90>)
 8001410:	2200      	movs	r2, #0
 8001412:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001414:	4b14      	ldr	r3, [pc, #80]	; (8001468 <MX_USART2_UART_Init+0x90>)
 8001416:	2200      	movs	r2, #0
 8001418:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800141a:	4b13      	ldr	r3, [pc, #76]	; (8001468 <MX_USART2_UART_Init+0x90>)
 800141c:	2200      	movs	r2, #0
 800141e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001420:	4811      	ldr	r0, [pc, #68]	; (8001468 <MX_USART2_UART_Init+0x90>)
 8001422:	f004 f8b1 	bl	8005588 <HAL_UART_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800142c:	f7ff fc0e 	bl	8000c4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001430:	2100      	movs	r1, #0
 8001432:	480d      	ldr	r0, [pc, #52]	; (8001468 <MX_USART2_UART_Init+0x90>)
 8001434:	f006 f853 	bl	80074de <HAL_UARTEx_SetTxFifoThreshold>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800143e:	f7ff fc05 	bl	8000c4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001442:	2100      	movs	r1, #0
 8001444:	4808      	ldr	r0, [pc, #32]	; (8001468 <MX_USART2_UART_Init+0x90>)
 8001446:	f006 f888 	bl	800755a <HAL_UARTEx_SetRxFifoThreshold>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001450:	f7ff fbfc 	bl	8000c4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001454:	4804      	ldr	r0, [pc, #16]	; (8001468 <MX_USART2_UART_Init+0x90>)
 8001456:	f006 f809 	bl	800746c <HAL_UARTEx_DisableFifoMode>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001460:	f7ff fbf4 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	200002dc 	.word	0x200002dc
 800146c:	40004400 	.word	0x40004400

08001470 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001474:	4b22      	ldr	r3, [pc, #136]	; (8001500 <MX_USART3_UART_Init+0x90>)
 8001476:	4a23      	ldr	r2, [pc, #140]	; (8001504 <MX_USART3_UART_Init+0x94>)
 8001478:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800147a:	4b21      	ldr	r3, [pc, #132]	; (8001500 <MX_USART3_UART_Init+0x90>)
 800147c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001480:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001482:	4b1f      	ldr	r3, [pc, #124]	; (8001500 <MX_USART3_UART_Init+0x90>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001488:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <MX_USART3_UART_Init+0x90>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800148e:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <MX_USART3_UART_Init+0x90>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001494:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <MX_USART3_UART_Init+0x90>)
 8001496:	220c      	movs	r2, #12
 8001498:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149a:	4b19      	ldr	r3, [pc, #100]	; (8001500 <MX_USART3_UART_Init+0x90>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a0:	4b17      	ldr	r3, [pc, #92]	; (8001500 <MX_USART3_UART_Init+0x90>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014a6:	4b16      	ldr	r3, [pc, #88]	; (8001500 <MX_USART3_UART_Init+0x90>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014ac:	4b14      	ldr	r3, [pc, #80]	; (8001500 <MX_USART3_UART_Init+0x90>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014b2:	4b13      	ldr	r3, [pc, #76]	; (8001500 <MX_USART3_UART_Init+0x90>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014b8:	4811      	ldr	r0, [pc, #68]	; (8001500 <MX_USART3_UART_Init+0x90>)
 80014ba:	f004 f865 	bl	8005588 <HAL_UART_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80014c4:	f7ff fbc2 	bl	8000c4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014c8:	2100      	movs	r1, #0
 80014ca:	480d      	ldr	r0, [pc, #52]	; (8001500 <MX_USART3_UART_Init+0x90>)
 80014cc:	f006 f807 	bl	80074de <HAL_UARTEx_SetTxFifoThreshold>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80014d6:	f7ff fbb9 	bl	8000c4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014da:	2100      	movs	r1, #0
 80014dc:	4808      	ldr	r0, [pc, #32]	; (8001500 <MX_USART3_UART_Init+0x90>)
 80014de:	f006 f83c 	bl	800755a <HAL_UARTEx_SetRxFifoThreshold>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80014e8:	f7ff fbb0 	bl	8000c4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80014ec:	4804      	ldr	r0, [pc, #16]	; (8001500 <MX_USART3_UART_Init+0x90>)
 80014ee:	f005 ffbd 	bl	800746c <HAL_UARTEx_DisableFifoMode>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80014f8:	f7ff fba8 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	2000036c 	.word	0x2000036c
 8001504:	40004800 	.word	0x40004800

08001508 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b0a0      	sub	sp, #128	; 0x80
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001520:	f107 0318 	add.w	r3, r7, #24
 8001524:	2254      	movs	r2, #84	; 0x54
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f006 f8d7 	bl	80076dc <memset>
  if(uartHandle->Instance==USART2)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a41      	ldr	r2, [pc, #260]	; (8001638 <HAL_UART_MspInit+0x130>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d13f      	bne.n	80015b8 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001538:	2302      	movs	r3, #2
 800153a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800153c:	2300      	movs	r3, #0
 800153e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001540:	f107 0318 	add.w	r3, r7, #24
 8001544:	4618      	mov	r0, r3
 8001546:	f002 fb61 	bl	8003c0c <HAL_RCCEx_PeriphCLKConfig>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001550:	f7ff fb7c 	bl	8000c4c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001554:	4b39      	ldr	r3, [pc, #228]	; (800163c <HAL_UART_MspInit+0x134>)
 8001556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001558:	4a38      	ldr	r2, [pc, #224]	; (800163c <HAL_UART_MspInit+0x134>)
 800155a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800155e:	6593      	str	r3, [r2, #88]	; 0x58
 8001560:	4b36      	ldr	r3, [pc, #216]	; (800163c <HAL_UART_MspInit+0x134>)
 8001562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001568:	617b      	str	r3, [r7, #20]
 800156a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156c:	4b33      	ldr	r3, [pc, #204]	; (800163c <HAL_UART_MspInit+0x134>)
 800156e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001570:	4a32      	ldr	r2, [pc, #200]	; (800163c <HAL_UART_MspInit+0x134>)
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001578:	4b30      	ldr	r3, [pc, #192]	; (800163c <HAL_UART_MspInit+0x134>)
 800157a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001584:	230c      	movs	r3, #12
 8001586:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001594:	2307      	movs	r3, #7
 8001596:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001598:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800159c:	4619      	mov	r1, r3
 800159e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a2:	f001 fb5b 	bl	8002c5c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2100      	movs	r1, #0
 80015aa:	2026      	movs	r0, #38	; 0x26
 80015ac:	f001 fa6e 	bl	8002a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015b0:	2026      	movs	r0, #38	; 0x26
 80015b2:	f001 fa85 	bl	8002ac0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80015b6:	e03b      	b.n	8001630 <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART3)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a20      	ldr	r2, [pc, #128]	; (8001640 <HAL_UART_MspInit+0x138>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d136      	bne.n	8001630 <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015c2:	2304      	movs	r3, #4
 80015c4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ca:	f107 0318 	add.w	r3, r7, #24
 80015ce:	4618      	mov	r0, r3
 80015d0:	f002 fb1c 	bl	8003c0c <HAL_RCCEx_PeriphCLKConfig>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_UART_MspInit+0xd6>
      Error_Handler();
 80015da:	f7ff fb37 	bl	8000c4c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015de:	4b17      	ldr	r3, [pc, #92]	; (800163c <HAL_UART_MspInit+0x134>)
 80015e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e2:	4a16      	ldr	r2, [pc, #88]	; (800163c <HAL_UART_MspInit+0x134>)
 80015e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015e8:	6593      	str	r3, [r2, #88]	; 0x58
 80015ea:	4b14      	ldr	r3, [pc, #80]	; (800163c <HAL_UART_MspInit+0x134>)
 80015ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f6:	4b11      	ldr	r3, [pc, #68]	; (800163c <HAL_UART_MspInit+0x134>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fa:	4a10      	ldr	r2, [pc, #64]	; (800163c <HAL_UART_MspInit+0x134>)
 80015fc:	f043 0304 	orr.w	r3, r3, #4
 8001600:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <HAL_UART_MspInit+0x134>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800160e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001612:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	2300      	movs	r3, #0
 800161e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001620:	2307      	movs	r3, #7
 8001622:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001624:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001628:	4619      	mov	r1, r3
 800162a:	4806      	ldr	r0, [pc, #24]	; (8001644 <HAL_UART_MspInit+0x13c>)
 800162c:	f001 fb16 	bl	8002c5c <HAL_GPIO_Init>
}
 8001630:	bf00      	nop
 8001632:	3780      	adds	r7, #128	; 0x80
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40004400 	.word	0x40004400
 800163c:	40021000 	.word	0x40021000
 8001640:	40004800 	.word	0x40004800
 8001644:	48000800 	.word	0x48000800

08001648 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001648:	480d      	ldr	r0, [pc, #52]	; (8001680 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800164a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800164c:	480d      	ldr	r0, [pc, #52]	; (8001684 <LoopForever+0x6>)
  ldr r1, =_edata
 800164e:	490e      	ldr	r1, [pc, #56]	; (8001688 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001650:	4a0e      	ldr	r2, [pc, #56]	; (800168c <LoopForever+0xe>)
  movs r3, #0
 8001652:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001654:	e002      	b.n	800165c <LoopCopyDataInit>

08001656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165a:	3304      	adds	r3, #4

0800165c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800165c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001660:	d3f9      	bcc.n	8001656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001662:	4a0b      	ldr	r2, [pc, #44]	; (8001690 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001664:	4c0b      	ldr	r4, [pc, #44]	; (8001694 <LoopForever+0x16>)
  movs r3, #0
 8001666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001668:	e001      	b.n	800166e <LoopFillZerobss>

0800166a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800166c:	3204      	adds	r2, #4

0800166e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001670:	d3fb      	bcc.n	800166a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001672:	f7ff fcbd 	bl	8000ff0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001676:	f006 f83f 	bl	80076f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800167a:	f7ff fa1f 	bl	8000abc <main>

0800167e <LoopForever>:

LoopForever:
    b LoopForever
 800167e:	e7fe      	b.n	800167e <LoopForever>
  ldr   r0, =_estack
 8001680:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001688:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 800168c:	08008144 	.word	0x08008144
  ldr r2, =_sbss
 8001690:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8001694:	20000548 	.word	0x20000548

08001698 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001698:	e7fe      	b.n	8001698 <ADC1_2_IRQHandler>

0800169a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a4:	2003      	movs	r0, #3
 80016a6:	f001 f9e6 	bl	8002a76 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016aa:	200f      	movs	r0, #15
 80016ac:	f7ff fba6 	bl	8000dfc <HAL_InitTick>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d002      	beq.n	80016bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	71fb      	strb	r3, [r7, #7]
 80016ba:	e001      	b.n	80016c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016bc:	f7ff fb7a 	bl	8000db4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016c0:	79fb      	ldrb	r3, [r7, #7]

}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d0:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <HAL_IncTick+0x1c>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b05      	ldr	r3, [pc, #20]	; (80016ec <HAL_IncTick+0x20>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4413      	add	r3, r2
 80016da:	4a03      	ldr	r2, [pc, #12]	; (80016e8 <HAL_IncTick+0x1c>)
 80016dc:	6013      	str	r3, [r2, #0]
}
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	200003fc 	.word	0x200003fc
 80016ec:	20000080 	.word	0x20000080

080016f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return uwTick;
 80016f4:	4b03      	ldr	r3, [pc, #12]	; (8001704 <HAL_GetTick+0x14>)
 80016f6:	681b      	ldr	r3, [r3, #0]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	200003fc 	.word	0x200003fc

08001708 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	431a      	orrs	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	609a      	str	r2, [r3, #8]
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	431a      	orrs	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	609a      	str	r2, [r3, #8]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001764:	4618      	mov	r0, r3
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001770:	b480      	push	{r7}
 8001772:	b087      	sub	sp, #28
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
 800177c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	3360      	adds	r3, #96	; 0x60
 8001782:	461a      	mov	r2, r3
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <LL_ADC_SetOffset+0x44>)
 8001792:	4013      	ands	r3, r2
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	430a      	orrs	r2, r1
 800179e:	4313      	orrs	r3, r2
 80017a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80017a8:	bf00      	nop
 80017aa:	371c      	adds	r7, #28
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	03fff000 	.word	0x03fff000

080017b8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3360      	adds	r3, #96	; 0x60
 80017c6:	461a      	mov	r2, r3
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4413      	add	r3, r2
 80017ce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b087      	sub	sp, #28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	3360      	adds	r3, #96	; 0x60
 80017f4:	461a      	mov	r2, r3
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	431a      	orrs	r2, r3
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800180e:	bf00      	nop
 8001810:	371c      	adds	r7, #28
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800181a:	b480      	push	{r7}
 800181c:	b087      	sub	sp, #28
 800181e:	af00      	add	r7, sp, #0
 8001820:	60f8      	str	r0, [r7, #12]
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	3360      	adds	r3, #96	; 0x60
 800182a:	461a      	mov	r2, r3
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	431a      	orrs	r2, r3
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001844:	bf00      	nop
 8001846:	371c      	adds	r7, #28
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001850:	b480      	push	{r7}
 8001852:	b087      	sub	sp, #28
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	3360      	adds	r3, #96	; 0x60
 8001860:	461a      	mov	r2, r3
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	431a      	orrs	r2, r3
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800187a:	bf00      	nop
 800187c:	371c      	adds	r7, #28
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
 800188e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	431a      	orrs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	615a      	str	r2, [r3, #20]
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b087      	sub	sp, #28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	3330      	adds	r3, #48	; 0x30
 80018bc:	461a      	mov	r2, r3
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	0a1b      	lsrs	r3, r3, #8
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	f003 030c 	and.w	r3, r3, #12
 80018c8:	4413      	add	r3, r2
 80018ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	f003 031f 	and.w	r3, r3, #31
 80018d6:	211f      	movs	r1, #31
 80018d8:	fa01 f303 	lsl.w	r3, r1, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	401a      	ands	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	0e9b      	lsrs	r3, r3, #26
 80018e4:	f003 011f 	and.w	r1, r3, #31
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	f003 031f 	and.w	r3, r3, #31
 80018ee:	fa01 f303 	lsl.w	r3, r1, r3
 80018f2:	431a      	orrs	r2, r3
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018f8:	bf00      	nop
 80018fa:	371c      	adds	r7, #28
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001904:	b480      	push	{r7}
 8001906:	b087      	sub	sp, #28
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	3314      	adds	r3, #20
 8001914:	461a      	mov	r2, r3
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	0e5b      	lsrs	r3, r3, #25
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	4413      	add	r3, r2
 8001922:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	0d1b      	lsrs	r3, r3, #20
 800192c:	f003 031f 	and.w	r3, r3, #31
 8001930:	2107      	movs	r1, #7
 8001932:	fa01 f303 	lsl.w	r3, r1, r3
 8001936:	43db      	mvns	r3, r3
 8001938:	401a      	ands	r2, r3
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	0d1b      	lsrs	r3, r3, #20
 800193e:	f003 031f 	and.w	r3, r3, #31
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	fa01 f303 	lsl.w	r3, r1, r3
 8001948:	431a      	orrs	r2, r3
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800194e:	bf00      	nop
 8001950:	371c      	adds	r7, #28
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
	...

0800195c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a0f      	ldr	r2, [pc, #60]	; (80019a8 <LL_ADC_SetChannelSingleDiff+0x4c>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d10a      	bne.n	8001986 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800197c:	431a      	orrs	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001984:	e00a      	b.n	800199c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001992:	43db      	mvns	r3, r3
 8001994:	401a      	ands	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800199c:	bf00      	nop
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	407f0000 	.word	0x407f0000

080019ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80019bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	6093      	str	r3, [r2, #8]
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019e4:	d101      	bne.n	80019ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a0c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a34:	d101      	bne.n	8001a3a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a36:	2301      	movs	r3, #1
 8001a38:	e000      	b.n	8001a3c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d101      	bne.n	8001a60 <LL_ADC_IsEnabled+0x18>
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e000      	b.n	8001a62 <LL_ADC_IsEnabled+0x1a>
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 0304 	and.w	r3, r3, #4
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	d101      	bne.n	8001a86 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 0308 	and.w	r3, r3, #8
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d101      	bne.n	8001aac <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e000      	b.n	8001aae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001abc:	b590      	push	{r4, r7, lr}
 8001abe:	b089      	sub	sp, #36	; 0x24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e1af      	b.n	8001e36 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d109      	bne.n	8001af8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7fe fe5f 	bl	80007a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff67 	bl	80019d0 <LL_ADC_IsDeepPowerDownEnabled>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d004      	beq.n	8001b12 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff4d 	bl	80019ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff ff82 	bl	8001a20 <LL_ADC_IsInternalRegulatorEnabled>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d115      	bne.n	8001b4e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff ff66 	bl	80019f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b2c:	4b9f      	ldr	r3, [pc, #636]	; (8001dac <HAL_ADC_Init+0x2f0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	099b      	lsrs	r3, r3, #6
 8001b32:	4a9f      	ldr	r2, [pc, #636]	; (8001db0 <HAL_ADC_Init+0x2f4>)
 8001b34:	fba2 2303 	umull	r2, r3, r2, r3
 8001b38:	099b      	lsrs	r3, r3, #6
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b40:	e002      	b.n	8001b48 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	3b01      	subs	r3, #1
 8001b46:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f9      	bne.n	8001b42 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff ff64 	bl	8001a20 <LL_ADC_IsInternalRegulatorEnabled>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d10d      	bne.n	8001b7a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b62:	f043 0210 	orr.w	r2, r3, #16
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b6e:	f043 0201 	orr.w	r2, r3, #1
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff ff75 	bl	8001a6e <LL_ADC_REG_IsConversionOngoing>
 8001b84:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8a:	f003 0310 	and.w	r3, r3, #16
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f040 8148 	bne.w	8001e24 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f040 8144 	bne.w	8001e24 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ba4:	f043 0202 	orr.w	r2, r3, #2
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff49 	bl	8001a48 <LL_ADC_IsEnabled>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d141      	bne.n	8001c40 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bc4:	d004      	beq.n	8001bd0 <HAL_ADC_Init+0x114>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a7a      	ldr	r2, [pc, #488]	; (8001db4 <HAL_ADC_Init+0x2f8>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d10f      	bne.n	8001bf0 <HAL_ADC_Init+0x134>
 8001bd0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001bd4:	f7ff ff38 	bl	8001a48 <LL_ADC_IsEnabled>
 8001bd8:	4604      	mov	r4, r0
 8001bda:	4876      	ldr	r0, [pc, #472]	; (8001db4 <HAL_ADC_Init+0x2f8>)
 8001bdc:	f7ff ff34 	bl	8001a48 <LL_ADC_IsEnabled>
 8001be0:	4603      	mov	r3, r0
 8001be2:	4323      	orrs	r3, r4
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	bf0c      	ite	eq
 8001be8:	2301      	moveq	r3, #1
 8001bea:	2300      	movne	r3, #0
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	e012      	b.n	8001c16 <HAL_ADC_Init+0x15a>
 8001bf0:	4871      	ldr	r0, [pc, #452]	; (8001db8 <HAL_ADC_Init+0x2fc>)
 8001bf2:	f7ff ff29 	bl	8001a48 <LL_ADC_IsEnabled>
 8001bf6:	4604      	mov	r4, r0
 8001bf8:	4870      	ldr	r0, [pc, #448]	; (8001dbc <HAL_ADC_Init+0x300>)
 8001bfa:	f7ff ff25 	bl	8001a48 <LL_ADC_IsEnabled>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	431c      	orrs	r4, r3
 8001c02:	486f      	ldr	r0, [pc, #444]	; (8001dc0 <HAL_ADC_Init+0x304>)
 8001c04:	f7ff ff20 	bl	8001a48 <LL_ADC_IsEnabled>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	4323      	orrs	r3, r4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	bf0c      	ite	eq
 8001c10:	2301      	moveq	r3, #1
 8001c12:	2300      	movne	r3, #0
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d012      	beq.n	8001c40 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c22:	d004      	beq.n	8001c2e <HAL_ADC_Init+0x172>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a62      	ldr	r2, [pc, #392]	; (8001db4 <HAL_ADC_Init+0x2f8>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d101      	bne.n	8001c32 <HAL_ADC_Init+0x176>
 8001c2e:	4a65      	ldr	r2, [pc, #404]	; (8001dc4 <HAL_ADC_Init+0x308>)
 8001c30:	e000      	b.n	8001c34 <HAL_ADC_Init+0x178>
 8001c32:	4a65      	ldr	r2, [pc, #404]	; (8001dc8 <HAL_ADC_Init+0x30c>)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	f7ff fd64 	bl	8001708 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	7f5b      	ldrb	r3, [r3, #29]
 8001c44:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c4a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001c50:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001c56:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c5e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c60:	4313      	orrs	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d106      	bne.n	8001c7c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c72:	3b01      	subs	r3, #1
 8001c74:	045b      	lsls	r3, r3, #17
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d009      	beq.n	8001c98 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c88:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c90:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68da      	ldr	r2, [r3, #12]
 8001c9e:	4b4b      	ldr	r3, [pc, #300]	; (8001dcc <HAL_ADC_Init+0x310>)
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6812      	ldr	r2, [r2, #0]
 8001ca6:	69b9      	ldr	r1, [r7, #24]
 8001ca8:	430b      	orrs	r3, r1
 8001caa:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fed1 	bl	8001a6e <LL_ADC_REG_IsConversionOngoing>
 8001ccc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fede 	bl	8001a94 <LL_ADC_INJ_IsConversionOngoing>
 8001cd8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d17f      	bne.n	8001de0 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d17c      	bne.n	8001de0 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cea:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cf2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d02:	f023 0302 	bic.w	r3, r3, #2
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6812      	ldr	r2, [r2, #0]
 8001d0a:	69b9      	ldr	r1, [r7, #24]
 8001d0c:	430b      	orrs	r3, r1
 8001d0e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d017      	beq.n	8001d48 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	691a      	ldr	r2, [r3, #16]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001d26:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001d30:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001d34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6911      	ldr	r1, [r2, #16]
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6812      	ldr	r2, [r2, #0]
 8001d40:	430b      	orrs	r3, r1
 8001d42:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001d46:	e013      	b.n	8001d70 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	691a      	ldr	r2, [r3, #16]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d56:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6812      	ldr	r2, [r2, #0]
 8001d64:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001d68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d6c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d12a      	bne.n	8001dd0 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d84:	f023 0304 	bic.w	r3, r3, #4
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d90:	4311      	orrs	r1, r2
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001d96:	4311      	orrs	r1, r2
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f042 0201 	orr.w	r2, r2, #1
 8001da8:	611a      	str	r2, [r3, #16]
 8001daa:	e019      	b.n	8001de0 <HAL_ADC_Init+0x324>
 8001dac:	20000078 	.word	0x20000078
 8001db0:	053e2d63 	.word	0x053e2d63
 8001db4:	50000100 	.word	0x50000100
 8001db8:	50000400 	.word	0x50000400
 8001dbc:	50000500 	.word	0x50000500
 8001dc0:	50000600 	.word	0x50000600
 8001dc4:	50000300 	.word	0x50000300
 8001dc8:	50000700 	.word	0x50000700
 8001dcc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	691a      	ldr	r2, [r3, #16]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0201 	bic.w	r2, r2, #1
 8001dde:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d10c      	bne.n	8001e02 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	f023 010f 	bic.w	r1, r3, #15
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	1e5a      	subs	r2, r3, #1
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	631a      	str	r2, [r3, #48]	; 0x30
 8001e00:	e007      	b.n	8001e12 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 020f 	bic.w	r2, r2, #15
 8001e10:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e16:	f023 0303 	bic.w	r3, r3, #3
 8001e1a:	f043 0201 	orr.w	r2, r3, #1
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e22:	e007      	b.n	8001e34 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e28:	f043 0210 	orr.w	r2, r3, #16
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e34:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3724      	adds	r7, #36	; 0x24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd90      	pop	{r4, r7, pc}
 8001e3e:	bf00      	nop

08001e40 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b0b6      	sub	sp, #216	; 0xd8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d102      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x24>
 8001e5e:	2302      	movs	r3, #2
 8001e60:	f000 bc13 	b.w	800268a <HAL_ADC_ConfigChannel+0x84a>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff fdfc 	bl	8001a6e <LL_ADC_REG_IsConversionOngoing>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f040 83f3 	bne.w	8002664 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	6859      	ldr	r1, [r3, #4]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	f7ff fd0e 	bl	80018ac <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff fdea 	bl	8001a6e <LL_ADC_REG_IsConversionOngoing>
 8001e9a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff fdf6 	bl	8001a94 <LL_ADC_INJ_IsConversionOngoing>
 8001ea8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001eac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f040 81d9 	bne.w	8002268 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001eb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f040 81d4 	bne.w	8002268 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ec8:	d10f      	bne.n	8001eea <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6818      	ldr	r0, [r3, #0]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	f7ff fd15 	bl	8001904 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff fccf 	bl	8001886 <LL_ADC_SetSamplingTimeCommonConfig>
 8001ee8:	e00e      	b.n	8001f08 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6818      	ldr	r0, [r3, #0]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	6819      	ldr	r1, [r3, #0]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	f7ff fd04 	bl	8001904 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2100      	movs	r1, #0
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff fcbf 	bl	8001886 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	695a      	ldr	r2, [r3, #20]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	08db      	lsrs	r3, r3, #3
 8001f14:	f003 0303 	and.w	r3, r3, #3
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	d022      	beq.n	8001f70 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6818      	ldr	r0, [r3, #0]
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	6919      	ldr	r1, [r3, #16]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f3a:	f7ff fc19 	bl	8001770 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6818      	ldr	r0, [r3, #0]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	6919      	ldr	r1, [r3, #16]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	f7ff fc65 	bl	800181a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6818      	ldr	r0, [r3, #0]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	6919      	ldr	r1, [r3, #16]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	7f1b      	ldrb	r3, [r3, #28]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d102      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x126>
 8001f60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f64:	e000      	b.n	8001f68 <HAL_ADC_ConfigChannel+0x128>
 8001f66:	2300      	movs	r3, #0
 8001f68:	461a      	mov	r2, r3
 8001f6a:	f7ff fc71 	bl	8001850 <LL_ADC_SetOffsetSaturation>
 8001f6e:	e17b      	b.n	8002268 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2100      	movs	r1, #0
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff fc1e 	bl	80017b8 <LL_ADC_GetOffsetChannel>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10a      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x15c>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff fc13 	bl	80017b8 <LL_ADC_GetOffsetChannel>
 8001f92:	4603      	mov	r3, r0
 8001f94:	0e9b      	lsrs	r3, r3, #26
 8001f96:	f003 021f 	and.w	r2, r3, #31
 8001f9a:	e01e      	b.n	8001fda <HAL_ADC_ConfigChannel+0x19a>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff fc08 	bl	80017b8 <LL_ADC_GetOffsetChannel>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001fb2:	fa93 f3a3 	rbit	r3, r3
 8001fb6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001fbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001fc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001fca:	2320      	movs	r3, #32
 8001fcc:	e004      	b.n	8001fd8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001fce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fd2:	fab3 f383 	clz	r3, r3
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d105      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x1b2>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	0e9b      	lsrs	r3, r3, #26
 8001fec:	f003 031f 	and.w	r3, r3, #31
 8001ff0:	e018      	b.n	8002024 <HAL_ADC_ConfigChannel+0x1e4>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001ffe:	fa93 f3a3 	rbit	r3, r3
 8002002:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002006:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800200a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800200e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002016:	2320      	movs	r3, #32
 8002018:	e004      	b.n	8002024 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800201a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800201e:	fab3 f383 	clz	r3, r3
 8002022:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002024:	429a      	cmp	r2, r3
 8002026:	d106      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2200      	movs	r2, #0
 800202e:	2100      	movs	r1, #0
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff fbd7 	bl	80017e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2101      	movs	r1, #1
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff fbbb 	bl	80017b8 <LL_ADC_GetOffsetChannel>
 8002042:	4603      	mov	r3, r0
 8002044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10a      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x222>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2101      	movs	r1, #1
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff fbb0 	bl	80017b8 <LL_ADC_GetOffsetChannel>
 8002058:	4603      	mov	r3, r0
 800205a:	0e9b      	lsrs	r3, r3, #26
 800205c:	f003 021f 	and.w	r2, r3, #31
 8002060:	e01e      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x260>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2101      	movs	r1, #1
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff fba5 	bl	80017b8 <LL_ADC_GetOffsetChannel>
 800206e:	4603      	mov	r3, r0
 8002070:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002074:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002078:	fa93 f3a3 	rbit	r3, r3
 800207c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002080:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002084:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002088:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002090:	2320      	movs	r3, #32
 8002092:	e004      	b.n	800209e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002094:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002098:	fab3 f383 	clz	r3, r3
 800209c:	b2db      	uxtb	r3, r3
 800209e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d105      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x278>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	0e9b      	lsrs	r3, r3, #26
 80020b2:	f003 031f 	and.w	r3, r3, #31
 80020b6:	e018      	b.n	80020ea <HAL_ADC_ConfigChannel+0x2aa>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020c4:	fa93 f3a3 	rbit	r3, r3
 80020c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80020cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80020d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80020dc:	2320      	movs	r3, #32
 80020de:	e004      	b.n	80020ea <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80020e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020e4:	fab3 f383 	clz	r3, r3
 80020e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d106      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2200      	movs	r2, #0
 80020f4:	2101      	movs	r1, #1
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff fb74 	bl	80017e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2102      	movs	r1, #2
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff fb58 	bl	80017b8 <LL_ADC_GetOffsetChannel>
 8002108:	4603      	mov	r3, r0
 800210a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10a      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x2e8>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2102      	movs	r1, #2
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff fb4d 	bl	80017b8 <LL_ADC_GetOffsetChannel>
 800211e:	4603      	mov	r3, r0
 8002120:	0e9b      	lsrs	r3, r3, #26
 8002122:	f003 021f 	and.w	r2, r3, #31
 8002126:	e01e      	b.n	8002166 <HAL_ADC_ConfigChannel+0x326>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2102      	movs	r1, #2
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff fb42 	bl	80017b8 <LL_ADC_GetOffsetChannel>
 8002134:	4603      	mov	r3, r0
 8002136:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800213e:	fa93 f3a3 	rbit	r3, r3
 8002142:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002146:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800214a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800214e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002156:	2320      	movs	r3, #32
 8002158:	e004      	b.n	8002164 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800215a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800215e:	fab3 f383 	clz	r3, r3
 8002162:	b2db      	uxtb	r3, r3
 8002164:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800216e:	2b00      	cmp	r3, #0
 8002170:	d105      	bne.n	800217e <HAL_ADC_ConfigChannel+0x33e>
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	0e9b      	lsrs	r3, r3, #26
 8002178:	f003 031f 	and.w	r3, r3, #31
 800217c:	e016      	b.n	80021ac <HAL_ADC_ConfigChannel+0x36c>
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002186:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800218a:	fa93 f3a3 	rbit	r3, r3
 800218e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002190:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002192:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002196:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800219e:	2320      	movs	r3, #32
 80021a0:	e004      	b.n	80021ac <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80021a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021a6:	fab3 f383 	clz	r3, r3
 80021aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d106      	bne.n	80021be <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2200      	movs	r2, #0
 80021b6:	2102      	movs	r1, #2
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff fb13 	bl	80017e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2103      	movs	r1, #3
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff faf7 	bl	80017b8 <LL_ADC_GetOffsetChannel>
 80021ca:	4603      	mov	r3, r0
 80021cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10a      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x3aa>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2103      	movs	r1, #3
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff faec 	bl	80017b8 <LL_ADC_GetOffsetChannel>
 80021e0:	4603      	mov	r3, r0
 80021e2:	0e9b      	lsrs	r3, r3, #26
 80021e4:	f003 021f 	and.w	r2, r3, #31
 80021e8:	e017      	b.n	800221a <HAL_ADC_ConfigChannel+0x3da>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2103      	movs	r1, #3
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fae1 	bl	80017b8 <LL_ADC_GetOffsetChannel>
 80021f6:	4603      	mov	r3, r0
 80021f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021fc:	fa93 f3a3 	rbit	r3, r3
 8002200:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002202:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002204:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002206:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800220c:	2320      	movs	r3, #32
 800220e:	e003      	b.n	8002218 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002210:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002212:	fab3 f383 	clz	r3, r3
 8002216:	b2db      	uxtb	r3, r3
 8002218:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002222:	2b00      	cmp	r3, #0
 8002224:	d105      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x3f2>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	0e9b      	lsrs	r3, r3, #26
 800222c:	f003 031f 	and.w	r3, r3, #31
 8002230:	e011      	b.n	8002256 <HAL_ADC_ConfigChannel+0x416>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002238:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800223a:	fa93 f3a3 	rbit	r3, r3
 800223e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002240:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002242:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002244:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800224a:	2320      	movs	r3, #32
 800224c:	e003      	b.n	8002256 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800224e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002250:	fab3 f383 	clz	r3, r3
 8002254:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002256:	429a      	cmp	r2, r3
 8002258:	d106      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2200      	movs	r2, #0
 8002260:	2103      	movs	r1, #3
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff fabe 	bl	80017e4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff fbeb 	bl	8001a48 <LL_ADC_IsEnabled>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	f040 813d 	bne.w	80024f4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6818      	ldr	r0, [r3, #0]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	6819      	ldr	r1, [r3, #0]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	461a      	mov	r2, r3
 8002288:	f7ff fb68 	bl	800195c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	4aa2      	ldr	r2, [pc, #648]	; (800251c <HAL_ADC_ConfigChannel+0x6dc>)
 8002292:	4293      	cmp	r3, r2
 8002294:	f040 812e 	bne.w	80024f4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10b      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x480>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	0e9b      	lsrs	r3, r3, #26
 80022ae:	3301      	adds	r3, #1
 80022b0:	f003 031f 	and.w	r3, r3, #31
 80022b4:	2b09      	cmp	r3, #9
 80022b6:	bf94      	ite	ls
 80022b8:	2301      	movls	r3, #1
 80022ba:	2300      	movhi	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	e019      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x4b4>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022c8:	fa93 f3a3 	rbit	r3, r3
 80022cc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80022ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022d0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80022d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80022d8:	2320      	movs	r3, #32
 80022da:	e003      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80022dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022de:	fab3 f383 	clz	r3, r3
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	3301      	adds	r3, #1
 80022e6:	f003 031f 	and.w	r3, r3, #31
 80022ea:	2b09      	cmp	r3, #9
 80022ec:	bf94      	ite	ls
 80022ee:	2301      	movls	r3, #1
 80022f0:	2300      	movhi	r3, #0
 80022f2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d079      	beq.n	80023ec <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002300:	2b00      	cmp	r3, #0
 8002302:	d107      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x4d4>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	0e9b      	lsrs	r3, r3, #26
 800230a:	3301      	adds	r3, #1
 800230c:	069b      	lsls	r3, r3, #26
 800230e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002312:	e015      	b.n	8002340 <HAL_ADC_ConfigChannel+0x500>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800231c:	fa93 f3a3 	rbit	r3, r3
 8002320:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002324:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800232c:	2320      	movs	r3, #32
 800232e:	e003      	b.n	8002338 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002330:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002332:	fab3 f383 	clz	r3, r3
 8002336:	b2db      	uxtb	r3, r3
 8002338:	3301      	adds	r3, #1
 800233a:	069b      	lsls	r3, r3, #26
 800233c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002348:	2b00      	cmp	r3, #0
 800234a:	d109      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x520>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	0e9b      	lsrs	r3, r3, #26
 8002352:	3301      	adds	r3, #1
 8002354:	f003 031f 	and.w	r3, r3, #31
 8002358:	2101      	movs	r1, #1
 800235a:	fa01 f303 	lsl.w	r3, r1, r3
 800235e:	e017      	b.n	8002390 <HAL_ADC_ConfigChannel+0x550>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002366:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002368:	fa93 f3a3 	rbit	r3, r3
 800236c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800236e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002370:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002378:	2320      	movs	r3, #32
 800237a:	e003      	b.n	8002384 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800237c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800237e:	fab3 f383 	clz	r3, r3
 8002382:	b2db      	uxtb	r3, r3
 8002384:	3301      	adds	r3, #1
 8002386:	f003 031f 	and.w	r3, r3, #31
 800238a:	2101      	movs	r1, #1
 800238c:	fa01 f303 	lsl.w	r3, r1, r3
 8002390:	ea42 0103 	orr.w	r1, r2, r3
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10a      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x576>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	0e9b      	lsrs	r3, r3, #26
 80023a6:	3301      	adds	r3, #1
 80023a8:	f003 021f 	and.w	r2, r3, #31
 80023ac:	4613      	mov	r3, r2
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	4413      	add	r3, r2
 80023b2:	051b      	lsls	r3, r3, #20
 80023b4:	e018      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x5a8>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023be:	fa93 f3a3 	rbit	r3, r3
 80023c2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80023c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80023c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80023ce:	2320      	movs	r3, #32
 80023d0:	e003      	b.n	80023da <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80023d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023d4:	fab3 f383 	clz	r3, r3
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	3301      	adds	r3, #1
 80023dc:	f003 021f 	and.w	r2, r3, #31
 80023e0:	4613      	mov	r3, r2
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	4413      	add	r3, r2
 80023e6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023e8:	430b      	orrs	r3, r1
 80023ea:	e07e      	b.n	80024ea <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d107      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x5c8>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	0e9b      	lsrs	r3, r3, #26
 80023fe:	3301      	adds	r3, #1
 8002400:	069b      	lsls	r3, r3, #26
 8002402:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002406:	e015      	b.n	8002434 <HAL_ADC_ConfigChannel+0x5f4>
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002410:	fa93 f3a3 	rbit	r3, r3
 8002414:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002418:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800241a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002420:	2320      	movs	r3, #32
 8002422:	e003      	b.n	800242c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002426:	fab3 f383 	clz	r3, r3
 800242a:	b2db      	uxtb	r3, r3
 800242c:	3301      	adds	r3, #1
 800242e:	069b      	lsls	r3, r3, #26
 8002430:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800243c:	2b00      	cmp	r3, #0
 800243e:	d109      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x614>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	0e9b      	lsrs	r3, r3, #26
 8002446:	3301      	adds	r3, #1
 8002448:	f003 031f 	and.w	r3, r3, #31
 800244c:	2101      	movs	r1, #1
 800244e:	fa01 f303 	lsl.w	r3, r1, r3
 8002452:	e017      	b.n	8002484 <HAL_ADC_ConfigChannel+0x644>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	6a3b      	ldr	r3, [r7, #32]
 800245c:	fa93 f3a3 	rbit	r3, r3
 8002460:	61fb      	str	r3, [r7, #28]
  return result;
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800246c:	2320      	movs	r3, #32
 800246e:	e003      	b.n	8002478 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	fab3 f383 	clz	r3, r3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	3301      	adds	r3, #1
 800247a:	f003 031f 	and.w	r3, r3, #31
 800247e:	2101      	movs	r1, #1
 8002480:	fa01 f303 	lsl.w	r3, r1, r3
 8002484:	ea42 0103 	orr.w	r1, r2, r3
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10d      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x670>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	0e9b      	lsrs	r3, r3, #26
 800249a:	3301      	adds	r3, #1
 800249c:	f003 021f 	and.w	r2, r3, #31
 80024a0:	4613      	mov	r3, r2
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	4413      	add	r3, r2
 80024a6:	3b1e      	subs	r3, #30
 80024a8:	051b      	lsls	r3, r3, #20
 80024aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024ae:	e01b      	b.n	80024e8 <HAL_ADC_ConfigChannel+0x6a8>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	fa93 f3a3 	rbit	r3, r3
 80024bc:	613b      	str	r3, [r7, #16]
  return result;
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80024c8:	2320      	movs	r3, #32
 80024ca:	e003      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	fab3 f383 	clz	r3, r3
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	3301      	adds	r3, #1
 80024d6:	f003 021f 	and.w	r2, r3, #31
 80024da:	4613      	mov	r3, r2
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	4413      	add	r3, r2
 80024e0:	3b1e      	subs	r3, #30
 80024e2:	051b      	lsls	r3, r3, #20
 80024e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024e8:	430b      	orrs	r3, r1
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	6892      	ldr	r2, [r2, #8]
 80024ee:	4619      	mov	r1, r3
 80024f0:	f7ff fa08 	bl	8001904 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	4b09      	ldr	r3, [pc, #36]	; (8002520 <HAL_ADC_ConfigChannel+0x6e0>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 80be 	beq.w	800267e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800250a:	d004      	beq.n	8002516 <HAL_ADC_ConfigChannel+0x6d6>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a04      	ldr	r2, [pc, #16]	; (8002524 <HAL_ADC_ConfigChannel+0x6e4>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d10a      	bne.n	800252c <HAL_ADC_ConfigChannel+0x6ec>
 8002516:	4b04      	ldr	r3, [pc, #16]	; (8002528 <HAL_ADC_ConfigChannel+0x6e8>)
 8002518:	e009      	b.n	800252e <HAL_ADC_ConfigChannel+0x6ee>
 800251a:	bf00      	nop
 800251c:	407f0000 	.word	0x407f0000
 8002520:	80080000 	.word	0x80080000
 8002524:	50000100 	.word	0x50000100
 8002528:	50000300 	.word	0x50000300
 800252c:	4b59      	ldr	r3, [pc, #356]	; (8002694 <HAL_ADC_ConfigChannel+0x854>)
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff f910 	bl	8001754 <LL_ADC_GetCommonPathInternalCh>
 8002534:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a56      	ldr	r2, [pc, #344]	; (8002698 <HAL_ADC_ConfigChannel+0x858>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d004      	beq.n	800254c <HAL_ADC_ConfigChannel+0x70c>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a55      	ldr	r2, [pc, #340]	; (800269c <HAL_ADC_ConfigChannel+0x85c>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d13a      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800254c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002550:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d134      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002560:	d005      	beq.n	800256e <HAL_ADC_ConfigChannel+0x72e>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a4e      	ldr	r2, [pc, #312]	; (80026a0 <HAL_ADC_ConfigChannel+0x860>)
 8002568:	4293      	cmp	r3, r2
 800256a:	f040 8085 	bne.w	8002678 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002576:	d004      	beq.n	8002582 <HAL_ADC_ConfigChannel+0x742>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a49      	ldr	r2, [pc, #292]	; (80026a4 <HAL_ADC_ConfigChannel+0x864>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d101      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x746>
 8002582:	4a49      	ldr	r2, [pc, #292]	; (80026a8 <HAL_ADC_ConfigChannel+0x868>)
 8002584:	e000      	b.n	8002588 <HAL_ADC_ConfigChannel+0x748>
 8002586:	4a43      	ldr	r2, [pc, #268]	; (8002694 <HAL_ADC_ConfigChannel+0x854>)
 8002588:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800258c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002590:	4619      	mov	r1, r3
 8002592:	4610      	mov	r0, r2
 8002594:	f7ff f8cb 	bl	800172e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002598:	4b44      	ldr	r3, [pc, #272]	; (80026ac <HAL_ADC_ConfigChannel+0x86c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	099b      	lsrs	r3, r3, #6
 800259e:	4a44      	ldr	r2, [pc, #272]	; (80026b0 <HAL_ADC_ConfigChannel+0x870>)
 80025a0:	fba2 2303 	umull	r2, r3, r2, r3
 80025a4:	099b      	lsrs	r3, r3, #6
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	4613      	mov	r3, r2
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	4413      	add	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80025b2:	e002      	b.n	80025ba <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1f9      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025c0:	e05a      	b.n	8002678 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a3b      	ldr	r2, [pc, #236]	; (80026b4 <HAL_ADC_ConfigChannel+0x874>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d125      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x7d8>
 80025cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d11f      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a31      	ldr	r2, [pc, #196]	; (80026a4 <HAL_ADC_ConfigChannel+0x864>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d104      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x7ac>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a34      	ldr	r2, [pc, #208]	; (80026b8 <HAL_ADC_ConfigChannel+0x878>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d047      	beq.n	800267c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025f4:	d004      	beq.n	8002600 <HAL_ADC_ConfigChannel+0x7c0>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a2a      	ldr	r2, [pc, #168]	; (80026a4 <HAL_ADC_ConfigChannel+0x864>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d101      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x7c4>
 8002600:	4a29      	ldr	r2, [pc, #164]	; (80026a8 <HAL_ADC_ConfigChannel+0x868>)
 8002602:	e000      	b.n	8002606 <HAL_ADC_ConfigChannel+0x7c6>
 8002604:	4a23      	ldr	r2, [pc, #140]	; (8002694 <HAL_ADC_ConfigChannel+0x854>)
 8002606:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800260a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800260e:	4619      	mov	r1, r3
 8002610:	4610      	mov	r0, r2
 8002612:	f7ff f88c 	bl	800172e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002616:	e031      	b.n	800267c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a27      	ldr	r2, [pc, #156]	; (80026bc <HAL_ADC_ConfigChannel+0x87c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d12d      	bne.n	800267e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002622:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d127      	bne.n	800267e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a1c      	ldr	r2, [pc, #112]	; (80026a4 <HAL_ADC_ConfigChannel+0x864>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d022      	beq.n	800267e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002640:	d004      	beq.n	800264c <HAL_ADC_ConfigChannel+0x80c>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a17      	ldr	r2, [pc, #92]	; (80026a4 <HAL_ADC_ConfigChannel+0x864>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d101      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x810>
 800264c:	4a16      	ldr	r2, [pc, #88]	; (80026a8 <HAL_ADC_ConfigChannel+0x868>)
 800264e:	e000      	b.n	8002652 <HAL_ADC_ConfigChannel+0x812>
 8002650:	4a10      	ldr	r2, [pc, #64]	; (8002694 <HAL_ADC_ConfigChannel+0x854>)
 8002652:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002656:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800265a:	4619      	mov	r1, r3
 800265c:	4610      	mov	r0, r2
 800265e:	f7ff f866 	bl	800172e <LL_ADC_SetCommonPathInternalCh>
 8002662:	e00c      	b.n	800267e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002668:	f043 0220 	orr.w	r2, r3, #32
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002676:	e002      	b.n	800267e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002678:	bf00      	nop
 800267a:	e000      	b.n	800267e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800267c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002686:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800268a:	4618      	mov	r0, r3
 800268c:	37d8      	adds	r7, #216	; 0xd8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	50000700 	.word	0x50000700
 8002698:	c3210000 	.word	0xc3210000
 800269c:	90c00010 	.word	0x90c00010
 80026a0:	50000600 	.word	0x50000600
 80026a4:	50000100 	.word	0x50000100
 80026a8:	50000300 	.word	0x50000300
 80026ac:	20000078 	.word	0x20000078
 80026b0:	053e2d63 	.word	0x053e2d63
 80026b4:	c7520000 	.word	0xc7520000
 80026b8:	50000500 	.word	0x50000500
 80026bc:	cb840000 	.word	0xcb840000

080026c0 <LL_ADC_IsEnabled>:
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d101      	bne.n	80026d8 <LL_ADC_IsEnabled+0x18>
 80026d4:	2301      	movs	r3, #1
 80026d6:	e000      	b.n	80026da <LL_ADC_IsEnabled+0x1a>
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <LL_ADC_REG_IsConversionOngoing>:
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 0304 	and.w	r3, r3, #4
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d101      	bne.n	80026fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80026fa:	2301      	movs	r3, #1
 80026fc:	e000      	b.n	8002700 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800270c:	b590      	push	{r4, r7, lr}
 800270e:	b0a1      	sub	sp, #132	; 0x84
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002722:	2b01      	cmp	r3, #1
 8002724:	d101      	bne.n	800272a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002726:	2302      	movs	r3, #2
 8002728:	e0e7      	b.n	80028fa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002732:	2300      	movs	r3, #0
 8002734:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002736:	2300      	movs	r3, #0
 8002738:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002742:	d102      	bne.n	800274a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002744:	4b6f      	ldr	r3, [pc, #444]	; (8002904 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002746:	60bb      	str	r3, [r7, #8]
 8002748:	e009      	b.n	800275e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a6e      	ldr	r2, [pc, #440]	; (8002908 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d102      	bne.n	800275a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002754:	4b6d      	ldr	r3, [pc, #436]	; (800290c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002756:	60bb      	str	r3, [r7, #8]
 8002758:	e001      	b.n	800275e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800275a:	2300      	movs	r3, #0
 800275c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10b      	bne.n	800277c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002768:	f043 0220 	orr.w	r2, r3, #32
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e0be      	b.n	80028fa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff ffb1 	bl	80026e6 <LL_ADC_REG_IsConversionOngoing>
 8002784:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff ffab 	bl	80026e6 <LL_ADC_REG_IsConversionOngoing>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	f040 80a0 	bne.w	80028d8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002798:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800279a:	2b00      	cmp	r3, #0
 800279c:	f040 809c 	bne.w	80028d8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027a8:	d004      	beq.n	80027b4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a55      	ldr	r2, [pc, #340]	; (8002904 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d101      	bne.n	80027b8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80027b4:	4b56      	ldr	r3, [pc, #344]	; (8002910 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80027b6:	e000      	b.n	80027ba <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80027b8:	4b56      	ldr	r3, [pc, #344]	; (8002914 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80027ba:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d04b      	beq.n	800285c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80027c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	6859      	ldr	r1, [r3, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027d6:	035b      	lsls	r3, r3, #13
 80027d8:	430b      	orrs	r3, r1
 80027da:	431a      	orrs	r2, r3
 80027dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027de:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027e8:	d004      	beq.n	80027f4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a45      	ldr	r2, [pc, #276]	; (8002904 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d10f      	bne.n	8002814 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80027f4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80027f8:	f7ff ff62 	bl	80026c0 <LL_ADC_IsEnabled>
 80027fc:	4604      	mov	r4, r0
 80027fe:	4841      	ldr	r0, [pc, #260]	; (8002904 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002800:	f7ff ff5e 	bl	80026c0 <LL_ADC_IsEnabled>
 8002804:	4603      	mov	r3, r0
 8002806:	4323      	orrs	r3, r4
 8002808:	2b00      	cmp	r3, #0
 800280a:	bf0c      	ite	eq
 800280c:	2301      	moveq	r3, #1
 800280e:	2300      	movne	r3, #0
 8002810:	b2db      	uxtb	r3, r3
 8002812:	e012      	b.n	800283a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002814:	483c      	ldr	r0, [pc, #240]	; (8002908 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002816:	f7ff ff53 	bl	80026c0 <LL_ADC_IsEnabled>
 800281a:	4604      	mov	r4, r0
 800281c:	483b      	ldr	r0, [pc, #236]	; (800290c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800281e:	f7ff ff4f 	bl	80026c0 <LL_ADC_IsEnabled>
 8002822:	4603      	mov	r3, r0
 8002824:	431c      	orrs	r4, r3
 8002826:	483c      	ldr	r0, [pc, #240]	; (8002918 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002828:	f7ff ff4a 	bl	80026c0 <LL_ADC_IsEnabled>
 800282c:	4603      	mov	r3, r0
 800282e:	4323      	orrs	r3, r4
 8002830:	2b00      	cmp	r3, #0
 8002832:	bf0c      	ite	eq
 8002834:	2301      	moveq	r3, #1
 8002836:	2300      	movne	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d056      	beq.n	80028ec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800283e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002846:	f023 030f 	bic.w	r3, r3, #15
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	6811      	ldr	r1, [r2, #0]
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	6892      	ldr	r2, [r2, #8]
 8002852:	430a      	orrs	r2, r1
 8002854:	431a      	orrs	r2, r3
 8002856:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002858:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800285a:	e047      	b.n	80028ec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800285c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002864:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002866:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002870:	d004      	beq.n	800287c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a23      	ldr	r2, [pc, #140]	; (8002904 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d10f      	bne.n	800289c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800287c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002880:	f7ff ff1e 	bl	80026c0 <LL_ADC_IsEnabled>
 8002884:	4604      	mov	r4, r0
 8002886:	481f      	ldr	r0, [pc, #124]	; (8002904 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002888:	f7ff ff1a 	bl	80026c0 <LL_ADC_IsEnabled>
 800288c:	4603      	mov	r3, r0
 800288e:	4323      	orrs	r3, r4
 8002890:	2b00      	cmp	r3, #0
 8002892:	bf0c      	ite	eq
 8002894:	2301      	moveq	r3, #1
 8002896:	2300      	movne	r3, #0
 8002898:	b2db      	uxtb	r3, r3
 800289a:	e012      	b.n	80028c2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800289c:	481a      	ldr	r0, [pc, #104]	; (8002908 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800289e:	f7ff ff0f 	bl	80026c0 <LL_ADC_IsEnabled>
 80028a2:	4604      	mov	r4, r0
 80028a4:	4819      	ldr	r0, [pc, #100]	; (800290c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80028a6:	f7ff ff0b 	bl	80026c0 <LL_ADC_IsEnabled>
 80028aa:	4603      	mov	r3, r0
 80028ac:	431c      	orrs	r4, r3
 80028ae:	481a      	ldr	r0, [pc, #104]	; (8002918 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80028b0:	f7ff ff06 	bl	80026c0 <LL_ADC_IsEnabled>
 80028b4:	4603      	mov	r3, r0
 80028b6:	4323      	orrs	r3, r4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	bf0c      	ite	eq
 80028bc:	2301      	moveq	r3, #1
 80028be:	2300      	movne	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d012      	beq.n	80028ec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80028c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80028ce:	f023 030f 	bic.w	r3, r3, #15
 80028d2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80028d4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028d6:	e009      	b.n	80028ec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028dc:	f043 0220 	orr.w	r2, r3, #32
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80028ea:	e000      	b.n	80028ee <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028ec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80028f6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3784      	adds	r7, #132	; 0x84
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd90      	pop	{r4, r7, pc}
 8002902:	bf00      	nop
 8002904:	50000100 	.word	0x50000100
 8002908:	50000400 	.word	0x50000400
 800290c:	50000500 	.word	0x50000500
 8002910:	50000300 	.word	0x50000300
 8002914:	50000700 	.word	0x50000700
 8002918:	50000600 	.word	0x50000600

0800291c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800292c:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <__NVIC_SetPriorityGrouping+0x44>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002938:	4013      	ands	r3, r2
 800293a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002944:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800294c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800294e:	4a04      	ldr	r2, [pc, #16]	; (8002960 <__NVIC_SetPriorityGrouping+0x44>)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	60d3      	str	r3, [r2, #12]
}
 8002954:	bf00      	nop
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002968:	4b04      	ldr	r3, [pc, #16]	; (800297c <__NVIC_GetPriorityGrouping+0x18>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	0a1b      	lsrs	r3, r3, #8
 800296e:	f003 0307 	and.w	r3, r3, #7
}
 8002972:	4618      	mov	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298e:	2b00      	cmp	r3, #0
 8002990:	db0b      	blt.n	80029aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	f003 021f 	and.w	r2, r3, #31
 8002998:	4907      	ldr	r1, [pc, #28]	; (80029b8 <__NVIC_EnableIRQ+0x38>)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	095b      	lsrs	r3, r3, #5
 80029a0:	2001      	movs	r0, #1
 80029a2:	fa00 f202 	lsl.w	r2, r0, r2
 80029a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	e000e100 	.word	0xe000e100

080029bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	6039      	str	r1, [r7, #0]
 80029c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	db0a      	blt.n	80029e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	490c      	ldr	r1, [pc, #48]	; (8002a08 <__NVIC_SetPriority+0x4c>)
 80029d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029da:	0112      	lsls	r2, r2, #4
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	440b      	add	r3, r1
 80029e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029e4:	e00a      	b.n	80029fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	4908      	ldr	r1, [pc, #32]	; (8002a0c <__NVIC_SetPriority+0x50>)
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	3b04      	subs	r3, #4
 80029f4:	0112      	lsls	r2, r2, #4
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	440b      	add	r3, r1
 80029fa:	761a      	strb	r2, [r3, #24]
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	e000e100 	.word	0xe000e100
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b089      	sub	sp, #36	; 0x24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f1c3 0307 	rsb	r3, r3, #7
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	bf28      	it	cs
 8002a2e:	2304      	movcs	r3, #4
 8002a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3304      	adds	r3, #4
 8002a36:	2b06      	cmp	r3, #6
 8002a38:	d902      	bls.n	8002a40 <NVIC_EncodePriority+0x30>
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	3b03      	subs	r3, #3
 8002a3e:	e000      	b.n	8002a42 <NVIC_EncodePriority+0x32>
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a44:	f04f 32ff 	mov.w	r2, #4294967295
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	43da      	mvns	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	401a      	ands	r2, r3
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a58:	f04f 31ff 	mov.w	r1, #4294967295
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a62:	43d9      	mvns	r1, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a68:	4313      	orrs	r3, r2
         );
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3724      	adds	r7, #36	; 0x24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b082      	sub	sp, #8
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7ff ff4c 	bl	800291c <__NVIC_SetPriorityGrouping>
}
 8002a84:	bf00      	nop
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
 8002a98:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a9a:	f7ff ff63 	bl	8002964 <__NVIC_GetPriorityGrouping>
 8002a9e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	68b9      	ldr	r1, [r7, #8]
 8002aa4:	6978      	ldr	r0, [r7, #20]
 8002aa6:	f7ff ffb3 	bl	8002a10 <NVIC_EncodePriority>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ab0:	4611      	mov	r1, r2
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff ff82 	bl	80029bc <__NVIC_SetPriority>
}
 8002ab8:	bf00      	nop
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff ff56 	bl	8002980 <__NVIC_EnableIRQ>
}
 8002ad4:	bf00      	nop
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d005      	beq.n	8002b00 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2204      	movs	r2, #4
 8002af8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	73fb      	strb	r3, [r7, #15]
 8002afe:	e037      	b.n	8002b70 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 020e 	bic.w	r2, r2, #14
 8002b0e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b1e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 0201 	bic.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b34:	f003 021f 	and.w	r2, r3, #31
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b42:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002b4c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00c      	beq.n	8002b70 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b64:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002b6e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3714      	adds	r7, #20
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b084      	sub	sp, #16
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b96:	2300      	movs	r3, #0
 8002b98:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d00d      	beq.n	8002bc2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2204      	movs	r2, #4
 8002baa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	73fb      	strb	r3, [r7, #15]
 8002bc0:	e047      	b.n	8002c52 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 020e 	bic.w	r2, r2, #14
 8002bd0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0201 	bic.w	r2, r2, #1
 8002be0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bf0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf6:	f003 021f 	and.w	r2, r3, #31
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	2101      	movs	r1, #1
 8002c00:	fa01 f202 	lsl.w	r2, r1, r2
 8002c04:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c0e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00c      	beq.n	8002c32 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c26:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002c30:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	4798      	blx	r3
    }
  }
  return status;
 8002c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b087      	sub	sp, #28
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c6a:	e15a      	b.n	8002f22 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	2101      	movs	r1, #1
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	fa01 f303 	lsl.w	r3, r1, r3
 8002c78:	4013      	ands	r3, r2
 8002c7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 814c 	beq.w	8002f1c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 0303 	and.w	r3, r3, #3
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d005      	beq.n	8002c9c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d130      	bne.n	8002cfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	2203      	movs	r2, #3
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	68da      	ldr	r2, [r3, #12]
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	43db      	mvns	r3, r3
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	091b      	lsrs	r3, r3, #4
 8002ce8:	f003 0201 	and.w	r2, r3, #1
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	2b03      	cmp	r3, #3
 8002d08:	d017      	beq.n	8002d3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	2203      	movs	r2, #3
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	689a      	ldr	r2, [r3, #8]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d123      	bne.n	8002d8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	08da      	lsrs	r2, r3, #3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	3208      	adds	r2, #8
 8002d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	220f      	movs	r2, #15
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	43db      	mvns	r3, r3
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	4013      	ands	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	691a      	ldr	r2, [r3, #16]
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	08da      	lsrs	r2, r3, #3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3208      	adds	r2, #8
 8002d88:	6939      	ldr	r1, [r7, #16]
 8002d8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	2203      	movs	r2, #3
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	4013      	ands	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f003 0203 	and.w	r2, r3, #3
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 80a6 	beq.w	8002f1c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd0:	4b5b      	ldr	r3, [pc, #364]	; (8002f40 <HAL_GPIO_Init+0x2e4>)
 8002dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd4:	4a5a      	ldr	r2, [pc, #360]	; (8002f40 <HAL_GPIO_Init+0x2e4>)
 8002dd6:	f043 0301 	orr.w	r3, r3, #1
 8002dda:	6613      	str	r3, [r2, #96]	; 0x60
 8002ddc:	4b58      	ldr	r3, [pc, #352]	; (8002f40 <HAL_GPIO_Init+0x2e4>)
 8002dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	60bb      	str	r3, [r7, #8]
 8002de6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002de8:	4a56      	ldr	r2, [pc, #344]	; (8002f44 <HAL_GPIO_Init+0x2e8>)
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	089b      	lsrs	r3, r3, #2
 8002dee:	3302      	adds	r3, #2
 8002df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f003 0303 	and.w	r3, r3, #3
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	220f      	movs	r2, #15
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e12:	d01f      	beq.n	8002e54 <HAL_GPIO_Init+0x1f8>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a4c      	ldr	r2, [pc, #304]	; (8002f48 <HAL_GPIO_Init+0x2ec>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d019      	beq.n	8002e50 <HAL_GPIO_Init+0x1f4>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a4b      	ldr	r2, [pc, #300]	; (8002f4c <HAL_GPIO_Init+0x2f0>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d013      	beq.n	8002e4c <HAL_GPIO_Init+0x1f0>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a4a      	ldr	r2, [pc, #296]	; (8002f50 <HAL_GPIO_Init+0x2f4>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d00d      	beq.n	8002e48 <HAL_GPIO_Init+0x1ec>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a49      	ldr	r2, [pc, #292]	; (8002f54 <HAL_GPIO_Init+0x2f8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d007      	beq.n	8002e44 <HAL_GPIO_Init+0x1e8>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a48      	ldr	r2, [pc, #288]	; (8002f58 <HAL_GPIO_Init+0x2fc>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d101      	bne.n	8002e40 <HAL_GPIO_Init+0x1e4>
 8002e3c:	2305      	movs	r3, #5
 8002e3e:	e00a      	b.n	8002e56 <HAL_GPIO_Init+0x1fa>
 8002e40:	2306      	movs	r3, #6
 8002e42:	e008      	b.n	8002e56 <HAL_GPIO_Init+0x1fa>
 8002e44:	2304      	movs	r3, #4
 8002e46:	e006      	b.n	8002e56 <HAL_GPIO_Init+0x1fa>
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e004      	b.n	8002e56 <HAL_GPIO_Init+0x1fa>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e002      	b.n	8002e56 <HAL_GPIO_Init+0x1fa>
 8002e50:	2301      	movs	r3, #1
 8002e52:	e000      	b.n	8002e56 <HAL_GPIO_Init+0x1fa>
 8002e54:	2300      	movs	r3, #0
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	f002 0203 	and.w	r2, r2, #3
 8002e5c:	0092      	lsls	r2, r2, #2
 8002e5e:	4093      	lsls	r3, r2
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e66:	4937      	ldr	r1, [pc, #220]	; (8002f44 <HAL_GPIO_Init+0x2e8>)
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	089b      	lsrs	r3, r3, #2
 8002e6c:	3302      	adds	r3, #2
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e74:	4b39      	ldr	r3, [pc, #228]	; (8002f5c <HAL_GPIO_Init+0x300>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	4013      	ands	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e98:	4a30      	ldr	r2, [pc, #192]	; (8002f5c <HAL_GPIO_Init+0x300>)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e9e:	4b2f      	ldr	r3, [pc, #188]	; (8002f5c <HAL_GPIO_Init+0x300>)
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ec2:	4a26      	ldr	r2, [pc, #152]	; (8002f5c <HAL_GPIO_Init+0x300>)
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002ec8:	4b24      	ldr	r3, [pc, #144]	; (8002f5c <HAL_GPIO_Init+0x300>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002eec:	4a1b      	ldr	r2, [pc, #108]	; (8002f5c <HAL_GPIO_Init+0x300>)
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ef2:	4b1a      	ldr	r3, [pc, #104]	; (8002f5c <HAL_GPIO_Init+0x300>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	43db      	mvns	r3, r3
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4013      	ands	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f16:	4a11      	ldr	r2, [pc, #68]	; (8002f5c <HAL_GPIO_Init+0x300>)
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	fa22 f303 	lsr.w	r3, r2, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f47f ae9d 	bne.w	8002c6c <HAL_GPIO_Init+0x10>
  }
}
 8002f32:	bf00      	nop
 8002f34:	bf00      	nop
 8002f36:	371c      	adds	r7, #28
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	40021000 	.word	0x40021000
 8002f44:	40010000 	.word	0x40010000
 8002f48:	48000400 	.word	0x48000400
 8002f4c:	48000800 	.word	0x48000800
 8002f50:	48000c00 	.word	0x48000c00
 8002f54:	48001000 	.word	0x48001000
 8002f58:	48001400 	.word	0x48001400
 8002f5c:	40010400 	.word	0x40010400

08002f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	807b      	strh	r3, [r7, #2]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f70:	787b      	ldrb	r3, [r7, #1]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f76:	887a      	ldrh	r2, [r7, #2]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f7c:	e002      	b.n	8002f84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f7e:	887a      	ldrh	r2, [r7, #2]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f9a:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f9c:	695a      	ldr	r2, [r3, #20]
 8002f9e:	88fb      	ldrh	r3, [r7, #6]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d006      	beq.n	8002fb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fa6:	4a05      	ldr	r2, [pc, #20]	; (8002fbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fa8:	88fb      	ldrh	r3, [r7, #6]
 8002faa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fac:	88fb      	ldrh	r3, [r7, #6]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 f806 	bl	8002fc0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002fb4:	bf00      	nop
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40010400 	.word	0x40010400

08002fc0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
	...

08002fd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d141      	bne.n	800306a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fe6:	4b4b      	ldr	r3, [pc, #300]	; (8003114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff2:	d131      	bne.n	8003058 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ff4:	4b47      	ldr	r3, [pc, #284]	; (8003114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ffa:	4a46      	ldr	r2, [pc, #280]	; (8003114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ffc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003000:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003004:	4b43      	ldr	r3, [pc, #268]	; (8003114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800300c:	4a41      	ldr	r2, [pc, #260]	; (8003114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800300e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003012:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003014:	4b40      	ldr	r3, [pc, #256]	; (8003118 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2232      	movs	r2, #50	; 0x32
 800301a:	fb02 f303 	mul.w	r3, r2, r3
 800301e:	4a3f      	ldr	r2, [pc, #252]	; (800311c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003020:	fba2 2303 	umull	r2, r3, r2, r3
 8003024:	0c9b      	lsrs	r3, r3, #18
 8003026:	3301      	adds	r3, #1
 8003028:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800302a:	e002      	b.n	8003032 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	3b01      	subs	r3, #1
 8003030:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003032:	4b38      	ldr	r3, [pc, #224]	; (8003114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800303a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800303e:	d102      	bne.n	8003046 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f2      	bne.n	800302c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003046:	4b33      	ldr	r3, [pc, #204]	; (8003114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003052:	d158      	bne.n	8003106 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e057      	b.n	8003108 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003058:	4b2e      	ldr	r3, [pc, #184]	; (8003114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800305a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800305e:	4a2d      	ldr	r2, [pc, #180]	; (8003114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003064:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003068:	e04d      	b.n	8003106 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003070:	d141      	bne.n	80030f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003072:	4b28      	ldr	r3, [pc, #160]	; (8003114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800307a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800307e:	d131      	bne.n	80030e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003080:	4b24      	ldr	r3, [pc, #144]	; (8003114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003082:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003086:	4a23      	ldr	r2, [pc, #140]	; (8003114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800308c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003090:	4b20      	ldr	r3, [pc, #128]	; (8003114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003098:	4a1e      	ldr	r2, [pc, #120]	; (8003114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800309a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800309e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030a0:	4b1d      	ldr	r3, [pc, #116]	; (8003118 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2232      	movs	r2, #50	; 0x32
 80030a6:	fb02 f303 	mul.w	r3, r2, r3
 80030aa:	4a1c      	ldr	r2, [pc, #112]	; (800311c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80030ac:	fba2 2303 	umull	r2, r3, r2, r3
 80030b0:	0c9b      	lsrs	r3, r3, #18
 80030b2:	3301      	adds	r3, #1
 80030b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030b6:	e002      	b.n	80030be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	3b01      	subs	r3, #1
 80030bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030be:	4b15      	ldr	r3, [pc, #84]	; (8003114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ca:	d102      	bne.n	80030d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1f2      	bne.n	80030b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030d2:	4b10      	ldr	r3, [pc, #64]	; (8003114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030de:	d112      	bne.n	8003106 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e011      	b.n	8003108 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030e4:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030ea:	4a0a      	ldr	r2, [pc, #40]	; (8003114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80030f4:	e007      	b.n	8003106 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030f6:	4b07      	ldr	r3, [pc, #28]	; (8003114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030fe:	4a05      	ldr	r2, [pc, #20]	; (8003114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003100:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003104:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	40007000 	.word	0x40007000
 8003118:	20000078 	.word	0x20000078
 800311c:	431bde83 	.word	0x431bde83

08003120 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003124:	4b05      	ldr	r3, [pc, #20]	; (800313c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	4a04      	ldr	r2, [pc, #16]	; (800313c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800312a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800312e:	6093      	str	r3, [r2, #8]
}
 8003130:	bf00      	nop
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	40007000 	.word	0x40007000

08003140 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b088      	sub	sp, #32
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e306      	b.n	8003760 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d075      	beq.n	800324a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800315e:	4b97      	ldr	r3, [pc, #604]	; (80033bc <HAL_RCC_OscConfig+0x27c>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 030c 	and.w	r3, r3, #12
 8003166:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003168:	4b94      	ldr	r3, [pc, #592]	; (80033bc <HAL_RCC_OscConfig+0x27c>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f003 0303 	and.w	r3, r3, #3
 8003170:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	2b0c      	cmp	r3, #12
 8003176:	d102      	bne.n	800317e <HAL_RCC_OscConfig+0x3e>
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	2b03      	cmp	r3, #3
 800317c:	d002      	beq.n	8003184 <HAL_RCC_OscConfig+0x44>
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	2b08      	cmp	r3, #8
 8003182:	d10b      	bne.n	800319c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003184:	4b8d      	ldr	r3, [pc, #564]	; (80033bc <HAL_RCC_OscConfig+0x27c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d05b      	beq.n	8003248 <HAL_RCC_OscConfig+0x108>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d157      	bne.n	8003248 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e2e1      	b.n	8003760 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031a4:	d106      	bne.n	80031b4 <HAL_RCC_OscConfig+0x74>
 80031a6:	4b85      	ldr	r3, [pc, #532]	; (80033bc <HAL_RCC_OscConfig+0x27c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a84      	ldr	r2, [pc, #528]	; (80033bc <HAL_RCC_OscConfig+0x27c>)
 80031ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	e01d      	b.n	80031f0 <HAL_RCC_OscConfig+0xb0>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031bc:	d10c      	bne.n	80031d8 <HAL_RCC_OscConfig+0x98>
 80031be:	4b7f      	ldr	r3, [pc, #508]	; (80033bc <HAL_RCC_OscConfig+0x27c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a7e      	ldr	r2, [pc, #504]	; (80033bc <HAL_RCC_OscConfig+0x27c>)
 80031c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	4b7c      	ldr	r3, [pc, #496]	; (80033bc <HAL_RCC_OscConfig+0x27c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a7b      	ldr	r2, [pc, #492]	; (80033bc <HAL_RCC_OscConfig+0x27c>)
 80031d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	e00b      	b.n	80031f0 <HAL_RCC_OscConfig+0xb0>
 80031d8:	4b78      	ldr	r3, [pc, #480]	; (80033bc <HAL_RCC_OscConfig+0x27c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a77      	ldr	r2, [pc, #476]	; (80033bc <HAL_RCC_OscConfig+0x27c>)
 80031de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031e2:	6013      	str	r3, [r2, #0]
 80031e4:	4b75      	ldr	r3, [pc, #468]	; (80033bc <HAL_RCC_OscConfig+0x27c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a74      	ldr	r2, [pc, #464]	; (80033bc <HAL_RCC_OscConfig+0x27c>)
 80031ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d013      	beq.n	8003220 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f8:	f7fe fa7a 	bl	80016f0 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003200:	f7fe fa76 	bl	80016f0 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b64      	cmp	r3, #100	; 0x64
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e2a6      	b.n	8003760 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003212:	4b6a      	ldr	r3, [pc, #424]	; (80033bc <HAL_RCC_OscConfig+0x27c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0f0      	beq.n	8003200 <HAL_RCC_OscConfig+0xc0>
 800321e:	e014      	b.n	800324a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003220:	f7fe fa66 	bl	80016f0 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003228:	f7fe fa62 	bl	80016f0 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b64      	cmp	r3, #100	; 0x64
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e292      	b.n	8003760 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800323a:	4b60      	ldr	r3, [pc, #384]	; (80033bc <HAL_RCC_OscConfig+0x27c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f0      	bne.n	8003228 <HAL_RCC_OscConfig+0xe8>
 8003246:	e000      	b.n	800324a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d075      	beq.n	8003342 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003256:	4b59      	ldr	r3, [pc, #356]	; (80033bc <HAL_RCC_OscConfig+0x27c>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 030c 	and.w	r3, r3, #12
 800325e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003260:	4b56      	ldr	r3, [pc, #344]	; (80033bc <HAL_RCC_OscConfig+0x27c>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f003 0303 	and.w	r3, r3, #3
 8003268:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	2b0c      	cmp	r3, #12
 800326e:	d102      	bne.n	8003276 <HAL_RCC_OscConfig+0x136>
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	2b02      	cmp	r3, #2
 8003274:	d002      	beq.n	800327c <HAL_RCC_OscConfig+0x13c>
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	2b04      	cmp	r3, #4
 800327a:	d11f      	bne.n	80032bc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800327c:	4b4f      	ldr	r3, [pc, #316]	; (80033bc <HAL_RCC_OscConfig+0x27c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003284:	2b00      	cmp	r3, #0
 8003286:	d005      	beq.n	8003294 <HAL_RCC_OscConfig+0x154>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e265      	b.n	8003760 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003294:	4b49      	ldr	r3, [pc, #292]	; (80033bc <HAL_RCC_OscConfig+0x27c>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	061b      	lsls	r3, r3, #24
 80032a2:	4946      	ldr	r1, [pc, #280]	; (80033bc <HAL_RCC_OscConfig+0x27c>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80032a8:	4b45      	ldr	r3, [pc, #276]	; (80033c0 <HAL_RCC_OscConfig+0x280>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7fd fda5 	bl	8000dfc <HAL_InitTick>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d043      	beq.n	8003340 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e251      	b.n	8003760 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d023      	beq.n	800330c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032c4:	4b3d      	ldr	r3, [pc, #244]	; (80033bc <HAL_RCC_OscConfig+0x27c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a3c      	ldr	r2, [pc, #240]	; (80033bc <HAL_RCC_OscConfig+0x27c>)
 80032ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d0:	f7fe fa0e 	bl	80016f0 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032d8:	f7fe fa0a 	bl	80016f0 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e23a      	b.n	8003760 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032ea:	4b34      	ldr	r3, [pc, #208]	; (80033bc <HAL_RCC_OscConfig+0x27c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0f0      	beq.n	80032d8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f6:	4b31      	ldr	r3, [pc, #196]	; (80033bc <HAL_RCC_OscConfig+0x27c>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	061b      	lsls	r3, r3, #24
 8003304:	492d      	ldr	r1, [pc, #180]	; (80033bc <HAL_RCC_OscConfig+0x27c>)
 8003306:	4313      	orrs	r3, r2
 8003308:	604b      	str	r3, [r1, #4]
 800330a:	e01a      	b.n	8003342 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800330c:	4b2b      	ldr	r3, [pc, #172]	; (80033bc <HAL_RCC_OscConfig+0x27c>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a2a      	ldr	r2, [pc, #168]	; (80033bc <HAL_RCC_OscConfig+0x27c>)
 8003312:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003318:	f7fe f9ea 	bl	80016f0 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003320:	f7fe f9e6 	bl	80016f0 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e216      	b.n	8003760 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003332:	4b22      	ldr	r3, [pc, #136]	; (80033bc <HAL_RCC_OscConfig+0x27c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f0      	bne.n	8003320 <HAL_RCC_OscConfig+0x1e0>
 800333e:	e000      	b.n	8003342 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003340:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d041      	beq.n	80033d2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d01c      	beq.n	8003390 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003356:	4b19      	ldr	r3, [pc, #100]	; (80033bc <HAL_RCC_OscConfig+0x27c>)
 8003358:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800335c:	4a17      	ldr	r2, [pc, #92]	; (80033bc <HAL_RCC_OscConfig+0x27c>)
 800335e:	f043 0301 	orr.w	r3, r3, #1
 8003362:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003366:	f7fe f9c3 	bl	80016f0 <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800336e:	f7fe f9bf 	bl	80016f0 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e1ef      	b.n	8003760 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003380:	4b0e      	ldr	r3, [pc, #56]	; (80033bc <HAL_RCC_OscConfig+0x27c>)
 8003382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d0ef      	beq.n	800336e <HAL_RCC_OscConfig+0x22e>
 800338e:	e020      	b.n	80033d2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003390:	4b0a      	ldr	r3, [pc, #40]	; (80033bc <HAL_RCC_OscConfig+0x27c>)
 8003392:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003396:	4a09      	ldr	r2, [pc, #36]	; (80033bc <HAL_RCC_OscConfig+0x27c>)
 8003398:	f023 0301 	bic.w	r3, r3, #1
 800339c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a0:	f7fe f9a6 	bl	80016f0 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033a6:	e00d      	b.n	80033c4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033a8:	f7fe f9a2 	bl	80016f0 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d906      	bls.n	80033c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e1d2      	b.n	8003760 <HAL_RCC_OscConfig+0x620>
 80033ba:	bf00      	nop
 80033bc:	40021000 	.word	0x40021000
 80033c0:	2000007c 	.word	0x2000007c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033c4:	4b8c      	ldr	r3, [pc, #560]	; (80035f8 <HAL_RCC_OscConfig+0x4b8>)
 80033c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1ea      	bne.n	80033a8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0304 	and.w	r3, r3, #4
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 80a6 	beq.w	800352c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033e0:	2300      	movs	r3, #0
 80033e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033e4:	4b84      	ldr	r3, [pc, #528]	; (80035f8 <HAL_RCC_OscConfig+0x4b8>)
 80033e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d101      	bne.n	80033f4 <HAL_RCC_OscConfig+0x2b4>
 80033f0:	2301      	movs	r3, #1
 80033f2:	e000      	b.n	80033f6 <HAL_RCC_OscConfig+0x2b6>
 80033f4:	2300      	movs	r3, #0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00d      	beq.n	8003416 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033fa:	4b7f      	ldr	r3, [pc, #508]	; (80035f8 <HAL_RCC_OscConfig+0x4b8>)
 80033fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fe:	4a7e      	ldr	r2, [pc, #504]	; (80035f8 <HAL_RCC_OscConfig+0x4b8>)
 8003400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003404:	6593      	str	r3, [r2, #88]	; 0x58
 8003406:	4b7c      	ldr	r3, [pc, #496]	; (80035f8 <HAL_RCC_OscConfig+0x4b8>)
 8003408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003412:	2301      	movs	r3, #1
 8003414:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003416:	4b79      	ldr	r3, [pc, #484]	; (80035fc <HAL_RCC_OscConfig+0x4bc>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341e:	2b00      	cmp	r3, #0
 8003420:	d118      	bne.n	8003454 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003422:	4b76      	ldr	r3, [pc, #472]	; (80035fc <HAL_RCC_OscConfig+0x4bc>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a75      	ldr	r2, [pc, #468]	; (80035fc <HAL_RCC_OscConfig+0x4bc>)
 8003428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800342c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800342e:	f7fe f95f 	bl	80016f0 <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003434:	e008      	b.n	8003448 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003436:	f7fe f95b 	bl	80016f0 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e18b      	b.n	8003760 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003448:	4b6c      	ldr	r3, [pc, #432]	; (80035fc <HAL_RCC_OscConfig+0x4bc>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0f0      	beq.n	8003436 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d108      	bne.n	800346e <HAL_RCC_OscConfig+0x32e>
 800345c:	4b66      	ldr	r3, [pc, #408]	; (80035f8 <HAL_RCC_OscConfig+0x4b8>)
 800345e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003462:	4a65      	ldr	r2, [pc, #404]	; (80035f8 <HAL_RCC_OscConfig+0x4b8>)
 8003464:	f043 0301 	orr.w	r3, r3, #1
 8003468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800346c:	e024      	b.n	80034b8 <HAL_RCC_OscConfig+0x378>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	2b05      	cmp	r3, #5
 8003474:	d110      	bne.n	8003498 <HAL_RCC_OscConfig+0x358>
 8003476:	4b60      	ldr	r3, [pc, #384]	; (80035f8 <HAL_RCC_OscConfig+0x4b8>)
 8003478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347c:	4a5e      	ldr	r2, [pc, #376]	; (80035f8 <HAL_RCC_OscConfig+0x4b8>)
 800347e:	f043 0304 	orr.w	r3, r3, #4
 8003482:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003486:	4b5c      	ldr	r3, [pc, #368]	; (80035f8 <HAL_RCC_OscConfig+0x4b8>)
 8003488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348c:	4a5a      	ldr	r2, [pc, #360]	; (80035f8 <HAL_RCC_OscConfig+0x4b8>)
 800348e:	f043 0301 	orr.w	r3, r3, #1
 8003492:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003496:	e00f      	b.n	80034b8 <HAL_RCC_OscConfig+0x378>
 8003498:	4b57      	ldr	r3, [pc, #348]	; (80035f8 <HAL_RCC_OscConfig+0x4b8>)
 800349a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349e:	4a56      	ldr	r2, [pc, #344]	; (80035f8 <HAL_RCC_OscConfig+0x4b8>)
 80034a0:	f023 0301 	bic.w	r3, r3, #1
 80034a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034a8:	4b53      	ldr	r3, [pc, #332]	; (80035f8 <HAL_RCC_OscConfig+0x4b8>)
 80034aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ae:	4a52      	ldr	r2, [pc, #328]	; (80035f8 <HAL_RCC_OscConfig+0x4b8>)
 80034b0:	f023 0304 	bic.w	r3, r3, #4
 80034b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d016      	beq.n	80034ee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c0:	f7fe f916 	bl	80016f0 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034c6:	e00a      	b.n	80034de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034c8:	f7fe f912 	bl	80016f0 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e140      	b.n	8003760 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034de:	4b46      	ldr	r3, [pc, #280]	; (80035f8 <HAL_RCC_OscConfig+0x4b8>)
 80034e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0ed      	beq.n	80034c8 <HAL_RCC_OscConfig+0x388>
 80034ec:	e015      	b.n	800351a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ee:	f7fe f8ff 	bl	80016f0 <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034f4:	e00a      	b.n	800350c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034f6:	f7fe f8fb 	bl	80016f0 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	f241 3288 	movw	r2, #5000	; 0x1388
 8003504:	4293      	cmp	r3, r2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e129      	b.n	8003760 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800350c:	4b3a      	ldr	r3, [pc, #232]	; (80035f8 <HAL_RCC_OscConfig+0x4b8>)
 800350e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1ed      	bne.n	80034f6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800351a:	7ffb      	ldrb	r3, [r7, #31]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d105      	bne.n	800352c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003520:	4b35      	ldr	r3, [pc, #212]	; (80035f8 <HAL_RCC_OscConfig+0x4b8>)
 8003522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003524:	4a34      	ldr	r2, [pc, #208]	; (80035f8 <HAL_RCC_OscConfig+0x4b8>)
 8003526:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800352a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0320 	and.w	r3, r3, #32
 8003534:	2b00      	cmp	r3, #0
 8003536:	d03c      	beq.n	80035b2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d01c      	beq.n	800357a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003540:	4b2d      	ldr	r3, [pc, #180]	; (80035f8 <HAL_RCC_OscConfig+0x4b8>)
 8003542:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003546:	4a2c      	ldr	r2, [pc, #176]	; (80035f8 <HAL_RCC_OscConfig+0x4b8>)
 8003548:	f043 0301 	orr.w	r3, r3, #1
 800354c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003550:	f7fe f8ce 	bl	80016f0 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003558:	f7fe f8ca 	bl	80016f0 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e0fa      	b.n	8003760 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800356a:	4b23      	ldr	r3, [pc, #140]	; (80035f8 <HAL_RCC_OscConfig+0x4b8>)
 800356c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0ef      	beq.n	8003558 <HAL_RCC_OscConfig+0x418>
 8003578:	e01b      	b.n	80035b2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800357a:	4b1f      	ldr	r3, [pc, #124]	; (80035f8 <HAL_RCC_OscConfig+0x4b8>)
 800357c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003580:	4a1d      	ldr	r2, [pc, #116]	; (80035f8 <HAL_RCC_OscConfig+0x4b8>)
 8003582:	f023 0301 	bic.w	r3, r3, #1
 8003586:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800358a:	f7fe f8b1 	bl	80016f0 <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003592:	f7fe f8ad 	bl	80016f0 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e0dd      	b.n	8003760 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035a4:	4b14      	ldr	r3, [pc, #80]	; (80035f8 <HAL_RCC_OscConfig+0x4b8>)
 80035a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1ef      	bne.n	8003592 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 80d1 	beq.w	800375e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035bc:	4b0e      	ldr	r3, [pc, #56]	; (80035f8 <HAL_RCC_OscConfig+0x4b8>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f003 030c 	and.w	r3, r3, #12
 80035c4:	2b0c      	cmp	r3, #12
 80035c6:	f000 808b 	beq.w	80036e0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d15e      	bne.n	8003690 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d2:	4b09      	ldr	r3, [pc, #36]	; (80035f8 <HAL_RCC_OscConfig+0x4b8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a08      	ldr	r2, [pc, #32]	; (80035f8 <HAL_RCC_OscConfig+0x4b8>)
 80035d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035de:	f7fe f887 	bl	80016f0 <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035e4:	e00c      	b.n	8003600 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e6:	f7fe f883 	bl	80016f0 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d905      	bls.n	8003600 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e0b3      	b.n	8003760 <HAL_RCC_OscConfig+0x620>
 80035f8:	40021000 	.word	0x40021000
 80035fc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003600:	4b59      	ldr	r3, [pc, #356]	; (8003768 <HAL_RCC_OscConfig+0x628>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1ec      	bne.n	80035e6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800360c:	4b56      	ldr	r3, [pc, #344]	; (8003768 <HAL_RCC_OscConfig+0x628>)
 800360e:	68da      	ldr	r2, [r3, #12]
 8003610:	4b56      	ldr	r3, [pc, #344]	; (800376c <HAL_RCC_OscConfig+0x62c>)
 8003612:	4013      	ands	r3, r2
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6a11      	ldr	r1, [r2, #32]
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800361c:	3a01      	subs	r2, #1
 800361e:	0112      	lsls	r2, r2, #4
 8003620:	4311      	orrs	r1, r2
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003626:	0212      	lsls	r2, r2, #8
 8003628:	4311      	orrs	r1, r2
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800362e:	0852      	lsrs	r2, r2, #1
 8003630:	3a01      	subs	r2, #1
 8003632:	0552      	lsls	r2, r2, #21
 8003634:	4311      	orrs	r1, r2
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800363a:	0852      	lsrs	r2, r2, #1
 800363c:	3a01      	subs	r2, #1
 800363e:	0652      	lsls	r2, r2, #25
 8003640:	4311      	orrs	r1, r2
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003646:	06d2      	lsls	r2, r2, #27
 8003648:	430a      	orrs	r2, r1
 800364a:	4947      	ldr	r1, [pc, #284]	; (8003768 <HAL_RCC_OscConfig+0x628>)
 800364c:	4313      	orrs	r3, r2
 800364e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003650:	4b45      	ldr	r3, [pc, #276]	; (8003768 <HAL_RCC_OscConfig+0x628>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a44      	ldr	r2, [pc, #272]	; (8003768 <HAL_RCC_OscConfig+0x628>)
 8003656:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800365a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800365c:	4b42      	ldr	r3, [pc, #264]	; (8003768 <HAL_RCC_OscConfig+0x628>)
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	4a41      	ldr	r2, [pc, #260]	; (8003768 <HAL_RCC_OscConfig+0x628>)
 8003662:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003666:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003668:	f7fe f842 	bl	80016f0 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003670:	f7fe f83e 	bl	80016f0 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e06e      	b.n	8003760 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003682:	4b39      	ldr	r3, [pc, #228]	; (8003768 <HAL_RCC_OscConfig+0x628>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0f0      	beq.n	8003670 <HAL_RCC_OscConfig+0x530>
 800368e:	e066      	b.n	800375e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003690:	4b35      	ldr	r3, [pc, #212]	; (8003768 <HAL_RCC_OscConfig+0x628>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a34      	ldr	r2, [pc, #208]	; (8003768 <HAL_RCC_OscConfig+0x628>)
 8003696:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800369a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800369c:	4b32      	ldr	r3, [pc, #200]	; (8003768 <HAL_RCC_OscConfig+0x628>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	4a31      	ldr	r2, [pc, #196]	; (8003768 <HAL_RCC_OscConfig+0x628>)
 80036a2:	f023 0303 	bic.w	r3, r3, #3
 80036a6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80036a8:	4b2f      	ldr	r3, [pc, #188]	; (8003768 <HAL_RCC_OscConfig+0x628>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	4a2e      	ldr	r2, [pc, #184]	; (8003768 <HAL_RCC_OscConfig+0x628>)
 80036ae:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80036b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b8:	f7fe f81a 	bl	80016f0 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c0:	f7fe f816 	bl	80016f0 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e046      	b.n	8003760 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036d2:	4b25      	ldr	r3, [pc, #148]	; (8003768 <HAL_RCC_OscConfig+0x628>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1f0      	bne.n	80036c0 <HAL_RCC_OscConfig+0x580>
 80036de:	e03e      	b.n	800375e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d101      	bne.n	80036ec <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e039      	b.n	8003760 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80036ec:	4b1e      	ldr	r3, [pc, #120]	; (8003768 <HAL_RCC_OscConfig+0x628>)
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f003 0203 	and.w	r2, r3, #3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d12c      	bne.n	800375a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	3b01      	subs	r3, #1
 800370c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800370e:	429a      	cmp	r2, r3
 8003710:	d123      	bne.n	800375a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800371e:	429a      	cmp	r2, r3
 8003720:	d11b      	bne.n	800375a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800372e:	429a      	cmp	r2, r3
 8003730:	d113      	bne.n	800375a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373c:	085b      	lsrs	r3, r3, #1
 800373e:	3b01      	subs	r3, #1
 8003740:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003742:	429a      	cmp	r2, r3
 8003744:	d109      	bne.n	800375a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003750:	085b      	lsrs	r3, r3, #1
 8003752:	3b01      	subs	r3, #1
 8003754:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003756:	429a      	cmp	r2, r3
 8003758:	d001      	beq.n	800375e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e000      	b.n	8003760 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3720      	adds	r7, #32
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	40021000 	.word	0x40021000
 800376c:	019f800c 	.word	0x019f800c

08003770 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800377a:	2300      	movs	r3, #0
 800377c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e11e      	b.n	80039c6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003788:	4b91      	ldr	r3, [pc, #580]	; (80039d0 <HAL_RCC_ClockConfig+0x260>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 030f 	and.w	r3, r3, #15
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	429a      	cmp	r2, r3
 8003794:	d910      	bls.n	80037b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003796:	4b8e      	ldr	r3, [pc, #568]	; (80039d0 <HAL_RCC_ClockConfig+0x260>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f023 020f 	bic.w	r2, r3, #15
 800379e:	498c      	ldr	r1, [pc, #560]	; (80039d0 <HAL_RCC_ClockConfig+0x260>)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a6:	4b8a      	ldr	r3, [pc, #552]	; (80039d0 <HAL_RCC_ClockConfig+0x260>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d001      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e106      	b.n	80039c6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d073      	beq.n	80038ac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2b03      	cmp	r3, #3
 80037ca:	d129      	bne.n	8003820 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037cc:	4b81      	ldr	r3, [pc, #516]	; (80039d4 <HAL_RCC_ClockConfig+0x264>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e0f4      	b.n	80039c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80037dc:	f000 f9d0 	bl	8003b80 <RCC_GetSysClockFreqFromPLLSource>
 80037e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	4a7c      	ldr	r2, [pc, #496]	; (80039d8 <HAL_RCC_ClockConfig+0x268>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d93f      	bls.n	800386a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80037ea:	4b7a      	ldr	r3, [pc, #488]	; (80039d4 <HAL_RCC_ClockConfig+0x264>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d009      	beq.n	800380a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d033      	beq.n	800386a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003806:	2b00      	cmp	r3, #0
 8003808:	d12f      	bne.n	800386a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800380a:	4b72      	ldr	r3, [pc, #456]	; (80039d4 <HAL_RCC_ClockConfig+0x264>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003812:	4a70      	ldr	r2, [pc, #448]	; (80039d4 <HAL_RCC_ClockConfig+0x264>)
 8003814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003818:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800381a:	2380      	movs	r3, #128	; 0x80
 800381c:	617b      	str	r3, [r7, #20]
 800381e:	e024      	b.n	800386a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	2b02      	cmp	r3, #2
 8003826:	d107      	bne.n	8003838 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003828:	4b6a      	ldr	r3, [pc, #424]	; (80039d4 <HAL_RCC_ClockConfig+0x264>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d109      	bne.n	8003848 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e0c6      	b.n	80039c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003838:	4b66      	ldr	r3, [pc, #408]	; (80039d4 <HAL_RCC_ClockConfig+0x264>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e0be      	b.n	80039c6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003848:	f000 f8ce 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 800384c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	4a61      	ldr	r2, [pc, #388]	; (80039d8 <HAL_RCC_ClockConfig+0x268>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d909      	bls.n	800386a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003856:	4b5f      	ldr	r3, [pc, #380]	; (80039d4 <HAL_RCC_ClockConfig+0x264>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800385e:	4a5d      	ldr	r2, [pc, #372]	; (80039d4 <HAL_RCC_ClockConfig+0x264>)
 8003860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003864:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003866:	2380      	movs	r3, #128	; 0x80
 8003868:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800386a:	4b5a      	ldr	r3, [pc, #360]	; (80039d4 <HAL_RCC_ClockConfig+0x264>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f023 0203 	bic.w	r2, r3, #3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	4957      	ldr	r1, [pc, #348]	; (80039d4 <HAL_RCC_ClockConfig+0x264>)
 8003878:	4313      	orrs	r3, r2
 800387a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800387c:	f7fd ff38 	bl	80016f0 <HAL_GetTick>
 8003880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003882:	e00a      	b.n	800389a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003884:	f7fd ff34 	bl	80016f0 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003892:	4293      	cmp	r3, r2
 8003894:	d901      	bls.n	800389a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e095      	b.n	80039c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389a:	4b4e      	ldr	r3, [pc, #312]	; (80039d4 <HAL_RCC_ClockConfig+0x264>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 020c 	and.w	r2, r3, #12
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d1eb      	bne.n	8003884 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d023      	beq.n	8003900 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038c4:	4b43      	ldr	r3, [pc, #268]	; (80039d4 <HAL_RCC_ClockConfig+0x264>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	4a42      	ldr	r2, [pc, #264]	; (80039d4 <HAL_RCC_ClockConfig+0x264>)
 80038ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038ce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0308 	and.w	r3, r3, #8
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d007      	beq.n	80038ec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80038dc:	4b3d      	ldr	r3, [pc, #244]	; (80039d4 <HAL_RCC_ClockConfig+0x264>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80038e4:	4a3b      	ldr	r2, [pc, #236]	; (80039d4 <HAL_RCC_ClockConfig+0x264>)
 80038e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ec:	4b39      	ldr	r3, [pc, #228]	; (80039d4 <HAL_RCC_ClockConfig+0x264>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	4936      	ldr	r1, [pc, #216]	; (80039d4 <HAL_RCC_ClockConfig+0x264>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	608b      	str	r3, [r1, #8]
 80038fe:	e008      	b.n	8003912 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	2b80      	cmp	r3, #128	; 0x80
 8003904:	d105      	bne.n	8003912 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003906:	4b33      	ldr	r3, [pc, #204]	; (80039d4 <HAL_RCC_ClockConfig+0x264>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	4a32      	ldr	r2, [pc, #200]	; (80039d4 <HAL_RCC_ClockConfig+0x264>)
 800390c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003910:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003912:	4b2f      	ldr	r3, [pc, #188]	; (80039d0 <HAL_RCC_ClockConfig+0x260>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	429a      	cmp	r2, r3
 800391e:	d21d      	bcs.n	800395c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003920:	4b2b      	ldr	r3, [pc, #172]	; (80039d0 <HAL_RCC_ClockConfig+0x260>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f023 020f 	bic.w	r2, r3, #15
 8003928:	4929      	ldr	r1, [pc, #164]	; (80039d0 <HAL_RCC_ClockConfig+0x260>)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	4313      	orrs	r3, r2
 800392e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003930:	f7fd fede 	bl	80016f0 <HAL_GetTick>
 8003934:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003936:	e00a      	b.n	800394e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003938:	f7fd feda 	bl	80016f0 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	f241 3288 	movw	r2, #5000	; 0x1388
 8003946:	4293      	cmp	r3, r2
 8003948:	d901      	bls.n	800394e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e03b      	b.n	80039c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800394e:	4b20      	ldr	r3, [pc, #128]	; (80039d0 <HAL_RCC_ClockConfig+0x260>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 030f 	and.w	r3, r3, #15
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	429a      	cmp	r2, r3
 800395a:	d1ed      	bne.n	8003938 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	d008      	beq.n	800397a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003968:	4b1a      	ldr	r3, [pc, #104]	; (80039d4 <HAL_RCC_ClockConfig+0x264>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	4917      	ldr	r1, [pc, #92]	; (80039d4 <HAL_RCC_ClockConfig+0x264>)
 8003976:	4313      	orrs	r3, r2
 8003978:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b00      	cmp	r3, #0
 8003984:	d009      	beq.n	800399a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003986:	4b13      	ldr	r3, [pc, #76]	; (80039d4 <HAL_RCC_ClockConfig+0x264>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	490f      	ldr	r1, [pc, #60]	; (80039d4 <HAL_RCC_ClockConfig+0x264>)
 8003996:	4313      	orrs	r3, r2
 8003998:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800399a:	f000 f825 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 800399e:	4602      	mov	r2, r0
 80039a0:	4b0c      	ldr	r3, [pc, #48]	; (80039d4 <HAL_RCC_ClockConfig+0x264>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	091b      	lsrs	r3, r3, #4
 80039a6:	f003 030f 	and.w	r3, r3, #15
 80039aa:	490c      	ldr	r1, [pc, #48]	; (80039dc <HAL_RCC_ClockConfig+0x26c>)
 80039ac:	5ccb      	ldrb	r3, [r1, r3]
 80039ae:	f003 031f 	and.w	r3, r3, #31
 80039b2:	fa22 f303 	lsr.w	r3, r2, r3
 80039b6:	4a0a      	ldr	r2, [pc, #40]	; (80039e0 <HAL_RCC_ClockConfig+0x270>)
 80039b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80039ba:	4b0a      	ldr	r3, [pc, #40]	; (80039e4 <HAL_RCC_ClockConfig+0x274>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fd fa1c 	bl	8000dfc <HAL_InitTick>
 80039c4:	4603      	mov	r3, r0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3718      	adds	r7, #24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40022000 	.word	0x40022000
 80039d4:	40021000 	.word	0x40021000
 80039d8:	04c4b400 	.word	0x04c4b400
 80039dc:	080080c0 	.word	0x080080c0
 80039e0:	20000078 	.word	0x20000078
 80039e4:	2000007c 	.word	0x2000007c

080039e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b087      	sub	sp, #28
 80039ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80039ee:	4b2c      	ldr	r3, [pc, #176]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 030c 	and.w	r3, r3, #12
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	d102      	bne.n	8003a00 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039fa:	4b2a      	ldr	r3, [pc, #168]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80039fc:	613b      	str	r3, [r7, #16]
 80039fe:	e047      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003a00:	4b27      	ldr	r3, [pc, #156]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 030c 	and.w	r3, r3, #12
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d102      	bne.n	8003a12 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a0c:	4b26      	ldr	r3, [pc, #152]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a0e:	613b      	str	r3, [r7, #16]
 8003a10:	e03e      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003a12:	4b23      	ldr	r3, [pc, #140]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 030c 	and.w	r3, r3, #12
 8003a1a:	2b0c      	cmp	r3, #12
 8003a1c:	d136      	bne.n	8003a8c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a1e:	4b20      	ldr	r3, [pc, #128]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a28:	4b1d      	ldr	r3, [pc, #116]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	091b      	lsrs	r3, r3, #4
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	3301      	adds	r3, #1
 8003a34:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2b03      	cmp	r3, #3
 8003a3a:	d10c      	bne.n	8003a56 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a3c:	4a1a      	ldr	r2, [pc, #104]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a44:	4a16      	ldr	r2, [pc, #88]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a46:	68d2      	ldr	r2, [r2, #12]
 8003a48:	0a12      	lsrs	r2, r2, #8
 8003a4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a4e:	fb02 f303 	mul.w	r3, r2, r3
 8003a52:	617b      	str	r3, [r7, #20]
      break;
 8003a54:	e00c      	b.n	8003a70 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a56:	4a13      	ldr	r2, [pc, #76]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5e:	4a10      	ldr	r2, [pc, #64]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a60:	68d2      	ldr	r2, [r2, #12]
 8003a62:	0a12      	lsrs	r2, r2, #8
 8003a64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a68:	fb02 f303 	mul.w	r3, r2, r3
 8003a6c:	617b      	str	r3, [r7, #20]
      break;
 8003a6e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a70:	4b0b      	ldr	r3, [pc, #44]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	0e5b      	lsrs	r3, r3, #25
 8003a76:	f003 0303 	and.w	r3, r3, #3
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a88:	613b      	str	r3, [r7, #16]
 8003a8a:	e001      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003a90:	693b      	ldr	r3, [r7, #16]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	371c      	adds	r7, #28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	00f42400 	.word	0x00f42400
 8003aa8:	016e3600 	.word	0x016e3600

08003aac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ab0:	4b03      	ldr	r3, [pc, #12]	; (8003ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	20000078 	.word	0x20000078

08003ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ac8:	f7ff fff0 	bl	8003aac <HAL_RCC_GetHCLKFreq>
 8003acc:	4602      	mov	r2, r0
 8003ace:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	0a1b      	lsrs	r3, r3, #8
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	4904      	ldr	r1, [pc, #16]	; (8003aec <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ada:	5ccb      	ldrb	r3, [r1, r3]
 8003adc:	f003 031f 	and.w	r3, r3, #31
 8003ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	080080d0 	.word	0x080080d0

08003af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003af4:	f7ff ffda 	bl	8003aac <HAL_RCC_GetHCLKFreq>
 8003af8:	4602      	mov	r2, r0
 8003afa:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	0adb      	lsrs	r3, r3, #11
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	4904      	ldr	r1, [pc, #16]	; (8003b18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b06:	5ccb      	ldrb	r3, [r1, r3]
 8003b08:	f003 031f 	and.w	r3, r3, #31
 8003b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40021000 	.word	0x40021000
 8003b18:	080080d0 	.word	0x080080d0

08003b1c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	220f      	movs	r2, #15
 8003b2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003b2c:	4b12      	ldr	r3, [pc, #72]	; (8003b78 <HAL_RCC_GetClockConfig+0x5c>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 0203 	and.w	r2, r3, #3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003b38:	4b0f      	ldr	r3, [pc, #60]	; (8003b78 <HAL_RCC_GetClockConfig+0x5c>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003b44:	4b0c      	ldr	r3, [pc, #48]	; (8003b78 <HAL_RCC_GetClockConfig+0x5c>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003b50:	4b09      	ldr	r3, [pc, #36]	; (8003b78 <HAL_RCC_GetClockConfig+0x5c>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	08db      	lsrs	r3, r3, #3
 8003b56:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003b5e:	4b07      	ldr	r3, [pc, #28]	; (8003b7c <HAL_RCC_GetClockConfig+0x60>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 020f 	and.w	r2, r3, #15
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	601a      	str	r2, [r3, #0]
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	40022000 	.word	0x40022000

08003b80 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b087      	sub	sp, #28
 8003b84:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b86:	4b1e      	ldr	r3, [pc, #120]	; (8003c00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b90:	4b1b      	ldr	r3, [pc, #108]	; (8003c00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	091b      	lsrs	r3, r3, #4
 8003b96:	f003 030f 	and.w	r3, r3, #15
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	2b03      	cmp	r3, #3
 8003ba2:	d10c      	bne.n	8003bbe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ba4:	4a17      	ldr	r2, [pc, #92]	; (8003c04 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bac:	4a14      	ldr	r2, [pc, #80]	; (8003c00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003bae:	68d2      	ldr	r2, [r2, #12]
 8003bb0:	0a12      	lsrs	r2, r2, #8
 8003bb2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003bb6:	fb02 f303 	mul.w	r3, r2, r3
 8003bba:	617b      	str	r3, [r7, #20]
    break;
 8003bbc:	e00c      	b.n	8003bd8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bbe:	4a12      	ldr	r2, [pc, #72]	; (8003c08 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc6:	4a0e      	ldr	r2, [pc, #56]	; (8003c00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003bc8:	68d2      	ldr	r2, [r2, #12]
 8003bca:	0a12      	lsrs	r2, r2, #8
 8003bcc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003bd0:	fb02 f303 	mul.w	r3, r2, r3
 8003bd4:	617b      	str	r3, [r7, #20]
    break;
 8003bd6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bd8:	4b09      	ldr	r3, [pc, #36]	; (8003c00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	0e5b      	lsrs	r3, r3, #25
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	3301      	adds	r3, #1
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003bf2:	687b      	ldr	r3, [r7, #4]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	371c      	adds	r7, #28
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	40021000 	.word	0x40021000
 8003c04:	016e3600 	.word	0x016e3600
 8003c08:	00f42400 	.word	0x00f42400

08003c0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c14:	2300      	movs	r3, #0
 8003c16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c18:	2300      	movs	r3, #0
 8003c1a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 8098 	beq.w	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c2e:	4b43      	ldr	r3, [pc, #268]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10d      	bne.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c3a:	4b40      	ldr	r3, [pc, #256]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c3e:	4a3f      	ldr	r2, [pc, #252]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c44:	6593      	str	r3, [r2, #88]	; 0x58
 8003c46:	4b3d      	ldr	r3, [pc, #244]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c4e:	60bb      	str	r3, [r7, #8]
 8003c50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c52:	2301      	movs	r3, #1
 8003c54:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c56:	4b3a      	ldr	r3, [pc, #232]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a39      	ldr	r2, [pc, #228]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c60:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c62:	f7fd fd45 	bl	80016f0 <HAL_GetTick>
 8003c66:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c68:	e009      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c6a:	f7fd fd41 	bl	80016f0 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d902      	bls.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	74fb      	strb	r3, [r7, #19]
        break;
 8003c7c:	e005      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c7e:	4b30      	ldr	r3, [pc, #192]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0ef      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003c8a:	7cfb      	ldrb	r3, [r7, #19]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d159      	bne.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c90:	4b2a      	ldr	r3, [pc, #168]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c9a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d01e      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d019      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cac:	4b23      	ldr	r3, [pc, #140]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cb6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cb8:	4b20      	ldr	r3, [pc, #128]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cbe:	4a1f      	ldr	r2, [pc, #124]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cc8:	4b1c      	ldr	r3, [pc, #112]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cce:	4a1b      	ldr	r2, [pc, #108]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003cd8:	4a18      	ldr	r2, [pc, #96]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d016      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cea:	f7fd fd01 	bl	80016f0 <HAL_GetTick>
 8003cee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cf0:	e00b      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf2:	f7fd fcfd 	bl	80016f0 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d902      	bls.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	74fb      	strb	r3, [r7, #19]
            break;
 8003d08:	e006      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d0a:	4b0c      	ldr	r3, [pc, #48]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0ec      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003d18:	7cfb      	ldrb	r3, [r7, #19]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10b      	bne.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d1e:	4b07      	ldr	r3, [pc, #28]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d2c:	4903      	ldr	r1, [pc, #12]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d34:	e008      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d36:	7cfb      	ldrb	r3, [r7, #19]
 8003d38:	74bb      	strb	r3, [r7, #18]
 8003d3a:	e005      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d44:	7cfb      	ldrb	r3, [r7, #19]
 8003d46:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d48:	7c7b      	ldrb	r3, [r7, #17]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d105      	bne.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d4e:	4ba7      	ldr	r3, [pc, #668]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d52:	4aa6      	ldr	r2, [pc, #664]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d58:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00a      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d66:	4ba1      	ldr	r3, [pc, #644]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6c:	f023 0203 	bic.w	r2, r3, #3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	499d      	ldr	r1, [pc, #628]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00a      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d88:	4b98      	ldr	r3, [pc, #608]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8e:	f023 020c 	bic.w	r2, r3, #12
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	4995      	ldr	r1, [pc, #596]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0304 	and.w	r3, r3, #4
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00a      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003daa:	4b90      	ldr	r3, [pc, #576]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	498c      	ldr	r1, [pc, #560]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0308 	and.w	r3, r3, #8
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00a      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003dcc:	4b87      	ldr	r3, [pc, #540]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	4984      	ldr	r1, [pc, #528]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0310 	and.w	r3, r3, #16
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00a      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003dee:	4b7f      	ldr	r3, [pc, #508]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	497b      	ldr	r1, [pc, #492]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0320 	and.w	r3, r3, #32
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00a      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e10:	4b76      	ldr	r3, [pc, #472]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	4973      	ldr	r1, [pc, #460]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00a      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e32:	4b6e      	ldr	r3, [pc, #440]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e38:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	69db      	ldr	r3, [r3, #28]
 8003e40:	496a      	ldr	r1, [pc, #424]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00a      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e54:	4b65      	ldr	r3, [pc, #404]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	4962      	ldr	r1, [pc, #392]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e76:	4b5d      	ldr	r3, [pc, #372]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e84:	4959      	ldr	r1, [pc, #356]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00a      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e98:	4b54      	ldr	r3, [pc, #336]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e9e:	f023 0203 	bic.w	r2, r3, #3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea6:	4951      	ldr	r1, [pc, #324]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00a      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eba:	4b4c      	ldr	r3, [pc, #304]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec8:	4948      	ldr	r1, [pc, #288]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d015      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003edc:	4b43      	ldr	r3, [pc, #268]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eea:	4940      	ldr	r1, [pc, #256]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003efa:	d105      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003efc:	4b3b      	ldr	r3, [pc, #236]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	4a3a      	ldr	r2, [pc, #232]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f06:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d015      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f14:	4b35      	ldr	r3, [pc, #212]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f22:	4932      	ldr	r1, [pc, #200]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f32:	d105      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f34:	4b2d      	ldr	r3, [pc, #180]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	4a2c      	ldr	r2, [pc, #176]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f3e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d015      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f4c:	4b27      	ldr	r3, [pc, #156]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f52:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5a:	4924      	ldr	r1, [pc, #144]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f6a:	d105      	bne.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f6c:	4b1f      	ldr	r3, [pc, #124]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	4a1e      	ldr	r2, [pc, #120]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f76:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d015      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f84:	4b19      	ldr	r3, [pc, #100]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f92:	4916      	ldr	r1, [pc, #88]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fa2:	d105      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fa4:	4b11      	ldr	r3, [pc, #68]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	4a10      	ldr	r2, [pc, #64]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003faa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fae:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d019      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fbc:	4b0b      	ldr	r3, [pc, #44]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	4908      	ldr	r1, [pc, #32]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fda:	d109      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fdc:	4b03      	ldr	r3, [pc, #12]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	4a02      	ldr	r2, [pc, #8]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fe2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fe6:	60d3      	str	r3, [r2, #12]
 8003fe8:	e002      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003fea:	bf00      	nop
 8003fec:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d015      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ffc:	4b29      	ldr	r3, [pc, #164]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004002:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400a:	4926      	ldr	r1, [pc, #152]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800400c:	4313      	orrs	r3, r2
 800400e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004016:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800401a:	d105      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800401c:	4b21      	ldr	r3, [pc, #132]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	4a20      	ldr	r2, [pc, #128]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004026:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d015      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004034:	4b1b      	ldr	r3, [pc, #108]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004042:	4918      	ldr	r1, [pc, #96]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004044:	4313      	orrs	r3, r2
 8004046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800404e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004052:	d105      	bne.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004054:	4b13      	ldr	r3, [pc, #76]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	4a12      	ldr	r2, [pc, #72]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800405a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800405e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d015      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800406c:	4b0d      	ldr	r3, [pc, #52]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800406e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004072:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800407a:	490a      	ldr	r1, [pc, #40]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800407c:	4313      	orrs	r3, r2
 800407e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004086:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800408a:	d105      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800408c:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	4a04      	ldr	r2, [pc, #16]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004092:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004096:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004098:	7cbb      	ldrb	r3, [r7, #18]
}
 800409a:	4618      	mov	r0, r3
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	40021000 	.word	0x40021000

080040a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e049      	b.n	800414e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d106      	bne.n	80040d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f841 	bl	8004156 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3304      	adds	r3, #4
 80040e4:	4619      	mov	r1, r3
 80040e6:	4610      	mov	r0, r2
 80040e8:	f000 fbca 	bl	8004880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
	...

0800416c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b01      	cmp	r3, #1
 800417e:	d001      	beq.n	8004184 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e054      	b.n	800422e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2202      	movs	r2, #2
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68da      	ldr	r2, [r3, #12]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0201 	orr.w	r2, r2, #1
 800419a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a26      	ldr	r2, [pc, #152]	; (800423c <HAL_TIM_Base_Start_IT+0xd0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d022      	beq.n	80041ec <HAL_TIM_Base_Start_IT+0x80>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ae:	d01d      	beq.n	80041ec <HAL_TIM_Base_Start_IT+0x80>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a22      	ldr	r2, [pc, #136]	; (8004240 <HAL_TIM_Base_Start_IT+0xd4>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d018      	beq.n	80041ec <HAL_TIM_Base_Start_IT+0x80>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a21      	ldr	r2, [pc, #132]	; (8004244 <HAL_TIM_Base_Start_IT+0xd8>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d013      	beq.n	80041ec <HAL_TIM_Base_Start_IT+0x80>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a1f      	ldr	r2, [pc, #124]	; (8004248 <HAL_TIM_Base_Start_IT+0xdc>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d00e      	beq.n	80041ec <HAL_TIM_Base_Start_IT+0x80>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a1e      	ldr	r2, [pc, #120]	; (800424c <HAL_TIM_Base_Start_IT+0xe0>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d009      	beq.n	80041ec <HAL_TIM_Base_Start_IT+0x80>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a1c      	ldr	r2, [pc, #112]	; (8004250 <HAL_TIM_Base_Start_IT+0xe4>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d004      	beq.n	80041ec <HAL_TIM_Base_Start_IT+0x80>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a1b      	ldr	r2, [pc, #108]	; (8004254 <HAL_TIM_Base_Start_IT+0xe8>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d115      	bne.n	8004218 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	4b19      	ldr	r3, [pc, #100]	; (8004258 <HAL_TIM_Base_Start_IT+0xec>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2b06      	cmp	r3, #6
 80041fc:	d015      	beq.n	800422a <HAL_TIM_Base_Start_IT+0xbe>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004204:	d011      	beq.n	800422a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f042 0201 	orr.w	r2, r2, #1
 8004214:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004216:	e008      	b.n	800422a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0201 	orr.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	e000      	b.n	800422c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800422a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	40012c00 	.word	0x40012c00
 8004240:	40000400 	.word	0x40000400
 8004244:	40000800 	.word	0x40000800
 8004248:	40000c00 	.word	0x40000c00
 800424c:	40013400 	.word	0x40013400
 8004250:	40014000 	.word	0x40014000
 8004254:	40015000 	.word	0x40015000
 8004258:	00010007 	.word	0x00010007

0800425c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e049      	b.n	8004302 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d106      	bne.n	8004288 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7fc ffbe 	bl	8001204 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3304      	adds	r3, #4
 8004298:	4619      	mov	r1, r3
 800429a:	4610      	mov	r0, r2
 800429c:	f000 faf0 	bl	8004880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b082      	sub	sp, #8
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b02      	cmp	r3, #2
 800431e:	d122      	bne.n	8004366 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b02      	cmp	r3, #2
 800432c:	d11b      	bne.n	8004366 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f06f 0202 	mvn.w	r2, #2
 8004336:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	f003 0303 	and.w	r3, r3, #3
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 fa79 	bl	8004844 <HAL_TIM_IC_CaptureCallback>
 8004352:	e005      	b.n	8004360 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 fa6b 	bl	8004830 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 fa7c 	bl	8004858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b04      	cmp	r3, #4
 8004372:	d122      	bne.n	80043ba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f003 0304 	and.w	r3, r3, #4
 800437e:	2b04      	cmp	r3, #4
 8004380:	d11b      	bne.n	80043ba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f06f 0204 	mvn.w	r2, #4
 800438a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2202      	movs	r2, #2
 8004390:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 fa4f 	bl	8004844 <HAL_TIM_IC_CaptureCallback>
 80043a6:	e005      	b.n	80043b4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 fa41 	bl	8004830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 fa52 	bl	8004858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	f003 0308 	and.w	r3, r3, #8
 80043c4:	2b08      	cmp	r3, #8
 80043c6:	d122      	bne.n	800440e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b08      	cmp	r3, #8
 80043d4:	d11b      	bne.n	800440e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f06f 0208 	mvn.w	r2, #8
 80043de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2204      	movs	r2, #4
 80043e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	69db      	ldr	r3, [r3, #28]
 80043ec:	f003 0303 	and.w	r3, r3, #3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d003      	beq.n	80043fc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 fa25 	bl	8004844 <HAL_TIM_IC_CaptureCallback>
 80043fa:	e005      	b.n	8004408 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 fa17 	bl	8004830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fa28 	bl	8004858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	f003 0310 	and.w	r3, r3, #16
 8004418:	2b10      	cmp	r3, #16
 800441a:	d122      	bne.n	8004462 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	f003 0310 	and.w	r3, r3, #16
 8004426:	2b10      	cmp	r3, #16
 8004428:	d11b      	bne.n	8004462 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f06f 0210 	mvn.w	r2, #16
 8004432:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2208      	movs	r2, #8
 8004438:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004444:	2b00      	cmp	r3, #0
 8004446:	d003      	beq.n	8004450 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f9fb 	bl	8004844 <HAL_TIM_IC_CaptureCallback>
 800444e:	e005      	b.n	800445c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 f9ed 	bl	8004830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f9fe 	bl	8004858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b01      	cmp	r3, #1
 800446e:	d10e      	bne.n	800448e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b01      	cmp	r3, #1
 800447c:	d107      	bne.n	800448e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f06f 0201 	mvn.w	r2, #1
 8004486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7fc fbcd 	bl	8000c28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004498:	2b80      	cmp	r3, #128	; 0x80
 800449a:	d10e      	bne.n	80044ba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a6:	2b80      	cmp	r3, #128	; 0x80
 80044a8:	d107      	bne.n	80044ba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f001 f82b 	bl	8005510 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044c8:	d10e      	bne.n	80044e8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d4:	2b80      	cmp	r3, #128	; 0x80
 80044d6:	d107      	bne.n	80044e8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80044e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f001 f81e 	bl	8005524 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f2:	2b40      	cmp	r3, #64	; 0x40
 80044f4:	d10e      	bne.n	8004514 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004500:	2b40      	cmp	r3, #64	; 0x40
 8004502:	d107      	bne.n	8004514 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800450c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f9ac 	bl	800486c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	f003 0320 	and.w	r3, r3, #32
 800451e:	2b20      	cmp	r3, #32
 8004520:	d10e      	bne.n	8004540 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f003 0320 	and.w	r3, r3, #32
 800452c:	2b20      	cmp	r3, #32
 800452e:	d107      	bne.n	8004540 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f06f 0220 	mvn.w	r2, #32
 8004538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 ffde 	bl	80054fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800454a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800454e:	d10f      	bne.n	8004570 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800455a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800455e:	d107      	bne.n	8004570 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 ffe4 	bl	8005538 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800457a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800457e:	d10f      	bne.n	80045a0 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800458a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800458e:	d107      	bne.n	80045a0 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 ffd6 	bl	800554c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045ae:	d10f      	bne.n	80045d0 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045be:	d107      	bne.n	80045d0 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80045c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 ffc8 	bl	8005560 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045de:	d10f      	bne.n	8004600 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045ee:	d107      	bne.n	8004600 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80045f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 ffba 	bl	8005574 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004600:	bf00      	nop
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004614:	2300      	movs	r3, #0
 8004616:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800461e:	2b01      	cmp	r3, #1
 8004620:	d101      	bne.n	8004626 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004622:	2302      	movs	r3, #2
 8004624:	e0ff      	b.n	8004826 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b14      	cmp	r3, #20
 8004632:	f200 80f0 	bhi.w	8004816 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004636:	a201      	add	r2, pc, #4	; (adr r2, 800463c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463c:	08004691 	.word	0x08004691
 8004640:	08004817 	.word	0x08004817
 8004644:	08004817 	.word	0x08004817
 8004648:	08004817 	.word	0x08004817
 800464c:	080046d1 	.word	0x080046d1
 8004650:	08004817 	.word	0x08004817
 8004654:	08004817 	.word	0x08004817
 8004658:	08004817 	.word	0x08004817
 800465c:	08004713 	.word	0x08004713
 8004660:	08004817 	.word	0x08004817
 8004664:	08004817 	.word	0x08004817
 8004668:	08004817 	.word	0x08004817
 800466c:	08004753 	.word	0x08004753
 8004670:	08004817 	.word	0x08004817
 8004674:	08004817 	.word	0x08004817
 8004678:	08004817 	.word	0x08004817
 800467c:	08004795 	.word	0x08004795
 8004680:	08004817 	.word	0x08004817
 8004684:	08004817 	.word	0x08004817
 8004688:	08004817 	.word	0x08004817
 800468c:	080047d5 	.word	0x080047d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68b9      	ldr	r1, [r7, #8]
 8004696:	4618      	mov	r0, r3
 8004698:	f000 f99a 	bl	80049d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	699a      	ldr	r2, [r3, #24]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f042 0208 	orr.w	r2, r2, #8
 80046aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	699a      	ldr	r2, [r3, #24]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 0204 	bic.w	r2, r2, #4
 80046ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6999      	ldr	r1, [r3, #24]
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	691a      	ldr	r2, [r3, #16]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	619a      	str	r2, [r3, #24]
      break;
 80046ce:	e0a5      	b.n	800481c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68b9      	ldr	r1, [r7, #8]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 fa14 	bl	8004b04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	699a      	ldr	r2, [r3, #24]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	699a      	ldr	r2, [r3, #24]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6999      	ldr	r1, [r3, #24]
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	021a      	lsls	r2, r3, #8
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	430a      	orrs	r2, r1
 800470e:	619a      	str	r2, [r3, #24]
      break;
 8004710:	e084      	b.n	800481c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68b9      	ldr	r1, [r7, #8]
 8004718:	4618      	mov	r0, r3
 800471a:	f000 fa87 	bl	8004c2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	69da      	ldr	r2, [r3, #28]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f042 0208 	orr.w	r2, r2, #8
 800472c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	69da      	ldr	r2, [r3, #28]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 0204 	bic.w	r2, r2, #4
 800473c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	69d9      	ldr	r1, [r3, #28]
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	691a      	ldr	r2, [r3, #16]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	61da      	str	r2, [r3, #28]
      break;
 8004750:	e064      	b.n	800481c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68b9      	ldr	r1, [r7, #8]
 8004758:	4618      	mov	r0, r3
 800475a:	f000 faf9 	bl	8004d50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	69da      	ldr	r2, [r3, #28]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800476c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	69da      	ldr	r2, [r3, #28]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800477c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	69d9      	ldr	r1, [r3, #28]
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	021a      	lsls	r2, r3, #8
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	430a      	orrs	r2, r1
 8004790:	61da      	str	r2, [r3, #28]
      break;
 8004792:	e043      	b.n	800481c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68b9      	ldr	r1, [r7, #8]
 800479a:	4618      	mov	r0, r3
 800479c:	f000 fb6c 	bl	8004e78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f042 0208 	orr.w	r2, r2, #8
 80047ae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 0204 	bic.w	r2, r2, #4
 80047be:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	691a      	ldr	r2, [r3, #16]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80047d2:	e023      	b.n	800481c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68b9      	ldr	r1, [r7, #8]
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 fbb6 	bl	8004f4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047ee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047fe:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	021a      	lsls	r2, r3, #8
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	430a      	orrs	r2, r1
 8004812:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004814:	e002      	b.n	800481c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	75fb      	strb	r3, [r7, #23]
      break;
 800481a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004824:	7dfb      	ldrb	r3, [r7, #23]
}
 8004826:	4618      	mov	r0, r3
 8004828:	3718      	adds	r7, #24
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop

08004830 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a46      	ldr	r2, [pc, #280]	; (80049ac <TIM_Base_SetConfig+0x12c>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d017      	beq.n	80048c8 <TIM_Base_SetConfig+0x48>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800489e:	d013      	beq.n	80048c8 <TIM_Base_SetConfig+0x48>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a43      	ldr	r2, [pc, #268]	; (80049b0 <TIM_Base_SetConfig+0x130>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00f      	beq.n	80048c8 <TIM_Base_SetConfig+0x48>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a42      	ldr	r2, [pc, #264]	; (80049b4 <TIM_Base_SetConfig+0x134>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d00b      	beq.n	80048c8 <TIM_Base_SetConfig+0x48>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a41      	ldr	r2, [pc, #260]	; (80049b8 <TIM_Base_SetConfig+0x138>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d007      	beq.n	80048c8 <TIM_Base_SetConfig+0x48>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a40      	ldr	r2, [pc, #256]	; (80049bc <TIM_Base_SetConfig+0x13c>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d003      	beq.n	80048c8 <TIM_Base_SetConfig+0x48>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a3f      	ldr	r2, [pc, #252]	; (80049c0 <TIM_Base_SetConfig+0x140>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d108      	bne.n	80048da <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a33      	ldr	r2, [pc, #204]	; (80049ac <TIM_Base_SetConfig+0x12c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d023      	beq.n	800492a <TIM_Base_SetConfig+0xaa>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e8:	d01f      	beq.n	800492a <TIM_Base_SetConfig+0xaa>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a30      	ldr	r2, [pc, #192]	; (80049b0 <TIM_Base_SetConfig+0x130>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d01b      	beq.n	800492a <TIM_Base_SetConfig+0xaa>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a2f      	ldr	r2, [pc, #188]	; (80049b4 <TIM_Base_SetConfig+0x134>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d017      	beq.n	800492a <TIM_Base_SetConfig+0xaa>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a2e      	ldr	r2, [pc, #184]	; (80049b8 <TIM_Base_SetConfig+0x138>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d013      	beq.n	800492a <TIM_Base_SetConfig+0xaa>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a2d      	ldr	r2, [pc, #180]	; (80049bc <TIM_Base_SetConfig+0x13c>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d00f      	beq.n	800492a <TIM_Base_SetConfig+0xaa>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a2d      	ldr	r2, [pc, #180]	; (80049c4 <TIM_Base_SetConfig+0x144>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d00b      	beq.n	800492a <TIM_Base_SetConfig+0xaa>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a2c      	ldr	r2, [pc, #176]	; (80049c8 <TIM_Base_SetConfig+0x148>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d007      	beq.n	800492a <TIM_Base_SetConfig+0xaa>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a2b      	ldr	r2, [pc, #172]	; (80049cc <TIM_Base_SetConfig+0x14c>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d003      	beq.n	800492a <TIM_Base_SetConfig+0xaa>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a26      	ldr	r2, [pc, #152]	; (80049c0 <TIM_Base_SetConfig+0x140>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d108      	bne.n	800493c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	4313      	orrs	r3, r2
 800493a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	4313      	orrs	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a12      	ldr	r2, [pc, #72]	; (80049ac <TIM_Base_SetConfig+0x12c>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d013      	beq.n	8004990 <TIM_Base_SetConfig+0x110>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a14      	ldr	r2, [pc, #80]	; (80049bc <TIM_Base_SetConfig+0x13c>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d00f      	beq.n	8004990 <TIM_Base_SetConfig+0x110>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a14      	ldr	r2, [pc, #80]	; (80049c4 <TIM_Base_SetConfig+0x144>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d00b      	beq.n	8004990 <TIM_Base_SetConfig+0x110>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a13      	ldr	r2, [pc, #76]	; (80049c8 <TIM_Base_SetConfig+0x148>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d007      	beq.n	8004990 <TIM_Base_SetConfig+0x110>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a12      	ldr	r2, [pc, #72]	; (80049cc <TIM_Base_SetConfig+0x14c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d003      	beq.n	8004990 <TIM_Base_SetConfig+0x110>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a0d      	ldr	r2, [pc, #52]	; (80049c0 <TIM_Base_SetConfig+0x140>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d103      	bne.n	8004998 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	691a      	ldr	r2, [r3, #16]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	615a      	str	r2, [r3, #20]
}
 800499e:	bf00      	nop
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	40012c00 	.word	0x40012c00
 80049b0:	40000400 	.word	0x40000400
 80049b4:	40000800 	.word	0x40000800
 80049b8:	40000c00 	.word	0x40000c00
 80049bc:	40013400 	.word	0x40013400
 80049c0:	40015000 	.word	0x40015000
 80049c4:	40014000 	.word	0x40014000
 80049c8:	40014400 	.word	0x40014400
 80049cc:	40014800 	.word	0x40014800

080049d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	f023 0201 	bic.w	r2, r3, #1
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f023 0303 	bic.w	r3, r3, #3
 8004a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f023 0302 	bic.w	r3, r3, #2
 8004a1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a30      	ldr	r2, [pc, #192]	; (8004aec <TIM_OC1_SetConfig+0x11c>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d013      	beq.n	8004a58 <TIM_OC1_SetConfig+0x88>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a2f      	ldr	r2, [pc, #188]	; (8004af0 <TIM_OC1_SetConfig+0x120>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d00f      	beq.n	8004a58 <TIM_OC1_SetConfig+0x88>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a2e      	ldr	r2, [pc, #184]	; (8004af4 <TIM_OC1_SetConfig+0x124>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d00b      	beq.n	8004a58 <TIM_OC1_SetConfig+0x88>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a2d      	ldr	r2, [pc, #180]	; (8004af8 <TIM_OC1_SetConfig+0x128>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d007      	beq.n	8004a58 <TIM_OC1_SetConfig+0x88>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a2c      	ldr	r2, [pc, #176]	; (8004afc <TIM_OC1_SetConfig+0x12c>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d003      	beq.n	8004a58 <TIM_OC1_SetConfig+0x88>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a2b      	ldr	r2, [pc, #172]	; (8004b00 <TIM_OC1_SetConfig+0x130>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d10c      	bne.n	8004a72 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f023 0308 	bic.w	r3, r3, #8
 8004a5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f023 0304 	bic.w	r3, r3, #4
 8004a70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a1d      	ldr	r2, [pc, #116]	; (8004aec <TIM_OC1_SetConfig+0x11c>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d013      	beq.n	8004aa2 <TIM_OC1_SetConfig+0xd2>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a1c      	ldr	r2, [pc, #112]	; (8004af0 <TIM_OC1_SetConfig+0x120>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d00f      	beq.n	8004aa2 <TIM_OC1_SetConfig+0xd2>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a1b      	ldr	r2, [pc, #108]	; (8004af4 <TIM_OC1_SetConfig+0x124>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d00b      	beq.n	8004aa2 <TIM_OC1_SetConfig+0xd2>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a1a      	ldr	r2, [pc, #104]	; (8004af8 <TIM_OC1_SetConfig+0x128>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d007      	beq.n	8004aa2 <TIM_OC1_SetConfig+0xd2>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a19      	ldr	r2, [pc, #100]	; (8004afc <TIM_OC1_SetConfig+0x12c>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d003      	beq.n	8004aa2 <TIM_OC1_SetConfig+0xd2>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a18      	ldr	r2, [pc, #96]	; (8004b00 <TIM_OC1_SetConfig+0x130>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d111      	bne.n	8004ac6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004aa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	621a      	str	r2, [r3, #32]
}
 8004ae0:	bf00      	nop
 8004ae2:	371c      	adds	r7, #28
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	40012c00 	.word	0x40012c00
 8004af0:	40013400 	.word	0x40013400
 8004af4:	40014000 	.word	0x40014000
 8004af8:	40014400 	.word	0x40014400
 8004afc:	40014800 	.word	0x40014800
 8004b00:	40015000 	.word	0x40015000

08004b04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b087      	sub	sp, #28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	f023 0210 	bic.w	r2, r3, #16
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	021b      	lsls	r3, r3, #8
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f023 0320 	bic.w	r3, r3, #32
 8004b52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	011b      	lsls	r3, r3, #4
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a2c      	ldr	r2, [pc, #176]	; (8004c14 <TIM_OC2_SetConfig+0x110>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d007      	beq.n	8004b78 <TIM_OC2_SetConfig+0x74>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a2b      	ldr	r2, [pc, #172]	; (8004c18 <TIM_OC2_SetConfig+0x114>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d003      	beq.n	8004b78 <TIM_OC2_SetConfig+0x74>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a2a      	ldr	r2, [pc, #168]	; (8004c1c <TIM_OC2_SetConfig+0x118>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d10d      	bne.n	8004b94 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	011b      	lsls	r3, r3, #4
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a1f      	ldr	r2, [pc, #124]	; (8004c14 <TIM_OC2_SetConfig+0x110>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d013      	beq.n	8004bc4 <TIM_OC2_SetConfig+0xc0>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a1e      	ldr	r2, [pc, #120]	; (8004c18 <TIM_OC2_SetConfig+0x114>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d00f      	beq.n	8004bc4 <TIM_OC2_SetConfig+0xc0>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a1e      	ldr	r2, [pc, #120]	; (8004c20 <TIM_OC2_SetConfig+0x11c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d00b      	beq.n	8004bc4 <TIM_OC2_SetConfig+0xc0>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a1d      	ldr	r2, [pc, #116]	; (8004c24 <TIM_OC2_SetConfig+0x120>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d007      	beq.n	8004bc4 <TIM_OC2_SetConfig+0xc0>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a1c      	ldr	r2, [pc, #112]	; (8004c28 <TIM_OC2_SetConfig+0x124>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d003      	beq.n	8004bc4 <TIM_OC2_SetConfig+0xc0>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a17      	ldr	r2, [pc, #92]	; (8004c1c <TIM_OC2_SetConfig+0x118>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d113      	bne.n	8004bec <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	621a      	str	r2, [r3, #32]
}
 8004c06:	bf00      	nop
 8004c08:	371c      	adds	r7, #28
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	40012c00 	.word	0x40012c00
 8004c18:	40013400 	.word	0x40013400
 8004c1c:	40015000 	.word	0x40015000
 8004c20:	40014000 	.word	0x40014000
 8004c24:	40014400 	.word	0x40014400
 8004c28:	40014800 	.word	0x40014800

08004c2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b087      	sub	sp, #28
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f023 0303 	bic.w	r3, r3, #3
 8004c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	021b      	lsls	r3, r3, #8
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a2b      	ldr	r2, [pc, #172]	; (8004d38 <TIM_OC3_SetConfig+0x10c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d007      	beq.n	8004c9e <TIM_OC3_SetConfig+0x72>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a2a      	ldr	r2, [pc, #168]	; (8004d3c <TIM_OC3_SetConfig+0x110>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d003      	beq.n	8004c9e <TIM_OC3_SetConfig+0x72>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a29      	ldr	r2, [pc, #164]	; (8004d40 <TIM_OC3_SetConfig+0x114>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d10d      	bne.n	8004cba <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ca4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	021b      	lsls	r3, r3, #8
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a1e      	ldr	r2, [pc, #120]	; (8004d38 <TIM_OC3_SetConfig+0x10c>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d013      	beq.n	8004cea <TIM_OC3_SetConfig+0xbe>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a1d      	ldr	r2, [pc, #116]	; (8004d3c <TIM_OC3_SetConfig+0x110>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d00f      	beq.n	8004cea <TIM_OC3_SetConfig+0xbe>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a1d      	ldr	r2, [pc, #116]	; (8004d44 <TIM_OC3_SetConfig+0x118>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d00b      	beq.n	8004cea <TIM_OC3_SetConfig+0xbe>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a1c      	ldr	r2, [pc, #112]	; (8004d48 <TIM_OC3_SetConfig+0x11c>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d007      	beq.n	8004cea <TIM_OC3_SetConfig+0xbe>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a1b      	ldr	r2, [pc, #108]	; (8004d4c <TIM_OC3_SetConfig+0x120>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d003      	beq.n	8004cea <TIM_OC3_SetConfig+0xbe>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a16      	ldr	r2, [pc, #88]	; (8004d40 <TIM_OC3_SetConfig+0x114>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d113      	bne.n	8004d12 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	011b      	lsls	r3, r3, #4
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	011b      	lsls	r3, r3, #4
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	621a      	str	r2, [r3, #32]
}
 8004d2c:	bf00      	nop
 8004d2e:	371c      	adds	r7, #28
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	40012c00 	.word	0x40012c00
 8004d3c:	40013400 	.word	0x40013400
 8004d40:	40015000 	.word	0x40015000
 8004d44:	40014000 	.word	0x40014000
 8004d48:	40014400 	.word	0x40014400
 8004d4c:	40014800 	.word	0x40014800

08004d50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b087      	sub	sp, #28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	021b      	lsls	r3, r3, #8
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	031b      	lsls	r3, r3, #12
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a2c      	ldr	r2, [pc, #176]	; (8004e60 <TIM_OC4_SetConfig+0x110>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d007      	beq.n	8004dc4 <TIM_OC4_SetConfig+0x74>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a2b      	ldr	r2, [pc, #172]	; (8004e64 <TIM_OC4_SetConfig+0x114>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d003      	beq.n	8004dc4 <TIM_OC4_SetConfig+0x74>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a2a      	ldr	r2, [pc, #168]	; (8004e68 <TIM_OC4_SetConfig+0x118>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d10d      	bne.n	8004de0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004dca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	031b      	lsls	r3, r3, #12
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dde:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a1f      	ldr	r2, [pc, #124]	; (8004e60 <TIM_OC4_SetConfig+0x110>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d013      	beq.n	8004e10 <TIM_OC4_SetConfig+0xc0>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a1e      	ldr	r2, [pc, #120]	; (8004e64 <TIM_OC4_SetConfig+0x114>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d00f      	beq.n	8004e10 <TIM_OC4_SetConfig+0xc0>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a1e      	ldr	r2, [pc, #120]	; (8004e6c <TIM_OC4_SetConfig+0x11c>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d00b      	beq.n	8004e10 <TIM_OC4_SetConfig+0xc0>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a1d      	ldr	r2, [pc, #116]	; (8004e70 <TIM_OC4_SetConfig+0x120>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d007      	beq.n	8004e10 <TIM_OC4_SetConfig+0xc0>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a1c      	ldr	r2, [pc, #112]	; (8004e74 <TIM_OC4_SetConfig+0x124>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d003      	beq.n	8004e10 <TIM_OC4_SetConfig+0xc0>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a17      	ldr	r2, [pc, #92]	; (8004e68 <TIM_OC4_SetConfig+0x118>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d113      	bne.n	8004e38 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e16:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e1e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	019b      	lsls	r3, r3, #6
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	019b      	lsls	r3, r3, #6
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	621a      	str	r2, [r3, #32]
}
 8004e52:	bf00      	nop
 8004e54:	371c      	adds	r7, #28
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	40012c00 	.word	0x40012c00
 8004e64:	40013400 	.word	0x40013400
 8004e68:	40015000 	.word	0x40015000
 8004e6c:	40014000 	.word	0x40014000
 8004e70:	40014400 	.word	0x40014400
 8004e74:	40014800 	.word	0x40014800

08004e78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b087      	sub	sp, #28
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004ebc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	041b      	lsls	r3, r3, #16
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a19      	ldr	r2, [pc, #100]	; (8004f34 <TIM_OC5_SetConfig+0xbc>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d013      	beq.n	8004efa <TIM_OC5_SetConfig+0x82>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a18      	ldr	r2, [pc, #96]	; (8004f38 <TIM_OC5_SetConfig+0xc0>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d00f      	beq.n	8004efa <TIM_OC5_SetConfig+0x82>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a17      	ldr	r2, [pc, #92]	; (8004f3c <TIM_OC5_SetConfig+0xc4>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d00b      	beq.n	8004efa <TIM_OC5_SetConfig+0x82>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a16      	ldr	r2, [pc, #88]	; (8004f40 <TIM_OC5_SetConfig+0xc8>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d007      	beq.n	8004efa <TIM_OC5_SetConfig+0x82>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a15      	ldr	r2, [pc, #84]	; (8004f44 <TIM_OC5_SetConfig+0xcc>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d003      	beq.n	8004efa <TIM_OC5_SetConfig+0x82>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a14      	ldr	r2, [pc, #80]	; (8004f48 <TIM_OC5_SetConfig+0xd0>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d109      	bne.n	8004f0e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	021b      	lsls	r3, r3, #8
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	685a      	ldr	r2, [r3, #4]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	621a      	str	r2, [r3, #32]
}
 8004f28:	bf00      	nop
 8004f2a:	371c      	adds	r7, #28
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	40012c00 	.word	0x40012c00
 8004f38:	40013400 	.word	0x40013400
 8004f3c:	40014000 	.word	0x40014000
 8004f40:	40014400 	.word	0x40014400
 8004f44:	40014800 	.word	0x40014800
 8004f48:	40015000 	.word	0x40015000

08004f4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b087      	sub	sp, #28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	021b      	lsls	r3, r3, #8
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	051b      	lsls	r3, r3, #20
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a1a      	ldr	r2, [pc, #104]	; (800500c <TIM_OC6_SetConfig+0xc0>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d013      	beq.n	8004fd0 <TIM_OC6_SetConfig+0x84>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a19      	ldr	r2, [pc, #100]	; (8005010 <TIM_OC6_SetConfig+0xc4>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d00f      	beq.n	8004fd0 <TIM_OC6_SetConfig+0x84>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a18      	ldr	r2, [pc, #96]	; (8005014 <TIM_OC6_SetConfig+0xc8>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d00b      	beq.n	8004fd0 <TIM_OC6_SetConfig+0x84>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a17      	ldr	r2, [pc, #92]	; (8005018 <TIM_OC6_SetConfig+0xcc>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d007      	beq.n	8004fd0 <TIM_OC6_SetConfig+0x84>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a16      	ldr	r2, [pc, #88]	; (800501c <TIM_OC6_SetConfig+0xd0>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d003      	beq.n	8004fd0 <TIM_OC6_SetConfig+0x84>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a15      	ldr	r2, [pc, #84]	; (8005020 <TIM_OC6_SetConfig+0xd4>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d109      	bne.n	8004fe4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fd6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	029b      	lsls	r3, r3, #10
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	621a      	str	r2, [r3, #32]
}
 8004ffe:	bf00      	nop
 8005000:	371c      	adds	r7, #28
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	40012c00 	.word	0x40012c00
 8005010:	40013400 	.word	0x40013400
 8005014:	40014000 	.word	0x40014000
 8005018:	40014400 	.word	0x40014400
 800501c:	40014800 	.word	0x40014800
 8005020:	40015000 	.word	0x40015000

08005024 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
 8005030:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	f023 0201 	bic.w	r2, r3, #1
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	4a28      	ldr	r2, [pc, #160]	; (80050f0 <TIM_TI1_SetConfig+0xcc>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d01b      	beq.n	800508a <TIM_TI1_SetConfig+0x66>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005058:	d017      	beq.n	800508a <TIM_TI1_SetConfig+0x66>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	4a25      	ldr	r2, [pc, #148]	; (80050f4 <TIM_TI1_SetConfig+0xd0>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d013      	beq.n	800508a <TIM_TI1_SetConfig+0x66>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	4a24      	ldr	r2, [pc, #144]	; (80050f8 <TIM_TI1_SetConfig+0xd4>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d00f      	beq.n	800508a <TIM_TI1_SetConfig+0x66>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	4a23      	ldr	r2, [pc, #140]	; (80050fc <TIM_TI1_SetConfig+0xd8>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d00b      	beq.n	800508a <TIM_TI1_SetConfig+0x66>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	4a22      	ldr	r2, [pc, #136]	; (8005100 <TIM_TI1_SetConfig+0xdc>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d007      	beq.n	800508a <TIM_TI1_SetConfig+0x66>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	4a21      	ldr	r2, [pc, #132]	; (8005104 <TIM_TI1_SetConfig+0xe0>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d003      	beq.n	800508a <TIM_TI1_SetConfig+0x66>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	4a20      	ldr	r2, [pc, #128]	; (8005108 <TIM_TI1_SetConfig+0xe4>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d101      	bne.n	800508e <TIM_TI1_SetConfig+0x6a>
 800508a:	2301      	movs	r3, #1
 800508c:	e000      	b.n	8005090 <TIM_TI1_SetConfig+0x6c>
 800508e:	2300      	movs	r3, #0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d008      	beq.n	80050a6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	f023 0303 	bic.w	r3, r3, #3
 800509a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	617b      	str	r3, [r7, #20]
 80050a4:	e003      	b.n	80050ae <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f043 0301 	orr.w	r3, r3, #1
 80050ac:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	011b      	lsls	r3, r3, #4
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	4313      	orrs	r3, r2
 80050c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	f023 030a 	bic.w	r3, r3, #10
 80050c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	f003 030a 	and.w	r3, r3, #10
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	621a      	str	r2, [r3, #32]
}
 80050e2:	bf00      	nop
 80050e4:	371c      	adds	r7, #28
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	40012c00 	.word	0x40012c00
 80050f4:	40000400 	.word	0x40000400
 80050f8:	40000800 	.word	0x40000800
 80050fc:	40000c00 	.word	0x40000c00
 8005100:	40013400 	.word	0x40013400
 8005104:	40014000 	.word	0x40014000
 8005108:	40015000 	.word	0x40015000

0800510c <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b08a      	sub	sp, #40	; 0x28
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e0a0      	b.n	8005262 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2b00      	cmp	r3, #0
 800512a:	d106      	bne.n	800513a <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f7fc f885 	bl	8001244 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2202      	movs	r2, #2
 800513e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	3304      	adds	r3, #4
 800514a:	4619      	mov	r1, r3
 800514c:	4610      	mov	r0, r2
 800514e:	f7ff fb97 	bl	8004880 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6818      	ldr	r0, [r3, #0]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	6819      	ldr	r1, [r3, #0]
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	2203      	movs	r2, #3
 8005160:	f7ff ff60 	bl	8005024 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	699a      	ldr	r2, [r3, #24]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 020c 	bic.w	r2, r2, #12
 8005172:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6999      	ldr	r1, [r3, #24]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	430a      	orrs	r2, r1
 8005184:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005194:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	6812      	ldr	r2, [r2, #0]
 80051a0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80051a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a8:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051b8:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	6812      	ldr	r2, [r2, #0]
 80051c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051c8:	f023 0307 	bic.w	r3, r3, #7
 80051cc:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f042 0204 	orr.w	r2, r2, #4
 80051dc:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 80051de:	2300      	movs	r3, #0
 80051e0:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 80051e2:	2300      	movs	r3, #0
 80051e4:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80051e6:	2370      	movs	r3, #112	; 0x70
 80051e8:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80051ea:	2300      	movs	r3, #0
 80051ec:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80051ee:	2300      	movs	r3, #0
 80051f0:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80051f2:	2300      	movs	r3, #0
 80051f4:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f107 020c 	add.w	r2, r7, #12
 8005204:	4611      	mov	r1, r2
 8005206:	4618      	mov	r0, r3
 8005208:	f7ff fc7c 	bl	8004b04 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	6812      	ldr	r2, [r2, #0]
 8005216:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800521a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521e:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800522e:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3728      	adds	r7, #40	; 0x28
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
	...

0800526c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800527c:	2b01      	cmp	r3, #1
 800527e:	d101      	bne.n	8005284 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005280:	2302      	movs	r3, #2
 8005282:	e074      	b.n	800536e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2202      	movs	r2, #2
 8005290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a34      	ldr	r2, [pc, #208]	; (800537c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d009      	beq.n	80052c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a33      	ldr	r2, [pc, #204]	; (8005380 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d004      	beq.n	80052c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a31      	ldr	r2, [pc, #196]	; (8005384 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d108      	bne.n	80052d4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80052c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80052da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a21      	ldr	r2, [pc, #132]	; (800537c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d022      	beq.n	8005342 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005304:	d01d      	beq.n	8005342 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a1f      	ldr	r2, [pc, #124]	; (8005388 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d018      	beq.n	8005342 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a1d      	ldr	r2, [pc, #116]	; (800538c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d013      	beq.n	8005342 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a1c      	ldr	r2, [pc, #112]	; (8005390 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d00e      	beq.n	8005342 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a15      	ldr	r2, [pc, #84]	; (8005380 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d009      	beq.n	8005342 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a18      	ldr	r2, [pc, #96]	; (8005394 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d004      	beq.n	8005342 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a11      	ldr	r2, [pc, #68]	; (8005384 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d10c      	bne.n	800535c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005348:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	4313      	orrs	r3, r2
 8005352:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3714      	adds	r7, #20
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	40012c00 	.word	0x40012c00
 8005380:	40013400 	.word	0x40013400
 8005384:	40015000 	.word	0x40015000
 8005388:	40000400 	.word	0x40000400
 800538c:	40000800 	.word	0x40000800
 8005390:	40000c00 	.word	0x40000c00
 8005394:	40014000 	.word	0x40014000

08005398 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d101      	bne.n	80053b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80053b0:	2302      	movs	r3, #2
 80053b2:	e096      	b.n	80054e2 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	4313      	orrs	r3, r2
 8005400:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	4313      	orrs	r3, r2
 800540e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541a:	4313      	orrs	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	041b      	lsls	r3, r3, #16
 800542a:	4313      	orrs	r3, r2
 800542c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a2f      	ldr	r2, [pc, #188]	; (80054f0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d009      	beq.n	800544c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a2d      	ldr	r2, [pc, #180]	; (80054f4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d004      	beq.n	800544c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a2c      	ldr	r2, [pc, #176]	; (80054f8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d106      	bne.n	800545a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	4313      	orrs	r3, r2
 8005458:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a24      	ldr	r2, [pc, #144]	; (80054f0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d009      	beq.n	8005478 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a22      	ldr	r2, [pc, #136]	; (80054f4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d004      	beq.n	8005478 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a21      	ldr	r2, [pc, #132]	; (80054f8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d12b      	bne.n	80054d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005482:	051b      	lsls	r3, r3, #20
 8005484:	4313      	orrs	r3, r2
 8005486:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	4313      	orrs	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	4313      	orrs	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a11      	ldr	r2, [pc, #68]	; (80054f0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d009      	beq.n	80054c2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a10      	ldr	r2, [pc, #64]	; (80054f4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d004      	beq.n	80054c2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a0e      	ldr	r2, [pc, #56]	; (80054f8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d106      	bne.n	80054d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054cc:	4313      	orrs	r3, r2
 80054ce:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	40012c00 	.word	0x40012c00
 80054f4:	40013400 	.word	0x40013400
 80054f8:	40015000 	.word	0x40015000

080054fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e042      	b.n	8005620 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d106      	bne.n	80055b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f7fb ffab 	bl	8001508 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2224      	movs	r2, #36	; 0x24
 80055b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f022 0201 	bic.w	r2, r2, #1
 80055c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 fc50 	bl	8005e70 <UART_SetConfig>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d101      	bne.n	80055da <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e022      	b.n	8005620 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d002      	beq.n	80055e8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 ff40 	bl	8006468 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689a      	ldr	r2, [r3, #8]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005606:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f042 0201 	orr.w	r2, r2, #1
 8005616:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 ffc7 	bl	80065ac <UART_CheckIdleState>
 800561e:	4603      	mov	r3, r0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3708      	adds	r7, #8
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b08a      	sub	sp, #40	; 0x28
 800562c:	af02      	add	r7, sp, #8
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	603b      	str	r3, [r7, #0]
 8005634:	4613      	mov	r3, r2
 8005636:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800563e:	2b20      	cmp	r3, #32
 8005640:	f040 8083 	bne.w	800574a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d002      	beq.n	8005650 <HAL_UART_Transmit+0x28>
 800564a:	88fb      	ldrh	r3, [r7, #6]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d101      	bne.n	8005654 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e07b      	b.n	800574c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800565a:	2b01      	cmp	r3, #1
 800565c:	d101      	bne.n	8005662 <HAL_UART_Transmit+0x3a>
 800565e:	2302      	movs	r3, #2
 8005660:	e074      	b.n	800574c <HAL_UART_Transmit+0x124>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2221      	movs	r2, #33	; 0x21
 8005676:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800567a:	f7fc f839 	bl	80016f0 <HAL_GetTick>
 800567e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	88fa      	ldrh	r2, [r7, #6]
 8005684:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	88fa      	ldrh	r2, [r7, #6]
 800568c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005698:	d108      	bne.n	80056ac <HAL_UART_Transmit+0x84>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d104      	bne.n	80056ac <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80056a2:	2300      	movs	r3, #0
 80056a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	61bb      	str	r3, [r7, #24]
 80056aa:	e003      	b.n	80056b4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056b0:	2300      	movs	r3, #0
 80056b2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80056bc:	e02c      	b.n	8005718 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	2200      	movs	r2, #0
 80056c6:	2180      	movs	r1, #128	; 0x80
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f000 ffba 	bl	8006642 <UART_WaitOnFlagUntilTimeout>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e039      	b.n	800574c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10b      	bne.n	80056f6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	881b      	ldrh	r3, [r3, #0]
 80056e2:	461a      	mov	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056ec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	3302      	adds	r3, #2
 80056f2:	61bb      	str	r3, [r7, #24]
 80056f4:	e007      	b.n	8005706 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	781a      	ldrb	r2, [r3, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	3301      	adds	r3, #1
 8005704:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800570c:	b29b      	uxth	r3, r3
 800570e:	3b01      	subs	r3, #1
 8005710:	b29a      	uxth	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800571e:	b29b      	uxth	r3, r3
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1cc      	bne.n	80056be <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	9300      	str	r3, [sp, #0]
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	2200      	movs	r2, #0
 800572c:	2140      	movs	r1, #64	; 0x40
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f000 ff87 	bl	8006642 <UART_WaitOnFlagUntilTimeout>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d001      	beq.n	800573e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e006      	b.n	800574c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2220      	movs	r2, #32
 8005742:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005746:	2300      	movs	r3, #0
 8005748:	e000      	b.n	800574c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800574a:	2302      	movs	r3, #2
  }
}
 800574c:	4618      	mov	r0, r3
 800574e:	3720      	adds	r7, #32
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b08a      	sub	sp, #40	; 0x28
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	4613      	mov	r3, r2
 8005760:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005768:	2b20      	cmp	r3, #32
 800576a:	d142      	bne.n	80057f2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d002      	beq.n	8005778 <HAL_UART_Receive_IT+0x24>
 8005772:	88fb      	ldrh	r3, [r7, #6]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d101      	bne.n	800577c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e03b      	b.n	80057f4 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005782:	2b01      	cmp	r3, #1
 8005784:	d101      	bne.n	800578a <HAL_UART_Receive_IT+0x36>
 8005786:	2302      	movs	r3, #2
 8005788:	e034      	b.n	80057f4 <HAL_UART_Receive_IT+0xa0>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a17      	ldr	r2, [pc, #92]	; (80057fc <HAL_UART_Receive_IT+0xa8>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d01f      	beq.n	80057e2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d018      	beq.n	80057e2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	e853 3f00 	ldrex	r3, [r3]
 80057bc:	613b      	str	r3, [r7, #16]
   return(result);
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057c4:	627b      	str	r3, [r7, #36]	; 0x24
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	461a      	mov	r2, r3
 80057cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ce:	623b      	str	r3, [r7, #32]
 80057d0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d2:	69f9      	ldr	r1, [r7, #28]
 80057d4:	6a3a      	ldr	r2, [r7, #32]
 80057d6:	e841 2300 	strex	r3, r2, [r1]
 80057da:	61bb      	str	r3, [r7, #24]
   return(result);
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1e6      	bne.n	80057b0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80057e2:	88fb      	ldrh	r3, [r7, #6]
 80057e4:	461a      	mov	r2, r3
 80057e6:	68b9      	ldr	r1, [r7, #8]
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 fff3 	bl	80067d4 <UART_Start_Receive_IT>
 80057ee:	4603      	mov	r3, r0
 80057f0:	e000      	b.n	80057f4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80057f2:	2302      	movs	r3, #2
  }
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3728      	adds	r7, #40	; 0x28
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	40008000 	.word	0x40008000

08005800 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b0ba      	sub	sp, #232	; 0xe8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	69db      	ldr	r3, [r3, #28]
 800580e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005826:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800582a:	f640 030f 	movw	r3, #2063	; 0x80f
 800582e:	4013      	ands	r3, r2
 8005830:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005834:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005838:	2b00      	cmp	r3, #0
 800583a:	d11b      	bne.n	8005874 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800583c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005840:	f003 0320 	and.w	r3, r3, #32
 8005844:	2b00      	cmp	r3, #0
 8005846:	d015      	beq.n	8005874 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800584c:	f003 0320 	and.w	r3, r3, #32
 8005850:	2b00      	cmp	r3, #0
 8005852:	d105      	bne.n	8005860 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005854:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d009      	beq.n	8005874 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005864:	2b00      	cmp	r3, #0
 8005866:	f000 82d6 	beq.w	8005e16 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	4798      	blx	r3
      }
      return;
 8005872:	e2d0      	b.n	8005e16 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005874:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005878:	2b00      	cmp	r3, #0
 800587a:	f000 811f 	beq.w	8005abc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800587e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005882:	4b8b      	ldr	r3, [pc, #556]	; (8005ab0 <HAL_UART_IRQHandler+0x2b0>)
 8005884:	4013      	ands	r3, r2
 8005886:	2b00      	cmp	r3, #0
 8005888:	d106      	bne.n	8005898 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800588a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800588e:	4b89      	ldr	r3, [pc, #548]	; (8005ab4 <HAL_UART_IRQHandler+0x2b4>)
 8005890:	4013      	ands	r3, r2
 8005892:	2b00      	cmp	r3, #0
 8005894:	f000 8112 	beq.w	8005abc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d011      	beq.n	80058c8 <HAL_UART_IRQHandler+0xc8>
 80058a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00b      	beq.n	80058c8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2201      	movs	r2, #1
 80058b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058be:	f043 0201 	orr.w	r2, r3, #1
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058cc:	f003 0302 	and.w	r3, r3, #2
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d011      	beq.n	80058f8 <HAL_UART_IRQHandler+0xf8>
 80058d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00b      	beq.n	80058f8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2202      	movs	r2, #2
 80058e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058ee:	f043 0204 	orr.w	r2, r3, #4
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058fc:	f003 0304 	and.w	r3, r3, #4
 8005900:	2b00      	cmp	r3, #0
 8005902:	d011      	beq.n	8005928 <HAL_UART_IRQHandler+0x128>
 8005904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005908:	f003 0301 	and.w	r3, r3, #1
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00b      	beq.n	8005928 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2204      	movs	r2, #4
 8005916:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800591e:	f043 0202 	orr.w	r2, r3, #2
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800592c:	f003 0308 	and.w	r3, r3, #8
 8005930:	2b00      	cmp	r3, #0
 8005932:	d017      	beq.n	8005964 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005938:	f003 0320 	and.w	r3, r3, #32
 800593c:	2b00      	cmp	r3, #0
 800593e:	d105      	bne.n	800594c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005940:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005944:	4b5a      	ldr	r3, [pc, #360]	; (8005ab0 <HAL_UART_IRQHandler+0x2b0>)
 8005946:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00b      	beq.n	8005964 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2208      	movs	r2, #8
 8005952:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800595a:	f043 0208 	orr.w	r2, r3, #8
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005968:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800596c:	2b00      	cmp	r3, #0
 800596e:	d012      	beq.n	8005996 <HAL_UART_IRQHandler+0x196>
 8005970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005974:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00c      	beq.n	8005996 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005984:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800598c:	f043 0220 	orr.w	r2, r3, #32
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800599c:	2b00      	cmp	r3, #0
 800599e:	f000 823c 	beq.w	8005e1a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80059a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059a6:	f003 0320 	and.w	r3, r3, #32
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d013      	beq.n	80059d6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80059ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059b2:	f003 0320 	and.w	r3, r3, #32
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d105      	bne.n	80059c6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80059ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d007      	beq.n	80059d6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ea:	2b40      	cmp	r3, #64	; 0x40
 80059ec:	d005      	beq.n	80059fa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80059ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d04f      	beq.n	8005a9a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f001 f814 	bl	8006a28 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0a:	2b40      	cmp	r3, #64	; 0x40
 8005a0c:	d141      	bne.n	8005a92 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	3308      	adds	r3, #8
 8005a14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a1c:	e853 3f00 	ldrex	r3, [r3]
 8005a20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	3308      	adds	r3, #8
 8005a36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005a4a:	e841 2300 	strex	r3, r2, [r1]
 8005a4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1d9      	bne.n	8005a0e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d013      	beq.n	8005a8a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a66:	4a14      	ldr	r2, [pc, #80]	; (8005ab8 <HAL_UART_IRQHandler+0x2b8>)
 8005a68:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7fd f88d 	bl	8002b8e <HAL_DMA_Abort_IT>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d017      	beq.n	8005aaa <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005a84:	4610      	mov	r0, r2
 8005a86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a88:	e00f      	b.n	8005aaa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f9da 	bl	8005e44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a90:	e00b      	b.n	8005aaa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f9d6 	bl	8005e44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a98:	e007      	b.n	8005aaa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f9d2 	bl	8005e44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005aa8:	e1b7      	b.n	8005e1a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aaa:	bf00      	nop
    return;
 8005aac:	e1b5      	b.n	8005e1a <HAL_UART_IRQHandler+0x61a>
 8005aae:	bf00      	nop
 8005ab0:	10000001 	.word	0x10000001
 8005ab4:	04000120 	.word	0x04000120
 8005ab8:	08006af5 	.word	0x08006af5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	f040 814a 	bne.w	8005d5a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aca:	f003 0310 	and.w	r3, r3, #16
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f000 8143 	beq.w	8005d5a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ad8:	f003 0310 	and.w	r3, r3, #16
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f000 813c 	beq.w	8005d5a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2210      	movs	r2, #16
 8005ae8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af4:	2b40      	cmp	r3, #64	; 0x40
 8005af6:	f040 80b5 	bne.w	8005c64 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b06:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f000 8187 	beq.w	8005e1e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005b16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	f080 817f 	bcs.w	8005e1e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b26:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0320 	and.w	r3, r3, #32
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f040 8086 	bne.w	8005c48 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b48:	e853 3f00 	ldrex	r3, [r3]
 8005b4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005b50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	461a      	mov	r2, r3
 8005b62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005b66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005b6a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b76:	e841 2300 	strex	r3, r2, [r1]
 8005b7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005b7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1da      	bne.n	8005b3c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	3308      	adds	r3, #8
 8005b8c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b90:	e853 3f00 	ldrex	r3, [r3]
 8005b94:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b98:	f023 0301 	bic.w	r3, r3, #1
 8005b9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	3308      	adds	r3, #8
 8005ba6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005baa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005bae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005bb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005bb6:	e841 2300 	strex	r3, r2, [r1]
 8005bba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005bbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1e1      	bne.n	8005b86 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	3308      	adds	r3, #8
 8005bc8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bcc:	e853 3f00 	ldrex	r3, [r3]
 8005bd0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	3308      	adds	r3, #8
 8005be2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005be6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005be8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005bec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005bee:	e841 2300 	strex	r3, r2, [r1]
 8005bf2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005bf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1e3      	bne.n	8005bc2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2220      	movs	r2, #32
 8005bfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c10:	e853 3f00 	ldrex	r3, [r3]
 8005c14:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c18:	f023 0310 	bic.w	r3, r3, #16
 8005c1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	461a      	mov	r2, r3
 8005c26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c2c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c32:	e841 2300 	strex	r3, r2, [r1]
 8005c36:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1e4      	bne.n	8005c08 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7fc ff4a 	bl	8002adc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 f8fb 	bl	8005e58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c62:	e0dc      	b.n	8005e1e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f000 80ce 	beq.w	8005e22 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8005c86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f000 80c9 	beq.w	8005e22 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c98:	e853 3f00 	ldrex	r3, [r3]
 8005c9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ca4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	461a      	mov	r2, r3
 8005cae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005cb2:	647b      	str	r3, [r7, #68]	; 0x44
 8005cb4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005cb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cba:	e841 2300 	strex	r3, r2, [r1]
 8005cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1e4      	bne.n	8005c90 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	3308      	adds	r3, #8
 8005ccc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd0:	e853 3f00 	ldrex	r3, [r3]
 8005cd4:	623b      	str	r3, [r7, #32]
   return(result);
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cdc:	f023 0301 	bic.w	r3, r3, #1
 8005ce0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	3308      	adds	r3, #8
 8005cea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005cee:	633a      	str	r2, [r7, #48]	; 0x30
 8005cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cf6:	e841 2300 	strex	r3, r2, [r1]
 8005cfa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1e1      	bne.n	8005cc6 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2220      	movs	r2, #32
 8005d06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	e853 3f00 	ldrex	r3, [r3]
 8005d22:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f023 0310 	bic.w	r3, r3, #16
 8005d2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	461a      	mov	r2, r3
 8005d34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d38:	61fb      	str	r3, [r7, #28]
 8005d3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3c:	69b9      	ldr	r1, [r7, #24]
 8005d3e:	69fa      	ldr	r2, [r7, #28]
 8005d40:	e841 2300 	strex	r3, r2, [r1]
 8005d44:	617b      	str	r3, [r7, #20]
   return(result);
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1e4      	bne.n	8005d16 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d50:	4619      	mov	r1, r3
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f880 	bl	8005e58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d58:	e063      	b.n	8005e22 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00e      	beq.n	8005d84 <HAL_UART_IRQHandler+0x584>
 8005d66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d008      	beq.n	8005d84 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005d7a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f001 fb57 	bl	8007430 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d82:	e051      	b.n	8005e28 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d014      	beq.n	8005dba <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d105      	bne.n	8005da8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005d9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005da0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d008      	beq.n	8005dba <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d03a      	beq.n	8005e26 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	4798      	blx	r3
    }
    return;
 8005db8:	e035      	b.n	8005e26 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d009      	beq.n	8005dda <HAL_UART_IRQHandler+0x5da>
 8005dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d003      	beq.n	8005dda <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fea4 	bl	8006b20 <UART_EndTransmit_IT>
    return;
 8005dd8:	e026      	b.n	8005e28 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d009      	beq.n	8005dfa <HAL_UART_IRQHandler+0x5fa>
 8005de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d003      	beq.n	8005dfa <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f001 fb30 	bl	8007458 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005df8:	e016      	b.n	8005e28 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d010      	beq.n	8005e28 <HAL_UART_IRQHandler+0x628>
 8005e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	da0c      	bge.n	8005e28 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f001 fb18 	bl	8007444 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e14:	e008      	b.n	8005e28 <HAL_UART_IRQHandler+0x628>
      return;
 8005e16:	bf00      	nop
 8005e18:	e006      	b.n	8005e28 <HAL_UART_IRQHandler+0x628>
    return;
 8005e1a:	bf00      	nop
 8005e1c:	e004      	b.n	8005e28 <HAL_UART_IRQHandler+0x628>
      return;
 8005e1e:	bf00      	nop
 8005e20:	e002      	b.n	8005e28 <HAL_UART_IRQHandler+0x628>
      return;
 8005e22:	bf00      	nop
 8005e24:	e000      	b.n	8005e28 <HAL_UART_IRQHandler+0x628>
    return;
 8005e26:	bf00      	nop
  }
}
 8005e28:	37e8      	adds	r7, #232	; 0xe8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop

08005e30 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	460b      	mov	r3, r1
 8005e62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e74:	b08c      	sub	sp, #48	; 0x30
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	689a      	ldr	r2, [r3, #8]
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	431a      	orrs	r2, r3
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	695b      	ldr	r3, [r3, #20]
 8005e8e:	431a      	orrs	r2, r3
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	69db      	ldr	r3, [r3, #28]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	4baa      	ldr	r3, [pc, #680]	; (8006148 <UART_SetConfig+0x2d8>)
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	6812      	ldr	r2, [r2, #0]
 8005ea6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ea8:	430b      	orrs	r3, r1
 8005eaa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	68da      	ldr	r2, [r3, #12]
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a9f      	ldr	r2, [pc, #636]	; (800614c <UART_SetConfig+0x2dc>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d004      	beq.n	8005edc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005ee6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	6812      	ldr	r2, [r2, #0]
 8005eee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ef0:	430b      	orrs	r3, r1
 8005ef2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efa:	f023 010f 	bic.w	r1, r3, #15
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	430a      	orrs	r2, r1
 8005f08:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a90      	ldr	r2, [pc, #576]	; (8006150 <UART_SetConfig+0x2e0>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d125      	bne.n	8005f60 <UART_SetConfig+0xf0>
 8005f14:	4b8f      	ldr	r3, [pc, #572]	; (8006154 <UART_SetConfig+0x2e4>)
 8005f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f1a:	f003 0303 	and.w	r3, r3, #3
 8005f1e:	2b03      	cmp	r3, #3
 8005f20:	d81a      	bhi.n	8005f58 <UART_SetConfig+0xe8>
 8005f22:	a201      	add	r2, pc, #4	; (adr r2, 8005f28 <UART_SetConfig+0xb8>)
 8005f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f28:	08005f39 	.word	0x08005f39
 8005f2c:	08005f49 	.word	0x08005f49
 8005f30:	08005f41 	.word	0x08005f41
 8005f34:	08005f51 	.word	0x08005f51
 8005f38:	2301      	movs	r3, #1
 8005f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f3e:	e116      	b.n	800616e <UART_SetConfig+0x2fe>
 8005f40:	2302      	movs	r3, #2
 8005f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f46:	e112      	b.n	800616e <UART_SetConfig+0x2fe>
 8005f48:	2304      	movs	r3, #4
 8005f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f4e:	e10e      	b.n	800616e <UART_SetConfig+0x2fe>
 8005f50:	2308      	movs	r3, #8
 8005f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f56:	e10a      	b.n	800616e <UART_SetConfig+0x2fe>
 8005f58:	2310      	movs	r3, #16
 8005f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f5e:	e106      	b.n	800616e <UART_SetConfig+0x2fe>
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a7c      	ldr	r2, [pc, #496]	; (8006158 <UART_SetConfig+0x2e8>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d138      	bne.n	8005fdc <UART_SetConfig+0x16c>
 8005f6a:	4b7a      	ldr	r3, [pc, #488]	; (8006154 <UART_SetConfig+0x2e4>)
 8005f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f70:	f003 030c 	and.w	r3, r3, #12
 8005f74:	2b0c      	cmp	r3, #12
 8005f76:	d82d      	bhi.n	8005fd4 <UART_SetConfig+0x164>
 8005f78:	a201      	add	r2, pc, #4	; (adr r2, 8005f80 <UART_SetConfig+0x110>)
 8005f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7e:	bf00      	nop
 8005f80:	08005fb5 	.word	0x08005fb5
 8005f84:	08005fd5 	.word	0x08005fd5
 8005f88:	08005fd5 	.word	0x08005fd5
 8005f8c:	08005fd5 	.word	0x08005fd5
 8005f90:	08005fc5 	.word	0x08005fc5
 8005f94:	08005fd5 	.word	0x08005fd5
 8005f98:	08005fd5 	.word	0x08005fd5
 8005f9c:	08005fd5 	.word	0x08005fd5
 8005fa0:	08005fbd 	.word	0x08005fbd
 8005fa4:	08005fd5 	.word	0x08005fd5
 8005fa8:	08005fd5 	.word	0x08005fd5
 8005fac:	08005fd5 	.word	0x08005fd5
 8005fb0:	08005fcd 	.word	0x08005fcd
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fba:	e0d8      	b.n	800616e <UART_SetConfig+0x2fe>
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fc2:	e0d4      	b.n	800616e <UART_SetConfig+0x2fe>
 8005fc4:	2304      	movs	r3, #4
 8005fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fca:	e0d0      	b.n	800616e <UART_SetConfig+0x2fe>
 8005fcc:	2308      	movs	r3, #8
 8005fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fd2:	e0cc      	b.n	800616e <UART_SetConfig+0x2fe>
 8005fd4:	2310      	movs	r3, #16
 8005fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fda:	e0c8      	b.n	800616e <UART_SetConfig+0x2fe>
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a5e      	ldr	r2, [pc, #376]	; (800615c <UART_SetConfig+0x2ec>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d125      	bne.n	8006032 <UART_SetConfig+0x1c2>
 8005fe6:	4b5b      	ldr	r3, [pc, #364]	; (8006154 <UART_SetConfig+0x2e4>)
 8005fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ff0:	2b30      	cmp	r3, #48	; 0x30
 8005ff2:	d016      	beq.n	8006022 <UART_SetConfig+0x1b2>
 8005ff4:	2b30      	cmp	r3, #48	; 0x30
 8005ff6:	d818      	bhi.n	800602a <UART_SetConfig+0x1ba>
 8005ff8:	2b20      	cmp	r3, #32
 8005ffa:	d00a      	beq.n	8006012 <UART_SetConfig+0x1a2>
 8005ffc:	2b20      	cmp	r3, #32
 8005ffe:	d814      	bhi.n	800602a <UART_SetConfig+0x1ba>
 8006000:	2b00      	cmp	r3, #0
 8006002:	d002      	beq.n	800600a <UART_SetConfig+0x19a>
 8006004:	2b10      	cmp	r3, #16
 8006006:	d008      	beq.n	800601a <UART_SetConfig+0x1aa>
 8006008:	e00f      	b.n	800602a <UART_SetConfig+0x1ba>
 800600a:	2300      	movs	r3, #0
 800600c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006010:	e0ad      	b.n	800616e <UART_SetConfig+0x2fe>
 8006012:	2302      	movs	r3, #2
 8006014:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006018:	e0a9      	b.n	800616e <UART_SetConfig+0x2fe>
 800601a:	2304      	movs	r3, #4
 800601c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006020:	e0a5      	b.n	800616e <UART_SetConfig+0x2fe>
 8006022:	2308      	movs	r3, #8
 8006024:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006028:	e0a1      	b.n	800616e <UART_SetConfig+0x2fe>
 800602a:	2310      	movs	r3, #16
 800602c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006030:	e09d      	b.n	800616e <UART_SetConfig+0x2fe>
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a4a      	ldr	r2, [pc, #296]	; (8006160 <UART_SetConfig+0x2f0>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d125      	bne.n	8006088 <UART_SetConfig+0x218>
 800603c:	4b45      	ldr	r3, [pc, #276]	; (8006154 <UART_SetConfig+0x2e4>)
 800603e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006042:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006046:	2bc0      	cmp	r3, #192	; 0xc0
 8006048:	d016      	beq.n	8006078 <UART_SetConfig+0x208>
 800604a:	2bc0      	cmp	r3, #192	; 0xc0
 800604c:	d818      	bhi.n	8006080 <UART_SetConfig+0x210>
 800604e:	2b80      	cmp	r3, #128	; 0x80
 8006050:	d00a      	beq.n	8006068 <UART_SetConfig+0x1f8>
 8006052:	2b80      	cmp	r3, #128	; 0x80
 8006054:	d814      	bhi.n	8006080 <UART_SetConfig+0x210>
 8006056:	2b00      	cmp	r3, #0
 8006058:	d002      	beq.n	8006060 <UART_SetConfig+0x1f0>
 800605a:	2b40      	cmp	r3, #64	; 0x40
 800605c:	d008      	beq.n	8006070 <UART_SetConfig+0x200>
 800605e:	e00f      	b.n	8006080 <UART_SetConfig+0x210>
 8006060:	2300      	movs	r3, #0
 8006062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006066:	e082      	b.n	800616e <UART_SetConfig+0x2fe>
 8006068:	2302      	movs	r3, #2
 800606a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800606e:	e07e      	b.n	800616e <UART_SetConfig+0x2fe>
 8006070:	2304      	movs	r3, #4
 8006072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006076:	e07a      	b.n	800616e <UART_SetConfig+0x2fe>
 8006078:	2308      	movs	r3, #8
 800607a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800607e:	e076      	b.n	800616e <UART_SetConfig+0x2fe>
 8006080:	2310      	movs	r3, #16
 8006082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006086:	e072      	b.n	800616e <UART_SetConfig+0x2fe>
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a35      	ldr	r2, [pc, #212]	; (8006164 <UART_SetConfig+0x2f4>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d12a      	bne.n	80060e8 <UART_SetConfig+0x278>
 8006092:	4b30      	ldr	r3, [pc, #192]	; (8006154 <UART_SetConfig+0x2e4>)
 8006094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006098:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800609c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060a0:	d01a      	beq.n	80060d8 <UART_SetConfig+0x268>
 80060a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060a6:	d81b      	bhi.n	80060e0 <UART_SetConfig+0x270>
 80060a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060ac:	d00c      	beq.n	80060c8 <UART_SetConfig+0x258>
 80060ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060b2:	d815      	bhi.n	80060e0 <UART_SetConfig+0x270>
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d003      	beq.n	80060c0 <UART_SetConfig+0x250>
 80060b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060bc:	d008      	beq.n	80060d0 <UART_SetConfig+0x260>
 80060be:	e00f      	b.n	80060e0 <UART_SetConfig+0x270>
 80060c0:	2300      	movs	r3, #0
 80060c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060c6:	e052      	b.n	800616e <UART_SetConfig+0x2fe>
 80060c8:	2302      	movs	r3, #2
 80060ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060ce:	e04e      	b.n	800616e <UART_SetConfig+0x2fe>
 80060d0:	2304      	movs	r3, #4
 80060d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060d6:	e04a      	b.n	800616e <UART_SetConfig+0x2fe>
 80060d8:	2308      	movs	r3, #8
 80060da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060de:	e046      	b.n	800616e <UART_SetConfig+0x2fe>
 80060e0:	2310      	movs	r3, #16
 80060e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060e6:	e042      	b.n	800616e <UART_SetConfig+0x2fe>
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a17      	ldr	r2, [pc, #92]	; (800614c <UART_SetConfig+0x2dc>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d13a      	bne.n	8006168 <UART_SetConfig+0x2f8>
 80060f2:	4b18      	ldr	r3, [pc, #96]	; (8006154 <UART_SetConfig+0x2e4>)
 80060f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80060fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006100:	d01a      	beq.n	8006138 <UART_SetConfig+0x2c8>
 8006102:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006106:	d81b      	bhi.n	8006140 <UART_SetConfig+0x2d0>
 8006108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800610c:	d00c      	beq.n	8006128 <UART_SetConfig+0x2b8>
 800610e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006112:	d815      	bhi.n	8006140 <UART_SetConfig+0x2d0>
 8006114:	2b00      	cmp	r3, #0
 8006116:	d003      	beq.n	8006120 <UART_SetConfig+0x2b0>
 8006118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800611c:	d008      	beq.n	8006130 <UART_SetConfig+0x2c0>
 800611e:	e00f      	b.n	8006140 <UART_SetConfig+0x2d0>
 8006120:	2300      	movs	r3, #0
 8006122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006126:	e022      	b.n	800616e <UART_SetConfig+0x2fe>
 8006128:	2302      	movs	r3, #2
 800612a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800612e:	e01e      	b.n	800616e <UART_SetConfig+0x2fe>
 8006130:	2304      	movs	r3, #4
 8006132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006136:	e01a      	b.n	800616e <UART_SetConfig+0x2fe>
 8006138:	2308      	movs	r3, #8
 800613a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800613e:	e016      	b.n	800616e <UART_SetConfig+0x2fe>
 8006140:	2310      	movs	r3, #16
 8006142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006146:	e012      	b.n	800616e <UART_SetConfig+0x2fe>
 8006148:	cfff69f3 	.word	0xcfff69f3
 800614c:	40008000 	.word	0x40008000
 8006150:	40013800 	.word	0x40013800
 8006154:	40021000 	.word	0x40021000
 8006158:	40004400 	.word	0x40004400
 800615c:	40004800 	.word	0x40004800
 8006160:	40004c00 	.word	0x40004c00
 8006164:	40005000 	.word	0x40005000
 8006168:	2310      	movs	r3, #16
 800616a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4aae      	ldr	r2, [pc, #696]	; (800642c <UART_SetConfig+0x5bc>)
 8006174:	4293      	cmp	r3, r2
 8006176:	f040 8097 	bne.w	80062a8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800617a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800617e:	2b08      	cmp	r3, #8
 8006180:	d823      	bhi.n	80061ca <UART_SetConfig+0x35a>
 8006182:	a201      	add	r2, pc, #4	; (adr r2, 8006188 <UART_SetConfig+0x318>)
 8006184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006188:	080061ad 	.word	0x080061ad
 800618c:	080061cb 	.word	0x080061cb
 8006190:	080061b5 	.word	0x080061b5
 8006194:	080061cb 	.word	0x080061cb
 8006198:	080061bb 	.word	0x080061bb
 800619c:	080061cb 	.word	0x080061cb
 80061a0:	080061cb 	.word	0x080061cb
 80061a4:	080061cb 	.word	0x080061cb
 80061a8:	080061c3 	.word	0x080061c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061ac:	f7fd fc8a 	bl	8003ac4 <HAL_RCC_GetPCLK1Freq>
 80061b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061b2:	e010      	b.n	80061d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061b4:	4b9e      	ldr	r3, [pc, #632]	; (8006430 <UART_SetConfig+0x5c0>)
 80061b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80061b8:	e00d      	b.n	80061d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061ba:	f7fd fc15 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 80061be:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061c0:	e009      	b.n	80061d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80061c8:	e005      	b.n	80061d6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80061ca:	2300      	movs	r3, #0
 80061cc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80061d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f000 8130 	beq.w	800643e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e2:	4a94      	ldr	r2, [pc, #592]	; (8006434 <UART_SetConfig+0x5c4>)
 80061e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061e8:	461a      	mov	r2, r3
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80061f0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	4613      	mov	r3, r2
 80061f8:	005b      	lsls	r3, r3, #1
 80061fa:	4413      	add	r3, r2
 80061fc:	69ba      	ldr	r2, [r7, #24]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d305      	bcc.n	800620e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	429a      	cmp	r2, r3
 800620c:	d903      	bls.n	8006216 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006214:	e113      	b.n	800643e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	2200      	movs	r2, #0
 800621a:	60bb      	str	r3, [r7, #8]
 800621c:	60fa      	str	r2, [r7, #12]
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006222:	4a84      	ldr	r2, [pc, #528]	; (8006434 <UART_SetConfig+0x5c4>)
 8006224:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006228:	b29b      	uxth	r3, r3
 800622a:	2200      	movs	r2, #0
 800622c:	603b      	str	r3, [r7, #0]
 800622e:	607a      	str	r2, [r7, #4]
 8006230:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006234:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006238:	f7fa f85a 	bl	80002f0 <__aeabi_uldivmod>
 800623c:	4602      	mov	r2, r0
 800623e:	460b      	mov	r3, r1
 8006240:	4610      	mov	r0, r2
 8006242:	4619      	mov	r1, r3
 8006244:	f04f 0200 	mov.w	r2, #0
 8006248:	f04f 0300 	mov.w	r3, #0
 800624c:	020b      	lsls	r3, r1, #8
 800624e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006252:	0202      	lsls	r2, r0, #8
 8006254:	6979      	ldr	r1, [r7, #20]
 8006256:	6849      	ldr	r1, [r1, #4]
 8006258:	0849      	lsrs	r1, r1, #1
 800625a:	2000      	movs	r0, #0
 800625c:	460c      	mov	r4, r1
 800625e:	4605      	mov	r5, r0
 8006260:	eb12 0804 	adds.w	r8, r2, r4
 8006264:	eb43 0905 	adc.w	r9, r3, r5
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	469a      	mov	sl, r3
 8006270:	4693      	mov	fp, r2
 8006272:	4652      	mov	r2, sl
 8006274:	465b      	mov	r3, fp
 8006276:	4640      	mov	r0, r8
 8006278:	4649      	mov	r1, r9
 800627a:	f7fa f839 	bl	80002f0 <__aeabi_uldivmod>
 800627e:	4602      	mov	r2, r0
 8006280:	460b      	mov	r3, r1
 8006282:	4613      	mov	r3, r2
 8006284:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006286:	6a3b      	ldr	r3, [r7, #32]
 8006288:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800628c:	d308      	bcc.n	80062a0 <UART_SetConfig+0x430>
 800628e:	6a3b      	ldr	r3, [r7, #32]
 8006290:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006294:	d204      	bcs.n	80062a0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	6a3a      	ldr	r2, [r7, #32]
 800629c:	60da      	str	r2, [r3, #12]
 800629e:	e0ce      	b.n	800643e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80062a6:	e0ca      	b.n	800643e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	69db      	ldr	r3, [r3, #28]
 80062ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062b0:	d166      	bne.n	8006380 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80062b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80062b6:	2b08      	cmp	r3, #8
 80062b8:	d827      	bhi.n	800630a <UART_SetConfig+0x49a>
 80062ba:	a201      	add	r2, pc, #4	; (adr r2, 80062c0 <UART_SetConfig+0x450>)
 80062bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c0:	080062e5 	.word	0x080062e5
 80062c4:	080062ed 	.word	0x080062ed
 80062c8:	080062f5 	.word	0x080062f5
 80062cc:	0800630b 	.word	0x0800630b
 80062d0:	080062fb 	.word	0x080062fb
 80062d4:	0800630b 	.word	0x0800630b
 80062d8:	0800630b 	.word	0x0800630b
 80062dc:	0800630b 	.word	0x0800630b
 80062e0:	08006303 	.word	0x08006303
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062e4:	f7fd fbee 	bl	8003ac4 <HAL_RCC_GetPCLK1Freq>
 80062e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062ea:	e014      	b.n	8006316 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062ec:	f7fd fc00 	bl	8003af0 <HAL_RCC_GetPCLK2Freq>
 80062f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062f2:	e010      	b.n	8006316 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062f4:	4b4e      	ldr	r3, [pc, #312]	; (8006430 <UART_SetConfig+0x5c0>)
 80062f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80062f8:	e00d      	b.n	8006316 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062fa:	f7fd fb75 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 80062fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006300:	e009      	b.n	8006316 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006306:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006308:	e005      	b.n	8006316 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800630a:	2300      	movs	r3, #0
 800630c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006314:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006318:	2b00      	cmp	r3, #0
 800631a:	f000 8090 	beq.w	800643e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006322:	4a44      	ldr	r2, [pc, #272]	; (8006434 <UART_SetConfig+0x5c4>)
 8006324:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006328:	461a      	mov	r2, r3
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006330:	005a      	lsls	r2, r3, #1
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	085b      	lsrs	r3, r3, #1
 8006338:	441a      	add	r2, r3
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006342:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006344:	6a3b      	ldr	r3, [r7, #32]
 8006346:	2b0f      	cmp	r3, #15
 8006348:	d916      	bls.n	8006378 <UART_SetConfig+0x508>
 800634a:	6a3b      	ldr	r3, [r7, #32]
 800634c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006350:	d212      	bcs.n	8006378 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006352:	6a3b      	ldr	r3, [r7, #32]
 8006354:	b29b      	uxth	r3, r3
 8006356:	f023 030f 	bic.w	r3, r3, #15
 800635a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800635c:	6a3b      	ldr	r3, [r7, #32]
 800635e:	085b      	lsrs	r3, r3, #1
 8006360:	b29b      	uxth	r3, r3
 8006362:	f003 0307 	and.w	r3, r3, #7
 8006366:	b29a      	uxth	r2, r3
 8006368:	8bfb      	ldrh	r3, [r7, #30]
 800636a:	4313      	orrs	r3, r2
 800636c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	8bfa      	ldrh	r2, [r7, #30]
 8006374:	60da      	str	r2, [r3, #12]
 8006376:	e062      	b.n	800643e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800637e:	e05e      	b.n	800643e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006380:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006384:	2b08      	cmp	r3, #8
 8006386:	d828      	bhi.n	80063da <UART_SetConfig+0x56a>
 8006388:	a201      	add	r2, pc, #4	; (adr r2, 8006390 <UART_SetConfig+0x520>)
 800638a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800638e:	bf00      	nop
 8006390:	080063b5 	.word	0x080063b5
 8006394:	080063bd 	.word	0x080063bd
 8006398:	080063c5 	.word	0x080063c5
 800639c:	080063db 	.word	0x080063db
 80063a0:	080063cb 	.word	0x080063cb
 80063a4:	080063db 	.word	0x080063db
 80063a8:	080063db 	.word	0x080063db
 80063ac:	080063db 	.word	0x080063db
 80063b0:	080063d3 	.word	0x080063d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063b4:	f7fd fb86 	bl	8003ac4 <HAL_RCC_GetPCLK1Freq>
 80063b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80063ba:	e014      	b.n	80063e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063bc:	f7fd fb98 	bl	8003af0 <HAL_RCC_GetPCLK2Freq>
 80063c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80063c2:	e010      	b.n	80063e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063c4:	4b1a      	ldr	r3, [pc, #104]	; (8006430 <UART_SetConfig+0x5c0>)
 80063c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80063c8:	e00d      	b.n	80063e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063ca:	f7fd fb0d 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 80063ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80063d0:	e009      	b.n	80063e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80063d8:	e005      	b.n	80063e6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80063da:	2300      	movs	r3, #0
 80063dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80063e4:	bf00      	nop
    }

    if (pclk != 0U)
 80063e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d028      	beq.n	800643e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f0:	4a10      	ldr	r2, [pc, #64]	; (8006434 <UART_SetConfig+0x5c4>)
 80063f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063f6:	461a      	mov	r2, r3
 80063f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	085b      	lsrs	r3, r3, #1
 8006404:	441a      	add	r2, r3
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	fbb2 f3f3 	udiv	r3, r2, r3
 800640e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006410:	6a3b      	ldr	r3, [r7, #32]
 8006412:	2b0f      	cmp	r3, #15
 8006414:	d910      	bls.n	8006438 <UART_SetConfig+0x5c8>
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800641c:	d20c      	bcs.n	8006438 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800641e:	6a3b      	ldr	r3, [r7, #32]
 8006420:	b29a      	uxth	r2, r3
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	60da      	str	r2, [r3, #12]
 8006428:	e009      	b.n	800643e <UART_SetConfig+0x5ce>
 800642a:	bf00      	nop
 800642c:	40008000 	.word	0x40008000
 8006430:	00f42400 	.word	0x00f42400
 8006434:	080080d8 	.word	0x080080d8
      }
      else
      {
        ret = HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	2201      	movs	r2, #1
 8006442:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	2201      	movs	r2, #1
 800644a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	2200      	movs	r2, #0
 8006452:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	2200      	movs	r2, #0
 8006458:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800645a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800645e:	4618      	mov	r0, r3
 8006460:	3730      	adds	r7, #48	; 0x30
 8006462:	46bd      	mov	sp, r7
 8006464:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006468 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00a      	beq.n	8006492 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	430a      	orrs	r2, r1
 8006490:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006496:	f003 0302 	and.w	r3, r3, #2
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00a      	beq.n	80064b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	430a      	orrs	r2, r1
 80064b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b8:	f003 0304 	and.w	r3, r3, #4
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00a      	beq.n	80064d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	430a      	orrs	r2, r1
 80064d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064da:	f003 0308 	and.w	r3, r3, #8
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00a      	beq.n	80064f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	430a      	orrs	r2, r1
 80064f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064fc:	f003 0310 	and.w	r3, r3, #16
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00a      	beq.n	800651a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651e:	f003 0320 	and.w	r3, r3, #32
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	430a      	orrs	r2, r1
 800653a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006544:	2b00      	cmp	r3, #0
 8006546:	d01a      	beq.n	800657e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	430a      	orrs	r2, r1
 800655c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006562:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006566:	d10a      	bne.n	800657e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	430a      	orrs	r2, r1
 800657c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00a      	beq.n	80065a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	430a      	orrs	r2, r1
 800659e:	605a      	str	r2, [r3, #4]
  }
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b086      	sub	sp, #24
 80065b0:	af02      	add	r7, sp, #8
 80065b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065bc:	f7fb f898 	bl	80016f0 <HAL_GetTick>
 80065c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0308 	and.w	r3, r3, #8
 80065cc:	2b08      	cmp	r3, #8
 80065ce:	d10e      	bne.n	80065ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065d4:	9300      	str	r3, [sp, #0]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 f82f 	bl	8006642 <UART_WaitOnFlagUntilTimeout>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d001      	beq.n	80065ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e025      	b.n	800663a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0304 	and.w	r3, r3, #4
 80065f8:	2b04      	cmp	r3, #4
 80065fa:	d10e      	bne.n	800661a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006600:	9300      	str	r3, [sp, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f819 	bl	8006642 <UART_WaitOnFlagUntilTimeout>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d001      	beq.n	800661a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e00f      	b.n	800663a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2220      	movs	r2, #32
 800661e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2220      	movs	r2, #32
 8006626:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006642:	b580      	push	{r7, lr}
 8006644:	b09c      	sub	sp, #112	; 0x70
 8006646:	af00      	add	r7, sp, #0
 8006648:	60f8      	str	r0, [r7, #12]
 800664a:	60b9      	str	r1, [r7, #8]
 800664c:	603b      	str	r3, [r7, #0]
 800664e:	4613      	mov	r3, r2
 8006650:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006652:	e0a9      	b.n	80067a8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006654:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800665a:	f000 80a5 	beq.w	80067a8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800665e:	f7fb f847 	bl	80016f0 <HAL_GetTick>
 8006662:	4602      	mov	r2, r0
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800666a:	429a      	cmp	r2, r3
 800666c:	d302      	bcc.n	8006674 <UART_WaitOnFlagUntilTimeout+0x32>
 800666e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006670:	2b00      	cmp	r3, #0
 8006672:	d140      	bne.n	80066f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800667c:	e853 3f00 	ldrex	r3, [r3]
 8006680:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006684:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006688:	667b      	str	r3, [r7, #100]	; 0x64
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	461a      	mov	r2, r3
 8006690:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006692:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006694:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006696:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006698:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800669a:	e841 2300 	strex	r3, r2, [r1]
 800669e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80066a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1e6      	bne.n	8006674 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	3308      	adds	r3, #8
 80066ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066b0:	e853 3f00 	ldrex	r3, [r3]
 80066b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b8:	f023 0301 	bic.w	r3, r3, #1
 80066bc:	663b      	str	r3, [r7, #96]	; 0x60
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	3308      	adds	r3, #8
 80066c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80066c6:	64ba      	str	r2, [r7, #72]	; 0x48
 80066c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80066cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066ce:	e841 2300 	strex	r3, r2, [r1]
 80066d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80066d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1e5      	bne.n	80066a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2220      	movs	r2, #32
 80066de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2220      	movs	r2, #32
 80066e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e069      	b.n	80067ca <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0304 	and.w	r3, r3, #4
 8006700:	2b00      	cmp	r3, #0
 8006702:	d051      	beq.n	80067a8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	69db      	ldr	r3, [r3, #28]
 800670a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800670e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006712:	d149      	bne.n	80067a8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800671c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006726:	e853 3f00 	ldrex	r3, [r3]
 800672a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800672c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006732:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	461a      	mov	r2, r3
 800673a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800673c:	637b      	str	r3, [r7, #52]	; 0x34
 800673e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006740:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006742:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006744:	e841 2300 	strex	r3, r2, [r1]
 8006748:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800674a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1e6      	bne.n	800671e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	3308      	adds	r3, #8
 8006756:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	e853 3f00 	ldrex	r3, [r3]
 800675e:	613b      	str	r3, [r7, #16]
   return(result);
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	f023 0301 	bic.w	r3, r3, #1
 8006766:	66bb      	str	r3, [r7, #104]	; 0x68
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	3308      	adds	r3, #8
 800676e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006770:	623a      	str	r2, [r7, #32]
 8006772:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006774:	69f9      	ldr	r1, [r7, #28]
 8006776:	6a3a      	ldr	r2, [r7, #32]
 8006778:	e841 2300 	strex	r3, r2, [r1]
 800677c:	61bb      	str	r3, [r7, #24]
   return(result);
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1e5      	bne.n	8006750 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2220      	movs	r2, #32
 8006788:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2220      	movs	r2, #32
 8006790:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2220      	movs	r2, #32
 8006798:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e010      	b.n	80067ca <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	69da      	ldr	r2, [r3, #28]
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	4013      	ands	r3, r2
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	bf0c      	ite	eq
 80067b8:	2301      	moveq	r3, #1
 80067ba:	2300      	movne	r3, #0
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	461a      	mov	r2, r3
 80067c0:	79fb      	ldrb	r3, [r7, #7]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	f43f af46 	beq.w	8006654 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3770      	adds	r7, #112	; 0x70
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
	...

080067d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b0a3      	sub	sp, #140	; 0x8c
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	4613      	mov	r3, r2
 80067e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	88fa      	ldrh	r2, [r7, #6]
 80067ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	88fa      	ldrh	r2, [r7, #6]
 80067f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006806:	d10e      	bne.n	8006826 <UART_Start_Receive_IT+0x52>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d105      	bne.n	800681c <UART_Start_Receive_IT+0x48>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006816:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800681a:	e02d      	b.n	8006878 <UART_Start_Receive_IT+0xa4>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	22ff      	movs	r2, #255	; 0xff
 8006820:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006824:	e028      	b.n	8006878 <UART_Start_Receive_IT+0xa4>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10d      	bne.n	800684a <UART_Start_Receive_IT+0x76>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d104      	bne.n	8006840 <UART_Start_Receive_IT+0x6c>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	22ff      	movs	r2, #255	; 0xff
 800683a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800683e:	e01b      	b.n	8006878 <UART_Start_Receive_IT+0xa4>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	227f      	movs	r2, #127	; 0x7f
 8006844:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006848:	e016      	b.n	8006878 <UART_Start_Receive_IT+0xa4>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006852:	d10d      	bne.n	8006870 <UART_Start_Receive_IT+0x9c>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d104      	bne.n	8006866 <UART_Start_Receive_IT+0x92>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	227f      	movs	r2, #127	; 0x7f
 8006860:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006864:	e008      	b.n	8006878 <UART_Start_Receive_IT+0xa4>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	223f      	movs	r2, #63	; 0x3f
 800686a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800686e:	e003      	b.n	8006878 <UART_Start_Receive_IT+0xa4>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2222      	movs	r2, #34	; 0x22
 8006884:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	3308      	adds	r3, #8
 800688e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006890:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006892:	e853 3f00 	ldrex	r3, [r3]
 8006896:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006898:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800689a:	f043 0301 	orr.w	r3, r3, #1
 800689e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	3308      	adds	r3, #8
 80068a8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80068ac:	673a      	str	r2, [r7, #112]	; 0x70
 80068ae:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80068b2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80068b4:	e841 2300 	strex	r3, r2, [r1]
 80068b8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80068ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1e3      	bne.n	8006888 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068c8:	d153      	bne.n	8006972 <UART_Start_Receive_IT+0x19e>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80068d0:	88fa      	ldrh	r2, [r7, #6]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d34d      	bcc.n	8006972 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068de:	d107      	bne.n	80068f0 <UART_Start_Receive_IT+0x11c>
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d103      	bne.n	80068f0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	4a4b      	ldr	r2, [pc, #300]	; (8006a18 <UART_Start_Receive_IT+0x244>)
 80068ec:	671a      	str	r2, [r3, #112]	; 0x70
 80068ee:	e002      	b.n	80068f6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	4a4a      	ldr	r2, [pc, #296]	; (8006a1c <UART_Start_Receive_IT+0x248>)
 80068f4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d01a      	beq.n	800693c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800690e:	e853 3f00 	ldrex	r3, [r3]
 8006912:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800691a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	461a      	mov	r2, r3
 8006924:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006928:	65fb      	str	r3, [r7, #92]	; 0x5c
 800692a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800692e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006930:	e841 2300 	strex	r3, r2, [r1]
 8006934:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006938:	2b00      	cmp	r3, #0
 800693a:	d1e4      	bne.n	8006906 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	3308      	adds	r3, #8
 8006942:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006946:	e853 3f00 	ldrex	r3, [r3]
 800694a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800694c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006952:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	3308      	adds	r3, #8
 800695a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800695c:	64ba      	str	r2, [r7, #72]	; 0x48
 800695e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006960:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006962:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006964:	e841 2300 	strex	r3, r2, [r1]
 8006968:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800696a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800696c:	2b00      	cmp	r3, #0
 800696e:	d1e5      	bne.n	800693c <UART_Start_Receive_IT+0x168>
 8006970:	e04a      	b.n	8006a08 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800697a:	d107      	bne.n	800698c <UART_Start_Receive_IT+0x1b8>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d103      	bne.n	800698c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	4a26      	ldr	r2, [pc, #152]	; (8006a20 <UART_Start_Receive_IT+0x24c>)
 8006988:	671a      	str	r2, [r3, #112]	; 0x70
 800698a:	e002      	b.n	8006992 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	4a25      	ldr	r2, [pc, #148]	; (8006a24 <UART_Start_Receive_IT+0x250>)
 8006990:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d019      	beq.n	80069d6 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069aa:	e853 3f00 	ldrex	r3, [r3]
 80069ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80069b6:	677b      	str	r3, [r7, #116]	; 0x74
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	461a      	mov	r2, r3
 80069be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069c0:	637b      	str	r3, [r7, #52]	; 0x34
 80069c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069c8:	e841 2300 	strex	r3, r2, [r1]
 80069cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80069ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1e6      	bne.n	80069a2 <UART_Start_Receive_IT+0x1ce>
 80069d4:	e018      	b.n	8006a08 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	e853 3f00 	ldrex	r3, [r3]
 80069e2:	613b      	str	r3, [r7, #16]
   return(result);
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	f043 0320 	orr.w	r3, r3, #32
 80069ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	461a      	mov	r2, r3
 80069f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069f4:	623b      	str	r3, [r7, #32]
 80069f6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f8:	69f9      	ldr	r1, [r7, #28]
 80069fa:	6a3a      	ldr	r2, [r7, #32]
 80069fc:	e841 2300 	strex	r3, r2, [r1]
 8006a00:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1e6      	bne.n	80069d6 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	378c      	adds	r7, #140	; 0x8c
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	08007131 	.word	0x08007131
 8006a1c:	08006e39 	.word	0x08006e39
 8006a20:	08006cd7 	.word	0x08006cd7
 8006a24:	08006b77 	.word	0x08006b77

08006a28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b095      	sub	sp, #84	; 0x54
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a38:	e853 3f00 	ldrex	r3, [r3]
 8006a3c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a4e:	643b      	str	r3, [r7, #64]	; 0x40
 8006a50:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a56:	e841 2300 	strex	r3, r2, [r1]
 8006a5a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1e6      	bne.n	8006a30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	3308      	adds	r3, #8
 8006a68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6a:	6a3b      	ldr	r3, [r7, #32]
 8006a6c:	e853 3f00 	ldrex	r3, [r3]
 8006a70:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a78:	f023 0301 	bic.w	r3, r3, #1
 8006a7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	3308      	adds	r3, #8
 8006a84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a8e:	e841 2300 	strex	r3, r2, [r1]
 8006a92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1e3      	bne.n	8006a62 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d118      	bne.n	8006ad4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	e853 3f00 	ldrex	r3, [r3]
 8006aae:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	f023 0310 	bic.w	r3, r3, #16
 8006ab6:	647b      	str	r3, [r7, #68]	; 0x44
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	461a      	mov	r2, r3
 8006abe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ac0:	61bb      	str	r3, [r7, #24]
 8006ac2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac4:	6979      	ldr	r1, [r7, #20]
 8006ac6:	69ba      	ldr	r2, [r7, #24]
 8006ac8:	e841 2300 	strex	r3, r2, [r1]
 8006acc:	613b      	str	r3, [r7, #16]
   return(result);
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1e6      	bne.n	8006aa2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006ae8:	bf00      	nop
 8006aea:	3754      	adds	r7, #84	; 0x54
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f7ff f996 	bl	8005e44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b18:	bf00      	nop
 8006b1a:	3710      	adds	r7, #16
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b088      	sub	sp, #32
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	e853 3f00 	ldrex	r3, [r3]
 8006b34:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b3c:	61fb      	str	r3, [r7, #28]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	461a      	mov	r2, r3
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	61bb      	str	r3, [r7, #24]
 8006b48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4a:	6979      	ldr	r1, [r7, #20]
 8006b4c:	69ba      	ldr	r2, [r7, #24]
 8006b4e:	e841 2300 	strex	r3, r2, [r1]
 8006b52:	613b      	str	r3, [r7, #16]
   return(result);
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1e6      	bne.n	8006b28 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2220      	movs	r2, #32
 8006b5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f7ff f961 	bl	8005e30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b6e:	bf00      	nop
 8006b70:	3720      	adds	r7, #32
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b096      	sub	sp, #88	; 0x58
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006b84:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b8e:	2b22      	cmp	r3, #34	; 0x22
 8006b90:	f040 8095 	bne.w	8006cbe <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006b9e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006ba2:	b2d9      	uxtb	r1, r3
 8006ba4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006ba8:	b2da      	uxtb	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bae:	400a      	ands	r2, r1
 8006bb0:	b2d2      	uxtb	r2, r2
 8006bb2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bb8:	1c5a      	adds	r2, r3, #1
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d178      	bne.n	8006cce <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be4:	e853 3f00 	ldrex	r3, [r3]
 8006be8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bf0:	653b      	str	r3, [r7, #80]	; 0x50
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bfa:	647b      	str	r3, [r7, #68]	; 0x44
 8006bfc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c02:	e841 2300 	strex	r3, r2, [r1]
 8006c06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d1e6      	bne.n	8006bdc <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	3308      	adds	r3, #8
 8006c14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c18:	e853 3f00 	ldrex	r3, [r3]
 8006c1c:	623b      	str	r3, [r7, #32]
   return(result);
 8006c1e:	6a3b      	ldr	r3, [r7, #32]
 8006c20:	f023 0301 	bic.w	r3, r3, #1
 8006c24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	3308      	adds	r3, #8
 8006c2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c2e:	633a      	str	r2, [r7, #48]	; 0x30
 8006c30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c36:	e841 2300 	strex	r3, r2, [r1]
 8006c3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1e5      	bne.n	8006c0e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2220      	movs	r2, #32
 8006c46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d12e      	bne.n	8006cb6 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	e853 3f00 	ldrex	r3, [r3]
 8006c6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f023 0310 	bic.w	r3, r3, #16
 8006c72:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	461a      	mov	r2, r3
 8006c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c7c:	61fb      	str	r3, [r7, #28]
 8006c7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c80:	69b9      	ldr	r1, [r7, #24]
 8006c82:	69fa      	ldr	r2, [r7, #28]
 8006c84:	e841 2300 	strex	r3, r2, [r1]
 8006c88:	617b      	str	r3, [r7, #20]
   return(result);
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d1e6      	bne.n	8006c5e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	69db      	ldr	r3, [r3, #28]
 8006c96:	f003 0310 	and.w	r3, r3, #16
 8006c9a:	2b10      	cmp	r3, #16
 8006c9c:	d103      	bne.n	8006ca6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2210      	movs	r2, #16
 8006ca4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006cac:	4619      	mov	r1, r3
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f7ff f8d2 	bl	8005e58 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006cb4:	e00b      	b.n	8006cce <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f7f9 ff9a 	bl	8000bf0 <HAL_UART_RxCpltCallback>
}
 8006cbc:	e007      	b.n	8006cce <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	699a      	ldr	r2, [r3, #24]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f042 0208 	orr.w	r2, r2, #8
 8006ccc:	619a      	str	r2, [r3, #24]
}
 8006cce:	bf00      	nop
 8006cd0:	3758      	adds	r7, #88	; 0x58
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b096      	sub	sp, #88	; 0x58
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006ce4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cee:	2b22      	cmp	r3, #34	; 0x22
 8006cf0:	f040 8095 	bne.w	8006e1e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d02:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006d04:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006d08:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d12:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d18:	1c9a      	adds	r2, r3, #2
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	3b01      	subs	r3, #1
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d178      	bne.n	8006e2e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d44:	e853 3f00 	ldrex	r3, [r3]
 8006d48:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	461a      	mov	r2, r3
 8006d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d5a:	643b      	str	r3, [r7, #64]	; 0x40
 8006d5c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d62:	e841 2300 	strex	r3, r2, [r1]
 8006d66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1e6      	bne.n	8006d3c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	3308      	adds	r3, #8
 8006d74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d76:	6a3b      	ldr	r3, [r7, #32]
 8006d78:	e853 3f00 	ldrex	r3, [r3]
 8006d7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	f023 0301 	bic.w	r3, r3, #1
 8006d84:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	3308      	adds	r3, #8
 8006d8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d96:	e841 2300 	strex	r3, r2, [r1]
 8006d9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d1e5      	bne.n	8006d6e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2220      	movs	r2, #32
 8006da6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d12e      	bne.n	8006e16 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	e853 3f00 	ldrex	r3, [r3]
 8006dca:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	f023 0310 	bic.w	r3, r3, #16
 8006dd2:	647b      	str	r3, [r7, #68]	; 0x44
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	461a      	mov	r2, r3
 8006dda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ddc:	61bb      	str	r3, [r7, #24]
 8006dde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de0:	6979      	ldr	r1, [r7, #20]
 8006de2:	69ba      	ldr	r2, [r7, #24]
 8006de4:	e841 2300 	strex	r3, r2, [r1]
 8006de8:	613b      	str	r3, [r7, #16]
   return(result);
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1e6      	bne.n	8006dbe <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	69db      	ldr	r3, [r3, #28]
 8006df6:	f003 0310 	and.w	r3, r3, #16
 8006dfa:	2b10      	cmp	r3, #16
 8006dfc:	d103      	bne.n	8006e06 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2210      	movs	r2, #16
 8006e04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f7ff f822 	bl	8005e58 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e14:	e00b      	b.n	8006e2e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f7f9 feea 	bl	8000bf0 <HAL_UART_RxCpltCallback>
}
 8006e1c:	e007      	b.n	8006e2e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	699a      	ldr	r2, [r3, #24]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f042 0208 	orr.w	r2, r2, #8
 8006e2c:	619a      	str	r2, [r3, #24]
}
 8006e2e:	bf00      	nop
 8006e30:	3758      	adds	r7, #88	; 0x58
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
	...

08006e38 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b0a6      	sub	sp, #152	; 0x98
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006e46:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	69db      	ldr	r3, [r3, #28]
 8006e50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e6e:	2b22      	cmp	r3, #34	; 0x22
 8006e70:	f040 814f 	bne.w	8007112 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006e7a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006e7e:	e0f6      	b.n	800706e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e86:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006e8a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8006e8e:	b2d9      	uxtb	r1, r3
 8006e90:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8006e94:	b2da      	uxtb	r2, r3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e9a:	400a      	ands	r2, r1
 8006e9c:	b2d2      	uxtb	r2, r2
 8006e9e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ea4:	1c5a      	adds	r2, r3, #1
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	69db      	ldr	r3, [r3, #28]
 8006ec2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006ec6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006eca:	f003 0307 	and.w	r3, r3, #7
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d053      	beq.n	8006f7a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ed2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006ed6:	f003 0301 	and.w	r3, r3, #1
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d011      	beq.n	8006f02 <UART_RxISR_8BIT_FIFOEN+0xca>
 8006ede:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00b      	beq.n	8006f02 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ef8:	f043 0201 	orr.w	r2, r3, #1
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f02:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006f06:	f003 0302 	and.w	r3, r3, #2
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d011      	beq.n	8006f32 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006f0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f12:	f003 0301 	and.w	r3, r3, #1
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00b      	beq.n	8006f32 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2202      	movs	r2, #2
 8006f20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f28:	f043 0204 	orr.w	r2, r3, #4
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f32:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006f36:	f003 0304 	and.w	r3, r3, #4
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d011      	beq.n	8006f62 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006f3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f42:	f003 0301 	and.w	r3, r3, #1
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00b      	beq.n	8006f62 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2204      	movs	r2, #4
 8006f50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f58:	f043 0202 	orr.w	r2, r3, #2
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d006      	beq.n	8006f7a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f7fe ff69 	bl	8005e44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d173      	bne.n	800706e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f8e:	e853 3f00 	ldrex	r3, [r3]
 8006f92:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006f94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006fa8:	66bb      	str	r3, [r7, #104]	; 0x68
 8006faa:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fac:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006fae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006fb0:	e841 2300 	strex	r3, r2, [r1]
 8006fb4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006fb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1e4      	bne.n	8006f86 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	3308      	adds	r3, #8
 8006fc2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fc6:	e853 3f00 	ldrex	r3, [r3]
 8006fca:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006fcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fd2:	f023 0301 	bic.w	r3, r3, #1
 8006fd6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	3308      	adds	r3, #8
 8006fde:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006fe0:	657a      	str	r2, [r7, #84]	; 0x54
 8006fe2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006fe6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006fe8:	e841 2300 	strex	r3, r2, [r1]
 8006fec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1e3      	bne.n	8006fbc <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2220      	movs	r2, #32
 8006ff8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007006:	2b01      	cmp	r3, #1
 8007008:	d12e      	bne.n	8007068 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007018:	e853 3f00 	ldrex	r3, [r3]
 800701c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800701e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007020:	f023 0310 	bic.w	r3, r3, #16
 8007024:	67bb      	str	r3, [r7, #120]	; 0x78
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	461a      	mov	r2, r3
 800702c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800702e:	643b      	str	r3, [r7, #64]	; 0x40
 8007030:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007032:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007034:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007036:	e841 2300 	strex	r3, r2, [r1]
 800703a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800703c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1e6      	bne.n	8007010 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	69db      	ldr	r3, [r3, #28]
 8007048:	f003 0310 	and.w	r3, r3, #16
 800704c:	2b10      	cmp	r3, #16
 800704e:	d103      	bne.n	8007058 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2210      	movs	r2, #16
 8007056:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800705e:	4619      	mov	r1, r3
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f7fe fef9 	bl	8005e58 <HAL_UARTEx_RxEventCallback>
 8007066:	e002      	b.n	800706e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f7f9 fdc1 	bl	8000bf0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800706e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007072:	2b00      	cmp	r3, #0
 8007074:	d006      	beq.n	8007084 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8007076:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800707a:	f003 0320 	and.w	r3, r3, #32
 800707e:	2b00      	cmp	r3, #0
 8007080:	f47f aefe 	bne.w	8006e80 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800708a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800708e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8007092:	2b00      	cmp	r3, #0
 8007094:	d045      	beq.n	8007122 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800709c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d23e      	bcs.n	8007122 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	3308      	adds	r3, #8
 80070aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ac:	6a3b      	ldr	r3, [r7, #32]
 80070ae:	e853 3f00 	ldrex	r3, [r3]
 80070b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070ba:	673b      	str	r3, [r7, #112]	; 0x70
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	3308      	adds	r3, #8
 80070c2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80070c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070cc:	e841 2300 	strex	r3, r2, [r1]
 80070d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1e5      	bne.n	80070a4 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a14      	ldr	r2, [pc, #80]	; (800712c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80070dc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	e853 3f00 	ldrex	r3, [r3]
 80070ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	f043 0320 	orr.w	r3, r3, #32
 80070f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	461a      	mov	r2, r3
 80070fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070fc:	61bb      	str	r3, [r7, #24]
 80070fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007100:	6979      	ldr	r1, [r7, #20]
 8007102:	69ba      	ldr	r2, [r7, #24]
 8007104:	e841 2300 	strex	r3, r2, [r1]
 8007108:	613b      	str	r3, [r7, #16]
   return(result);
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1e6      	bne.n	80070de <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007110:	e007      	b.n	8007122 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	699a      	ldr	r2, [r3, #24]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f042 0208 	orr.w	r2, r2, #8
 8007120:	619a      	str	r2, [r3, #24]
}
 8007122:	bf00      	nop
 8007124:	3798      	adds	r7, #152	; 0x98
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	08006b77 	.word	0x08006b77

08007130 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b0a8      	sub	sp, #160	; 0xa0
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800713e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	69db      	ldr	r3, [r3, #28]
 8007148:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007166:	2b22      	cmp	r3, #34	; 0x22
 8007168:	f040 8153 	bne.w	8007412 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007172:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007176:	e0fa      	b.n	800736e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007186:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800718a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800718e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007192:	4013      	ands	r3, r2
 8007194:	b29a      	uxth	r2, r3
 8007196:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800719a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071a0:	1c9a      	adds	r2, r3, #2
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	3b01      	subs	r3, #1
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	69db      	ldr	r3, [r3, #28]
 80071be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80071c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071c6:	f003 0307 	and.w	r3, r3, #7
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d053      	beq.n	8007276 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80071ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d011      	beq.n	80071fe <UART_RxISR_16BIT_FIFOEN+0xce>
 80071da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80071de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00b      	beq.n	80071fe <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2201      	movs	r2, #1
 80071ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071f4:	f043 0201 	orr.w	r2, r3, #1
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007202:	f003 0302 	and.w	r3, r3, #2
 8007206:	2b00      	cmp	r3, #0
 8007208:	d011      	beq.n	800722e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800720a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800720e:	f003 0301 	and.w	r3, r3, #1
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00b      	beq.n	800722e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2202      	movs	r2, #2
 800721c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007224:	f043 0204 	orr.w	r2, r3, #4
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800722e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007232:	f003 0304 	and.w	r3, r3, #4
 8007236:	2b00      	cmp	r3, #0
 8007238:	d011      	beq.n	800725e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800723a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00b      	beq.n	800725e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2204      	movs	r2, #4
 800724c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007254:	f043 0202 	orr.w	r2, r3, #2
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007264:	2b00      	cmp	r3, #0
 8007266:	d006      	beq.n	8007276 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f7fe fdeb 	bl	8005e44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800727c:	b29b      	uxth	r3, r3
 800727e:	2b00      	cmp	r3, #0
 8007280:	d175      	bne.n	800736e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007288:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800728a:	e853 3f00 	ldrex	r3, [r3]
 800728e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007290:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007292:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007296:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	461a      	mov	r2, r3
 80072a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80072a6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80072aa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80072ac:	e841 2300 	strex	r3, r2, [r1]
 80072b0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80072b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d1e4      	bne.n	8007282 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	3308      	adds	r3, #8
 80072be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072c2:	e853 3f00 	ldrex	r3, [r3]
 80072c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80072c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072ce:	f023 0301 	bic.w	r3, r3, #1
 80072d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	3308      	adds	r3, #8
 80072dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80072e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80072e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80072e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80072e8:	e841 2300 	strex	r3, r2, [r1]
 80072ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80072ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d1e1      	bne.n	80072b8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2220      	movs	r2, #32
 80072f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007306:	2b01      	cmp	r3, #1
 8007308:	d12e      	bne.n	8007368 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007318:	e853 3f00 	ldrex	r3, [r3]
 800731c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800731e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007320:	f023 0310 	bic.w	r3, r3, #16
 8007324:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	461a      	mov	r2, r3
 800732c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800732e:	647b      	str	r3, [r7, #68]	; 0x44
 8007330:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007332:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007334:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007336:	e841 2300 	strex	r3, r2, [r1]
 800733a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800733c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1e6      	bne.n	8007310 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	69db      	ldr	r3, [r3, #28]
 8007348:	f003 0310 	and.w	r3, r3, #16
 800734c:	2b10      	cmp	r3, #16
 800734e:	d103      	bne.n	8007358 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2210      	movs	r2, #16
 8007356:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800735e:	4619      	mov	r1, r3
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f7fe fd79 	bl	8005e58 <HAL_UARTEx_RxEventCallback>
 8007366:	e002      	b.n	800736e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f7f9 fc41 	bl	8000bf0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800736e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007372:	2b00      	cmp	r3, #0
 8007374:	d006      	beq.n	8007384 <UART_RxISR_16BIT_FIFOEN+0x254>
 8007376:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800737a:	f003 0320 	and.w	r3, r3, #32
 800737e:	2b00      	cmp	r3, #0
 8007380:	f47f aefa 	bne.w	8007178 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800738a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800738e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8007392:	2b00      	cmp	r3, #0
 8007394:	d045      	beq.n	8007422 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800739c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d23e      	bcs.n	8007422 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	3308      	adds	r3, #8
 80073aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ae:	e853 3f00 	ldrex	r3, [r3]
 80073b2:	623b      	str	r3, [r7, #32]
   return(result);
 80073b4:	6a3b      	ldr	r3, [r7, #32]
 80073b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073ba:	677b      	str	r3, [r7, #116]	; 0x74
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	3308      	adds	r3, #8
 80073c2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80073c4:	633a      	str	r2, [r7, #48]	; 0x30
 80073c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073cc:	e841 2300 	strex	r3, r2, [r1]
 80073d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80073d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1e5      	bne.n	80073a4 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a14      	ldr	r2, [pc, #80]	; (800742c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80073dc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	e853 3f00 	ldrex	r3, [r3]
 80073ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f043 0320 	orr.w	r3, r3, #32
 80073f2:	673b      	str	r3, [r7, #112]	; 0x70
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	461a      	mov	r2, r3
 80073fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073fc:	61fb      	str	r3, [r7, #28]
 80073fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007400:	69b9      	ldr	r1, [r7, #24]
 8007402:	69fa      	ldr	r2, [r7, #28]
 8007404:	e841 2300 	strex	r3, r2, [r1]
 8007408:	617b      	str	r3, [r7, #20]
   return(result);
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1e6      	bne.n	80073de <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007410:	e007      	b.n	8007422 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	699a      	ldr	r2, [r3, #24]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f042 0208 	orr.w	r2, r2, #8
 8007420:	619a      	str	r2, [r3, #24]
}
 8007422:	bf00      	nop
 8007424:	37a0      	adds	r7, #160	; 0xa0
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	08006cd7 	.word	0x08006cd7

08007430 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800747a:	2b01      	cmp	r3, #1
 800747c:	d101      	bne.n	8007482 <HAL_UARTEx_DisableFifoMode+0x16>
 800747e:	2302      	movs	r3, #2
 8007480:	e027      	b.n	80074d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2201      	movs	r2, #1
 8007486:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2224      	movs	r2, #36	; 0x24
 800748e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f022 0201 	bic.w	r2, r2, #1
 80074a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80074b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2220      	movs	r2, #32
 80074c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3714      	adds	r7, #20
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr

080074de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b084      	sub	sp, #16
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
 80074e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d101      	bne.n	80074f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80074f2:	2302      	movs	r3, #2
 80074f4:	e02d      	b.n	8007552 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2201      	movs	r2, #1
 80074fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2224      	movs	r2, #36	; 0x24
 8007502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f022 0201 	bic.w	r2, r2, #1
 800751c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	683a      	ldr	r2, [r7, #0]
 800752e:	430a      	orrs	r2, r1
 8007530:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f850 	bl	80075d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2220      	movs	r2, #32
 8007544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b084      	sub	sp, #16
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
 8007562:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800756a:	2b01      	cmp	r3, #1
 800756c:	d101      	bne.n	8007572 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800756e:	2302      	movs	r3, #2
 8007570:	e02d      	b.n	80075ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2201      	movs	r2, #1
 8007576:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2224      	movs	r2, #36	; 0x24
 800757e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f022 0201 	bic.w	r2, r2, #1
 8007598:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	683a      	ldr	r2, [r7, #0]
 80075aa:	430a      	orrs	r2, r1
 80075ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 f812 	bl	80075d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68fa      	ldr	r2, [r7, #12]
 80075ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2220      	movs	r2, #32
 80075c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
	...

080075d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d108      	bne.n	80075fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80075f8:	e031      	b.n	800765e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80075fa:	2308      	movs	r3, #8
 80075fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80075fe:	2308      	movs	r3, #8
 8007600:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	0e5b      	lsrs	r3, r3, #25
 800760a:	b2db      	uxtb	r3, r3
 800760c:	f003 0307 	and.w	r3, r3, #7
 8007610:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	0f5b      	lsrs	r3, r3, #29
 800761a:	b2db      	uxtb	r3, r3
 800761c:	f003 0307 	and.w	r3, r3, #7
 8007620:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007622:	7bbb      	ldrb	r3, [r7, #14]
 8007624:	7b3a      	ldrb	r2, [r7, #12]
 8007626:	4911      	ldr	r1, [pc, #68]	; (800766c <UARTEx_SetNbDataToProcess+0x94>)
 8007628:	5c8a      	ldrb	r2, [r1, r2]
 800762a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800762e:	7b3a      	ldrb	r2, [r7, #12]
 8007630:	490f      	ldr	r1, [pc, #60]	; (8007670 <UARTEx_SetNbDataToProcess+0x98>)
 8007632:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007634:	fb93 f3f2 	sdiv	r3, r3, r2
 8007638:	b29a      	uxth	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007640:	7bfb      	ldrb	r3, [r7, #15]
 8007642:	7b7a      	ldrb	r2, [r7, #13]
 8007644:	4909      	ldr	r1, [pc, #36]	; (800766c <UARTEx_SetNbDataToProcess+0x94>)
 8007646:	5c8a      	ldrb	r2, [r1, r2]
 8007648:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800764c:	7b7a      	ldrb	r2, [r7, #13]
 800764e:	4908      	ldr	r1, [pc, #32]	; (8007670 <UARTEx_SetNbDataToProcess+0x98>)
 8007650:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007652:	fb93 f3f2 	sdiv	r3, r3, r2
 8007656:	b29a      	uxth	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800765e:	bf00      	nop
 8007660:	3714      	adds	r7, #20
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	080080f0 	.word	0x080080f0
 8007670:	080080f8 	.word	0x080080f8

08007674 <sniprintf>:
 8007674:	b40c      	push	{r2, r3}
 8007676:	b530      	push	{r4, r5, lr}
 8007678:	4b17      	ldr	r3, [pc, #92]	; (80076d8 <sniprintf+0x64>)
 800767a:	1e0c      	subs	r4, r1, #0
 800767c:	681d      	ldr	r5, [r3, #0]
 800767e:	b09d      	sub	sp, #116	; 0x74
 8007680:	da08      	bge.n	8007694 <sniprintf+0x20>
 8007682:	238b      	movs	r3, #139	; 0x8b
 8007684:	602b      	str	r3, [r5, #0]
 8007686:	f04f 30ff 	mov.w	r0, #4294967295
 800768a:	b01d      	add	sp, #116	; 0x74
 800768c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007690:	b002      	add	sp, #8
 8007692:	4770      	bx	lr
 8007694:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007698:	f8ad 3014 	strh.w	r3, [sp, #20]
 800769c:	bf14      	ite	ne
 800769e:	f104 33ff 	addne.w	r3, r4, #4294967295
 80076a2:	4623      	moveq	r3, r4
 80076a4:	9304      	str	r3, [sp, #16]
 80076a6:	9307      	str	r3, [sp, #28]
 80076a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80076ac:	9002      	str	r0, [sp, #8]
 80076ae:	9006      	str	r0, [sp, #24]
 80076b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80076b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80076b6:	ab21      	add	r3, sp, #132	; 0x84
 80076b8:	a902      	add	r1, sp, #8
 80076ba:	4628      	mov	r0, r5
 80076bc:	9301      	str	r3, [sp, #4]
 80076be:	f000 f993 	bl	80079e8 <_svfiprintf_r>
 80076c2:	1c43      	adds	r3, r0, #1
 80076c4:	bfbc      	itt	lt
 80076c6:	238b      	movlt	r3, #139	; 0x8b
 80076c8:	602b      	strlt	r3, [r5, #0]
 80076ca:	2c00      	cmp	r4, #0
 80076cc:	d0dd      	beq.n	800768a <sniprintf+0x16>
 80076ce:	9b02      	ldr	r3, [sp, #8]
 80076d0:	2200      	movs	r2, #0
 80076d2:	701a      	strb	r2, [r3, #0]
 80076d4:	e7d9      	b.n	800768a <sniprintf+0x16>
 80076d6:	bf00      	nop
 80076d8:	200000d0 	.word	0x200000d0

080076dc <memset>:
 80076dc:	4402      	add	r2, r0
 80076de:	4603      	mov	r3, r0
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d100      	bne.n	80076e6 <memset+0xa>
 80076e4:	4770      	bx	lr
 80076e6:	f803 1b01 	strb.w	r1, [r3], #1
 80076ea:	e7f9      	b.n	80076e0 <memset+0x4>

080076ec <__errno>:
 80076ec:	4b01      	ldr	r3, [pc, #4]	; (80076f4 <__errno+0x8>)
 80076ee:	6818      	ldr	r0, [r3, #0]
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	200000d0 	.word	0x200000d0

080076f8 <__libc_init_array>:
 80076f8:	b570      	push	{r4, r5, r6, lr}
 80076fa:	4d0d      	ldr	r5, [pc, #52]	; (8007730 <__libc_init_array+0x38>)
 80076fc:	4c0d      	ldr	r4, [pc, #52]	; (8007734 <__libc_init_array+0x3c>)
 80076fe:	1b64      	subs	r4, r4, r5
 8007700:	10a4      	asrs	r4, r4, #2
 8007702:	2600      	movs	r6, #0
 8007704:	42a6      	cmp	r6, r4
 8007706:	d109      	bne.n	800771c <__libc_init_array+0x24>
 8007708:	4d0b      	ldr	r5, [pc, #44]	; (8007738 <__libc_init_array+0x40>)
 800770a:	4c0c      	ldr	r4, [pc, #48]	; (800773c <__libc_init_array+0x44>)
 800770c:	f000 fc6a 	bl	8007fe4 <_init>
 8007710:	1b64      	subs	r4, r4, r5
 8007712:	10a4      	asrs	r4, r4, #2
 8007714:	2600      	movs	r6, #0
 8007716:	42a6      	cmp	r6, r4
 8007718:	d105      	bne.n	8007726 <__libc_init_array+0x2e>
 800771a:	bd70      	pop	{r4, r5, r6, pc}
 800771c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007720:	4798      	blx	r3
 8007722:	3601      	adds	r6, #1
 8007724:	e7ee      	b.n	8007704 <__libc_init_array+0xc>
 8007726:	f855 3b04 	ldr.w	r3, [r5], #4
 800772a:	4798      	blx	r3
 800772c:	3601      	adds	r6, #1
 800772e:	e7f2      	b.n	8007716 <__libc_init_array+0x1e>
 8007730:	0800813c 	.word	0x0800813c
 8007734:	0800813c 	.word	0x0800813c
 8007738:	0800813c 	.word	0x0800813c
 800773c:	08008140 	.word	0x08008140

08007740 <__retarget_lock_acquire_recursive>:
 8007740:	4770      	bx	lr

08007742 <__retarget_lock_release_recursive>:
 8007742:	4770      	bx	lr

08007744 <_free_r>:
 8007744:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007746:	2900      	cmp	r1, #0
 8007748:	d044      	beq.n	80077d4 <_free_r+0x90>
 800774a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800774e:	9001      	str	r0, [sp, #4]
 8007750:	2b00      	cmp	r3, #0
 8007752:	f1a1 0404 	sub.w	r4, r1, #4
 8007756:	bfb8      	it	lt
 8007758:	18e4      	addlt	r4, r4, r3
 800775a:	f000 f8df 	bl	800791c <__malloc_lock>
 800775e:	4a1e      	ldr	r2, [pc, #120]	; (80077d8 <_free_r+0x94>)
 8007760:	9801      	ldr	r0, [sp, #4]
 8007762:	6813      	ldr	r3, [r2, #0]
 8007764:	b933      	cbnz	r3, 8007774 <_free_r+0x30>
 8007766:	6063      	str	r3, [r4, #4]
 8007768:	6014      	str	r4, [r2, #0]
 800776a:	b003      	add	sp, #12
 800776c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007770:	f000 b8da 	b.w	8007928 <__malloc_unlock>
 8007774:	42a3      	cmp	r3, r4
 8007776:	d908      	bls.n	800778a <_free_r+0x46>
 8007778:	6825      	ldr	r5, [r4, #0]
 800777a:	1961      	adds	r1, r4, r5
 800777c:	428b      	cmp	r3, r1
 800777e:	bf01      	itttt	eq
 8007780:	6819      	ldreq	r1, [r3, #0]
 8007782:	685b      	ldreq	r3, [r3, #4]
 8007784:	1949      	addeq	r1, r1, r5
 8007786:	6021      	streq	r1, [r4, #0]
 8007788:	e7ed      	b.n	8007766 <_free_r+0x22>
 800778a:	461a      	mov	r2, r3
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	b10b      	cbz	r3, 8007794 <_free_r+0x50>
 8007790:	42a3      	cmp	r3, r4
 8007792:	d9fa      	bls.n	800778a <_free_r+0x46>
 8007794:	6811      	ldr	r1, [r2, #0]
 8007796:	1855      	adds	r5, r2, r1
 8007798:	42a5      	cmp	r5, r4
 800779a:	d10b      	bne.n	80077b4 <_free_r+0x70>
 800779c:	6824      	ldr	r4, [r4, #0]
 800779e:	4421      	add	r1, r4
 80077a0:	1854      	adds	r4, r2, r1
 80077a2:	42a3      	cmp	r3, r4
 80077a4:	6011      	str	r1, [r2, #0]
 80077a6:	d1e0      	bne.n	800776a <_free_r+0x26>
 80077a8:	681c      	ldr	r4, [r3, #0]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	6053      	str	r3, [r2, #4]
 80077ae:	440c      	add	r4, r1
 80077b0:	6014      	str	r4, [r2, #0]
 80077b2:	e7da      	b.n	800776a <_free_r+0x26>
 80077b4:	d902      	bls.n	80077bc <_free_r+0x78>
 80077b6:	230c      	movs	r3, #12
 80077b8:	6003      	str	r3, [r0, #0]
 80077ba:	e7d6      	b.n	800776a <_free_r+0x26>
 80077bc:	6825      	ldr	r5, [r4, #0]
 80077be:	1961      	adds	r1, r4, r5
 80077c0:	428b      	cmp	r3, r1
 80077c2:	bf04      	itt	eq
 80077c4:	6819      	ldreq	r1, [r3, #0]
 80077c6:	685b      	ldreq	r3, [r3, #4]
 80077c8:	6063      	str	r3, [r4, #4]
 80077ca:	bf04      	itt	eq
 80077cc:	1949      	addeq	r1, r1, r5
 80077ce:	6021      	streq	r1, [r4, #0]
 80077d0:	6054      	str	r4, [r2, #4]
 80077d2:	e7ca      	b.n	800776a <_free_r+0x26>
 80077d4:	b003      	add	sp, #12
 80077d6:	bd30      	pop	{r4, r5, pc}
 80077d8:	20000540 	.word	0x20000540

080077dc <sbrk_aligned>:
 80077dc:	b570      	push	{r4, r5, r6, lr}
 80077de:	4e0e      	ldr	r6, [pc, #56]	; (8007818 <sbrk_aligned+0x3c>)
 80077e0:	460c      	mov	r4, r1
 80077e2:	6831      	ldr	r1, [r6, #0]
 80077e4:	4605      	mov	r5, r0
 80077e6:	b911      	cbnz	r1, 80077ee <sbrk_aligned+0x12>
 80077e8:	f000 fba6 	bl	8007f38 <_sbrk_r>
 80077ec:	6030      	str	r0, [r6, #0]
 80077ee:	4621      	mov	r1, r4
 80077f0:	4628      	mov	r0, r5
 80077f2:	f000 fba1 	bl	8007f38 <_sbrk_r>
 80077f6:	1c43      	adds	r3, r0, #1
 80077f8:	d00a      	beq.n	8007810 <sbrk_aligned+0x34>
 80077fa:	1cc4      	adds	r4, r0, #3
 80077fc:	f024 0403 	bic.w	r4, r4, #3
 8007800:	42a0      	cmp	r0, r4
 8007802:	d007      	beq.n	8007814 <sbrk_aligned+0x38>
 8007804:	1a21      	subs	r1, r4, r0
 8007806:	4628      	mov	r0, r5
 8007808:	f000 fb96 	bl	8007f38 <_sbrk_r>
 800780c:	3001      	adds	r0, #1
 800780e:	d101      	bne.n	8007814 <sbrk_aligned+0x38>
 8007810:	f04f 34ff 	mov.w	r4, #4294967295
 8007814:	4620      	mov	r0, r4
 8007816:	bd70      	pop	{r4, r5, r6, pc}
 8007818:	20000544 	.word	0x20000544

0800781c <_malloc_r>:
 800781c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007820:	1ccd      	adds	r5, r1, #3
 8007822:	f025 0503 	bic.w	r5, r5, #3
 8007826:	3508      	adds	r5, #8
 8007828:	2d0c      	cmp	r5, #12
 800782a:	bf38      	it	cc
 800782c:	250c      	movcc	r5, #12
 800782e:	2d00      	cmp	r5, #0
 8007830:	4607      	mov	r7, r0
 8007832:	db01      	blt.n	8007838 <_malloc_r+0x1c>
 8007834:	42a9      	cmp	r1, r5
 8007836:	d905      	bls.n	8007844 <_malloc_r+0x28>
 8007838:	230c      	movs	r3, #12
 800783a:	603b      	str	r3, [r7, #0]
 800783c:	2600      	movs	r6, #0
 800783e:	4630      	mov	r0, r6
 8007840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007844:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007918 <_malloc_r+0xfc>
 8007848:	f000 f868 	bl	800791c <__malloc_lock>
 800784c:	f8d8 3000 	ldr.w	r3, [r8]
 8007850:	461c      	mov	r4, r3
 8007852:	bb5c      	cbnz	r4, 80078ac <_malloc_r+0x90>
 8007854:	4629      	mov	r1, r5
 8007856:	4638      	mov	r0, r7
 8007858:	f7ff ffc0 	bl	80077dc <sbrk_aligned>
 800785c:	1c43      	adds	r3, r0, #1
 800785e:	4604      	mov	r4, r0
 8007860:	d155      	bne.n	800790e <_malloc_r+0xf2>
 8007862:	f8d8 4000 	ldr.w	r4, [r8]
 8007866:	4626      	mov	r6, r4
 8007868:	2e00      	cmp	r6, #0
 800786a:	d145      	bne.n	80078f8 <_malloc_r+0xdc>
 800786c:	2c00      	cmp	r4, #0
 800786e:	d048      	beq.n	8007902 <_malloc_r+0xe6>
 8007870:	6823      	ldr	r3, [r4, #0]
 8007872:	4631      	mov	r1, r6
 8007874:	4638      	mov	r0, r7
 8007876:	eb04 0903 	add.w	r9, r4, r3
 800787a:	f000 fb5d 	bl	8007f38 <_sbrk_r>
 800787e:	4581      	cmp	r9, r0
 8007880:	d13f      	bne.n	8007902 <_malloc_r+0xe6>
 8007882:	6821      	ldr	r1, [r4, #0]
 8007884:	1a6d      	subs	r5, r5, r1
 8007886:	4629      	mov	r1, r5
 8007888:	4638      	mov	r0, r7
 800788a:	f7ff ffa7 	bl	80077dc <sbrk_aligned>
 800788e:	3001      	adds	r0, #1
 8007890:	d037      	beq.n	8007902 <_malloc_r+0xe6>
 8007892:	6823      	ldr	r3, [r4, #0]
 8007894:	442b      	add	r3, r5
 8007896:	6023      	str	r3, [r4, #0]
 8007898:	f8d8 3000 	ldr.w	r3, [r8]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d038      	beq.n	8007912 <_malloc_r+0xf6>
 80078a0:	685a      	ldr	r2, [r3, #4]
 80078a2:	42a2      	cmp	r2, r4
 80078a4:	d12b      	bne.n	80078fe <_malloc_r+0xe2>
 80078a6:	2200      	movs	r2, #0
 80078a8:	605a      	str	r2, [r3, #4]
 80078aa:	e00f      	b.n	80078cc <_malloc_r+0xb0>
 80078ac:	6822      	ldr	r2, [r4, #0]
 80078ae:	1b52      	subs	r2, r2, r5
 80078b0:	d41f      	bmi.n	80078f2 <_malloc_r+0xd6>
 80078b2:	2a0b      	cmp	r2, #11
 80078b4:	d917      	bls.n	80078e6 <_malloc_r+0xca>
 80078b6:	1961      	adds	r1, r4, r5
 80078b8:	42a3      	cmp	r3, r4
 80078ba:	6025      	str	r5, [r4, #0]
 80078bc:	bf18      	it	ne
 80078be:	6059      	strne	r1, [r3, #4]
 80078c0:	6863      	ldr	r3, [r4, #4]
 80078c2:	bf08      	it	eq
 80078c4:	f8c8 1000 	streq.w	r1, [r8]
 80078c8:	5162      	str	r2, [r4, r5]
 80078ca:	604b      	str	r3, [r1, #4]
 80078cc:	4638      	mov	r0, r7
 80078ce:	f104 060b 	add.w	r6, r4, #11
 80078d2:	f000 f829 	bl	8007928 <__malloc_unlock>
 80078d6:	f026 0607 	bic.w	r6, r6, #7
 80078da:	1d23      	adds	r3, r4, #4
 80078dc:	1af2      	subs	r2, r6, r3
 80078de:	d0ae      	beq.n	800783e <_malloc_r+0x22>
 80078e0:	1b9b      	subs	r3, r3, r6
 80078e2:	50a3      	str	r3, [r4, r2]
 80078e4:	e7ab      	b.n	800783e <_malloc_r+0x22>
 80078e6:	42a3      	cmp	r3, r4
 80078e8:	6862      	ldr	r2, [r4, #4]
 80078ea:	d1dd      	bne.n	80078a8 <_malloc_r+0x8c>
 80078ec:	f8c8 2000 	str.w	r2, [r8]
 80078f0:	e7ec      	b.n	80078cc <_malloc_r+0xb0>
 80078f2:	4623      	mov	r3, r4
 80078f4:	6864      	ldr	r4, [r4, #4]
 80078f6:	e7ac      	b.n	8007852 <_malloc_r+0x36>
 80078f8:	4634      	mov	r4, r6
 80078fa:	6876      	ldr	r6, [r6, #4]
 80078fc:	e7b4      	b.n	8007868 <_malloc_r+0x4c>
 80078fe:	4613      	mov	r3, r2
 8007900:	e7cc      	b.n	800789c <_malloc_r+0x80>
 8007902:	230c      	movs	r3, #12
 8007904:	603b      	str	r3, [r7, #0]
 8007906:	4638      	mov	r0, r7
 8007908:	f000 f80e 	bl	8007928 <__malloc_unlock>
 800790c:	e797      	b.n	800783e <_malloc_r+0x22>
 800790e:	6025      	str	r5, [r4, #0]
 8007910:	e7dc      	b.n	80078cc <_malloc_r+0xb0>
 8007912:	605b      	str	r3, [r3, #4]
 8007914:	deff      	udf	#255	; 0xff
 8007916:	bf00      	nop
 8007918:	20000540 	.word	0x20000540

0800791c <__malloc_lock>:
 800791c:	4801      	ldr	r0, [pc, #4]	; (8007924 <__malloc_lock+0x8>)
 800791e:	f7ff bf0f 	b.w	8007740 <__retarget_lock_acquire_recursive>
 8007922:	bf00      	nop
 8007924:	2000053c 	.word	0x2000053c

08007928 <__malloc_unlock>:
 8007928:	4801      	ldr	r0, [pc, #4]	; (8007930 <__malloc_unlock+0x8>)
 800792a:	f7ff bf0a 	b.w	8007742 <__retarget_lock_release_recursive>
 800792e:	bf00      	nop
 8007930:	2000053c 	.word	0x2000053c

08007934 <__ssputs_r>:
 8007934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007938:	688e      	ldr	r6, [r1, #8]
 800793a:	461f      	mov	r7, r3
 800793c:	42be      	cmp	r6, r7
 800793e:	680b      	ldr	r3, [r1, #0]
 8007940:	4682      	mov	sl, r0
 8007942:	460c      	mov	r4, r1
 8007944:	4690      	mov	r8, r2
 8007946:	d82c      	bhi.n	80079a2 <__ssputs_r+0x6e>
 8007948:	898a      	ldrh	r2, [r1, #12]
 800794a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800794e:	d026      	beq.n	800799e <__ssputs_r+0x6a>
 8007950:	6965      	ldr	r5, [r4, #20]
 8007952:	6909      	ldr	r1, [r1, #16]
 8007954:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007958:	eba3 0901 	sub.w	r9, r3, r1
 800795c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007960:	1c7b      	adds	r3, r7, #1
 8007962:	444b      	add	r3, r9
 8007964:	106d      	asrs	r5, r5, #1
 8007966:	429d      	cmp	r5, r3
 8007968:	bf38      	it	cc
 800796a:	461d      	movcc	r5, r3
 800796c:	0553      	lsls	r3, r2, #21
 800796e:	d527      	bpl.n	80079c0 <__ssputs_r+0x8c>
 8007970:	4629      	mov	r1, r5
 8007972:	f7ff ff53 	bl	800781c <_malloc_r>
 8007976:	4606      	mov	r6, r0
 8007978:	b360      	cbz	r0, 80079d4 <__ssputs_r+0xa0>
 800797a:	6921      	ldr	r1, [r4, #16]
 800797c:	464a      	mov	r2, r9
 800797e:	f000 faeb 	bl	8007f58 <memcpy>
 8007982:	89a3      	ldrh	r3, [r4, #12]
 8007984:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800798c:	81a3      	strh	r3, [r4, #12]
 800798e:	6126      	str	r6, [r4, #16]
 8007990:	6165      	str	r5, [r4, #20]
 8007992:	444e      	add	r6, r9
 8007994:	eba5 0509 	sub.w	r5, r5, r9
 8007998:	6026      	str	r6, [r4, #0]
 800799a:	60a5      	str	r5, [r4, #8]
 800799c:	463e      	mov	r6, r7
 800799e:	42be      	cmp	r6, r7
 80079a0:	d900      	bls.n	80079a4 <__ssputs_r+0x70>
 80079a2:	463e      	mov	r6, r7
 80079a4:	6820      	ldr	r0, [r4, #0]
 80079a6:	4632      	mov	r2, r6
 80079a8:	4641      	mov	r1, r8
 80079aa:	f000 faab 	bl	8007f04 <memmove>
 80079ae:	68a3      	ldr	r3, [r4, #8]
 80079b0:	1b9b      	subs	r3, r3, r6
 80079b2:	60a3      	str	r3, [r4, #8]
 80079b4:	6823      	ldr	r3, [r4, #0]
 80079b6:	4433      	add	r3, r6
 80079b8:	6023      	str	r3, [r4, #0]
 80079ba:	2000      	movs	r0, #0
 80079bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079c0:	462a      	mov	r2, r5
 80079c2:	f000 fad7 	bl	8007f74 <_realloc_r>
 80079c6:	4606      	mov	r6, r0
 80079c8:	2800      	cmp	r0, #0
 80079ca:	d1e0      	bne.n	800798e <__ssputs_r+0x5a>
 80079cc:	6921      	ldr	r1, [r4, #16]
 80079ce:	4650      	mov	r0, sl
 80079d0:	f7ff feb8 	bl	8007744 <_free_r>
 80079d4:	230c      	movs	r3, #12
 80079d6:	f8ca 3000 	str.w	r3, [sl]
 80079da:	89a3      	ldrh	r3, [r4, #12]
 80079dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079e0:	81a3      	strh	r3, [r4, #12]
 80079e2:	f04f 30ff 	mov.w	r0, #4294967295
 80079e6:	e7e9      	b.n	80079bc <__ssputs_r+0x88>

080079e8 <_svfiprintf_r>:
 80079e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ec:	4698      	mov	r8, r3
 80079ee:	898b      	ldrh	r3, [r1, #12]
 80079f0:	061b      	lsls	r3, r3, #24
 80079f2:	b09d      	sub	sp, #116	; 0x74
 80079f4:	4607      	mov	r7, r0
 80079f6:	460d      	mov	r5, r1
 80079f8:	4614      	mov	r4, r2
 80079fa:	d50e      	bpl.n	8007a1a <_svfiprintf_r+0x32>
 80079fc:	690b      	ldr	r3, [r1, #16]
 80079fe:	b963      	cbnz	r3, 8007a1a <_svfiprintf_r+0x32>
 8007a00:	2140      	movs	r1, #64	; 0x40
 8007a02:	f7ff ff0b 	bl	800781c <_malloc_r>
 8007a06:	6028      	str	r0, [r5, #0]
 8007a08:	6128      	str	r0, [r5, #16]
 8007a0a:	b920      	cbnz	r0, 8007a16 <_svfiprintf_r+0x2e>
 8007a0c:	230c      	movs	r3, #12
 8007a0e:	603b      	str	r3, [r7, #0]
 8007a10:	f04f 30ff 	mov.w	r0, #4294967295
 8007a14:	e0d0      	b.n	8007bb8 <_svfiprintf_r+0x1d0>
 8007a16:	2340      	movs	r3, #64	; 0x40
 8007a18:	616b      	str	r3, [r5, #20]
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a1e:	2320      	movs	r3, #32
 8007a20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a24:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a28:	2330      	movs	r3, #48	; 0x30
 8007a2a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007bd0 <_svfiprintf_r+0x1e8>
 8007a2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a32:	f04f 0901 	mov.w	r9, #1
 8007a36:	4623      	mov	r3, r4
 8007a38:	469a      	mov	sl, r3
 8007a3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a3e:	b10a      	cbz	r2, 8007a44 <_svfiprintf_r+0x5c>
 8007a40:	2a25      	cmp	r2, #37	; 0x25
 8007a42:	d1f9      	bne.n	8007a38 <_svfiprintf_r+0x50>
 8007a44:	ebba 0b04 	subs.w	fp, sl, r4
 8007a48:	d00b      	beq.n	8007a62 <_svfiprintf_r+0x7a>
 8007a4a:	465b      	mov	r3, fp
 8007a4c:	4622      	mov	r2, r4
 8007a4e:	4629      	mov	r1, r5
 8007a50:	4638      	mov	r0, r7
 8007a52:	f7ff ff6f 	bl	8007934 <__ssputs_r>
 8007a56:	3001      	adds	r0, #1
 8007a58:	f000 80a9 	beq.w	8007bae <_svfiprintf_r+0x1c6>
 8007a5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a5e:	445a      	add	r2, fp
 8007a60:	9209      	str	r2, [sp, #36]	; 0x24
 8007a62:	f89a 3000 	ldrb.w	r3, [sl]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	f000 80a1 	beq.w	8007bae <_svfiprintf_r+0x1c6>
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a76:	f10a 0a01 	add.w	sl, sl, #1
 8007a7a:	9304      	str	r3, [sp, #16]
 8007a7c:	9307      	str	r3, [sp, #28]
 8007a7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a82:	931a      	str	r3, [sp, #104]	; 0x68
 8007a84:	4654      	mov	r4, sl
 8007a86:	2205      	movs	r2, #5
 8007a88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a8c:	4850      	ldr	r0, [pc, #320]	; (8007bd0 <_svfiprintf_r+0x1e8>)
 8007a8e:	f7f8 fbdf 	bl	8000250 <memchr>
 8007a92:	9a04      	ldr	r2, [sp, #16]
 8007a94:	b9d8      	cbnz	r0, 8007ace <_svfiprintf_r+0xe6>
 8007a96:	06d0      	lsls	r0, r2, #27
 8007a98:	bf44      	itt	mi
 8007a9a:	2320      	movmi	r3, #32
 8007a9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007aa0:	0711      	lsls	r1, r2, #28
 8007aa2:	bf44      	itt	mi
 8007aa4:	232b      	movmi	r3, #43	; 0x2b
 8007aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007aaa:	f89a 3000 	ldrb.w	r3, [sl]
 8007aae:	2b2a      	cmp	r3, #42	; 0x2a
 8007ab0:	d015      	beq.n	8007ade <_svfiprintf_r+0xf6>
 8007ab2:	9a07      	ldr	r2, [sp, #28]
 8007ab4:	4654      	mov	r4, sl
 8007ab6:	2000      	movs	r0, #0
 8007ab8:	f04f 0c0a 	mov.w	ip, #10
 8007abc:	4621      	mov	r1, r4
 8007abe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ac2:	3b30      	subs	r3, #48	; 0x30
 8007ac4:	2b09      	cmp	r3, #9
 8007ac6:	d94d      	bls.n	8007b64 <_svfiprintf_r+0x17c>
 8007ac8:	b1b0      	cbz	r0, 8007af8 <_svfiprintf_r+0x110>
 8007aca:	9207      	str	r2, [sp, #28]
 8007acc:	e014      	b.n	8007af8 <_svfiprintf_r+0x110>
 8007ace:	eba0 0308 	sub.w	r3, r0, r8
 8007ad2:	fa09 f303 	lsl.w	r3, r9, r3
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	9304      	str	r3, [sp, #16]
 8007ada:	46a2      	mov	sl, r4
 8007adc:	e7d2      	b.n	8007a84 <_svfiprintf_r+0x9c>
 8007ade:	9b03      	ldr	r3, [sp, #12]
 8007ae0:	1d19      	adds	r1, r3, #4
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	9103      	str	r1, [sp, #12]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	bfbb      	ittet	lt
 8007aea:	425b      	neglt	r3, r3
 8007aec:	f042 0202 	orrlt.w	r2, r2, #2
 8007af0:	9307      	strge	r3, [sp, #28]
 8007af2:	9307      	strlt	r3, [sp, #28]
 8007af4:	bfb8      	it	lt
 8007af6:	9204      	strlt	r2, [sp, #16]
 8007af8:	7823      	ldrb	r3, [r4, #0]
 8007afa:	2b2e      	cmp	r3, #46	; 0x2e
 8007afc:	d10c      	bne.n	8007b18 <_svfiprintf_r+0x130>
 8007afe:	7863      	ldrb	r3, [r4, #1]
 8007b00:	2b2a      	cmp	r3, #42	; 0x2a
 8007b02:	d134      	bne.n	8007b6e <_svfiprintf_r+0x186>
 8007b04:	9b03      	ldr	r3, [sp, #12]
 8007b06:	1d1a      	adds	r2, r3, #4
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	9203      	str	r2, [sp, #12]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	bfb8      	it	lt
 8007b10:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b14:	3402      	adds	r4, #2
 8007b16:	9305      	str	r3, [sp, #20]
 8007b18:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007be0 <_svfiprintf_r+0x1f8>
 8007b1c:	7821      	ldrb	r1, [r4, #0]
 8007b1e:	2203      	movs	r2, #3
 8007b20:	4650      	mov	r0, sl
 8007b22:	f7f8 fb95 	bl	8000250 <memchr>
 8007b26:	b138      	cbz	r0, 8007b38 <_svfiprintf_r+0x150>
 8007b28:	9b04      	ldr	r3, [sp, #16]
 8007b2a:	eba0 000a 	sub.w	r0, r0, sl
 8007b2e:	2240      	movs	r2, #64	; 0x40
 8007b30:	4082      	lsls	r2, r0
 8007b32:	4313      	orrs	r3, r2
 8007b34:	3401      	adds	r4, #1
 8007b36:	9304      	str	r3, [sp, #16]
 8007b38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b3c:	4825      	ldr	r0, [pc, #148]	; (8007bd4 <_svfiprintf_r+0x1ec>)
 8007b3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b42:	2206      	movs	r2, #6
 8007b44:	f7f8 fb84 	bl	8000250 <memchr>
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	d038      	beq.n	8007bbe <_svfiprintf_r+0x1d6>
 8007b4c:	4b22      	ldr	r3, [pc, #136]	; (8007bd8 <_svfiprintf_r+0x1f0>)
 8007b4e:	bb1b      	cbnz	r3, 8007b98 <_svfiprintf_r+0x1b0>
 8007b50:	9b03      	ldr	r3, [sp, #12]
 8007b52:	3307      	adds	r3, #7
 8007b54:	f023 0307 	bic.w	r3, r3, #7
 8007b58:	3308      	adds	r3, #8
 8007b5a:	9303      	str	r3, [sp, #12]
 8007b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b5e:	4433      	add	r3, r6
 8007b60:	9309      	str	r3, [sp, #36]	; 0x24
 8007b62:	e768      	b.n	8007a36 <_svfiprintf_r+0x4e>
 8007b64:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b68:	460c      	mov	r4, r1
 8007b6a:	2001      	movs	r0, #1
 8007b6c:	e7a6      	b.n	8007abc <_svfiprintf_r+0xd4>
 8007b6e:	2300      	movs	r3, #0
 8007b70:	3401      	adds	r4, #1
 8007b72:	9305      	str	r3, [sp, #20]
 8007b74:	4619      	mov	r1, r3
 8007b76:	f04f 0c0a 	mov.w	ip, #10
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b80:	3a30      	subs	r2, #48	; 0x30
 8007b82:	2a09      	cmp	r2, #9
 8007b84:	d903      	bls.n	8007b8e <_svfiprintf_r+0x1a6>
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d0c6      	beq.n	8007b18 <_svfiprintf_r+0x130>
 8007b8a:	9105      	str	r1, [sp, #20]
 8007b8c:	e7c4      	b.n	8007b18 <_svfiprintf_r+0x130>
 8007b8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b92:	4604      	mov	r4, r0
 8007b94:	2301      	movs	r3, #1
 8007b96:	e7f0      	b.n	8007b7a <_svfiprintf_r+0x192>
 8007b98:	ab03      	add	r3, sp, #12
 8007b9a:	9300      	str	r3, [sp, #0]
 8007b9c:	462a      	mov	r2, r5
 8007b9e:	4b0f      	ldr	r3, [pc, #60]	; (8007bdc <_svfiprintf_r+0x1f4>)
 8007ba0:	a904      	add	r1, sp, #16
 8007ba2:	4638      	mov	r0, r7
 8007ba4:	f3af 8000 	nop.w
 8007ba8:	1c42      	adds	r2, r0, #1
 8007baa:	4606      	mov	r6, r0
 8007bac:	d1d6      	bne.n	8007b5c <_svfiprintf_r+0x174>
 8007bae:	89ab      	ldrh	r3, [r5, #12]
 8007bb0:	065b      	lsls	r3, r3, #25
 8007bb2:	f53f af2d 	bmi.w	8007a10 <_svfiprintf_r+0x28>
 8007bb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bb8:	b01d      	add	sp, #116	; 0x74
 8007bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bbe:	ab03      	add	r3, sp, #12
 8007bc0:	9300      	str	r3, [sp, #0]
 8007bc2:	462a      	mov	r2, r5
 8007bc4:	4b05      	ldr	r3, [pc, #20]	; (8007bdc <_svfiprintf_r+0x1f4>)
 8007bc6:	a904      	add	r1, sp, #16
 8007bc8:	4638      	mov	r0, r7
 8007bca:	f000 f879 	bl	8007cc0 <_printf_i>
 8007bce:	e7eb      	b.n	8007ba8 <_svfiprintf_r+0x1c0>
 8007bd0:	08008100 	.word	0x08008100
 8007bd4:	0800810a 	.word	0x0800810a
 8007bd8:	00000000 	.word	0x00000000
 8007bdc:	08007935 	.word	0x08007935
 8007be0:	08008106 	.word	0x08008106

08007be4 <_printf_common>:
 8007be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007be8:	4616      	mov	r6, r2
 8007bea:	4699      	mov	r9, r3
 8007bec:	688a      	ldr	r2, [r1, #8]
 8007bee:	690b      	ldr	r3, [r1, #16]
 8007bf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	bfb8      	it	lt
 8007bf8:	4613      	movlt	r3, r2
 8007bfa:	6033      	str	r3, [r6, #0]
 8007bfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c00:	4607      	mov	r7, r0
 8007c02:	460c      	mov	r4, r1
 8007c04:	b10a      	cbz	r2, 8007c0a <_printf_common+0x26>
 8007c06:	3301      	adds	r3, #1
 8007c08:	6033      	str	r3, [r6, #0]
 8007c0a:	6823      	ldr	r3, [r4, #0]
 8007c0c:	0699      	lsls	r1, r3, #26
 8007c0e:	bf42      	ittt	mi
 8007c10:	6833      	ldrmi	r3, [r6, #0]
 8007c12:	3302      	addmi	r3, #2
 8007c14:	6033      	strmi	r3, [r6, #0]
 8007c16:	6825      	ldr	r5, [r4, #0]
 8007c18:	f015 0506 	ands.w	r5, r5, #6
 8007c1c:	d106      	bne.n	8007c2c <_printf_common+0x48>
 8007c1e:	f104 0a19 	add.w	sl, r4, #25
 8007c22:	68e3      	ldr	r3, [r4, #12]
 8007c24:	6832      	ldr	r2, [r6, #0]
 8007c26:	1a9b      	subs	r3, r3, r2
 8007c28:	42ab      	cmp	r3, r5
 8007c2a:	dc26      	bgt.n	8007c7a <_printf_common+0x96>
 8007c2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c30:	1e13      	subs	r3, r2, #0
 8007c32:	6822      	ldr	r2, [r4, #0]
 8007c34:	bf18      	it	ne
 8007c36:	2301      	movne	r3, #1
 8007c38:	0692      	lsls	r2, r2, #26
 8007c3a:	d42b      	bmi.n	8007c94 <_printf_common+0xb0>
 8007c3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c40:	4649      	mov	r1, r9
 8007c42:	4638      	mov	r0, r7
 8007c44:	47c0      	blx	r8
 8007c46:	3001      	adds	r0, #1
 8007c48:	d01e      	beq.n	8007c88 <_printf_common+0xa4>
 8007c4a:	6823      	ldr	r3, [r4, #0]
 8007c4c:	6922      	ldr	r2, [r4, #16]
 8007c4e:	f003 0306 	and.w	r3, r3, #6
 8007c52:	2b04      	cmp	r3, #4
 8007c54:	bf02      	ittt	eq
 8007c56:	68e5      	ldreq	r5, [r4, #12]
 8007c58:	6833      	ldreq	r3, [r6, #0]
 8007c5a:	1aed      	subeq	r5, r5, r3
 8007c5c:	68a3      	ldr	r3, [r4, #8]
 8007c5e:	bf0c      	ite	eq
 8007c60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c64:	2500      	movne	r5, #0
 8007c66:	4293      	cmp	r3, r2
 8007c68:	bfc4      	itt	gt
 8007c6a:	1a9b      	subgt	r3, r3, r2
 8007c6c:	18ed      	addgt	r5, r5, r3
 8007c6e:	2600      	movs	r6, #0
 8007c70:	341a      	adds	r4, #26
 8007c72:	42b5      	cmp	r5, r6
 8007c74:	d11a      	bne.n	8007cac <_printf_common+0xc8>
 8007c76:	2000      	movs	r0, #0
 8007c78:	e008      	b.n	8007c8c <_printf_common+0xa8>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	4652      	mov	r2, sl
 8007c7e:	4649      	mov	r1, r9
 8007c80:	4638      	mov	r0, r7
 8007c82:	47c0      	blx	r8
 8007c84:	3001      	adds	r0, #1
 8007c86:	d103      	bne.n	8007c90 <_printf_common+0xac>
 8007c88:	f04f 30ff 	mov.w	r0, #4294967295
 8007c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c90:	3501      	adds	r5, #1
 8007c92:	e7c6      	b.n	8007c22 <_printf_common+0x3e>
 8007c94:	18e1      	adds	r1, r4, r3
 8007c96:	1c5a      	adds	r2, r3, #1
 8007c98:	2030      	movs	r0, #48	; 0x30
 8007c9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c9e:	4422      	add	r2, r4
 8007ca0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ca4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ca8:	3302      	adds	r3, #2
 8007caa:	e7c7      	b.n	8007c3c <_printf_common+0x58>
 8007cac:	2301      	movs	r3, #1
 8007cae:	4622      	mov	r2, r4
 8007cb0:	4649      	mov	r1, r9
 8007cb2:	4638      	mov	r0, r7
 8007cb4:	47c0      	blx	r8
 8007cb6:	3001      	adds	r0, #1
 8007cb8:	d0e6      	beq.n	8007c88 <_printf_common+0xa4>
 8007cba:	3601      	adds	r6, #1
 8007cbc:	e7d9      	b.n	8007c72 <_printf_common+0x8e>
	...

08007cc0 <_printf_i>:
 8007cc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cc4:	7e0f      	ldrb	r7, [r1, #24]
 8007cc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007cc8:	2f78      	cmp	r7, #120	; 0x78
 8007cca:	4691      	mov	r9, r2
 8007ccc:	4680      	mov	r8, r0
 8007cce:	460c      	mov	r4, r1
 8007cd0:	469a      	mov	sl, r3
 8007cd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007cd6:	d807      	bhi.n	8007ce8 <_printf_i+0x28>
 8007cd8:	2f62      	cmp	r7, #98	; 0x62
 8007cda:	d80a      	bhi.n	8007cf2 <_printf_i+0x32>
 8007cdc:	2f00      	cmp	r7, #0
 8007cde:	f000 80d4 	beq.w	8007e8a <_printf_i+0x1ca>
 8007ce2:	2f58      	cmp	r7, #88	; 0x58
 8007ce4:	f000 80c0 	beq.w	8007e68 <_printf_i+0x1a8>
 8007ce8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007cf0:	e03a      	b.n	8007d68 <_printf_i+0xa8>
 8007cf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007cf6:	2b15      	cmp	r3, #21
 8007cf8:	d8f6      	bhi.n	8007ce8 <_printf_i+0x28>
 8007cfa:	a101      	add	r1, pc, #4	; (adr r1, 8007d00 <_printf_i+0x40>)
 8007cfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d00:	08007d59 	.word	0x08007d59
 8007d04:	08007d6d 	.word	0x08007d6d
 8007d08:	08007ce9 	.word	0x08007ce9
 8007d0c:	08007ce9 	.word	0x08007ce9
 8007d10:	08007ce9 	.word	0x08007ce9
 8007d14:	08007ce9 	.word	0x08007ce9
 8007d18:	08007d6d 	.word	0x08007d6d
 8007d1c:	08007ce9 	.word	0x08007ce9
 8007d20:	08007ce9 	.word	0x08007ce9
 8007d24:	08007ce9 	.word	0x08007ce9
 8007d28:	08007ce9 	.word	0x08007ce9
 8007d2c:	08007e71 	.word	0x08007e71
 8007d30:	08007d99 	.word	0x08007d99
 8007d34:	08007e2b 	.word	0x08007e2b
 8007d38:	08007ce9 	.word	0x08007ce9
 8007d3c:	08007ce9 	.word	0x08007ce9
 8007d40:	08007e93 	.word	0x08007e93
 8007d44:	08007ce9 	.word	0x08007ce9
 8007d48:	08007d99 	.word	0x08007d99
 8007d4c:	08007ce9 	.word	0x08007ce9
 8007d50:	08007ce9 	.word	0x08007ce9
 8007d54:	08007e33 	.word	0x08007e33
 8007d58:	682b      	ldr	r3, [r5, #0]
 8007d5a:	1d1a      	adds	r2, r3, #4
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	602a      	str	r2, [r5, #0]
 8007d60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e09f      	b.n	8007eac <_printf_i+0x1ec>
 8007d6c:	6820      	ldr	r0, [r4, #0]
 8007d6e:	682b      	ldr	r3, [r5, #0]
 8007d70:	0607      	lsls	r7, r0, #24
 8007d72:	f103 0104 	add.w	r1, r3, #4
 8007d76:	6029      	str	r1, [r5, #0]
 8007d78:	d501      	bpl.n	8007d7e <_printf_i+0xbe>
 8007d7a:	681e      	ldr	r6, [r3, #0]
 8007d7c:	e003      	b.n	8007d86 <_printf_i+0xc6>
 8007d7e:	0646      	lsls	r6, r0, #25
 8007d80:	d5fb      	bpl.n	8007d7a <_printf_i+0xba>
 8007d82:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007d86:	2e00      	cmp	r6, #0
 8007d88:	da03      	bge.n	8007d92 <_printf_i+0xd2>
 8007d8a:	232d      	movs	r3, #45	; 0x2d
 8007d8c:	4276      	negs	r6, r6
 8007d8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d92:	485a      	ldr	r0, [pc, #360]	; (8007efc <_printf_i+0x23c>)
 8007d94:	230a      	movs	r3, #10
 8007d96:	e012      	b.n	8007dbe <_printf_i+0xfe>
 8007d98:	682b      	ldr	r3, [r5, #0]
 8007d9a:	6820      	ldr	r0, [r4, #0]
 8007d9c:	1d19      	adds	r1, r3, #4
 8007d9e:	6029      	str	r1, [r5, #0]
 8007da0:	0605      	lsls	r5, r0, #24
 8007da2:	d501      	bpl.n	8007da8 <_printf_i+0xe8>
 8007da4:	681e      	ldr	r6, [r3, #0]
 8007da6:	e002      	b.n	8007dae <_printf_i+0xee>
 8007da8:	0641      	lsls	r1, r0, #25
 8007daa:	d5fb      	bpl.n	8007da4 <_printf_i+0xe4>
 8007dac:	881e      	ldrh	r6, [r3, #0]
 8007dae:	4853      	ldr	r0, [pc, #332]	; (8007efc <_printf_i+0x23c>)
 8007db0:	2f6f      	cmp	r7, #111	; 0x6f
 8007db2:	bf0c      	ite	eq
 8007db4:	2308      	moveq	r3, #8
 8007db6:	230a      	movne	r3, #10
 8007db8:	2100      	movs	r1, #0
 8007dba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007dbe:	6865      	ldr	r5, [r4, #4]
 8007dc0:	60a5      	str	r5, [r4, #8]
 8007dc2:	2d00      	cmp	r5, #0
 8007dc4:	bfa2      	ittt	ge
 8007dc6:	6821      	ldrge	r1, [r4, #0]
 8007dc8:	f021 0104 	bicge.w	r1, r1, #4
 8007dcc:	6021      	strge	r1, [r4, #0]
 8007dce:	b90e      	cbnz	r6, 8007dd4 <_printf_i+0x114>
 8007dd0:	2d00      	cmp	r5, #0
 8007dd2:	d04b      	beq.n	8007e6c <_printf_i+0x1ac>
 8007dd4:	4615      	mov	r5, r2
 8007dd6:	fbb6 f1f3 	udiv	r1, r6, r3
 8007dda:	fb03 6711 	mls	r7, r3, r1, r6
 8007dde:	5dc7      	ldrb	r7, [r0, r7]
 8007de0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007de4:	4637      	mov	r7, r6
 8007de6:	42bb      	cmp	r3, r7
 8007de8:	460e      	mov	r6, r1
 8007dea:	d9f4      	bls.n	8007dd6 <_printf_i+0x116>
 8007dec:	2b08      	cmp	r3, #8
 8007dee:	d10b      	bne.n	8007e08 <_printf_i+0x148>
 8007df0:	6823      	ldr	r3, [r4, #0]
 8007df2:	07de      	lsls	r6, r3, #31
 8007df4:	d508      	bpl.n	8007e08 <_printf_i+0x148>
 8007df6:	6923      	ldr	r3, [r4, #16]
 8007df8:	6861      	ldr	r1, [r4, #4]
 8007dfa:	4299      	cmp	r1, r3
 8007dfc:	bfde      	ittt	le
 8007dfe:	2330      	movle	r3, #48	; 0x30
 8007e00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e08:	1b52      	subs	r2, r2, r5
 8007e0a:	6122      	str	r2, [r4, #16]
 8007e0c:	f8cd a000 	str.w	sl, [sp]
 8007e10:	464b      	mov	r3, r9
 8007e12:	aa03      	add	r2, sp, #12
 8007e14:	4621      	mov	r1, r4
 8007e16:	4640      	mov	r0, r8
 8007e18:	f7ff fee4 	bl	8007be4 <_printf_common>
 8007e1c:	3001      	adds	r0, #1
 8007e1e:	d14a      	bne.n	8007eb6 <_printf_i+0x1f6>
 8007e20:	f04f 30ff 	mov.w	r0, #4294967295
 8007e24:	b004      	add	sp, #16
 8007e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e2a:	6823      	ldr	r3, [r4, #0]
 8007e2c:	f043 0320 	orr.w	r3, r3, #32
 8007e30:	6023      	str	r3, [r4, #0]
 8007e32:	4833      	ldr	r0, [pc, #204]	; (8007f00 <_printf_i+0x240>)
 8007e34:	2778      	movs	r7, #120	; 0x78
 8007e36:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007e3a:	6823      	ldr	r3, [r4, #0]
 8007e3c:	6829      	ldr	r1, [r5, #0]
 8007e3e:	061f      	lsls	r7, r3, #24
 8007e40:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e44:	d402      	bmi.n	8007e4c <_printf_i+0x18c>
 8007e46:	065f      	lsls	r7, r3, #25
 8007e48:	bf48      	it	mi
 8007e4a:	b2b6      	uxthmi	r6, r6
 8007e4c:	07df      	lsls	r7, r3, #31
 8007e4e:	bf48      	it	mi
 8007e50:	f043 0320 	orrmi.w	r3, r3, #32
 8007e54:	6029      	str	r1, [r5, #0]
 8007e56:	bf48      	it	mi
 8007e58:	6023      	strmi	r3, [r4, #0]
 8007e5a:	b91e      	cbnz	r6, 8007e64 <_printf_i+0x1a4>
 8007e5c:	6823      	ldr	r3, [r4, #0]
 8007e5e:	f023 0320 	bic.w	r3, r3, #32
 8007e62:	6023      	str	r3, [r4, #0]
 8007e64:	2310      	movs	r3, #16
 8007e66:	e7a7      	b.n	8007db8 <_printf_i+0xf8>
 8007e68:	4824      	ldr	r0, [pc, #144]	; (8007efc <_printf_i+0x23c>)
 8007e6a:	e7e4      	b.n	8007e36 <_printf_i+0x176>
 8007e6c:	4615      	mov	r5, r2
 8007e6e:	e7bd      	b.n	8007dec <_printf_i+0x12c>
 8007e70:	682b      	ldr	r3, [r5, #0]
 8007e72:	6826      	ldr	r6, [r4, #0]
 8007e74:	6961      	ldr	r1, [r4, #20]
 8007e76:	1d18      	adds	r0, r3, #4
 8007e78:	6028      	str	r0, [r5, #0]
 8007e7a:	0635      	lsls	r5, r6, #24
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	d501      	bpl.n	8007e84 <_printf_i+0x1c4>
 8007e80:	6019      	str	r1, [r3, #0]
 8007e82:	e002      	b.n	8007e8a <_printf_i+0x1ca>
 8007e84:	0670      	lsls	r0, r6, #25
 8007e86:	d5fb      	bpl.n	8007e80 <_printf_i+0x1c0>
 8007e88:	8019      	strh	r1, [r3, #0]
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	6123      	str	r3, [r4, #16]
 8007e8e:	4615      	mov	r5, r2
 8007e90:	e7bc      	b.n	8007e0c <_printf_i+0x14c>
 8007e92:	682b      	ldr	r3, [r5, #0]
 8007e94:	1d1a      	adds	r2, r3, #4
 8007e96:	602a      	str	r2, [r5, #0]
 8007e98:	681d      	ldr	r5, [r3, #0]
 8007e9a:	6862      	ldr	r2, [r4, #4]
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	f7f8 f9d6 	bl	8000250 <memchr>
 8007ea4:	b108      	cbz	r0, 8007eaa <_printf_i+0x1ea>
 8007ea6:	1b40      	subs	r0, r0, r5
 8007ea8:	6060      	str	r0, [r4, #4]
 8007eaa:	6863      	ldr	r3, [r4, #4]
 8007eac:	6123      	str	r3, [r4, #16]
 8007eae:	2300      	movs	r3, #0
 8007eb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007eb4:	e7aa      	b.n	8007e0c <_printf_i+0x14c>
 8007eb6:	6923      	ldr	r3, [r4, #16]
 8007eb8:	462a      	mov	r2, r5
 8007eba:	4649      	mov	r1, r9
 8007ebc:	4640      	mov	r0, r8
 8007ebe:	47d0      	blx	sl
 8007ec0:	3001      	adds	r0, #1
 8007ec2:	d0ad      	beq.n	8007e20 <_printf_i+0x160>
 8007ec4:	6823      	ldr	r3, [r4, #0]
 8007ec6:	079b      	lsls	r3, r3, #30
 8007ec8:	d413      	bmi.n	8007ef2 <_printf_i+0x232>
 8007eca:	68e0      	ldr	r0, [r4, #12]
 8007ecc:	9b03      	ldr	r3, [sp, #12]
 8007ece:	4298      	cmp	r0, r3
 8007ed0:	bfb8      	it	lt
 8007ed2:	4618      	movlt	r0, r3
 8007ed4:	e7a6      	b.n	8007e24 <_printf_i+0x164>
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	4632      	mov	r2, r6
 8007eda:	4649      	mov	r1, r9
 8007edc:	4640      	mov	r0, r8
 8007ede:	47d0      	blx	sl
 8007ee0:	3001      	adds	r0, #1
 8007ee2:	d09d      	beq.n	8007e20 <_printf_i+0x160>
 8007ee4:	3501      	adds	r5, #1
 8007ee6:	68e3      	ldr	r3, [r4, #12]
 8007ee8:	9903      	ldr	r1, [sp, #12]
 8007eea:	1a5b      	subs	r3, r3, r1
 8007eec:	42ab      	cmp	r3, r5
 8007eee:	dcf2      	bgt.n	8007ed6 <_printf_i+0x216>
 8007ef0:	e7eb      	b.n	8007eca <_printf_i+0x20a>
 8007ef2:	2500      	movs	r5, #0
 8007ef4:	f104 0619 	add.w	r6, r4, #25
 8007ef8:	e7f5      	b.n	8007ee6 <_printf_i+0x226>
 8007efa:	bf00      	nop
 8007efc:	08008111 	.word	0x08008111
 8007f00:	08008122 	.word	0x08008122

08007f04 <memmove>:
 8007f04:	4288      	cmp	r0, r1
 8007f06:	b510      	push	{r4, lr}
 8007f08:	eb01 0402 	add.w	r4, r1, r2
 8007f0c:	d902      	bls.n	8007f14 <memmove+0x10>
 8007f0e:	4284      	cmp	r4, r0
 8007f10:	4623      	mov	r3, r4
 8007f12:	d807      	bhi.n	8007f24 <memmove+0x20>
 8007f14:	1e43      	subs	r3, r0, #1
 8007f16:	42a1      	cmp	r1, r4
 8007f18:	d008      	beq.n	8007f2c <memmove+0x28>
 8007f1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f22:	e7f8      	b.n	8007f16 <memmove+0x12>
 8007f24:	4402      	add	r2, r0
 8007f26:	4601      	mov	r1, r0
 8007f28:	428a      	cmp	r2, r1
 8007f2a:	d100      	bne.n	8007f2e <memmove+0x2a>
 8007f2c:	bd10      	pop	{r4, pc}
 8007f2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f36:	e7f7      	b.n	8007f28 <memmove+0x24>

08007f38 <_sbrk_r>:
 8007f38:	b538      	push	{r3, r4, r5, lr}
 8007f3a:	4d06      	ldr	r5, [pc, #24]	; (8007f54 <_sbrk_r+0x1c>)
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	4604      	mov	r4, r0
 8007f40:	4608      	mov	r0, r1
 8007f42:	602b      	str	r3, [r5, #0]
 8007f44:	f7f9 f81e 	bl	8000f84 <_sbrk>
 8007f48:	1c43      	adds	r3, r0, #1
 8007f4a:	d102      	bne.n	8007f52 <_sbrk_r+0x1a>
 8007f4c:	682b      	ldr	r3, [r5, #0]
 8007f4e:	b103      	cbz	r3, 8007f52 <_sbrk_r+0x1a>
 8007f50:	6023      	str	r3, [r4, #0]
 8007f52:	bd38      	pop	{r3, r4, r5, pc}
 8007f54:	20000538 	.word	0x20000538

08007f58 <memcpy>:
 8007f58:	440a      	add	r2, r1
 8007f5a:	4291      	cmp	r1, r2
 8007f5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f60:	d100      	bne.n	8007f64 <memcpy+0xc>
 8007f62:	4770      	bx	lr
 8007f64:	b510      	push	{r4, lr}
 8007f66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f6e:	4291      	cmp	r1, r2
 8007f70:	d1f9      	bne.n	8007f66 <memcpy+0xe>
 8007f72:	bd10      	pop	{r4, pc}

08007f74 <_realloc_r>:
 8007f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f78:	4680      	mov	r8, r0
 8007f7a:	4614      	mov	r4, r2
 8007f7c:	460e      	mov	r6, r1
 8007f7e:	b921      	cbnz	r1, 8007f8a <_realloc_r+0x16>
 8007f80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f84:	4611      	mov	r1, r2
 8007f86:	f7ff bc49 	b.w	800781c <_malloc_r>
 8007f8a:	b92a      	cbnz	r2, 8007f98 <_realloc_r+0x24>
 8007f8c:	f7ff fbda 	bl	8007744 <_free_r>
 8007f90:	4625      	mov	r5, r4
 8007f92:	4628      	mov	r0, r5
 8007f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f98:	f000 f81b 	bl	8007fd2 <_malloc_usable_size_r>
 8007f9c:	4284      	cmp	r4, r0
 8007f9e:	4607      	mov	r7, r0
 8007fa0:	d802      	bhi.n	8007fa8 <_realloc_r+0x34>
 8007fa2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007fa6:	d812      	bhi.n	8007fce <_realloc_r+0x5a>
 8007fa8:	4621      	mov	r1, r4
 8007faa:	4640      	mov	r0, r8
 8007fac:	f7ff fc36 	bl	800781c <_malloc_r>
 8007fb0:	4605      	mov	r5, r0
 8007fb2:	2800      	cmp	r0, #0
 8007fb4:	d0ed      	beq.n	8007f92 <_realloc_r+0x1e>
 8007fb6:	42bc      	cmp	r4, r7
 8007fb8:	4622      	mov	r2, r4
 8007fba:	4631      	mov	r1, r6
 8007fbc:	bf28      	it	cs
 8007fbe:	463a      	movcs	r2, r7
 8007fc0:	f7ff ffca 	bl	8007f58 <memcpy>
 8007fc4:	4631      	mov	r1, r6
 8007fc6:	4640      	mov	r0, r8
 8007fc8:	f7ff fbbc 	bl	8007744 <_free_r>
 8007fcc:	e7e1      	b.n	8007f92 <_realloc_r+0x1e>
 8007fce:	4635      	mov	r5, r6
 8007fd0:	e7df      	b.n	8007f92 <_realloc_r+0x1e>

08007fd2 <_malloc_usable_size_r>:
 8007fd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fd6:	1f18      	subs	r0, r3, #4
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	bfbc      	itt	lt
 8007fdc:	580b      	ldrlt	r3, [r1, r0]
 8007fde:	18c0      	addlt	r0, r0, r3
 8007fe0:	4770      	bx	lr
	...

08007fe4 <_init>:
 8007fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fe6:	bf00      	nop
 8007fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fea:	bc08      	pop	{r3}
 8007fec:	469e      	mov	lr, r3
 8007fee:	4770      	bx	lr

08007ff0 <_fini>:
 8007ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff2:	bf00      	nop
 8007ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ff6:	bc08      	pop	{r3}
 8007ff8:	469e      	mov	lr, r3
 8007ffa:	4770      	bx	lr
