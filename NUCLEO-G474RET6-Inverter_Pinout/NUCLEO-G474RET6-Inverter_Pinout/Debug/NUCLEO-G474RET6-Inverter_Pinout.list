
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009210  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  080093f0  080093f0  000193f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009770  08009770  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009770  08009770  00019770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009778  08009778  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009778  08009778  00019778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800977c  0800977c  0001977c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  08009780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000478  200000d4  08009854  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  08009854  0002054c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c246  00000000  00000000  00020147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003aaf  00000000  00000000  0003c38d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015e0  00000000  00000000  0003fe40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010dd  00000000  00000000  00041420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a032  00000000  00000000  000424fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d013  00000000  00000000  0006c52f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001123e1  00000000  00000000  00089542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000063dc  00000000  00000000  0019b924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  001a1d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000d4 	.word	0x200000d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	080093d8 	.word	0x080093d8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000d8 	.word	0x200000d8
 800021c:	080093d8 	.word	0x080093d8

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08c      	sub	sp, #48	; 0x30
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2220      	movs	r2, #32
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f007 fdc5 	bl	8008194 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800060a:	4b32      	ldr	r3, [pc, #200]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800060c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000610:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000612:	4b30      	ldr	r3, [pc, #192]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000614:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000618:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800061a:	4b2e      	ldr	r3, [pc, #184]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000620:	4b2c      	ldr	r3, [pc, #176]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000626:	4b2b      	ldr	r3, [pc, #172]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800062c:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800062e:	2200      	movs	r2, #0
 8000630:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000632:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000634:	2204      	movs	r2, #4
 8000636:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000638:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800063a:	2200      	movs	r2, #0
 800063c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800063e:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000640:	2200      	movs	r2, #0
 8000642:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000644:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000646:	2201      	movs	r2, #1
 8000648:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800064a:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800064c:	2200      	movs	r2, #0
 800064e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000652:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000654:	2200      	movs	r2, #0
 8000656:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000658:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800065a:	2200      	movs	r2, #0
 800065c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800065e:	4b1d      	ldr	r3, [pc, #116]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000660:	2200      	movs	r2, #0
 8000662:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000666:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000668:	2200      	movs	r2, #0
 800066a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800066c:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800066e:	2200      	movs	r2, #0
 8000670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000674:	4817      	ldr	r0, [pc, #92]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000676:	f001 fb6b 	bl	8001d50 <HAL_ADC_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000680:	f000 fafe 	bl	8000c80 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000684:	2300      	movs	r3, #0
 8000686:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800068c:	4619      	mov	r1, r3
 800068e:	4811      	ldr	r0, [pc, #68]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000690:	f002 f986 	bl	80029a0 <HAL_ADCEx_MultiModeConfigChannel>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800069a:	f000 faf1 	bl	8000c80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_ADC1_Init+0xec>)
 80006a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a2:	2306      	movs	r3, #6
 80006a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006aa:	237f      	movs	r3, #127	; 0x7f
 80006ac:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006ae:	2304      	movs	r3, #4
 80006b0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	4619      	mov	r1, r3
 80006ba:	4806      	ldr	r0, [pc, #24]	; (80006d4 <MX_ADC1_Init+0xe8>)
 80006bc:	f001 fd0a 	bl	80020d4 <HAL_ADC_ConfigChannel>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006c6:	f000 fadb 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	3730      	adds	r7, #48	; 0x30
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	200000f0 	.word	0x200000f0
 80006d8:	21800100 	.word	0x21800100

080006dc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006e2:	463b      	mov	r3, r7
 80006e4:	2220      	movs	r2, #32
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f007 fd53 	bl	8008194 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006ee:	4b2b      	ldr	r3, [pc, #172]	; (800079c <MX_ADC2_Init+0xc0>)
 80006f0:	4a2b      	ldr	r2, [pc, #172]	; (80007a0 <MX_ADC2_Init+0xc4>)
 80006f2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006f4:	4b29      	ldr	r3, [pc, #164]	; (800079c <MX_ADC2_Init+0xc0>)
 80006f6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006fa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006fc:	4b27      	ldr	r3, [pc, #156]	; (800079c <MX_ADC2_Init+0xc0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000702:	4b26      	ldr	r3, [pc, #152]	; (800079c <MX_ADC2_Init+0xc0>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000708:	4b24      	ldr	r3, [pc, #144]	; (800079c <MX_ADC2_Init+0xc0>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800070e:	4b23      	ldr	r3, [pc, #140]	; (800079c <MX_ADC2_Init+0xc0>)
 8000710:	2200      	movs	r2, #0
 8000712:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000714:	4b21      	ldr	r3, [pc, #132]	; (800079c <MX_ADC2_Init+0xc0>)
 8000716:	2204      	movs	r2, #4
 8000718:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800071a:	4b20      	ldr	r3, [pc, #128]	; (800079c <MX_ADC2_Init+0xc0>)
 800071c:	2200      	movs	r2, #0
 800071e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000720:	4b1e      	ldr	r3, [pc, #120]	; (800079c <MX_ADC2_Init+0xc0>)
 8000722:	2200      	movs	r2, #0
 8000724:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000726:	4b1d      	ldr	r3, [pc, #116]	; (800079c <MX_ADC2_Init+0xc0>)
 8000728:	2201      	movs	r2, #1
 800072a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800072c:	4b1b      	ldr	r3, [pc, #108]	; (800079c <MX_ADC2_Init+0xc0>)
 800072e:	2200      	movs	r2, #0
 8000730:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000734:	4b19      	ldr	r3, [pc, #100]	; (800079c <MX_ADC2_Init+0xc0>)
 8000736:	2200      	movs	r2, #0
 8000738:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <MX_ADC2_Init+0xc0>)
 800073c:	2200      	movs	r2, #0
 800073e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000740:	4b16      	ldr	r3, [pc, #88]	; (800079c <MX_ADC2_Init+0xc0>)
 8000742:	2200      	movs	r2, #0
 8000744:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_ADC2_Init+0xc0>)
 800074a:	2200      	movs	r2, #0
 800074c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_ADC2_Init+0xc0>)
 8000750:	2200      	movs	r2, #0
 8000752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000756:	4811      	ldr	r0, [pc, #68]	; (800079c <MX_ADC2_Init+0xc0>)
 8000758:	f001 fafa 	bl	8001d50 <HAL_ADC_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000762:	f000 fa8d 	bl	8000c80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_ADC2_Init+0xc8>)
 8000768:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800076a:	2306      	movs	r3, #6
 800076c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000772:	237f      	movs	r3, #127	; 0x7f
 8000774:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000776:	2304      	movs	r3, #4
 8000778:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800077e:	463b      	mov	r3, r7
 8000780:	4619      	mov	r1, r3
 8000782:	4806      	ldr	r0, [pc, #24]	; (800079c <MX_ADC2_Init+0xc0>)
 8000784:	f001 fca6 	bl	80020d4 <HAL_ADC_ConfigChannel>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800078e:	f000 fa77 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	3720      	adds	r7, #32
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	2000015c 	.word	0x2000015c
 80007a0:	50000100 	.word	0x50000100
 80007a4:	19200040 	.word	0x19200040

080007a8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b0a4      	sub	sp, #144	; 0x90
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007c4:	2254      	movs	r2, #84	; 0x54
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f007 fce3 	bl	8008194 <memset>
  if(adcHandle->Instance==ADC1)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007d6:	d174      	bne.n	80008c2 <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007de:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80007e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007e8:	4618      	mov	r0, r3
 80007ea:	f003 fb59 	bl	8003ea0 <HAL_RCCEx_PeriphCLKConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80007f4:	f000 fa44 	bl	8000c80 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007f8:	4b63      	ldr	r3, [pc, #396]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	3301      	adds	r3, #1
 80007fe:	4a62      	ldr	r2, [pc, #392]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 8000800:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000802:	4b61      	ldr	r3, [pc, #388]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d10b      	bne.n	8000822 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800080a:	4b60      	ldr	r3, [pc, #384]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	4a5f      	ldr	r2, [pc, #380]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000810:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000816:	4b5d      	ldr	r3, [pc, #372]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
 8000820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	4b5a      	ldr	r3, [pc, #360]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	4a59      	ldr	r2, [pc, #356]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082e:	4b57      	ldr	r3, [pc, #348]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	623b      	str	r3, [r7, #32]
 8000838:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b54      	ldr	r3, [pc, #336]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	4a53      	ldr	r2, [pc, #332]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000846:	4b51      	ldr	r3, [pc, #324]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	61fb      	str	r3, [r7, #28]
 8000850:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	4b4e      	ldr	r3, [pc, #312]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	4a4d      	ldr	r2, [pc, #308]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085e:	4b4b      	ldr	r3, [pc, #300]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	61bb      	str	r3, [r7, #24]
 8000868:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 800086a:	2304      	movs	r3, #4
 800086c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800086e:	2303      	movs	r3, #3
 8000870:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800087e:	4619      	mov	r1, r3
 8000880:	4843      	ldr	r0, [pc, #268]	; (8000990 <HAL_ADC_MspInit+0x1e8>)
 8000882:	f002 fb35 	bl	8002ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 8000886:	2302      	movs	r3, #2
 8000888:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800088a:	2303      	movs	r3, #3
 800088c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800089a:	4619      	mov	r1, r3
 800089c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a0:	f002 fb26 	bl	8002ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008a4:	2303      	movs	r3, #3
 80008a6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008a8:	2303      	movs	r3, #3
 80008aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80008b8:	4619      	mov	r1, r3
 80008ba:	4836      	ldr	r0, [pc, #216]	; (8000994 <HAL_ADC_MspInit+0x1ec>)
 80008bc:	f002 fb18 	bl	8002ef0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80008c0:	e05e      	b.n	8000980 <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a34      	ldr	r2, [pc, #208]	; (8000998 <HAL_ADC_MspInit+0x1f0>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d159      	bne.n	8000980 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80008cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008d2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80008d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008dc:	4618      	mov	r0, r3
 80008de:	f003 fadf 	bl	8003ea0 <HAL_RCCEx_PeriphCLKConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <HAL_ADC_MspInit+0x144>
      Error_Handler();
 80008e8:	f000 f9ca 	bl	8000c80 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008ec:	4b26      	ldr	r3, [pc, #152]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	3301      	adds	r3, #1
 80008f2:	4a25      	ldr	r2, [pc, #148]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 80008f4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008f6:	4b24      	ldr	r3, [pc, #144]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d10b      	bne.n	8000916 <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008fe:	4b23      	ldr	r3, [pc, #140]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	4a22      	ldr	r2, [pc, #136]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000904:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090a:	4b20      	ldr	r3, [pc, #128]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000912:	617b      	str	r3, [r7, #20]
 8000914:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	4b1d      	ldr	r3, [pc, #116]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	4a1c      	ldr	r2, [pc, #112]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000922:	4b1a      	ldr	r3, [pc, #104]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b17      	ldr	r3, [pc, #92]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	4a16      	ldr	r2, [pc, #88]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093a:	4b14      	ldr	r3, [pc, #80]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 8000946:	230b      	movs	r3, #11
 8000948:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800094a:	2303      	movs	r3, #3
 800094c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000956:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800095a:	4619      	mov	r1, r3
 800095c:	480c      	ldr	r0, [pc, #48]	; (8000990 <HAL_ADC_MspInit+0x1e8>)
 800095e:	f002 fac7 	bl	8002ef0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8000962:	2301      	movs	r3, #1
 8000964:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000966:	2303      	movs	r3, #3
 8000968:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000976:	4619      	mov	r1, r3
 8000978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097c:	f002 fab8 	bl	8002ef0 <HAL_GPIO_Init>
}
 8000980:	bf00      	nop
 8000982:	3790      	adds	r7, #144	; 0x90
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	200001c8 	.word	0x200001c8
 800098c:	40021000 	.word	0x40021000
 8000990:	48000800 	.word	0x48000800
 8000994:	48000400 	.word	0x48000400
 8000998:	50000100 	.word	0x50000100

0800099c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	; 0x28
 80009a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b2:	4b3f      	ldr	r3, [pc, #252]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	4a3e      	ldr	r2, [pc, #248]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009be:	4b3c      	ldr	r3, [pc, #240]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ca:	4b39      	ldr	r3, [pc, #228]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	4a38      	ldr	r2, [pc, #224]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009d0:	f043 0320 	orr.w	r3, r3, #32
 80009d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d6:	4b36      	ldr	r3, [pc, #216]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	f003 0320 	and.w	r3, r3, #32
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	4b33      	ldr	r3, [pc, #204]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	4a32      	ldr	r2, [pc, #200]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ee:	4b30      	ldr	r3, [pc, #192]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	4b2d      	ldr	r3, [pc, #180]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	4a2c      	ldr	r2, [pc, #176]	; (8000ab0 <MX_GPIO_Init+0x114>)
 8000a00:	f043 0302 	orr.w	r3, r3, #2
 8000a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a06:	4b2a      	ldr	r3, [pc, #168]	; (8000ab0 <MX_GPIO_Init+0x114>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a12:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <MX_GPIO_Init+0x114>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	4a26      	ldr	r2, [pc, #152]	; (8000ab0 <MX_GPIO_Init+0x114>)
 8000a18:	f043 0308 	orr.w	r3, r3, #8
 8000a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1e:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <MX_GPIO_Init+0x114>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	f003 0308 	and.w	r3, r3, #8
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2120      	movs	r1, #32
 8000a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a32:	f002 fbdf 	bl	80031f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2104      	movs	r1, #4
 8000a3a:	481e      	ldr	r0, [pc, #120]	; (8000ab4 <MX_GPIO_Init+0x118>)
 8000a3c:	f002 fbda 	bl	80031f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000a40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a46:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	4818      	ldr	r0, [pc, #96]	; (8000ab8 <MX_GPIO_Init+0x11c>)
 8000a58:	f002 fa4a 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000a5c:	2320      	movs	r3, #32
 8000a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a76:	f002 fa3b 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000a7a:	2304      	movs	r3, #4
 8000a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4808      	ldr	r0, [pc, #32]	; (8000ab4 <MX_GPIO_Init+0x118>)
 8000a92:	f002 fa2d 	bl	8002ef0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2028      	movs	r0, #40	; 0x28
 8000a9c:	f002 f940 	bl	8002d20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000aa0:	2028      	movs	r0, #40	; 0x28
 8000aa2:	f002 f957 	bl	8002d54 <HAL_NVIC_EnableIRQ>

}
 8000aa6:	bf00      	nop
 8000aa8:	3728      	adds	r7, #40	; 0x28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	48000c00 	.word	0x48000c00
 8000ab8:	48000800 	.word	0x48000800

08000abc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac0:	f000 ff35 	bl	800192e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac4:	f000 f864 	bl	8000b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac8:	f7ff ff68 	bl	800099c <MX_GPIO_Init>
  MX_ADC2_Init();
 8000acc:	f7ff fe06 	bl	80006dc <MX_ADC2_Init>
  MX_ADC1_Init();
 8000ad0:	f7ff fd8c 	bl	80005ec <MX_ADC1_Init>
  MX_TIM1_Init();
 8000ad4:	f000 fba4 	bl	8001220 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000ad8:	f000 fc74 	bl	80013c4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000adc:	f000 fdc6 	bl	800166c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000ae0:	f000 fe10 	bl	8001704 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4822      	ldr	r0, [pc, #136]	; (8000b70 <main+0xb4>)
 8000ae8:	f003 fd5a 	bl	80045a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000aec:	2104      	movs	r1, #4
 8000aee:	4820      	ldr	r0, [pc, #128]	; (8000b70 <main+0xb4>)
 8000af0:	f003 fd56 	bl	80045a0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000af4:	2100      	movs	r1, #0
 8000af6:	481e      	ldr	r0, [pc, #120]	; (8000b70 <main+0xb4>)
 8000af8:	f004 ffec 	bl	8005ad4 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000afc:	2104      	movs	r1, #4
 8000afe:	481c      	ldr	r0, [pc, #112]	; (8000b70 <main+0xb4>)
 8000b00:	f004 ffe8 	bl	8005ad4 <HAL_TIMEx_PWMN_Start>
  HAL_UART_Transmit(&huart2, started, strlen(started), HAL_MAX_DELAY);
 8000b04:	f04f 33ff 	mov.w	r3, #4294967295
 8000b08:	2230      	movs	r2, #48	; 0x30
 8000b0a:	491a      	ldr	r1, [pc, #104]	; (8000b74 <main+0xb8>)
 8000b0c:	481a      	ldr	r0, [pc, #104]	; (8000b78 <main+0xbc>)
 8000b0e:	f005 fab9 	bl	8006084 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, uartRxBuffer, 1);
 8000b12:	2201      	movs	r2, #1
 8000b14:	4919      	ldr	r1, [pc, #100]	; (8000b7c <main+0xc0>)
 8000b16:	4818      	ldr	r0, [pc, #96]	; (8000b78 <main+0xbc>)
 8000b18:	f005 fb4a 	bl	80061b0 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(it_uart2){
 8000b1c:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <main+0xc4>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d0fb      	beq.n	8000b1c <main+0x60>
		  if(uartRxBuffer[0]==ENTER){
 8000b24:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <main+0xc0>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b0d      	cmp	r3, #13
 8000b2a:	d112      	bne.n	8000b52 <main+0x96>
			  HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);
 8000b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b30:	2202      	movs	r2, #2
 8000b32:	4914      	ldr	r1, [pc, #80]	; (8000b84 <main+0xc8>)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <main+0xbc>)
 8000b36:	f005 faa5 	bl	8006084 <HAL_UART_Transmit>
			  processCommand(command); // Traitez la commande
 8000b3a:	4813      	ldr	r0, [pc, #76]	; (8000b88 <main+0xcc>)
 8000b3c:	f000 f8f2 	bl	8000d24 <processCommand>
			  memset(command, 0, sizeof(command)); // Réinitialisez le tableau
 8000b40:	2220      	movs	r2, #32
 8000b42:	2100      	movs	r1, #0
 8000b44:	4810      	ldr	r0, [pc, #64]	; (8000b88 <main+0xcc>)
 8000b46:	f007 fb25 	bl	8008194 <memset>
			  idx=0;
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <main+0xd0>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	701a      	strb	r2, [r3, #0]
 8000b50:	e00a      	b.n	8000b68 <main+0xac>
		  }
		  else{
			  command[idx++]=uartRxBuffer[0];
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <main+0xd0>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	1c5a      	adds	r2, r3, #1
 8000b58:	b2d1      	uxtb	r1, r2
 8000b5a:	4a0c      	ldr	r2, [pc, #48]	; (8000b8c <main+0xd0>)
 8000b5c:	7011      	strb	r1, [r2, #0]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <main+0xc0>)
 8000b62:	7819      	ldrb	r1, [r3, #0]
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <main+0xcc>)
 8000b66:	5499      	strb	r1, [r3, r2]
		  }
		  it_uart2 = 0;
 8000b68:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <main+0xc4>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
	  if(it_uart2){
 8000b6e:	e7d5      	b.n	8000b1c <main+0x60>
 8000b70:	20000248 	.word	0x20000248
 8000b74:	080095ac 	.word	0x080095ac
 8000b78:	200002e0 	.word	0x200002e0
 8000b7c:	200001cc 	.word	0x200001cc
 8000b80:	200001cd 	.word	0x200001cd
 8000b84:	080093f0 	.word	0x080093f0
 8000b88:	200001d0 	.word	0x200001d0
 8000b8c:	200001f0 	.word	0x200001f0

08000b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b094      	sub	sp, #80	; 0x50
 8000b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b96:	f107 0318 	add.w	r3, r7, #24
 8000b9a:	2238      	movs	r2, #56	; 0x38
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f007 faf8 	bl	8008194 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000bb2:	2000      	movs	r0, #0
 8000bb4:	f002 fb5a 	bl	800326c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bc0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000bca:	2306      	movs	r3, #6
 8000bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000bce:	2355      	movs	r3, #85	; 0x55
 8000bd0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bde:	f107 0318 	add.w	r3, r7, #24
 8000be2:	4618      	mov	r0, r3
 8000be4:	f002 fbf6 	bl	80033d4 <HAL_RCC_OscConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000bee:	f000 f847 	bl	8000c80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf2:	230f      	movs	r3, #15
 8000bf4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2104      	movs	r1, #4
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f002 fefa 	bl	8003a04 <HAL_RCC_ClockConfig>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000c16:	f000 f833 	bl	8000c80 <Error_Handler>
  }
}
 8000c1a:	bf00      	nop
 8000c1c:	3750      	adds	r7, #80	; 0x50
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, uartRxBuffer, 1, 100);
 8000c2c:	2364      	movs	r3, #100	; 0x64
 8000c2e:	2201      	movs	r2, #1
 8000c30:	4907      	ldr	r1, [pc, #28]	; (8000c50 <HAL_UART_RxCpltCallback+0x2c>)
 8000c32:	4808      	ldr	r0, [pc, #32]	; (8000c54 <HAL_UART_RxCpltCallback+0x30>)
 8000c34:	f005 fa26 	bl	8006084 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, 1);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	4905      	ldr	r1, [pc, #20]	; (8000c50 <HAL_UART_RxCpltCallback+0x2c>)
 8000c3c:	4805      	ldr	r0, [pc, #20]	; (8000c54 <HAL_UART_RxCpltCallback+0x30>)
 8000c3e:	f005 fab7 	bl	80061b0 <HAL_UART_Receive_IT>
	it_uart2 = 1;
 8000c42:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <HAL_UART_RxCpltCallback+0x34>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	701a      	strb	r2, [r3, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	200001cc 	.word	0x200001cc
 8000c54:	200002e0 	.word	0x200002e0
 8000c58:	200001cd 	.word	0x200001cd

08000c5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d101      	bne.n	8000c72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c6e:	f000 fe77 	bl	8001960 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40001000 	.word	0x40001000

08000c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c84:	b672      	cpsid	i
}
 8000c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <Error_Handler+0x8>
	...

08000c8c <pinout>:
    {"PA1", "GPIO", "OUT"},
    // Ajoutez d'autres broches et leurs informations ici
};


void pinout() {
 8000c8c:	b590      	push	{r4, r7, lr}
 8000c8e:	b09d      	sub	sp, #116	; 0x74
 8000c90:	af02      	add	r7, sp, #8
    HAL_UART_Transmit(&huart2, "Pinout:\r\n", strlen("Pinout:\r\n"), HAL_MAX_DELAY);
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
 8000c96:	2209      	movs	r2, #9
 8000c98:	491e      	ldr	r1, [pc, #120]	; (8000d14 <pinout+0x88>)
 8000c9a:	481f      	ldr	r0, [pc, #124]	; (8000d18 <pinout+0x8c>)
 8000c9c:	f005 f9f2 	bl	8006084 <HAL_UART_Transmit>

    for (int i = 0; i < sizeof(pins) / sizeof(pins[0]); i++) {
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	667b      	str	r3, [r7, #100]	; 0x64
 8000ca4:	e02e      	b.n	8000d04 <pinout+0x78>
        char message[100];
        snprintf(message, sizeof(message), "Pin %s: Function - %s, State - %s\r\n", pins[i].name, pins[i].function, pins[i].state);
 8000ca6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000ca8:	4613      	mov	r3, r2
 8000caa:	011b      	lsls	r3, r3, #4
 8000cac:	1a9b      	subs	r3, r3, r2
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	4a1a      	ldr	r2, [pc, #104]	; (8000d1c <pinout+0x90>)
 8000cb2:	189c      	adds	r4, r3, r2
 8000cb4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	011b      	lsls	r3, r3, #4
 8000cba:	1a9b      	subs	r3, r3, r2
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	3310      	adds	r3, #16
 8000cc0:	4a16      	ldr	r2, [pc, #88]	; (8000d1c <pinout+0x90>)
 8000cc2:	4413      	add	r3, r2
 8000cc4:	1d19      	adds	r1, r3, #4
 8000cc6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000cc8:	4613      	mov	r3, r2
 8000cca:	011b      	lsls	r3, r3, #4
 8000ccc:	1a9b      	subs	r3, r3, r2
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	3328      	adds	r3, #40	; 0x28
 8000cd2:	4a12      	ldr	r2, [pc, #72]	; (8000d1c <pinout+0x90>)
 8000cd4:	4413      	add	r3, r2
 8000cd6:	4638      	mov	r0, r7
 8000cd8:	9301      	str	r3, [sp, #4]
 8000cda:	9100      	str	r1, [sp, #0]
 8000cdc:	4623      	mov	r3, r4
 8000cde:	4a10      	ldr	r2, [pc, #64]	; (8000d20 <pinout+0x94>)
 8000ce0:	2164      	movs	r1, #100	; 0x64
 8000ce2:	f007 f9f5 	bl	80080d0 <sniprintf>
        HAL_UART_Transmit(&huart2, message, strlen(message), HAL_MAX_DELAY);
 8000ce6:	463b      	mov	r3, r7
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff faa3 	bl	8000234 <strlen>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	b29a      	uxth	r2, r3
 8000cf2:	4639      	mov	r1, r7
 8000cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf8:	4807      	ldr	r0, [pc, #28]	; (8000d18 <pinout+0x8c>)
 8000cfa:	f005 f9c3 	bl	8006084 <HAL_UART_Transmit>
    for (int i = 0; i < sizeof(pins) / sizeof(pins[0]); i++) {
 8000cfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d00:	3301      	adds	r3, #1
 8000d02:	667b      	str	r3, [r7, #100]	; 0x64
 8000d04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d9cd      	bls.n	8000ca6 <pinout+0x1a>
    }
}
 8000d0a:	bf00      	nop
 8000d0c:	bf00      	nop
 8000d0e:	376c      	adds	r7, #108	; 0x6c
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd90      	pop	{r4, r7, pc}
 8000d14:	080093f4 	.word	0x080093f4
 8000d18:	200002e0 	.word	0x200002e0
 8000d1c:	20000000 	.word	0x20000000
 8000d20:	08009400 	.word	0x08009400

08000d24 <processCommand>:
#include "startMotor.h"
#include "stopMotor.h"

int Power=0;

void processCommand(char* command) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b088      	sub	sp, #32
 8000d28:	af02      	add	r7, sp, #8
 8000d2a:	6078      	str	r0, [r7, #4]
  if (strcmp(command, "help") == 0) {
 8000d2c:	4939      	ldr	r1, [pc, #228]	; (8000e14 <processCommand+0xf0>)
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff fa76 	bl	8000220 <strcmp>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d10e      	bne.n	8000d58 <processCommand+0x34>
    // Affiche le message d'aide
    HAL_UART_Transmit(&huart2, "Commandes disponibles :\r\n", strlen("Commandes disponibles :\r\n"), HAL_MAX_DELAY);
 8000d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3e:	2219      	movs	r2, #25
 8000d40:	4935      	ldr	r1, [pc, #212]	; (8000e18 <processCommand+0xf4>)
 8000d42:	4836      	ldr	r0, [pc, #216]	; (8000e1c <processCommand+0xf8>)
 8000d44:	f005 f99e 	bl	8006084 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, " - help : Affiche ce message d'aide\r\n", strlen(" - help : Affiche ce message d'aide\r\n"), HAL_MAX_DELAY);
 8000d48:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4c:	2225      	movs	r2, #37	; 0x25
 8000d4e:	4934      	ldr	r1, [pc, #208]	; (8000e20 <processCommand+0xfc>)
 8000d50:	4832      	ldr	r0, [pc, #200]	; (8000e1c <processCommand+0xf8>)
 8000d52:	f005 f997 	bl	8006084 <HAL_UART_Transmit>
    // Ajoutez d'autres commandes et leurs descriptions ici
    return 0;
 8000d56:	e05a      	b.n	8000e0e <processCommand+0xea>
  }
  if (strcmp(command, "pinout") == 0) {
 8000d58:	4932      	ldr	r1, [pc, #200]	; (8000e24 <processCommand+0x100>)
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff fa60 	bl	8000220 <strcmp>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d102      	bne.n	8000d6c <processCommand+0x48>
	  pinout(); // Appeler la fonction pinout
 8000d66:	f7ff ff91 	bl	8000c8c <pinout>
	  return 0;
 8000d6a:	e050      	b.n	8000e0e <processCommand+0xea>
  }
  if (strcmp(command, "start") == 0) {
 8000d6c:	492e      	ldr	r1, [pc, #184]	; (8000e28 <processCommand+0x104>)
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff fa56 	bl	8000220 <strcmp>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d108      	bne.n	8000d8c <processCommand+0x68>
	  startMotor(); // Appeler la fonction startMotor
 8000d7a:	f000 f8c5 	bl	8000f08 <startMotor>
	  speed(0,5,1,2);
 8000d7e:	2302      	movs	r3, #2
 8000d80:	2201      	movs	r2, #1
 8000d82:	2105      	movs	r1, #5
 8000d84:	2000      	movs	r0, #0
 8000d86:	f000 f85b 	bl	8000e40 <speed>
	  return 0;
 8000d8a:	e040      	b.n	8000e0e <processCommand+0xea>
  }
  if (strcmp(command, "stop") == 0) {
 8000d8c:	4927      	ldr	r1, [pc, #156]	; (8000e2c <processCommand+0x108>)
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff fa46 	bl	8000220 <strcmp>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d108      	bne.n	8000dac <processCommand+0x88>
	  stopMotor(); // Appeler la fonction stopMotor
 8000d9a:	f000 f9d7 	bl	800114c <stopMotor>
	  speed(0,5,1,2);
 8000d9e:	2302      	movs	r3, #2
 8000da0:	2201      	movs	r2, #1
 8000da2:	2105      	movs	r1, #5
 8000da4:	2000      	movs	r0, #0
 8000da6:	f000 f84b 	bl	8000e40 <speed>
	  return 0;
 8000daa:	e030      	b.n	8000e0e <processCommand+0xea>
    }
  if (strncmp(command, "speed", 5) == 0) {
 8000dac:	2205      	movs	r2, #5
 8000dae:	4920      	ldr	r1, [pc, #128]	; (8000e30 <processCommand+0x10c>)
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f007 f9f7 	bl	80081a4 <strncmp>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d121      	bne.n	8000e00 <processCommand+0xdc>
              // Extrait les quatre chiffres suivant "speed"
              int digit1, digit2, digit3, digit4;
              if (sscanf(command + 5, "%1d%1d%1d%1d", &digit1, &digit2, &digit3, &digit4) == 4) {
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	1d58      	adds	r0, r3, #5
 8000dc0:	f107 0110 	add.w	r1, r7, #16
 8000dc4:	f107 0214 	add.w	r2, r7, #20
 8000dc8:	f107 0308 	add.w	r3, r7, #8
 8000dcc:	9301      	str	r3, [sp, #4]
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	4917      	ldr	r1, [pc, #92]	; (8000e34 <processCommand+0x110>)
 8000dd8:	f007 f9ae 	bl	8008138 <siscanf>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b04      	cmp	r3, #4
 8000de0:	d106      	bne.n	8000df0 <processCommand+0xcc>
                  speed(digit1, digit2, digit3, digit4);
 8000de2:	6978      	ldr	r0, [r7, #20]
 8000de4:	6939      	ldr	r1, [r7, #16]
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	f000 f829 	bl	8000e40 <speed>
 8000dee:	e00e      	b.n	8000e0e <processCommand+0xea>
              } else {
                  HAL_UART_Transmit(&huart2, "Format incorrect. Utilisation : speed <chiffre1><chiffre2><chiffre3><chiffre4>\r\n", strlen("Format incorrect. Utilisation : speed <chiffre1><chiffre2><chiffre3><chiffre4>\r\n"), HAL_MAX_DELAY);
 8000df0:	f04f 33ff 	mov.w	r3, #4294967295
 8000df4:	2250      	movs	r2, #80	; 0x50
 8000df6:	4910      	ldr	r1, [pc, #64]	; (8000e38 <processCommand+0x114>)
 8000df8:	4808      	ldr	r0, [pc, #32]	; (8000e1c <processCommand+0xf8>)
 8000dfa:	f005 f943 	bl	8006084 <HAL_UART_Transmit>
 8000dfe:	e006      	b.n	8000e0e <processCommand+0xea>
              }
  }
  else {
	  HAL_UART_Transmit(&huart2, "Command not found\r\n", strlen("Command not found\r\n"), HAL_MAX_DELAY);
 8000e00:	f04f 33ff 	mov.w	r3, #4294967295
 8000e04:	2213      	movs	r2, #19
 8000e06:	490d      	ldr	r1, [pc, #52]	; (8000e3c <processCommand+0x118>)
 8000e08:	4804      	ldr	r0, [pc, #16]	; (8000e1c <processCommand+0xf8>)
 8000e0a:	f005 f93b 	bl	8006084 <HAL_UART_Transmit>
  }
  // Ajoutez d'autres conditions pour d'autres commandes si nécessaire
}
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	08009424 	.word	0x08009424
 8000e18:	0800942c 	.word	0x0800942c
 8000e1c:	200002e0 	.word	0x200002e0
 8000e20:	08009448 	.word	0x08009448
 8000e24:	08009470 	.word	0x08009470
 8000e28:	08009478 	.word	0x08009478
 8000e2c:	08009480 	.word	0x08009480
 8000e30:	08009488 	.word	0x08009488
 8000e34:	08009490 	.word	0x08009490
 8000e38:	080094a0 	.word	0x080094a0
 8000e3c:	080094f4 	.word	0x080094f4

08000e40 <speed>:
#include "usart.h"
#include "gpio.h"
#include "string.h"

extern int Power;
void speed(int digit1, int digit2, int digit3, int digit4) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08e      	sub	sp, #56	; 0x38
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
 8000e4c:	603b      	str	r3, [r7, #0]
	if (Power==0){
 8000e4e:	4b28      	ldr	r3, [pc, #160]	; (8000ef0 <speed+0xb0>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d107      	bne.n	8000e66 <speed+0x26>
		HAL_UART_Transmit(&huart2, "Moteur éteint\r\n", strlen("Moteur éteint\r\n"), HAL_MAX_DELAY);
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5a:	2210      	movs	r2, #16
 8000e5c:	4925      	ldr	r1, [pc, #148]	; (8000ef4 <speed+0xb4>)
 8000e5e:	4826      	ldr	r0, [pc, #152]	; (8000ef8 <speed+0xb8>)
 8000e60:	f005 f910 	bl	8006084 <HAL_UART_Transmit>
 8000e64:	e041      	b.n	8000eea <speed+0xaa>
		return 0;
	}

    int speed = digit1 * 1000 + digit2 * 100 + digit3 * 10 + digit4;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e6c:	fb03 f202 	mul.w	r2, r3, r2
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	2164      	movs	r1, #100	; 0x64
 8000e74:	fb01 f303 	mul.w	r3, r1, r3
 8000e78:	18d1      	adds	r1, r2, r3
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	4413      	add	r3, r2
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	440b      	add	r3, r1
 8000e86:	683a      	ldr	r2, [r7, #0]
 8000e88:	4413      	add	r3, r2
 8000e8a:	637b      	str	r3, [r7, #52]	; 0x34
    if (speed>1023) {
 8000e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e92:	db09      	blt.n	8000ea8 <speed+0x68>
    	speed=1023;
 8000e94:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000e98:	637b      	str	r3, [r7, #52]	; 0x34
    	HAL_UART_Transmit(&huart2, "Vitesse abaissée au max: 1023\r\n", strlen("Vitesse abaissée au max: 1023\r\n"), HAL_MAX_DELAY);
 8000e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9e:	2220      	movs	r2, #32
 8000ea0:	4916      	ldr	r1, [pc, #88]	; (8000efc <speed+0xbc>)
 8000ea2:	4815      	ldr	r0, [pc, #84]	; (8000ef8 <speed+0xb8>)
 8000ea4:	f005 f8ee 	bl	8006084 <HAL_UART_Transmit>
    }
    int rapcycl= speed/1023*100;
 8000ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eaa:	4a15      	ldr	r2, [pc, #84]	; (8000f00 <speed+0xc0>)
 8000eac:	fb82 1203 	smull	r1, r2, r2, r3
 8000eb0:	441a      	add	r2, r3
 8000eb2:	1252      	asrs	r2, r2, #9
 8000eb4:	17db      	asrs	r3, r3, #31
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	2264      	movs	r2, #100	; 0x64
 8000eba:	fb02 f303 	mul.w	r3, r2, r3
 8000ebe:	633b      	str	r3, [r7, #48]	; 0x30
    char message[30];
    snprintf(message, sizeof(message), "Speed set to: %d%% \r\n", rapcycl);
 8000ec0:	f107 0010 	add.w	r0, r7, #16
 8000ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ec6:	4a0f      	ldr	r2, [pc, #60]	; (8000f04 <speed+0xc4>)
 8000ec8:	211e      	movs	r1, #30
 8000eca:	f007 f901 	bl	80080d0 <sniprintf>
    HAL_UART_Transmit(&huart2, message, strlen(message), HAL_MAX_DELAY);
 8000ece:	f107 0310 	add.w	r3, r7, #16
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff f9ae 	bl	8000234 <strlen>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	f107 0110 	add.w	r1, r7, #16
 8000ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee4:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <speed+0xb8>)
 8000ee6:	f005 f8cd 	bl	8006084 <HAL_UART_Transmit>
}
 8000eea:	3738      	adds	r7, #56	; 0x38
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	200001f4 	.word	0x200001f4
 8000ef4:	08009508 	.word	0x08009508
 8000ef8:	200002e0 	.word	0x200002e0
 8000efc:	0800951c 	.word	0x0800951c
 8000f00:	80200803 	.word	0x80200803
 8000f04:	08009540 	.word	0x08009540

08000f08 <startMotor>:
#include "usart.h"
#include "gpio.h"
#include "string.h"

extern int Power;
void startMotor() {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
    // Activez l'étage de puissance du moteur (code pour activer le moteur)
	if (Power==0){
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <startMotor+0x34>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d10a      	bne.n	8000f2a <startMotor+0x22>
		Power=1;
 8000f14:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <startMotor+0x34>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	601a      	str	r2, [r3, #0]
		// Affichez le message "Power ON" dans la console
		HAL_UART_Transmit(&huart2, "Power ON\r\n", strlen("Power ON\r\n"), HAL_MAX_DELAY);
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1e:	220a      	movs	r2, #10
 8000f20:	4907      	ldr	r1, [pc, #28]	; (8000f40 <startMotor+0x38>)
 8000f22:	4808      	ldr	r0, [pc, #32]	; (8000f44 <startMotor+0x3c>)
 8000f24:	f005 f8ae 	bl	8006084 <HAL_UART_Transmit>
		return 0;
 8000f28:	e006      	b.n	8000f38 <startMotor+0x30>
	}
	else {
	}
    HAL_UART_Transmit(&huart2, "Moteur déjà allumé\r\n", strlen("Moteur déjà allumé\r\n"), HAL_MAX_DELAY);
 8000f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2e:	2217      	movs	r2, #23
 8000f30:	4905      	ldr	r1, [pc, #20]	; (8000f48 <startMotor+0x40>)
 8000f32:	4804      	ldr	r0, [pc, #16]	; (8000f44 <startMotor+0x3c>)
 8000f34:	f005 f8a6 	bl	8006084 <HAL_UART_Transmit>
}
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200001f4 	.word	0x200001f4
 8000f40:	08009558 	.word	0x08009558
 8000f44:	200002e0 	.word	0x200002e0
 8000f48:	08009564 	.word	0x08009564

08000f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <HAL_MspInit+0x44>)
 8000f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f56:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <HAL_MspInit+0x44>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <HAL_MspInit+0x44>)
 8000f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <HAL_MspInit+0x44>)
 8000f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6e:	4a08      	ldr	r2, [pc, #32]	; (8000f90 <HAL_MspInit+0x44>)
 8000f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f74:	6593      	str	r3, [r2, #88]	; 0x58
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_MspInit+0x44>)
 8000f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f82:	f002 fa17 	bl	80033b4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40021000 	.word	0x40021000

08000f94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08c      	sub	sp, #48	; 0x30
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000fa4:	4b2c      	ldr	r3, [pc, #176]	; (8001058 <HAL_InitTick+0xc4>)
 8000fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa8:	4a2b      	ldr	r2, [pc, #172]	; (8001058 <HAL_InitTick+0xc4>)
 8000faa:	f043 0310 	orr.w	r3, r3, #16
 8000fae:	6593      	str	r3, [r2, #88]	; 0x58
 8000fb0:	4b29      	ldr	r3, [pc, #164]	; (8001058 <HAL_InitTick+0xc4>)
 8000fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb4:	f003 0310 	and.w	r3, r3, #16
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fbc:	f107 020c 	add.w	r2, r7, #12
 8000fc0:	f107 0310 	add.w	r3, r7, #16
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f002 fef2 	bl	8003db0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fcc:	f002 fec4 	bl	8003d58 <HAL_RCC_GetPCLK1Freq>
 8000fd0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fd4:	4a21      	ldr	r2, [pc, #132]	; (800105c <HAL_InitTick+0xc8>)
 8000fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fda:	0c9b      	lsrs	r3, r3, #18
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000fe0:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <HAL_InitTick+0xcc>)
 8000fe2:	4a20      	ldr	r2, [pc, #128]	; (8001064 <HAL_InitTick+0xd0>)
 8000fe4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000fe6:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <HAL_InitTick+0xcc>)
 8000fe8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fec:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000fee:	4a1c      	ldr	r2, [pc, #112]	; (8001060 <HAL_InitTick+0xcc>)
 8000ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ff4:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <HAL_InitTick+0xcc>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffa:	4b19      	ldr	r3, [pc, #100]	; (8001060 <HAL_InitTick+0xcc>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001000:	4817      	ldr	r0, [pc, #92]	; (8001060 <HAL_InitTick+0xcc>)
 8001002:	f003 f99b 	bl	800433c <HAL_TIM_Base_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800100c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001010:	2b00      	cmp	r3, #0
 8001012:	d11b      	bne.n	800104c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001014:	4812      	ldr	r0, [pc, #72]	; (8001060 <HAL_InitTick+0xcc>)
 8001016:	f003 f9e9 	bl	80043ec <HAL_TIM_Base_Start_IT>
 800101a:	4603      	mov	r3, r0
 800101c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001020:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001024:	2b00      	cmp	r3, #0
 8001026:	d111      	bne.n	800104c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001028:	2036      	movs	r0, #54	; 0x36
 800102a:	f001 fe93 	bl	8002d54 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b0f      	cmp	r3, #15
 8001032:	d808      	bhi.n	8001046 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001034:	2200      	movs	r2, #0
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	2036      	movs	r0, #54	; 0x36
 800103a:	f001 fe71 	bl	8002d20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800103e:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <HAL_InitTick+0xd4>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6013      	str	r3, [r2, #0]
 8001044:	e002      	b.n	800104c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800104c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001050:	4618      	mov	r0, r3
 8001052:	3730      	adds	r7, #48	; 0x30
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40021000 	.word	0x40021000
 800105c:	431bde83 	.word	0x431bde83
 8001060:	200001f8 	.word	0x200001f8
 8001064:	40001000 	.word	0x40001000
 8001068:	2000007c 	.word	0x2000007c

0800106c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <NMI_Handler+0x4>

08001072 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <HardFault_Handler+0x4>

08001078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800107c:	e7fe      	b.n	800107c <MemManage_Handler+0x4>

0800107e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001082:	e7fe      	b.n	8001082 <BusFault_Handler+0x4>

08001084 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <UsageFault_Handler+0x4>

0800108a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010c8:	4802      	ldr	r0, [pc, #8]	; (80010d4 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80010ca:	f003 fb7b 	bl	80047c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000248 	.word	0x20000248

080010d8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010dc:	4802      	ldr	r0, [pc, #8]	; (80010e8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80010de:	f003 fb71 	bl	80047c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000248 	.word	0x20000248

080010ec <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80010f2:	f003 fb67 	bl	80047c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000248 	.word	0x20000248

08001100 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001104:	4802      	ldr	r0, [pc, #8]	; (8001110 <TIM1_CC_IRQHandler+0x10>)
 8001106:	f003 fb5d 	bl	80047c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000248 	.word	0x20000248

08001114 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001118:	4802      	ldr	r0, [pc, #8]	; (8001124 <USART2_IRQHandler+0x10>)
 800111a:	f005 f89f 	bl	800625c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200002e0 	.word	0x200002e0

08001128 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 800112c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001130:	f002 f878 	bl	8003224 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}

08001138 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800113c:	4802      	ldr	r0, [pc, #8]	; (8001148 <TIM6_DAC_IRQHandler+0x10>)
 800113e:	f003 fb41 	bl	80047c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200001f8 	.word	0x200001f8

0800114c <stopMotor>:
#include "usart.h"
#include "gpio.h"
#include "string.h"

extern int Power;
void stopMotor() {
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
    // Desactivez l'étage de puissance du moteur (code pour desactiver le moteur)
	if (Power==1){
 8001150:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <stopMotor+0x34>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d10a      	bne.n	800116e <stopMotor+0x22>
			Power=0;
 8001158:	4b09      	ldr	r3, [pc, #36]	; (8001180 <stopMotor+0x34>)
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
			// Affichez le message "Power OFF" dans la console
			HAL_UART_Transmit(&huart2, "Power OFF\r\n", strlen("Power OFF\r\n"), HAL_MAX_DELAY);
 800115e:	f04f 33ff 	mov.w	r3, #4294967295
 8001162:	220b      	movs	r2, #11
 8001164:	4907      	ldr	r1, [pc, #28]	; (8001184 <stopMotor+0x38>)
 8001166:	4808      	ldr	r0, [pc, #32]	; (8001188 <stopMotor+0x3c>)
 8001168:	f004 ff8c 	bl	8006084 <HAL_UART_Transmit>
			return 0;
 800116c:	e006      	b.n	800117c <stopMotor+0x30>
		}
		else {
		}
	    HAL_UART_Transmit(&huart2, "Moteur déjà éteint\r\n", strlen("Moteur déjà éteint\r\n"), HAL_MAX_DELAY);
 800116e:	f04f 33ff 	mov.w	r3, #4294967295
 8001172:	2217      	movs	r2, #23
 8001174:	4905      	ldr	r1, [pc, #20]	; (800118c <stopMotor+0x40>)
 8001176:	4804      	ldr	r0, [pc, #16]	; (8001188 <stopMotor+0x3c>)
 8001178:	f004 ff84 	bl	8006084 <HAL_UART_Transmit>
	}
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200001f4 	.word	0x200001f4
 8001184:	0800957c 	.word	0x0800957c
 8001188:	200002e0 	.word	0x200002e0
 800118c:	08009588 	.word	0x08009588

08001190 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001198:	4a14      	ldr	r2, [pc, #80]	; (80011ec <_sbrk+0x5c>)
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <_sbrk+0x60>)
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011a4:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <_sbrk+0x64>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d102      	bne.n	80011b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <_sbrk+0x64>)
 80011ae:	4a12      	ldr	r2, [pc, #72]	; (80011f8 <_sbrk+0x68>)
 80011b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <_sbrk+0x64>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d207      	bcs.n	80011d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011c0:	f007 f802 	bl	80081c8 <__errno>
 80011c4:	4603      	mov	r3, r0
 80011c6:	220c      	movs	r2, #12
 80011c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ca:	f04f 33ff 	mov.w	r3, #4294967295
 80011ce:	e009      	b.n	80011e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <_sbrk+0x64>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011d6:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <_sbrk+0x64>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4413      	add	r3, r2
 80011de:	4a05      	ldr	r2, [pc, #20]	; (80011f4 <_sbrk+0x64>)
 80011e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011e2:	68fb      	ldr	r3, [r7, #12]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20020000 	.word	0x20020000
 80011f0:	00000400 	.word	0x00000400
 80011f4:	20000244 	.word	0x20000244
 80011f8:	20000550 	.word	0x20000550

080011fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <SystemInit+0x20>)
 8001202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001206:	4a05      	ldr	r2, [pc, #20]	; (800121c <SystemInit+0x20>)
 8001208:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800120c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b09c      	sub	sp, #112	; 0x70
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001226:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001234:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001240:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
 8001250:	615a      	str	r2, [r3, #20]
 8001252:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	2234      	movs	r2, #52	; 0x34
 8001258:	2100      	movs	r1, #0
 800125a:	4618      	mov	r0, r3
 800125c:	f006 ff9a 	bl	8008194 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001260:	4b56      	ldr	r3, [pc, #344]	; (80013bc <MX_TIM1_Init+0x19c>)
 8001262:	4a57      	ldr	r2, [pc, #348]	; (80013c0 <MX_TIM1_Init+0x1a0>)
 8001264:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8001266:	4b55      	ldr	r3, [pc, #340]	; (80013bc <MX_TIM1_Init+0x19c>)
 8001268:	2207      	movs	r2, #7
 800126a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800126c:	4b53      	ldr	r3, [pc, #332]	; (80013bc <MX_TIM1_Init+0x19c>)
 800126e:	2220      	movs	r2, #32
 8001270:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 8001272:	4b52      	ldr	r3, [pc, #328]	; (80013bc <MX_TIM1_Init+0x19c>)
 8001274:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001278:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127a:	4b50      	ldr	r3, [pc, #320]	; (80013bc <MX_TIM1_Init+0x19c>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001280:	4b4e      	ldr	r3, [pc, #312]	; (80013bc <MX_TIM1_Init+0x19c>)
 8001282:	2200      	movs	r2, #0
 8001284:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001286:	4b4d      	ldr	r3, [pc, #308]	; (80013bc <MX_TIM1_Init+0x19c>)
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800128c:	484b      	ldr	r0, [pc, #300]	; (80013bc <MX_TIM1_Init+0x19c>)
 800128e:	f003 f855 	bl	800433c <HAL_TIM_Base_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001298:	f7ff fcf2 	bl	8000c80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800129c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a0:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012a2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80012a6:	4619      	mov	r1, r3
 80012a8:	4844      	ldr	r0, [pc, #272]	; (80013bc <MX_TIM1_Init+0x19c>)
 80012aa:	f003 fd1f 	bl	8004cec <HAL_TIM_ConfigClockSource>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80012b4:	f7ff fce4 	bl	8000c80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012b8:	4840      	ldr	r0, [pc, #256]	; (80013bc <MX_TIM1_Init+0x19c>)
 80012ba:	f003 f90f 	bl	80044dc <HAL_TIM_PWM_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80012c4:	f7ff fcdc 	bl	8000c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c8:	2300      	movs	r3, #0
 80012ca:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012cc:	2300      	movs	r3, #0
 80012ce:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012d8:	4619      	mov	r1, r3
 80012da:	4838      	ldr	r0, [pc, #224]	; (80013bc <MX_TIM1_Init+0x19c>)
 80012dc:	f004 fcbc 	bl	8005c58 <HAL_TIMEx_MasterConfigSynchronization>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80012e6:	f7ff fccb 	bl	8000c80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ea:	2360      	movs	r3, #96	; 0x60
 80012ec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 410;
 80012ee:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 80012f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012f4:	2300      	movs	r3, #0
 80012f6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012f8:	2300      	movs	r3, #0
 80012fa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001300:	2300      	movs	r3, #0
 8001302:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001304:	2300      	movs	r3, #0
 8001306:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001308:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800130c:	2200      	movs	r2, #0
 800130e:	4619      	mov	r1, r3
 8001310:	482a      	ldr	r0, [pc, #168]	; (80013bc <MX_TIM1_Init+0x19c>)
 8001312:	f003 fbd7 	bl	8004ac4 <HAL_TIM_PWM_ConfigChannel>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800131c:	f7ff fcb0 	bl	8000c80 <Error_Handler>
  }
  sConfigOC.Pulse = 614;
 8001320:	f240 2366 	movw	r3, #614	; 0x266
 8001324:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001326:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800132a:	2204      	movs	r2, #4
 800132c:	4619      	mov	r1, r3
 800132e:	4823      	ldr	r0, [pc, #140]	; (80013bc <MX_TIM1_Init+0x19c>)
 8001330:	f003 fbc8 	bl	8004ac4 <HAL_TIM_PWM_ConfigChannel>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 800133a:	f7ff fca1 	bl	8000c80 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001342:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001346:	2208      	movs	r2, #8
 8001348:	4619      	mov	r1, r3
 800134a:	481c      	ldr	r0, [pc, #112]	; (80013bc <MX_TIM1_Init+0x19c>)
 800134c:	f003 fbba 	bl	8004ac4 <HAL_TIM_PWM_ConfigChannel>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8001356:	f7ff fc93 	bl	8000c80 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 800135a:	4818      	ldr	r0, [pc, #96]	; (80013bc <MX_TIM1_Init+0x19c>)
 800135c:	f004 fdc4 	bl	8005ee8 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 44;
 800136c:	232c      	movs	r3, #44	; 0x2c
 800136e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001374:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001378:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800137e:	2300      	movs	r3, #0
 8001380:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001382:	2300      	movs	r3, #0
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001386:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800138a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001390:	2300      	movs	r3, #0
 8001392:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001394:	2300      	movs	r3, #0
 8001396:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	4619      	mov	r1, r3
 800139c:	4807      	ldr	r0, [pc, #28]	; (80013bc <MX_TIM1_Init+0x19c>)
 800139e:	f004 fcf1 	bl	8005d84 <HAL_TIMEx_ConfigBreakDeadTime>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 80013a8:	f7ff fc6a 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013ac:	4803      	ldr	r0, [pc, #12]	; (80013bc <MX_TIM1_Init+0x19c>)
 80013ae:	f000 f8f5 	bl	800159c <HAL_TIM_MspPostInit>

}
 80013b2:	bf00      	nop
 80013b4:	3770      	adds	r7, #112	; 0x70
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000248 	.word	0x20000248
 80013c0:	40012c00 	.word	0x40012c00

080013c4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b088      	sub	sp, #32
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 80013ca:	f107 0310 	add.w	r3, r7, #16
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013e2:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <MX_TIM3_Init+0x90>)
 80013e4:	4a1c      	ldr	r2, [pc, #112]	; (8001458 <MX_TIM3_Init+0x94>)
 80013e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013e8:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <MX_TIM3_Init+0x90>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ee:	4b19      	ldr	r3, [pc, #100]	; (8001454 <MX_TIM3_Init+0x90>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013f4:	4b17      	ldr	r3, [pc, #92]	; (8001454 <MX_TIM3_Init+0x90>)
 80013f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fc:	4b15      	ldr	r3, [pc, #84]	; (8001454 <MX_TIM3_Init+0x90>)
 80013fe:	2200      	movs	r2, #0
 8001400:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001402:	4b14      	ldr	r3, [pc, #80]	; (8001454 <MX_TIM3_Init+0x90>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001408:	2300      	movs	r3, #0
 800140a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001418:	f107 0310 	add.w	r3, r7, #16
 800141c:	4619      	mov	r1, r3
 800141e:	480d      	ldr	r0, [pc, #52]	; (8001454 <MX_TIM3_Init+0x90>)
 8001420:	f004 faa9 	bl	8005976 <HAL_TIMEx_HallSensor_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800142a:	f7ff fc29 	bl	8000c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800142e:	2350      	movs	r3, #80	; 0x50
 8001430:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	4619      	mov	r1, r3
 800143a:	4806      	ldr	r0, [pc, #24]	; (8001454 <MX_TIM3_Init+0x90>)
 800143c:	f004 fc0c 	bl	8005c58 <HAL_TIMEx_MasterConfigSynchronization>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001446:	f7ff fc1b 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	3720      	adds	r7, #32
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000294 	.word	0x20000294
 8001458:	40000400 	.word	0x40000400

0800145c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a19      	ldr	r2, [pc, #100]	; (80014d0 <HAL_TIM_Base_MspInit+0x74>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d12b      	bne.n	80014c6 <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800146e:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <HAL_TIM_Base_MspInit+0x78>)
 8001470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001472:	4a18      	ldr	r2, [pc, #96]	; (80014d4 <HAL_TIM_Base_MspInit+0x78>)
 8001474:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001478:	6613      	str	r3, [r2, #96]	; 0x60
 800147a:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <HAL_TIM_Base_MspInit+0x78>)
 800147c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800147e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2100      	movs	r1, #0
 800148a:	2018      	movs	r0, #24
 800148c:	f001 fc48 	bl	8002d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001490:	2018      	movs	r0, #24
 8001492:	f001 fc5f 	bl	8002d54 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	2019      	movs	r0, #25
 800149c:	f001 fc40 	bl	8002d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80014a0:	2019      	movs	r0, #25
 80014a2:	f001 fc57 	bl	8002d54 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	201a      	movs	r0, #26
 80014ac:	f001 fc38 	bl	8002d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80014b0:	201a      	movs	r0, #26
 80014b2:	f001 fc4f 	bl	8002d54 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2100      	movs	r1, #0
 80014ba:	201b      	movs	r0, #27
 80014bc:	f001 fc30 	bl	8002d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80014c0:	201b      	movs	r0, #27
 80014c2:	f001 fc47 	bl	8002d54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80014c6:	bf00      	nop
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40012c00 	.word	0x40012c00
 80014d4:	40021000 	.word	0x40021000

080014d8 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	; 0x28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a26      	ldr	r2, [pc, #152]	; (8001590 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d145      	bne.n	8001586 <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014fa:	4b26      	ldr	r3, [pc, #152]	; (8001594 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80014fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fe:	4a25      	ldr	r2, [pc, #148]	; (8001594 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001500:	f043 0302 	orr.w	r3, r3, #2
 8001504:	6593      	str	r3, [r2, #88]	; 0x58
 8001506:	4b23      	ldr	r3, [pc, #140]	; (8001594 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001512:	4b20      	ldr	r3, [pc, #128]	; (8001594 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	4a1f      	ldr	r2, [pc, #124]	; (8001594 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151e:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800152a:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152e:	4a19      	ldr	r2, [pc, #100]	; (8001594 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001530:	f043 0304 	orr.w	r3, r3, #4
 8001534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001536:	4b17      	ldr	r3, [pc, #92]	; (8001594 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001542:	2350      	movs	r3, #80	; 0x50
 8001544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154e:	2300      	movs	r3, #0
 8001550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001552:	2302      	movs	r3, #2
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4619      	mov	r1, r3
 800155c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001560:	f001 fcc6 	bl	8002ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001564:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001576:	2302      	movs	r3, #2
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	4619      	mov	r1, r3
 8001580:	4805      	ldr	r0, [pc, #20]	; (8001598 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 8001582:	f001 fcb5 	bl	8002ef0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001586:	bf00      	nop
 8001588:	3728      	adds	r7, #40	; 0x28
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40000400 	.word	0x40000400
 8001594:	40021000 	.word	0x40021000
 8001598:	48000800 	.word	0x48000800

0800159c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a29      	ldr	r2, [pc, #164]	; (8001660 <HAL_TIM_MspPostInit+0xc4>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d14b      	bne.n	8001656 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015be:	4b29      	ldr	r3, [pc, #164]	; (8001664 <HAL_TIM_MspPostInit+0xc8>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c2:	4a28      	ldr	r2, [pc, #160]	; (8001664 <HAL_TIM_MspPostInit+0xc8>)
 80015c4:	f043 0302 	orr.w	r3, r3, #2
 80015c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ca:	4b26      	ldr	r3, [pc, #152]	; (8001664 <HAL_TIM_MspPostInit+0xc8>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d6:	4b23      	ldr	r3, [pc, #140]	; (8001664 <HAL_TIM_MspPostInit+0xc8>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015da:	4a22      	ldr	r2, [pc, #136]	; (8001664 <HAL_TIM_MspPostInit+0xc8>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e2:	4b20      	ldr	r3, [pc, #128]	; (8001664 <HAL_TIM_MspPostInit+0xc8>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 80015ee:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80015f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fc:	2300      	movs	r3, #0
 80015fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001600:	2306      	movs	r3, #6
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	4619      	mov	r1, r3
 800160a:	4817      	ldr	r0, [pc, #92]	; (8001668 <HAL_TIM_MspPostInit+0xcc>)
 800160c:	f001 fc70 	bl	8002ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001610:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001616:	2302      	movs	r3, #2
 8001618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161e:	2300      	movs	r3, #0
 8001620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001622:	2304      	movs	r3, #4
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	4619      	mov	r1, r3
 800162c:	480e      	ldr	r0, [pc, #56]	; (8001668 <HAL_TIM_MspPostInit+0xcc>)
 800162e:	f001 fc5f 	bl	8002ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 8001632:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	2300      	movs	r3, #0
 8001642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001644:	2306      	movs	r3, #6
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	4619      	mov	r1, r3
 800164e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001652:	f001 fc4d 	bl	8002ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001656:	bf00      	nop
 8001658:	3728      	adds	r7, #40	; 0x28
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40012c00 	.word	0x40012c00
 8001664:	40021000 	.word	0x40021000
 8001668:	48000400 	.word	0x48000400

0800166c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001670:	4b22      	ldr	r3, [pc, #136]	; (80016fc <MX_USART2_UART_Init+0x90>)
 8001672:	4a23      	ldr	r2, [pc, #140]	; (8001700 <MX_USART2_UART_Init+0x94>)
 8001674:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001676:	4b21      	ldr	r3, [pc, #132]	; (80016fc <MX_USART2_UART_Init+0x90>)
 8001678:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800167c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800167e:	4b1f      	ldr	r3, [pc, #124]	; (80016fc <MX_USART2_UART_Init+0x90>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001684:	4b1d      	ldr	r3, [pc, #116]	; (80016fc <MX_USART2_UART_Init+0x90>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800168a:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <MX_USART2_UART_Init+0x90>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001690:	4b1a      	ldr	r3, [pc, #104]	; (80016fc <MX_USART2_UART_Init+0x90>)
 8001692:	220c      	movs	r2, #12
 8001694:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001696:	4b19      	ldr	r3, [pc, #100]	; (80016fc <MX_USART2_UART_Init+0x90>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800169c:	4b17      	ldr	r3, [pc, #92]	; (80016fc <MX_USART2_UART_Init+0x90>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016a2:	4b16      	ldr	r3, [pc, #88]	; (80016fc <MX_USART2_UART_Init+0x90>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016a8:	4b14      	ldr	r3, [pc, #80]	; (80016fc <MX_USART2_UART_Init+0x90>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016ae:	4b13      	ldr	r3, [pc, #76]	; (80016fc <MX_USART2_UART_Init+0x90>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016b4:	4811      	ldr	r0, [pc, #68]	; (80016fc <MX_USART2_UART_Init+0x90>)
 80016b6:	f004 fc95 	bl	8005fe4 <HAL_UART_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80016c0:	f7ff fade 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016c4:	2100      	movs	r1, #0
 80016c6:	480d      	ldr	r0, [pc, #52]	; (80016fc <MX_USART2_UART_Init+0x90>)
 80016c8:	f006 fc37 	bl	8007f3a <HAL_UARTEx_SetTxFifoThreshold>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80016d2:	f7ff fad5 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016d6:	2100      	movs	r1, #0
 80016d8:	4808      	ldr	r0, [pc, #32]	; (80016fc <MX_USART2_UART_Init+0x90>)
 80016da:	f006 fc6c 	bl	8007fb6 <HAL_UARTEx_SetRxFifoThreshold>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80016e4:	f7ff facc 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80016e8:	4804      	ldr	r0, [pc, #16]	; (80016fc <MX_USART2_UART_Init+0x90>)
 80016ea:	f006 fbed 	bl	8007ec8 <HAL_UARTEx_DisableFifoMode>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80016f4:	f7ff fac4 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	200002e0 	.word	0x200002e0
 8001700:	40004400 	.word	0x40004400

08001704 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001708:	4b22      	ldr	r3, [pc, #136]	; (8001794 <MX_USART3_UART_Init+0x90>)
 800170a:	4a23      	ldr	r2, [pc, #140]	; (8001798 <MX_USART3_UART_Init+0x94>)
 800170c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800170e:	4b21      	ldr	r3, [pc, #132]	; (8001794 <MX_USART3_UART_Init+0x90>)
 8001710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001714:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001716:	4b1f      	ldr	r3, [pc, #124]	; (8001794 <MX_USART3_UART_Init+0x90>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800171c:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <MX_USART3_UART_Init+0x90>)
 800171e:	2200      	movs	r2, #0
 8001720:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001722:	4b1c      	ldr	r3, [pc, #112]	; (8001794 <MX_USART3_UART_Init+0x90>)
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001728:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <MX_USART3_UART_Init+0x90>)
 800172a:	220c      	movs	r2, #12
 800172c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800172e:	4b19      	ldr	r3, [pc, #100]	; (8001794 <MX_USART3_UART_Init+0x90>)
 8001730:	2200      	movs	r2, #0
 8001732:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001734:	4b17      	ldr	r3, [pc, #92]	; (8001794 <MX_USART3_UART_Init+0x90>)
 8001736:	2200      	movs	r2, #0
 8001738:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800173a:	4b16      	ldr	r3, [pc, #88]	; (8001794 <MX_USART3_UART_Init+0x90>)
 800173c:	2200      	movs	r2, #0
 800173e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001740:	4b14      	ldr	r3, [pc, #80]	; (8001794 <MX_USART3_UART_Init+0x90>)
 8001742:	2200      	movs	r2, #0
 8001744:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001746:	4b13      	ldr	r3, [pc, #76]	; (8001794 <MX_USART3_UART_Init+0x90>)
 8001748:	2200      	movs	r2, #0
 800174a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800174c:	4811      	ldr	r0, [pc, #68]	; (8001794 <MX_USART3_UART_Init+0x90>)
 800174e:	f004 fc49 	bl	8005fe4 <HAL_UART_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001758:	f7ff fa92 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800175c:	2100      	movs	r1, #0
 800175e:	480d      	ldr	r0, [pc, #52]	; (8001794 <MX_USART3_UART_Init+0x90>)
 8001760:	f006 fbeb 	bl	8007f3a <HAL_UARTEx_SetTxFifoThreshold>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800176a:	f7ff fa89 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800176e:	2100      	movs	r1, #0
 8001770:	4808      	ldr	r0, [pc, #32]	; (8001794 <MX_USART3_UART_Init+0x90>)
 8001772:	f006 fc20 	bl	8007fb6 <HAL_UARTEx_SetRxFifoThreshold>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800177c:	f7ff fa80 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001780:	4804      	ldr	r0, [pc, #16]	; (8001794 <MX_USART3_UART_Init+0x90>)
 8001782:	f006 fba1 	bl	8007ec8 <HAL_UARTEx_DisableFifoMode>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800178c:	f7ff fa78 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000370 	.word	0x20000370
 8001798:	40004800 	.word	0x40004800

0800179c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b0a0      	sub	sp, #128	; 0x80
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017b4:	f107 0318 	add.w	r3, r7, #24
 80017b8:	2254      	movs	r2, #84	; 0x54
 80017ba:	2100      	movs	r1, #0
 80017bc:	4618      	mov	r0, r3
 80017be:	f006 fce9 	bl	8008194 <memset>
  if(uartHandle->Instance==USART2)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a41      	ldr	r2, [pc, #260]	; (80018cc <HAL_UART_MspInit+0x130>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d13f      	bne.n	800184c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017cc:	2302      	movs	r3, #2
 80017ce:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017d0:	2300      	movs	r3, #0
 80017d2:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017d4:	f107 0318 	add.w	r3, r7, #24
 80017d8:	4618      	mov	r0, r3
 80017da:	f002 fb61 	bl	8003ea0 <HAL_RCCEx_PeriphCLKConfig>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017e4:	f7ff fa4c 	bl	8000c80 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017e8:	4b39      	ldr	r3, [pc, #228]	; (80018d0 <HAL_UART_MspInit+0x134>)
 80017ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ec:	4a38      	ldr	r2, [pc, #224]	; (80018d0 <HAL_UART_MspInit+0x134>)
 80017ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f2:	6593      	str	r3, [r2, #88]	; 0x58
 80017f4:	4b36      	ldr	r3, [pc, #216]	; (80018d0 <HAL_UART_MspInit+0x134>)
 80017f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fc:	617b      	str	r3, [r7, #20]
 80017fe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001800:	4b33      	ldr	r3, [pc, #204]	; (80018d0 <HAL_UART_MspInit+0x134>)
 8001802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001804:	4a32      	ldr	r2, [pc, #200]	; (80018d0 <HAL_UART_MspInit+0x134>)
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180c:	4b30      	ldr	r3, [pc, #192]	; (80018d0 <HAL_UART_MspInit+0x134>)
 800180e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	613b      	str	r3, [r7, #16]
 8001816:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001818:	230c      	movs	r3, #12
 800181a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181c:	2302      	movs	r3, #2
 800181e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001824:	2300      	movs	r3, #0
 8001826:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001828:	2307      	movs	r3, #7
 800182a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001830:	4619      	mov	r1, r3
 8001832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001836:	f001 fb5b 	bl	8002ef0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2100      	movs	r1, #0
 800183e:	2026      	movs	r0, #38	; 0x26
 8001840:	f001 fa6e 	bl	8002d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001844:	2026      	movs	r0, #38	; 0x26
 8001846:	f001 fa85 	bl	8002d54 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800184a:	e03b      	b.n	80018c4 <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART3)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a20      	ldr	r2, [pc, #128]	; (80018d4 <HAL_UART_MspInit+0x138>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d136      	bne.n	80018c4 <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001856:	2304      	movs	r3, #4
 8001858:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800185a:	2300      	movs	r3, #0
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800185e:	f107 0318 	add.w	r3, r7, #24
 8001862:	4618      	mov	r0, r3
 8001864:	f002 fb1c 	bl	8003ea0 <HAL_RCCEx_PeriphCLKConfig>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 800186e:	f7ff fa07 	bl	8000c80 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001872:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <HAL_UART_MspInit+0x134>)
 8001874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001876:	4a16      	ldr	r2, [pc, #88]	; (80018d0 <HAL_UART_MspInit+0x134>)
 8001878:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800187c:	6593      	str	r3, [r2, #88]	; 0x58
 800187e:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <HAL_UART_MspInit+0x134>)
 8001880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001882:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800188a:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <HAL_UART_MspInit+0x134>)
 800188c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188e:	4a10      	ldr	r2, [pc, #64]	; (80018d0 <HAL_UART_MspInit+0x134>)
 8001890:	f043 0304 	orr.w	r3, r3, #4
 8001894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001896:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <HAL_UART_MspInit+0x134>)
 8001898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80018a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018a6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a8:	2302      	movs	r3, #2
 80018aa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b0:	2300      	movs	r3, #0
 80018b2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018b4:	2307      	movs	r3, #7
 80018b6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80018bc:	4619      	mov	r1, r3
 80018be:	4806      	ldr	r0, [pc, #24]	; (80018d8 <HAL_UART_MspInit+0x13c>)
 80018c0:	f001 fb16 	bl	8002ef0 <HAL_GPIO_Init>
}
 80018c4:	bf00      	nop
 80018c6:	3780      	adds	r7, #128	; 0x80
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40004400 	.word	0x40004400
 80018d0:	40021000 	.word	0x40021000
 80018d4:	40004800 	.word	0x40004800
 80018d8:	48000800 	.word	0x48000800

080018dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018dc:	480d      	ldr	r0, [pc, #52]	; (8001914 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018de:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018e0:	480d      	ldr	r0, [pc, #52]	; (8001918 <LoopForever+0x6>)
  ldr r1, =_edata
 80018e2:	490e      	ldr	r1, [pc, #56]	; (800191c <LoopForever+0xa>)
  ldr r2, =_sidata
 80018e4:	4a0e      	ldr	r2, [pc, #56]	; (8001920 <LoopForever+0xe>)
  movs r3, #0
 80018e6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80018e8:	e002      	b.n	80018f0 <LoopCopyDataInit>

080018ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ee:	3304      	adds	r3, #4

080018f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f4:	d3f9      	bcc.n	80018ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018f6:	4a0b      	ldr	r2, [pc, #44]	; (8001924 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018f8:	4c0b      	ldr	r4, [pc, #44]	; (8001928 <LoopForever+0x16>)
  movs r3, #0
 80018fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018fc:	e001      	b.n	8001902 <LoopFillZerobss>

080018fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001900:	3204      	adds	r2, #4

08001902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001904:	d3fb      	bcc.n	80018fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001906:	f7ff fc79 	bl	80011fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800190a:	f006 fc63 	bl	80081d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800190e:	f7ff f8d5 	bl	8000abc <main>

08001912 <LoopForever>:

LoopForever:
    b LoopForever
 8001912:	e7fe      	b.n	8001912 <LoopForever>
  ldr   r0, =_estack
 8001914:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800191c:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8001920:	08009780 	.word	0x08009780
  ldr r2, =_sbss
 8001924:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8001928:	2000054c 	.word	0x2000054c

0800192c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800192c:	e7fe      	b.n	800192c <ADC1_2_IRQHandler>

0800192e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001934:	2300      	movs	r3, #0
 8001936:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001938:	2003      	movs	r0, #3
 800193a:	f001 f9e6 	bl	8002d0a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800193e:	200f      	movs	r0, #15
 8001940:	f7ff fb28 	bl	8000f94 <HAL_InitTick>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d002      	beq.n	8001950 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	71fb      	strb	r3, [r7, #7]
 800194e:	e001      	b.n	8001954 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001950:	f7ff fafc 	bl	8000f4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001954:	79fb      	ldrb	r3, [r7, #7]

}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <HAL_IncTick+0x1c>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4b05      	ldr	r3, [pc, #20]	; (8001980 <HAL_IncTick+0x20>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4413      	add	r3, r2
 800196e:	4a03      	ldr	r2, [pc, #12]	; (800197c <HAL_IncTick+0x1c>)
 8001970:	6013      	str	r3, [r2, #0]
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	20000400 	.word	0x20000400
 8001980:	20000080 	.word	0x20000080

08001984 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return uwTick;
 8001988:	4b03      	ldr	r3, [pc, #12]	; (8001998 <HAL_GetTick+0x14>)
 800198a:	681b      	ldr	r3, [r3, #0]
}
 800198c:	4618      	mov	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	20000400 	.word	0x20000400

0800199c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	431a      	orrs	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	609a      	str	r2, [r3, #8]
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
 80019ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	609a      	str	r2, [r3, #8]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b087      	sub	sp, #28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
 8001a10:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	3360      	adds	r3, #96	; 0x60
 8001a16:	461a      	mov	r2, r3
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <LL_ADC_SetOffset+0x44>)
 8001a26:	4013      	ands	r3, r2
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	4313      	orrs	r3, r2
 8001a34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a3c:	bf00      	nop
 8001a3e:	371c      	adds	r7, #28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	03fff000 	.word	0x03fff000

08001a4c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3360      	adds	r3, #96	; 0x60
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b087      	sub	sp, #28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	3360      	adds	r3, #96	; 0x60
 8001a88:	461a      	mov	r2, r3
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001aa2:	bf00      	nop
 8001aa4:	371c      	adds	r7, #28
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b087      	sub	sp, #28
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	3360      	adds	r3, #96	; 0x60
 8001abe:	461a      	mov	r2, r3
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001ad8:	bf00      	nop
 8001ada:	371c      	adds	r7, #28
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b087      	sub	sp, #28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	3360      	adds	r3, #96	; 0x60
 8001af4:	461a      	mov	r2, r3
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001b0e:	bf00      	nop
 8001b10:	371c      	adds	r7, #28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
 8001b22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	615a      	str	r2, [r3, #20]
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b087      	sub	sp, #28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	3330      	adds	r3, #48	; 0x30
 8001b50:	461a      	mov	r2, r3
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	0a1b      	lsrs	r3, r3, #8
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	f003 030c 	and.w	r3, r3, #12
 8001b5c:	4413      	add	r3, r2
 8001b5e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	f003 031f 	and.w	r3, r3, #31
 8001b6a:	211f      	movs	r1, #31
 8001b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	401a      	ands	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	0e9b      	lsrs	r3, r3, #26
 8001b78:	f003 011f 	and.w	r1, r3, #31
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	f003 031f 	and.w	r3, r3, #31
 8001b82:	fa01 f303 	lsl.w	r3, r1, r3
 8001b86:	431a      	orrs	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b8c:	bf00      	nop
 8001b8e:	371c      	adds	r7, #28
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b087      	sub	sp, #28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	3314      	adds	r3, #20
 8001ba8:	461a      	mov	r2, r3
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	0e5b      	lsrs	r3, r3, #25
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	4413      	add	r3, r2
 8001bb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	0d1b      	lsrs	r3, r3, #20
 8001bc0:	f003 031f 	and.w	r3, r3, #31
 8001bc4:	2107      	movs	r1, #7
 8001bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	401a      	ands	r2, r3
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	0d1b      	lsrs	r3, r3, #20
 8001bd2:	f003 031f 	and.w	r3, r3, #31
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001be2:	bf00      	nop
 8001be4:	371c      	adds	r7, #28
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
	...

08001bf0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a0f      	ldr	r2, [pc, #60]	; (8001c3c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d10a      	bne.n	8001c1a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c10:	431a      	orrs	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001c18:	e00a      	b.n	8001c30 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c26:	43db      	mvns	r3, r3
 8001c28:	401a      	ands	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001c30:	bf00      	nop
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	407f0000 	.word	0x407f0000

08001c40 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001c50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	6093      	str	r3, [r2, #8]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c78:	d101      	bne.n	8001c7e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e000      	b.n	8001c80 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001c9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ca0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001cc8:	d101      	bne.n	8001cce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e000      	b.n	8001cd0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d101      	bne.n	8001cf4 <LL_ADC_IsEnabled+0x18>
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e000      	b.n	8001cf6 <LL_ADC_IsEnabled+0x1a>
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	d101      	bne.n	8001d1a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	d101      	bne.n	8001d40 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e000      	b.n	8001d42 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
	...

08001d50 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d50:	b590      	push	{r4, r7, lr}
 8001d52:	b089      	sub	sp, #36	; 0x24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e1af      	b.n	80020ca <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d109      	bne.n	8001d8c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7fe fd15 	bl	80007a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ff67 	bl	8001c64 <LL_ADC_IsDeepPowerDownEnabled>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d004      	beq.n	8001da6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff ff4d 	bl	8001c40 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff ff82 	bl	8001cb4 <LL_ADC_IsInternalRegulatorEnabled>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d115      	bne.n	8001de2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff ff66 	bl	8001c8c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dc0:	4b9f      	ldr	r3, [pc, #636]	; (8002040 <HAL_ADC_Init+0x2f0>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	099b      	lsrs	r3, r3, #6
 8001dc6:	4a9f      	ldr	r2, [pc, #636]	; (8002044 <HAL_ADC_Init+0x2f4>)
 8001dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dcc:	099b      	lsrs	r3, r3, #6
 8001dce:	3301      	adds	r3, #1
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001dd4:	e002      	b.n	8001ddc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f9      	bne.n	8001dd6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff ff64 	bl	8001cb4 <LL_ADC_IsInternalRegulatorEnabled>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10d      	bne.n	8001e0e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df6:	f043 0210 	orr.w	r2, r3, #16
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e02:	f043 0201 	orr.w	r2, r3, #1
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff ff75 	bl	8001d02 <LL_ADC_REG_IsConversionOngoing>
 8001e18:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1e:	f003 0310 	and.w	r3, r3, #16
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f040 8148 	bne.w	80020b8 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f040 8144 	bne.w	80020b8 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e34:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e38:	f043 0202 	orr.w	r2, r3, #2
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ff49 	bl	8001cdc <LL_ADC_IsEnabled>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d141      	bne.n	8001ed4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e58:	d004      	beq.n	8001e64 <HAL_ADC_Init+0x114>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a7a      	ldr	r2, [pc, #488]	; (8002048 <HAL_ADC_Init+0x2f8>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d10f      	bne.n	8001e84 <HAL_ADC_Init+0x134>
 8001e64:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001e68:	f7ff ff38 	bl	8001cdc <LL_ADC_IsEnabled>
 8001e6c:	4604      	mov	r4, r0
 8001e6e:	4876      	ldr	r0, [pc, #472]	; (8002048 <HAL_ADC_Init+0x2f8>)
 8001e70:	f7ff ff34 	bl	8001cdc <LL_ADC_IsEnabled>
 8001e74:	4603      	mov	r3, r0
 8001e76:	4323      	orrs	r3, r4
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	bf0c      	ite	eq
 8001e7c:	2301      	moveq	r3, #1
 8001e7e:	2300      	movne	r3, #0
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	e012      	b.n	8001eaa <HAL_ADC_Init+0x15a>
 8001e84:	4871      	ldr	r0, [pc, #452]	; (800204c <HAL_ADC_Init+0x2fc>)
 8001e86:	f7ff ff29 	bl	8001cdc <LL_ADC_IsEnabled>
 8001e8a:	4604      	mov	r4, r0
 8001e8c:	4870      	ldr	r0, [pc, #448]	; (8002050 <HAL_ADC_Init+0x300>)
 8001e8e:	f7ff ff25 	bl	8001cdc <LL_ADC_IsEnabled>
 8001e92:	4603      	mov	r3, r0
 8001e94:	431c      	orrs	r4, r3
 8001e96:	486f      	ldr	r0, [pc, #444]	; (8002054 <HAL_ADC_Init+0x304>)
 8001e98:	f7ff ff20 	bl	8001cdc <LL_ADC_IsEnabled>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	4323      	orrs	r3, r4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	bf0c      	ite	eq
 8001ea4:	2301      	moveq	r3, #1
 8001ea6:	2300      	movne	r3, #0
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d012      	beq.n	8001ed4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001eb6:	d004      	beq.n	8001ec2 <HAL_ADC_Init+0x172>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a62      	ldr	r2, [pc, #392]	; (8002048 <HAL_ADC_Init+0x2f8>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d101      	bne.n	8001ec6 <HAL_ADC_Init+0x176>
 8001ec2:	4a65      	ldr	r2, [pc, #404]	; (8002058 <HAL_ADC_Init+0x308>)
 8001ec4:	e000      	b.n	8001ec8 <HAL_ADC_Init+0x178>
 8001ec6:	4a65      	ldr	r2, [pc, #404]	; (800205c <HAL_ADC_Init+0x30c>)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4610      	mov	r0, r2
 8001ed0:	f7ff fd64 	bl	800199c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	7f5b      	ldrb	r3, [r3, #29]
 8001ed8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ede:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001ee4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001eea:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ef2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d106      	bne.n	8001f10 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f06:	3b01      	subs	r3, #1
 8001f08:	045b      	lsls	r3, r3, #17
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d009      	beq.n	8001f2c <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f24:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	4b4b      	ldr	r3, [pc, #300]	; (8002060 <HAL_ADC_Init+0x310>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6812      	ldr	r2, [r2, #0]
 8001f3a:	69b9      	ldr	r1, [r7, #24]
 8001f3c:	430b      	orrs	r3, r1
 8001f3e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff fed1 	bl	8001d02 <LL_ADC_REG_IsConversionOngoing>
 8001f60:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fede 	bl	8001d28 <LL_ADC_INJ_IsConversionOngoing>
 8001f6c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d17f      	bne.n	8002074 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d17c      	bne.n	8002074 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f7e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f86:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f96:	f023 0302 	bic.w	r3, r3, #2
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6812      	ldr	r2, [r2, #0]
 8001f9e:	69b9      	ldr	r1, [r7, #24]
 8001fa0:	430b      	orrs	r3, r1
 8001fa2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d017      	beq.n	8001fdc <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	691a      	ldr	r2, [r3, #16]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001fba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001fc4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001fc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6911      	ldr	r1, [r2, #16]
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6812      	ldr	r2, [r2, #0]
 8001fd4:	430b      	orrs	r3, r1
 8001fd6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001fda:	e013      	b.n	8002004 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	691a      	ldr	r2, [r3, #16]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001fea:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001ffc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002000:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800200a:	2b01      	cmp	r3, #1
 800200c:	d12a      	bne.n	8002064 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002018:	f023 0304 	bic.w	r3, r3, #4
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002024:	4311      	orrs	r1, r2
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800202a:	4311      	orrs	r1, r2
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002030:	430a      	orrs	r2, r1
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f042 0201 	orr.w	r2, r2, #1
 800203c:	611a      	str	r2, [r3, #16]
 800203e:	e019      	b.n	8002074 <HAL_ADC_Init+0x324>
 8002040:	20000078 	.word	0x20000078
 8002044:	053e2d63 	.word	0x053e2d63
 8002048:	50000100 	.word	0x50000100
 800204c:	50000400 	.word	0x50000400
 8002050:	50000500 	.word	0x50000500
 8002054:	50000600 	.word	0x50000600
 8002058:	50000300 	.word	0x50000300
 800205c:	50000700 	.word	0x50000700
 8002060:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	691a      	ldr	r2, [r3, #16]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0201 	bic.w	r2, r2, #1
 8002072:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	695b      	ldr	r3, [r3, #20]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d10c      	bne.n	8002096 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	f023 010f 	bic.w	r1, r3, #15
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	1e5a      	subs	r2, r3, #1
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	631a      	str	r2, [r3, #48]	; 0x30
 8002094:	e007      	b.n	80020a6 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 020f 	bic.w	r2, r2, #15
 80020a4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020aa:	f023 0303 	bic.w	r3, r3, #3
 80020ae:	f043 0201 	orr.w	r2, r3, #1
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80020b6:	e007      	b.n	80020c8 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020bc:	f043 0210 	orr.w	r2, r3, #16
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80020c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3724      	adds	r7, #36	; 0x24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd90      	pop	{r4, r7, pc}
 80020d2:	bf00      	nop

080020d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b0b6      	sub	sp, #216	; 0xd8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020de:	2300      	movs	r3, #0
 80020e0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d102      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x24>
 80020f2:	2302      	movs	r3, #2
 80020f4:	f000 bc13 	b.w	800291e <HAL_ADC_ConfigChannel+0x84a>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff fdfc 	bl	8001d02 <LL_ADC_REG_IsConversionOngoing>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	f040 83f3 	bne.w	80028f8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6818      	ldr	r0, [r3, #0]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	6859      	ldr	r1, [r3, #4]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	461a      	mov	r2, r3
 8002120:	f7ff fd0e 	bl	8001b40 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff fdea 	bl	8001d02 <LL_ADC_REG_IsConversionOngoing>
 800212e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff fdf6 	bl	8001d28 <LL_ADC_INJ_IsConversionOngoing>
 800213c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002140:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002144:	2b00      	cmp	r3, #0
 8002146:	f040 81d9 	bne.w	80024fc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800214a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800214e:	2b00      	cmp	r3, #0
 8002150:	f040 81d4 	bne.w	80024fc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800215c:	d10f      	bne.n	800217e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6818      	ldr	r0, [r3, #0]
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2200      	movs	r2, #0
 8002168:	4619      	mov	r1, r3
 800216a:	f7ff fd15 	bl	8001b98 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff fccf 	bl	8001b1a <LL_ADC_SetSamplingTimeCommonConfig>
 800217c:	e00e      	b.n	800219c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	6819      	ldr	r1, [r3, #0]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	461a      	mov	r2, r3
 800218c:	f7ff fd04 	bl	8001b98 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2100      	movs	r1, #0
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff fcbf 	bl	8001b1a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	695a      	ldr	r2, [r3, #20]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	d022      	beq.n	8002204 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6818      	ldr	r0, [r3, #0]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	6919      	ldr	r1, [r3, #16]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80021ce:	f7ff fc19 	bl	8001a04 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6818      	ldr	r0, [r3, #0]
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	6919      	ldr	r1, [r3, #16]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	461a      	mov	r2, r3
 80021e0:	f7ff fc65 	bl	8001aae <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6818      	ldr	r0, [r3, #0]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	6919      	ldr	r1, [r3, #16]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	7f1b      	ldrb	r3, [r3, #28]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d102      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x126>
 80021f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021f8:	e000      	b.n	80021fc <HAL_ADC_ConfigChannel+0x128>
 80021fa:	2300      	movs	r3, #0
 80021fc:	461a      	mov	r2, r3
 80021fe:	f7ff fc71 	bl	8001ae4 <LL_ADC_SetOffsetSaturation>
 8002202:	e17b      	b.n	80024fc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2100      	movs	r1, #0
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff fc1e 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 8002210:	4603      	mov	r3, r0
 8002212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10a      	bne.n	8002230 <HAL_ADC_ConfigChannel+0x15c>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2100      	movs	r1, #0
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff fc13 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 8002226:	4603      	mov	r3, r0
 8002228:	0e9b      	lsrs	r3, r3, #26
 800222a:	f003 021f 	and.w	r2, r3, #31
 800222e:	e01e      	b.n	800226e <HAL_ADC_ConfigChannel+0x19a>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2100      	movs	r1, #0
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff fc08 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 800223c:	4603      	mov	r3, r0
 800223e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002246:	fa93 f3a3 	rbit	r3, r3
 800224a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800224e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002252:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002256:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800225e:	2320      	movs	r3, #32
 8002260:	e004      	b.n	800226c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002262:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002266:	fab3 f383 	clz	r3, r3
 800226a:	b2db      	uxtb	r3, r3
 800226c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002276:	2b00      	cmp	r3, #0
 8002278:	d105      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x1b2>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	0e9b      	lsrs	r3, r3, #26
 8002280:	f003 031f 	and.w	r3, r3, #31
 8002284:	e018      	b.n	80022b8 <HAL_ADC_ConfigChannel+0x1e4>
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002292:	fa93 f3a3 	rbit	r3, r3
 8002296:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800229a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800229e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80022a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80022aa:	2320      	movs	r3, #32
 80022ac:	e004      	b.n	80022b8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80022ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022b2:	fab3 f383 	clz	r3, r3
 80022b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d106      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2200      	movs	r2, #0
 80022c2:	2100      	movs	r1, #0
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff fbd7 	bl	8001a78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2101      	movs	r1, #1
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff fbbb 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 80022d6:	4603      	mov	r3, r0
 80022d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10a      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x222>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2101      	movs	r1, #1
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff fbb0 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 80022ec:	4603      	mov	r3, r0
 80022ee:	0e9b      	lsrs	r3, r3, #26
 80022f0:	f003 021f 	and.w	r2, r3, #31
 80022f4:	e01e      	b.n	8002334 <HAL_ADC_ConfigChannel+0x260>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2101      	movs	r1, #1
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff fba5 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 8002302:	4603      	mov	r3, r0
 8002304:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002308:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800230c:	fa93 f3a3 	rbit	r3, r3
 8002310:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002314:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002318:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800231c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002324:	2320      	movs	r3, #32
 8002326:	e004      	b.n	8002332 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002328:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800232c:	fab3 f383 	clz	r3, r3
 8002330:	b2db      	uxtb	r3, r3
 8002332:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800233c:	2b00      	cmp	r3, #0
 800233e:	d105      	bne.n	800234c <HAL_ADC_ConfigChannel+0x278>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	0e9b      	lsrs	r3, r3, #26
 8002346:	f003 031f 	and.w	r3, r3, #31
 800234a:	e018      	b.n	800237e <HAL_ADC_ConfigChannel+0x2aa>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002354:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002358:	fa93 f3a3 	rbit	r3, r3
 800235c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002360:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002364:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002368:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002370:	2320      	movs	r3, #32
 8002372:	e004      	b.n	800237e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002374:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002378:	fab3 f383 	clz	r3, r3
 800237c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800237e:	429a      	cmp	r2, r3
 8002380:	d106      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2200      	movs	r2, #0
 8002388:	2101      	movs	r1, #1
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fb74 	bl	8001a78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2102      	movs	r1, #2
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff fb58 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 800239c:	4603      	mov	r3, r0
 800239e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10a      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x2e8>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2102      	movs	r1, #2
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff fb4d 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 80023b2:	4603      	mov	r3, r0
 80023b4:	0e9b      	lsrs	r3, r3, #26
 80023b6:	f003 021f 	and.w	r2, r3, #31
 80023ba:	e01e      	b.n	80023fa <HAL_ADC_ConfigChannel+0x326>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2102      	movs	r1, #2
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff fb42 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 80023c8:	4603      	mov	r3, r0
 80023ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023d2:	fa93 f3a3 	rbit	r3, r3
 80023d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80023da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80023e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80023ea:	2320      	movs	r3, #32
 80023ec:	e004      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80023ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023f2:	fab3 f383 	clz	r3, r3
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002402:	2b00      	cmp	r3, #0
 8002404:	d105      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x33e>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	0e9b      	lsrs	r3, r3, #26
 800240c:	f003 031f 	and.w	r3, r3, #31
 8002410:	e016      	b.n	8002440 <HAL_ADC_ConfigChannel+0x36c>
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800241e:	fa93 f3a3 	rbit	r3, r3
 8002422:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002424:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002426:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800242a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002432:	2320      	movs	r3, #32
 8002434:	e004      	b.n	8002440 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002436:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800243a:	fab3 f383 	clz	r3, r3
 800243e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002440:	429a      	cmp	r2, r3
 8002442:	d106      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2200      	movs	r2, #0
 800244a:	2102      	movs	r1, #2
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff fb13 	bl	8001a78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2103      	movs	r1, #3
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff faf7 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 800245e:	4603      	mov	r3, r0
 8002460:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10a      	bne.n	800247e <HAL_ADC_ConfigChannel+0x3aa>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2103      	movs	r1, #3
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff faec 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 8002474:	4603      	mov	r3, r0
 8002476:	0e9b      	lsrs	r3, r3, #26
 8002478:	f003 021f 	and.w	r2, r3, #31
 800247c:	e017      	b.n	80024ae <HAL_ADC_ConfigChannel+0x3da>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2103      	movs	r1, #3
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff fae1 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 800248a:	4603      	mov	r3, r0
 800248c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002490:	fa93 f3a3 	rbit	r3, r3
 8002494:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002496:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002498:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800249a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80024a0:	2320      	movs	r3, #32
 80024a2:	e003      	b.n	80024ac <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80024a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024a6:	fab3 f383 	clz	r3, r3
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d105      	bne.n	80024c6 <HAL_ADC_ConfigChannel+0x3f2>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	0e9b      	lsrs	r3, r3, #26
 80024c0:	f003 031f 	and.w	r3, r3, #31
 80024c4:	e011      	b.n	80024ea <HAL_ADC_ConfigChannel+0x416>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024ce:	fa93 f3a3 	rbit	r3, r3
 80024d2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80024d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80024d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80024de:	2320      	movs	r3, #32
 80024e0:	e003      	b.n	80024ea <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80024e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024e4:	fab3 f383 	clz	r3, r3
 80024e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d106      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2200      	movs	r2, #0
 80024f4:	2103      	movs	r1, #3
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff fabe 	bl	8001a78 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff fbeb 	bl	8001cdc <LL_ADC_IsEnabled>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	f040 813d 	bne.w	8002788 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6818      	ldr	r0, [r3, #0]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	6819      	ldr	r1, [r3, #0]
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	461a      	mov	r2, r3
 800251c:	f7ff fb68 	bl	8001bf0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	4aa2      	ldr	r2, [pc, #648]	; (80027b0 <HAL_ADC_ConfigChannel+0x6dc>)
 8002526:	4293      	cmp	r3, r2
 8002528:	f040 812e 	bne.w	8002788 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10b      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x480>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	0e9b      	lsrs	r3, r3, #26
 8002542:	3301      	adds	r3, #1
 8002544:	f003 031f 	and.w	r3, r3, #31
 8002548:	2b09      	cmp	r3, #9
 800254a:	bf94      	ite	ls
 800254c:	2301      	movls	r3, #1
 800254e:	2300      	movhi	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	e019      	b.n	8002588 <HAL_ADC_ConfigChannel+0x4b4>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800255c:	fa93 f3a3 	rbit	r3, r3
 8002560:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002562:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002564:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002566:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800256c:	2320      	movs	r3, #32
 800256e:	e003      	b.n	8002578 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002570:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002572:	fab3 f383 	clz	r3, r3
 8002576:	b2db      	uxtb	r3, r3
 8002578:	3301      	adds	r3, #1
 800257a:	f003 031f 	and.w	r3, r3, #31
 800257e:	2b09      	cmp	r3, #9
 8002580:	bf94      	ite	ls
 8002582:	2301      	movls	r3, #1
 8002584:	2300      	movhi	r3, #0
 8002586:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002588:	2b00      	cmp	r3, #0
 800258a:	d079      	beq.n	8002680 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002594:	2b00      	cmp	r3, #0
 8002596:	d107      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x4d4>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	0e9b      	lsrs	r3, r3, #26
 800259e:	3301      	adds	r3, #1
 80025a0:	069b      	lsls	r3, r3, #26
 80025a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025a6:	e015      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x500>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025b0:	fa93 f3a3 	rbit	r3, r3
 80025b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80025b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025b8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80025ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80025c0:	2320      	movs	r3, #32
 80025c2:	e003      	b.n	80025cc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80025c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025c6:	fab3 f383 	clz	r3, r3
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	3301      	adds	r3, #1
 80025ce:	069b      	lsls	r3, r3, #26
 80025d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d109      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x520>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	0e9b      	lsrs	r3, r3, #26
 80025e6:	3301      	adds	r3, #1
 80025e8:	f003 031f 	and.w	r3, r3, #31
 80025ec:	2101      	movs	r1, #1
 80025ee:	fa01 f303 	lsl.w	r3, r1, r3
 80025f2:	e017      	b.n	8002624 <HAL_ADC_ConfigChannel+0x550>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025fc:	fa93 f3a3 	rbit	r3, r3
 8002600:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002604:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800260c:	2320      	movs	r3, #32
 800260e:	e003      	b.n	8002618 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002612:	fab3 f383 	clz	r3, r3
 8002616:	b2db      	uxtb	r3, r3
 8002618:	3301      	adds	r3, #1
 800261a:	f003 031f 	and.w	r3, r3, #31
 800261e:	2101      	movs	r1, #1
 8002620:	fa01 f303 	lsl.w	r3, r1, r3
 8002624:	ea42 0103 	orr.w	r1, r2, r3
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10a      	bne.n	800264a <HAL_ADC_ConfigChannel+0x576>
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	0e9b      	lsrs	r3, r3, #26
 800263a:	3301      	adds	r3, #1
 800263c:	f003 021f 	and.w	r2, r3, #31
 8002640:	4613      	mov	r3, r2
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	4413      	add	r3, r2
 8002646:	051b      	lsls	r3, r3, #20
 8002648:	e018      	b.n	800267c <HAL_ADC_ConfigChannel+0x5a8>
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002652:	fa93 f3a3 	rbit	r3, r3
 8002656:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800265a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800265c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002662:	2320      	movs	r3, #32
 8002664:	e003      	b.n	800266e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002668:	fab3 f383 	clz	r3, r3
 800266c:	b2db      	uxtb	r3, r3
 800266e:	3301      	adds	r3, #1
 8002670:	f003 021f 	and.w	r2, r3, #31
 8002674:	4613      	mov	r3, r2
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	4413      	add	r3, r2
 800267a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800267c:	430b      	orrs	r3, r1
 800267e:	e07e      	b.n	800277e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002688:	2b00      	cmp	r3, #0
 800268a:	d107      	bne.n	800269c <HAL_ADC_ConfigChannel+0x5c8>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	0e9b      	lsrs	r3, r3, #26
 8002692:	3301      	adds	r3, #1
 8002694:	069b      	lsls	r3, r3, #26
 8002696:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800269a:	e015      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x5f4>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a4:	fa93 f3a3 	rbit	r3, r3
 80026a8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80026aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ac:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80026ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80026b4:	2320      	movs	r3, #32
 80026b6:	e003      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80026b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ba:	fab3 f383 	clz	r3, r3
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	3301      	adds	r3, #1
 80026c2:	069b      	lsls	r3, r3, #26
 80026c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d109      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x614>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	0e9b      	lsrs	r3, r3, #26
 80026da:	3301      	adds	r3, #1
 80026dc:	f003 031f 	and.w	r3, r3, #31
 80026e0:	2101      	movs	r1, #1
 80026e2:	fa01 f303 	lsl.w	r3, r1, r3
 80026e6:	e017      	b.n	8002718 <HAL_ADC_ConfigChannel+0x644>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ee:	6a3b      	ldr	r3, [r7, #32]
 80026f0:	fa93 f3a3 	rbit	r3, r3
 80026f4:	61fb      	str	r3, [r7, #28]
  return result;
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002700:	2320      	movs	r3, #32
 8002702:	e003      	b.n	800270c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	fab3 f383 	clz	r3, r3
 800270a:	b2db      	uxtb	r3, r3
 800270c:	3301      	adds	r3, #1
 800270e:	f003 031f 	and.w	r3, r3, #31
 8002712:	2101      	movs	r1, #1
 8002714:	fa01 f303 	lsl.w	r3, r1, r3
 8002718:	ea42 0103 	orr.w	r1, r2, r3
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10d      	bne.n	8002744 <HAL_ADC_ConfigChannel+0x670>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	0e9b      	lsrs	r3, r3, #26
 800272e:	3301      	adds	r3, #1
 8002730:	f003 021f 	and.w	r2, r3, #31
 8002734:	4613      	mov	r3, r2
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	4413      	add	r3, r2
 800273a:	3b1e      	subs	r3, #30
 800273c:	051b      	lsls	r3, r3, #20
 800273e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002742:	e01b      	b.n	800277c <HAL_ADC_ConfigChannel+0x6a8>
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	fa93 f3a3 	rbit	r3, r3
 8002750:	613b      	str	r3, [r7, #16]
  return result;
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800275c:	2320      	movs	r3, #32
 800275e:	e003      	b.n	8002768 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	fab3 f383 	clz	r3, r3
 8002766:	b2db      	uxtb	r3, r3
 8002768:	3301      	adds	r3, #1
 800276a:	f003 021f 	and.w	r2, r3, #31
 800276e:	4613      	mov	r3, r2
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	4413      	add	r3, r2
 8002774:	3b1e      	subs	r3, #30
 8002776:	051b      	lsls	r3, r3, #20
 8002778:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800277c:	430b      	orrs	r3, r1
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	6892      	ldr	r2, [r2, #8]
 8002782:	4619      	mov	r1, r3
 8002784:	f7ff fa08 	bl	8001b98 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <HAL_ADC_ConfigChannel+0x6e0>)
 800278e:	4013      	ands	r3, r2
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 80be 	beq.w	8002912 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800279e:	d004      	beq.n	80027aa <HAL_ADC_ConfigChannel+0x6d6>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a04      	ldr	r2, [pc, #16]	; (80027b8 <HAL_ADC_ConfigChannel+0x6e4>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d10a      	bne.n	80027c0 <HAL_ADC_ConfigChannel+0x6ec>
 80027aa:	4b04      	ldr	r3, [pc, #16]	; (80027bc <HAL_ADC_ConfigChannel+0x6e8>)
 80027ac:	e009      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x6ee>
 80027ae:	bf00      	nop
 80027b0:	407f0000 	.word	0x407f0000
 80027b4:	80080000 	.word	0x80080000
 80027b8:	50000100 	.word	0x50000100
 80027bc:	50000300 	.word	0x50000300
 80027c0:	4b59      	ldr	r3, [pc, #356]	; (8002928 <HAL_ADC_ConfigChannel+0x854>)
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff f910 	bl	80019e8 <LL_ADC_GetCommonPathInternalCh>
 80027c8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a56      	ldr	r2, [pc, #344]	; (800292c <HAL_ADC_ConfigChannel+0x858>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d004      	beq.n	80027e0 <HAL_ADC_ConfigChannel+0x70c>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a55      	ldr	r2, [pc, #340]	; (8002930 <HAL_ADC_ConfigChannel+0x85c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d13a      	bne.n	8002856 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d134      	bne.n	8002856 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027f4:	d005      	beq.n	8002802 <HAL_ADC_ConfigChannel+0x72e>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a4e      	ldr	r2, [pc, #312]	; (8002934 <HAL_ADC_ConfigChannel+0x860>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	f040 8085 	bne.w	800290c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800280a:	d004      	beq.n	8002816 <HAL_ADC_ConfigChannel+0x742>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a49      	ldr	r2, [pc, #292]	; (8002938 <HAL_ADC_ConfigChannel+0x864>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d101      	bne.n	800281a <HAL_ADC_ConfigChannel+0x746>
 8002816:	4a49      	ldr	r2, [pc, #292]	; (800293c <HAL_ADC_ConfigChannel+0x868>)
 8002818:	e000      	b.n	800281c <HAL_ADC_ConfigChannel+0x748>
 800281a:	4a43      	ldr	r2, [pc, #268]	; (8002928 <HAL_ADC_ConfigChannel+0x854>)
 800281c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002820:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002824:	4619      	mov	r1, r3
 8002826:	4610      	mov	r0, r2
 8002828:	f7ff f8cb 	bl	80019c2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800282c:	4b44      	ldr	r3, [pc, #272]	; (8002940 <HAL_ADC_ConfigChannel+0x86c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	099b      	lsrs	r3, r3, #6
 8002832:	4a44      	ldr	r2, [pc, #272]	; (8002944 <HAL_ADC_ConfigChannel+0x870>)
 8002834:	fba2 2303 	umull	r2, r3, r2, r3
 8002838:	099b      	lsrs	r3, r3, #6
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	4613      	mov	r3, r2
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	4413      	add	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002846:	e002      	b.n	800284e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	3b01      	subs	r3, #1
 800284c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1f9      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002854:	e05a      	b.n	800290c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a3b      	ldr	r2, [pc, #236]	; (8002948 <HAL_ADC_ConfigChannel+0x874>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d125      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x7d8>
 8002860:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002864:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d11f      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a31      	ldr	r2, [pc, #196]	; (8002938 <HAL_ADC_ConfigChannel+0x864>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d104      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x7ac>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a34      	ldr	r2, [pc, #208]	; (800294c <HAL_ADC_ConfigChannel+0x878>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d047      	beq.n	8002910 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002888:	d004      	beq.n	8002894 <HAL_ADC_ConfigChannel+0x7c0>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a2a      	ldr	r2, [pc, #168]	; (8002938 <HAL_ADC_ConfigChannel+0x864>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d101      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x7c4>
 8002894:	4a29      	ldr	r2, [pc, #164]	; (800293c <HAL_ADC_ConfigChannel+0x868>)
 8002896:	e000      	b.n	800289a <HAL_ADC_ConfigChannel+0x7c6>
 8002898:	4a23      	ldr	r2, [pc, #140]	; (8002928 <HAL_ADC_ConfigChannel+0x854>)
 800289a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800289e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028a2:	4619      	mov	r1, r3
 80028a4:	4610      	mov	r0, r2
 80028a6:	f7ff f88c 	bl	80019c2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028aa:	e031      	b.n	8002910 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a27      	ldr	r2, [pc, #156]	; (8002950 <HAL_ADC_ConfigChannel+0x87c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d12d      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d127      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a1c      	ldr	r2, [pc, #112]	; (8002938 <HAL_ADC_ConfigChannel+0x864>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d022      	beq.n	8002912 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028d4:	d004      	beq.n	80028e0 <HAL_ADC_ConfigChannel+0x80c>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a17      	ldr	r2, [pc, #92]	; (8002938 <HAL_ADC_ConfigChannel+0x864>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d101      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x810>
 80028e0:	4a16      	ldr	r2, [pc, #88]	; (800293c <HAL_ADC_ConfigChannel+0x868>)
 80028e2:	e000      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x812>
 80028e4:	4a10      	ldr	r2, [pc, #64]	; (8002928 <HAL_ADC_ConfigChannel+0x854>)
 80028e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028ee:	4619      	mov	r1, r3
 80028f0:	4610      	mov	r0, r2
 80028f2:	f7ff f866 	bl	80019c2 <LL_ADC_SetCommonPathInternalCh>
 80028f6:	e00c      	b.n	8002912 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fc:	f043 0220 	orr.w	r2, r3, #32
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800290a:	e002      	b.n	8002912 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800290c:	bf00      	nop
 800290e:	e000      	b.n	8002912 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002910:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800291a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800291e:	4618      	mov	r0, r3
 8002920:	37d8      	adds	r7, #216	; 0xd8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	50000700 	.word	0x50000700
 800292c:	c3210000 	.word	0xc3210000
 8002930:	90c00010 	.word	0x90c00010
 8002934:	50000600 	.word	0x50000600
 8002938:	50000100 	.word	0x50000100
 800293c:	50000300 	.word	0x50000300
 8002940:	20000078 	.word	0x20000078
 8002944:	053e2d63 	.word	0x053e2d63
 8002948:	c7520000 	.word	0xc7520000
 800294c:	50000500 	.word	0x50000500
 8002950:	cb840000 	.word	0xcb840000

08002954 <LL_ADC_IsEnabled>:
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	2b01      	cmp	r3, #1
 8002966:	d101      	bne.n	800296c <LL_ADC_IsEnabled+0x18>
 8002968:	2301      	movs	r3, #1
 800296a:	e000      	b.n	800296e <LL_ADC_IsEnabled+0x1a>
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <LL_ADC_REG_IsConversionOngoing>:
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 0304 	and.w	r3, r3, #4
 800298a:	2b04      	cmp	r3, #4
 800298c:	d101      	bne.n	8002992 <LL_ADC_REG_IsConversionOngoing+0x18>
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80029a0:	b590      	push	{r4, r7, lr}
 80029a2:	b0a1      	sub	sp, #132	; 0x84
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d101      	bne.n	80029be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80029ba:	2302      	movs	r3, #2
 80029bc:	e0e7      	b.n	8002b8e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80029c6:	2300      	movs	r3, #0
 80029c8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80029ca:	2300      	movs	r3, #0
 80029cc:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029d6:	d102      	bne.n	80029de <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80029d8:	4b6f      	ldr	r3, [pc, #444]	; (8002b98 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80029da:	60bb      	str	r3, [r7, #8]
 80029dc:	e009      	b.n	80029f2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a6e      	ldr	r2, [pc, #440]	; (8002b9c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d102      	bne.n	80029ee <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80029e8:	4b6d      	ldr	r3, [pc, #436]	; (8002ba0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80029ea:	60bb      	str	r3, [r7, #8]
 80029ec:	e001      	b.n	80029f2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80029ee:	2300      	movs	r3, #0
 80029f0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10b      	bne.n	8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fc:	f043 0220 	orr.w	r2, r3, #32
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e0be      	b.n	8002b8e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff ffb1 	bl	800297a <LL_ADC_REG_IsConversionOngoing>
 8002a18:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff ffab 	bl	800297a <LL_ADC_REG_IsConversionOngoing>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f040 80a0 	bne.w	8002b6c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002a2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f040 809c 	bne.w	8002b6c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a3c:	d004      	beq.n	8002a48 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a55      	ldr	r2, [pc, #340]	; (8002b98 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d101      	bne.n	8002a4c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002a48:	4b56      	ldr	r3, [pc, #344]	; (8002ba4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002a4a:	e000      	b.n	8002a4e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002a4c:	4b56      	ldr	r3, [pc, #344]	; (8002ba8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002a4e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d04b      	beq.n	8002af0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002a58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	6859      	ldr	r1, [r3, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a6a:	035b      	lsls	r3, r3, #13
 8002a6c:	430b      	orrs	r3, r1
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a72:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a7c:	d004      	beq.n	8002a88 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a45      	ldr	r2, [pc, #276]	; (8002b98 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d10f      	bne.n	8002aa8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002a88:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002a8c:	f7ff ff62 	bl	8002954 <LL_ADC_IsEnabled>
 8002a90:	4604      	mov	r4, r0
 8002a92:	4841      	ldr	r0, [pc, #260]	; (8002b98 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a94:	f7ff ff5e 	bl	8002954 <LL_ADC_IsEnabled>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	4323      	orrs	r3, r4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	bf0c      	ite	eq
 8002aa0:	2301      	moveq	r3, #1
 8002aa2:	2300      	movne	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	e012      	b.n	8002ace <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002aa8:	483c      	ldr	r0, [pc, #240]	; (8002b9c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002aaa:	f7ff ff53 	bl	8002954 <LL_ADC_IsEnabled>
 8002aae:	4604      	mov	r4, r0
 8002ab0:	483b      	ldr	r0, [pc, #236]	; (8002ba0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002ab2:	f7ff ff4f 	bl	8002954 <LL_ADC_IsEnabled>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	431c      	orrs	r4, r3
 8002aba:	483c      	ldr	r0, [pc, #240]	; (8002bac <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002abc:	f7ff ff4a 	bl	8002954 <LL_ADC_IsEnabled>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	4323      	orrs	r3, r4
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	bf0c      	ite	eq
 8002ac8:	2301      	moveq	r3, #1
 8002aca:	2300      	movne	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d056      	beq.n	8002b80 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002ad2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ada:	f023 030f 	bic.w	r3, r3, #15
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	6811      	ldr	r1, [r2, #0]
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	6892      	ldr	r2, [r2, #8]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aec:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002aee:	e047      	b.n	8002b80 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002af0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002af8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002afa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b04:	d004      	beq.n	8002b10 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a23      	ldr	r2, [pc, #140]	; (8002b98 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d10f      	bne.n	8002b30 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002b10:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002b14:	f7ff ff1e 	bl	8002954 <LL_ADC_IsEnabled>
 8002b18:	4604      	mov	r4, r0
 8002b1a:	481f      	ldr	r0, [pc, #124]	; (8002b98 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b1c:	f7ff ff1a 	bl	8002954 <LL_ADC_IsEnabled>
 8002b20:	4603      	mov	r3, r0
 8002b22:	4323      	orrs	r3, r4
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	bf0c      	ite	eq
 8002b28:	2301      	moveq	r3, #1
 8002b2a:	2300      	movne	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	e012      	b.n	8002b56 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002b30:	481a      	ldr	r0, [pc, #104]	; (8002b9c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002b32:	f7ff ff0f 	bl	8002954 <LL_ADC_IsEnabled>
 8002b36:	4604      	mov	r4, r0
 8002b38:	4819      	ldr	r0, [pc, #100]	; (8002ba0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002b3a:	f7ff ff0b 	bl	8002954 <LL_ADC_IsEnabled>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	431c      	orrs	r4, r3
 8002b42:	481a      	ldr	r0, [pc, #104]	; (8002bac <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002b44:	f7ff ff06 	bl	8002954 <LL_ADC_IsEnabled>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	4323      	orrs	r3, r4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	bf0c      	ite	eq
 8002b50:	2301      	moveq	r3, #1
 8002b52:	2300      	movne	r3, #0
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d012      	beq.n	8002b80 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002b62:	f023 030f 	bic.w	r3, r3, #15
 8002b66:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002b68:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b6a:	e009      	b.n	8002b80 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b70:	f043 0220 	orr.w	r2, r3, #32
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002b7e:	e000      	b.n	8002b82 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b80:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002b8a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3784      	adds	r7, #132	; 0x84
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd90      	pop	{r4, r7, pc}
 8002b96:	bf00      	nop
 8002b98:	50000100 	.word	0x50000100
 8002b9c:	50000400 	.word	0x50000400
 8002ba0:	50000500 	.word	0x50000500
 8002ba4:	50000300 	.word	0x50000300
 8002ba8:	50000700 	.word	0x50000700
 8002bac:	50000600 	.word	0x50000600

08002bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bc0:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bcc:	4013      	ands	r3, r2
 8002bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002be2:	4a04      	ldr	r2, [pc, #16]	; (8002bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	60d3      	str	r3, [r2, #12]
}
 8002be8:	bf00      	nop
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bfc:	4b04      	ldr	r3, [pc, #16]	; (8002c10 <__NVIC_GetPriorityGrouping+0x18>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	0a1b      	lsrs	r3, r3, #8
 8002c02:	f003 0307 	and.w	r3, r3, #7
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	e000ed00 	.word	0xe000ed00

08002c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	db0b      	blt.n	8002c3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	f003 021f 	and.w	r2, r3, #31
 8002c2c:	4907      	ldr	r1, [pc, #28]	; (8002c4c <__NVIC_EnableIRQ+0x38>)
 8002c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c32:	095b      	lsrs	r3, r3, #5
 8002c34:	2001      	movs	r0, #1
 8002c36:	fa00 f202 	lsl.w	r2, r0, r2
 8002c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	e000e100 	.word	0xe000e100

08002c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	6039      	str	r1, [r7, #0]
 8002c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	db0a      	blt.n	8002c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	490c      	ldr	r1, [pc, #48]	; (8002c9c <__NVIC_SetPriority+0x4c>)
 8002c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6e:	0112      	lsls	r2, r2, #4
 8002c70:	b2d2      	uxtb	r2, r2
 8002c72:	440b      	add	r3, r1
 8002c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c78:	e00a      	b.n	8002c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	4908      	ldr	r1, [pc, #32]	; (8002ca0 <__NVIC_SetPriority+0x50>)
 8002c80:	79fb      	ldrb	r3, [r7, #7]
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	3b04      	subs	r3, #4
 8002c88:	0112      	lsls	r2, r2, #4
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	761a      	strb	r2, [r3, #24]
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	e000e100 	.word	0xe000e100
 8002ca0:	e000ed00 	.word	0xe000ed00

08002ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b089      	sub	sp, #36	; 0x24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f1c3 0307 	rsb	r3, r3, #7
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	bf28      	it	cs
 8002cc2:	2304      	movcs	r3, #4
 8002cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	3304      	adds	r3, #4
 8002cca:	2b06      	cmp	r3, #6
 8002ccc:	d902      	bls.n	8002cd4 <NVIC_EncodePriority+0x30>
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	3b03      	subs	r3, #3
 8002cd2:	e000      	b.n	8002cd6 <NVIC_EncodePriority+0x32>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	43da      	mvns	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	401a      	ands	r2, r3
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cec:	f04f 31ff 	mov.w	r1, #4294967295
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf6:	43d9      	mvns	r1, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cfc:	4313      	orrs	r3, r2
         );
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3724      	adds	r7, #36	; 0x24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7ff ff4c 	bl	8002bb0 <__NVIC_SetPriorityGrouping>
}
 8002d18:	bf00      	nop
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	4603      	mov	r3, r0
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d2e:	f7ff ff63 	bl	8002bf8 <__NVIC_GetPriorityGrouping>
 8002d32:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	68b9      	ldr	r1, [r7, #8]
 8002d38:	6978      	ldr	r0, [r7, #20]
 8002d3a:	f7ff ffb3 	bl	8002ca4 <NVIC_EncodePriority>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d44:	4611      	mov	r1, r2
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff ff82 	bl	8002c50 <__NVIC_SetPriority>
}
 8002d4c:	bf00      	nop
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff ff56 	bl	8002c14 <__NVIC_EnableIRQ>
}
 8002d68:	bf00      	nop
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d005      	beq.n	8002d94 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2204      	movs	r2, #4
 8002d8c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	73fb      	strb	r3, [r7, #15]
 8002d92:	e037      	b.n	8002e04 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 020e 	bic.w	r2, r2, #14
 8002da2:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002db2:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0201 	bic.w	r2, r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc8:	f003 021f 	and.w	r2, r3, #31
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd6:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002de0:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00c      	beq.n	8002e04 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002df8:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e02:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b084      	sub	sp, #16
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d00d      	beq.n	8002e56 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2204      	movs	r2, #4
 8002e3e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	73fb      	strb	r3, [r7, #15]
 8002e54:	e047      	b.n	8002ee6 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 020e 	bic.w	r2, r2, #14
 8002e64:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0201 	bic.w	r2, r2, #1
 8002e74:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e84:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8a:	f003 021f 	and.w	r2, r3, #31
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	2101      	movs	r1, #1
 8002e94:	fa01 f202 	lsl.w	r2, r1, r2
 8002e98:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ea2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00c      	beq.n	8002ec6 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002eba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002ec4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	4798      	blx	r3
    }
  }
  return status;
 8002ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002efe:	e15a      	b.n	80031b6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	2101      	movs	r1, #1
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 814c 	beq.w	80031b0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 0303 	and.w	r3, r3, #3
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d005      	beq.n	8002f30 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d130      	bne.n	8002f92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	2203      	movs	r2, #3
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	43db      	mvns	r3, r3
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	4013      	ands	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	68da      	ldr	r2, [r3, #12]
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f66:	2201      	movs	r2, #1
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	4013      	ands	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	091b      	lsrs	r3, r3, #4
 8002f7c:	f003 0201 	and.w	r2, r3, #1
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	d017      	beq.n	8002fce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	2203      	movs	r2, #3
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d123      	bne.n	8003022 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	08da      	lsrs	r2, r3, #3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	3208      	adds	r2, #8
 8002fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	220f      	movs	r2, #15
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	691a      	ldr	r2, [r3, #16]
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	4313      	orrs	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	08da      	lsrs	r2, r3, #3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3208      	adds	r2, #8
 800301c:	6939      	ldr	r1, [r7, #16]
 800301e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	2203      	movs	r2, #3
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43db      	mvns	r3, r3
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	4013      	ands	r3, r2
 8003038:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f003 0203 	and.w	r2, r3, #3
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4313      	orrs	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 80a6 	beq.w	80031b0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003064:	4b5b      	ldr	r3, [pc, #364]	; (80031d4 <HAL_GPIO_Init+0x2e4>)
 8003066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003068:	4a5a      	ldr	r2, [pc, #360]	; (80031d4 <HAL_GPIO_Init+0x2e4>)
 800306a:	f043 0301 	orr.w	r3, r3, #1
 800306e:	6613      	str	r3, [r2, #96]	; 0x60
 8003070:	4b58      	ldr	r3, [pc, #352]	; (80031d4 <HAL_GPIO_Init+0x2e4>)
 8003072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800307c:	4a56      	ldr	r2, [pc, #344]	; (80031d8 <HAL_GPIO_Init+0x2e8>)
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	089b      	lsrs	r3, r3, #2
 8003082:	3302      	adds	r3, #2
 8003084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003088:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f003 0303 	and.w	r3, r3, #3
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	220f      	movs	r2, #15
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	4013      	ands	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80030a6:	d01f      	beq.n	80030e8 <HAL_GPIO_Init+0x1f8>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a4c      	ldr	r2, [pc, #304]	; (80031dc <HAL_GPIO_Init+0x2ec>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d019      	beq.n	80030e4 <HAL_GPIO_Init+0x1f4>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a4b      	ldr	r2, [pc, #300]	; (80031e0 <HAL_GPIO_Init+0x2f0>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d013      	beq.n	80030e0 <HAL_GPIO_Init+0x1f0>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a4a      	ldr	r2, [pc, #296]	; (80031e4 <HAL_GPIO_Init+0x2f4>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d00d      	beq.n	80030dc <HAL_GPIO_Init+0x1ec>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a49      	ldr	r2, [pc, #292]	; (80031e8 <HAL_GPIO_Init+0x2f8>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d007      	beq.n	80030d8 <HAL_GPIO_Init+0x1e8>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a48      	ldr	r2, [pc, #288]	; (80031ec <HAL_GPIO_Init+0x2fc>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d101      	bne.n	80030d4 <HAL_GPIO_Init+0x1e4>
 80030d0:	2305      	movs	r3, #5
 80030d2:	e00a      	b.n	80030ea <HAL_GPIO_Init+0x1fa>
 80030d4:	2306      	movs	r3, #6
 80030d6:	e008      	b.n	80030ea <HAL_GPIO_Init+0x1fa>
 80030d8:	2304      	movs	r3, #4
 80030da:	e006      	b.n	80030ea <HAL_GPIO_Init+0x1fa>
 80030dc:	2303      	movs	r3, #3
 80030de:	e004      	b.n	80030ea <HAL_GPIO_Init+0x1fa>
 80030e0:	2302      	movs	r3, #2
 80030e2:	e002      	b.n	80030ea <HAL_GPIO_Init+0x1fa>
 80030e4:	2301      	movs	r3, #1
 80030e6:	e000      	b.n	80030ea <HAL_GPIO_Init+0x1fa>
 80030e8:	2300      	movs	r3, #0
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	f002 0203 	and.w	r2, r2, #3
 80030f0:	0092      	lsls	r2, r2, #2
 80030f2:	4093      	lsls	r3, r2
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030fa:	4937      	ldr	r1, [pc, #220]	; (80031d8 <HAL_GPIO_Init+0x2e8>)
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	089b      	lsrs	r3, r3, #2
 8003100:	3302      	adds	r3, #2
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003108:	4b39      	ldr	r3, [pc, #228]	; (80031f0 <HAL_GPIO_Init+0x300>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	43db      	mvns	r3, r3
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	4013      	ands	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d003      	beq.n	800312c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	4313      	orrs	r3, r2
 800312a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800312c:	4a30      	ldr	r2, [pc, #192]	; (80031f0 <HAL_GPIO_Init+0x300>)
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003132:	4b2f      	ldr	r3, [pc, #188]	; (80031f0 <HAL_GPIO_Init+0x300>)
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	43db      	mvns	r3, r3
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4013      	ands	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4313      	orrs	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003156:	4a26      	ldr	r2, [pc, #152]	; (80031f0 <HAL_GPIO_Init+0x300>)
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800315c:	4b24      	ldr	r3, [pc, #144]	; (80031f0 <HAL_GPIO_Init+0x300>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	43db      	mvns	r3, r3
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	4013      	ands	r3, r2
 800316a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	4313      	orrs	r3, r2
 800317e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003180:	4a1b      	ldr	r2, [pc, #108]	; (80031f0 <HAL_GPIO_Init+0x300>)
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003186:	4b1a      	ldr	r3, [pc, #104]	; (80031f0 <HAL_GPIO_Init+0x300>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	43db      	mvns	r3, r3
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4013      	ands	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031aa:	4a11      	ldr	r2, [pc, #68]	; (80031f0 <HAL_GPIO_Init+0x300>)
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	3301      	adds	r3, #1
 80031b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	fa22 f303 	lsr.w	r3, r2, r3
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f47f ae9d 	bne.w	8002f00 <HAL_GPIO_Init+0x10>
  }
}
 80031c6:	bf00      	nop
 80031c8:	bf00      	nop
 80031ca:	371c      	adds	r7, #28
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	40021000 	.word	0x40021000
 80031d8:	40010000 	.word	0x40010000
 80031dc:	48000400 	.word	0x48000400
 80031e0:	48000800 	.word	0x48000800
 80031e4:	48000c00 	.word	0x48000c00
 80031e8:	48001000 	.word	0x48001000
 80031ec:	48001400 	.word	0x48001400
 80031f0:	40010400 	.word	0x40010400

080031f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	460b      	mov	r3, r1
 80031fe:	807b      	strh	r3, [r7, #2]
 8003200:	4613      	mov	r3, r2
 8003202:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003204:	787b      	ldrb	r3, [r7, #1]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800320a:	887a      	ldrh	r2, [r7, #2]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003210:	e002      	b.n	8003218 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003212:	887a      	ldrh	r2, [r7, #2]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	4603      	mov	r3, r0
 800322c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800322e:	4b08      	ldr	r3, [pc, #32]	; (8003250 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003230:	695a      	ldr	r2, [r3, #20]
 8003232:	88fb      	ldrh	r3, [r7, #6]
 8003234:	4013      	ands	r3, r2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d006      	beq.n	8003248 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800323a:	4a05      	ldr	r2, [pc, #20]	; (8003250 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800323c:	88fb      	ldrh	r3, [r7, #6]
 800323e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003240:	88fb      	ldrh	r3, [r7, #6]
 8003242:	4618      	mov	r0, r3
 8003244:	f000 f806 	bl	8003254 <HAL_GPIO_EXTI_Callback>
  }
}
 8003248:	bf00      	nop
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40010400 	.word	0x40010400

08003254 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	4603      	mov	r3, r0
 800325c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
	...

0800326c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d141      	bne.n	80032fe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800327a:	4b4b      	ldr	r3, [pc, #300]	; (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003286:	d131      	bne.n	80032ec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003288:	4b47      	ldr	r3, [pc, #284]	; (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800328a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800328e:	4a46      	ldr	r2, [pc, #280]	; (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003294:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003298:	4b43      	ldr	r3, [pc, #268]	; (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032a0:	4a41      	ldr	r2, [pc, #260]	; (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032a8:	4b40      	ldr	r3, [pc, #256]	; (80033ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2232      	movs	r2, #50	; 0x32
 80032ae:	fb02 f303 	mul.w	r3, r2, r3
 80032b2:	4a3f      	ldr	r2, [pc, #252]	; (80033b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032b4:	fba2 2303 	umull	r2, r3, r2, r3
 80032b8:	0c9b      	lsrs	r3, r3, #18
 80032ba:	3301      	adds	r3, #1
 80032bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032be:	e002      	b.n	80032c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	3b01      	subs	r3, #1
 80032c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032c6:	4b38      	ldr	r3, [pc, #224]	; (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032d2:	d102      	bne.n	80032da <HAL_PWREx_ControlVoltageScaling+0x6e>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1f2      	bne.n	80032c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032da:	4b33      	ldr	r3, [pc, #204]	; (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032e6:	d158      	bne.n	800339a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e057      	b.n	800339c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032ec:	4b2e      	ldr	r3, [pc, #184]	; (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032f2:	4a2d      	ldr	r2, [pc, #180]	; (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80032fc:	e04d      	b.n	800339a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003304:	d141      	bne.n	800338a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003306:	4b28      	ldr	r3, [pc, #160]	; (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800330e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003312:	d131      	bne.n	8003378 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003314:	4b24      	ldr	r3, [pc, #144]	; (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003316:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800331a:	4a23      	ldr	r2, [pc, #140]	; (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800331c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003320:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003324:	4b20      	ldr	r3, [pc, #128]	; (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800332c:	4a1e      	ldr	r2, [pc, #120]	; (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800332e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003332:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003334:	4b1d      	ldr	r3, [pc, #116]	; (80033ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2232      	movs	r2, #50	; 0x32
 800333a:	fb02 f303 	mul.w	r3, r2, r3
 800333e:	4a1c      	ldr	r2, [pc, #112]	; (80033b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003340:	fba2 2303 	umull	r2, r3, r2, r3
 8003344:	0c9b      	lsrs	r3, r3, #18
 8003346:	3301      	adds	r3, #1
 8003348:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800334a:	e002      	b.n	8003352 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	3b01      	subs	r3, #1
 8003350:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003352:	4b15      	ldr	r3, [pc, #84]	; (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800335a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800335e:	d102      	bne.n	8003366 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1f2      	bne.n	800334c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003366:	4b10      	ldr	r3, [pc, #64]	; (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800336e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003372:	d112      	bne.n	800339a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e011      	b.n	800339c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003378:	4b0b      	ldr	r3, [pc, #44]	; (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800337a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800337e:	4a0a      	ldr	r2, [pc, #40]	; (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003384:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003388:	e007      	b.n	800339a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800338a:	4b07      	ldr	r3, [pc, #28]	; (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003392:	4a05      	ldr	r2, [pc, #20]	; (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003394:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003398:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	40007000 	.word	0x40007000
 80033ac:	20000078 	.word	0x20000078
 80033b0:	431bde83 	.word	0x431bde83

080033b4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80033b8:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	4a04      	ldr	r2, [pc, #16]	; (80033d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80033be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033c2:	6093      	str	r3, [r2, #8]
}
 80033c4:	bf00      	nop
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	40007000 	.word	0x40007000

080033d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b088      	sub	sp, #32
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e306      	b.n	80039f4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d075      	beq.n	80034de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033f2:	4b97      	ldr	r3, [pc, #604]	; (8003650 <HAL_RCC_OscConfig+0x27c>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 030c 	and.w	r3, r3, #12
 80033fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033fc:	4b94      	ldr	r3, [pc, #592]	; (8003650 <HAL_RCC_OscConfig+0x27c>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	f003 0303 	and.w	r3, r3, #3
 8003404:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	2b0c      	cmp	r3, #12
 800340a:	d102      	bne.n	8003412 <HAL_RCC_OscConfig+0x3e>
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	2b03      	cmp	r3, #3
 8003410:	d002      	beq.n	8003418 <HAL_RCC_OscConfig+0x44>
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	2b08      	cmp	r3, #8
 8003416:	d10b      	bne.n	8003430 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003418:	4b8d      	ldr	r3, [pc, #564]	; (8003650 <HAL_RCC_OscConfig+0x27c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d05b      	beq.n	80034dc <HAL_RCC_OscConfig+0x108>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d157      	bne.n	80034dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e2e1      	b.n	80039f4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003438:	d106      	bne.n	8003448 <HAL_RCC_OscConfig+0x74>
 800343a:	4b85      	ldr	r3, [pc, #532]	; (8003650 <HAL_RCC_OscConfig+0x27c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a84      	ldr	r2, [pc, #528]	; (8003650 <HAL_RCC_OscConfig+0x27c>)
 8003440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	e01d      	b.n	8003484 <HAL_RCC_OscConfig+0xb0>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003450:	d10c      	bne.n	800346c <HAL_RCC_OscConfig+0x98>
 8003452:	4b7f      	ldr	r3, [pc, #508]	; (8003650 <HAL_RCC_OscConfig+0x27c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a7e      	ldr	r2, [pc, #504]	; (8003650 <HAL_RCC_OscConfig+0x27c>)
 8003458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800345c:	6013      	str	r3, [r2, #0]
 800345e:	4b7c      	ldr	r3, [pc, #496]	; (8003650 <HAL_RCC_OscConfig+0x27c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a7b      	ldr	r2, [pc, #492]	; (8003650 <HAL_RCC_OscConfig+0x27c>)
 8003464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	e00b      	b.n	8003484 <HAL_RCC_OscConfig+0xb0>
 800346c:	4b78      	ldr	r3, [pc, #480]	; (8003650 <HAL_RCC_OscConfig+0x27c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a77      	ldr	r2, [pc, #476]	; (8003650 <HAL_RCC_OscConfig+0x27c>)
 8003472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003476:	6013      	str	r3, [r2, #0]
 8003478:	4b75      	ldr	r3, [pc, #468]	; (8003650 <HAL_RCC_OscConfig+0x27c>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a74      	ldr	r2, [pc, #464]	; (8003650 <HAL_RCC_OscConfig+0x27c>)
 800347e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003482:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d013      	beq.n	80034b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348c:	f7fe fa7a 	bl	8001984 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003494:	f7fe fa76 	bl	8001984 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b64      	cmp	r3, #100	; 0x64
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e2a6      	b.n	80039f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034a6:	4b6a      	ldr	r3, [pc, #424]	; (8003650 <HAL_RCC_OscConfig+0x27c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0f0      	beq.n	8003494 <HAL_RCC_OscConfig+0xc0>
 80034b2:	e014      	b.n	80034de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b4:	f7fe fa66 	bl	8001984 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034bc:	f7fe fa62 	bl	8001984 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b64      	cmp	r3, #100	; 0x64
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e292      	b.n	80039f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034ce:	4b60      	ldr	r3, [pc, #384]	; (8003650 <HAL_RCC_OscConfig+0x27c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f0      	bne.n	80034bc <HAL_RCC_OscConfig+0xe8>
 80034da:	e000      	b.n	80034de <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d075      	beq.n	80035d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034ea:	4b59      	ldr	r3, [pc, #356]	; (8003650 <HAL_RCC_OscConfig+0x27c>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 030c 	and.w	r3, r3, #12
 80034f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034f4:	4b56      	ldr	r3, [pc, #344]	; (8003650 <HAL_RCC_OscConfig+0x27c>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f003 0303 	and.w	r3, r3, #3
 80034fc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	2b0c      	cmp	r3, #12
 8003502:	d102      	bne.n	800350a <HAL_RCC_OscConfig+0x136>
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	2b02      	cmp	r3, #2
 8003508:	d002      	beq.n	8003510 <HAL_RCC_OscConfig+0x13c>
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	2b04      	cmp	r3, #4
 800350e:	d11f      	bne.n	8003550 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003510:	4b4f      	ldr	r3, [pc, #316]	; (8003650 <HAL_RCC_OscConfig+0x27c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003518:	2b00      	cmp	r3, #0
 800351a:	d005      	beq.n	8003528 <HAL_RCC_OscConfig+0x154>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e265      	b.n	80039f4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003528:	4b49      	ldr	r3, [pc, #292]	; (8003650 <HAL_RCC_OscConfig+0x27c>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	061b      	lsls	r3, r3, #24
 8003536:	4946      	ldr	r1, [pc, #280]	; (8003650 <HAL_RCC_OscConfig+0x27c>)
 8003538:	4313      	orrs	r3, r2
 800353a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800353c:	4b45      	ldr	r3, [pc, #276]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f7fd fd27 	bl	8000f94 <HAL_InitTick>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d043      	beq.n	80035d4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e251      	b.n	80039f4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d023      	beq.n	80035a0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003558:	4b3d      	ldr	r3, [pc, #244]	; (8003650 <HAL_RCC_OscConfig+0x27c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a3c      	ldr	r2, [pc, #240]	; (8003650 <HAL_RCC_OscConfig+0x27c>)
 800355e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003562:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003564:	f7fe fa0e 	bl	8001984 <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800356c:	f7fe fa0a 	bl	8001984 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e23a      	b.n	80039f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800357e:	4b34      	ldr	r3, [pc, #208]	; (8003650 <HAL_RCC_OscConfig+0x27c>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003586:	2b00      	cmp	r3, #0
 8003588:	d0f0      	beq.n	800356c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800358a:	4b31      	ldr	r3, [pc, #196]	; (8003650 <HAL_RCC_OscConfig+0x27c>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	061b      	lsls	r3, r3, #24
 8003598:	492d      	ldr	r1, [pc, #180]	; (8003650 <HAL_RCC_OscConfig+0x27c>)
 800359a:	4313      	orrs	r3, r2
 800359c:	604b      	str	r3, [r1, #4]
 800359e:	e01a      	b.n	80035d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035a0:	4b2b      	ldr	r3, [pc, #172]	; (8003650 <HAL_RCC_OscConfig+0x27c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a2a      	ldr	r2, [pc, #168]	; (8003650 <HAL_RCC_OscConfig+0x27c>)
 80035a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ac:	f7fe f9ea 	bl	8001984 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035b4:	f7fe f9e6 	bl	8001984 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e216      	b.n	80039f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035c6:	4b22      	ldr	r3, [pc, #136]	; (8003650 <HAL_RCC_OscConfig+0x27c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f0      	bne.n	80035b4 <HAL_RCC_OscConfig+0x1e0>
 80035d2:	e000      	b.n	80035d6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0308 	and.w	r3, r3, #8
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d041      	beq.n	8003666 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d01c      	beq.n	8003624 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ea:	4b19      	ldr	r3, [pc, #100]	; (8003650 <HAL_RCC_OscConfig+0x27c>)
 80035ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035f0:	4a17      	ldr	r2, [pc, #92]	; (8003650 <HAL_RCC_OscConfig+0x27c>)
 80035f2:	f043 0301 	orr.w	r3, r3, #1
 80035f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035fa:	f7fe f9c3 	bl	8001984 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003600:	e008      	b.n	8003614 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003602:	f7fe f9bf 	bl	8001984 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e1ef      	b.n	80039f4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003614:	4b0e      	ldr	r3, [pc, #56]	; (8003650 <HAL_RCC_OscConfig+0x27c>)
 8003616:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0ef      	beq.n	8003602 <HAL_RCC_OscConfig+0x22e>
 8003622:	e020      	b.n	8003666 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003624:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <HAL_RCC_OscConfig+0x27c>)
 8003626:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800362a:	4a09      	ldr	r2, [pc, #36]	; (8003650 <HAL_RCC_OscConfig+0x27c>)
 800362c:	f023 0301 	bic.w	r3, r3, #1
 8003630:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003634:	f7fe f9a6 	bl	8001984 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800363a:	e00d      	b.n	8003658 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800363c:	f7fe f9a2 	bl	8001984 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d906      	bls.n	8003658 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e1d2      	b.n	80039f4 <HAL_RCC_OscConfig+0x620>
 800364e:	bf00      	nop
 8003650:	40021000 	.word	0x40021000
 8003654:	2000007c 	.word	0x2000007c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003658:	4b8c      	ldr	r3, [pc, #560]	; (800388c <HAL_RCC_OscConfig+0x4b8>)
 800365a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1ea      	bne.n	800363c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0304 	and.w	r3, r3, #4
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 80a6 	beq.w	80037c0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003674:	2300      	movs	r3, #0
 8003676:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003678:	4b84      	ldr	r3, [pc, #528]	; (800388c <HAL_RCC_OscConfig+0x4b8>)
 800367a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_RCC_OscConfig+0x2b4>
 8003684:	2301      	movs	r3, #1
 8003686:	e000      	b.n	800368a <HAL_RCC_OscConfig+0x2b6>
 8003688:	2300      	movs	r3, #0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00d      	beq.n	80036aa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800368e:	4b7f      	ldr	r3, [pc, #508]	; (800388c <HAL_RCC_OscConfig+0x4b8>)
 8003690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003692:	4a7e      	ldr	r2, [pc, #504]	; (800388c <HAL_RCC_OscConfig+0x4b8>)
 8003694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003698:	6593      	str	r3, [r2, #88]	; 0x58
 800369a:	4b7c      	ldr	r3, [pc, #496]	; (800388c <HAL_RCC_OscConfig+0x4b8>)
 800369c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80036a6:	2301      	movs	r3, #1
 80036a8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036aa:	4b79      	ldr	r3, [pc, #484]	; (8003890 <HAL_RCC_OscConfig+0x4bc>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d118      	bne.n	80036e8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036b6:	4b76      	ldr	r3, [pc, #472]	; (8003890 <HAL_RCC_OscConfig+0x4bc>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a75      	ldr	r2, [pc, #468]	; (8003890 <HAL_RCC_OscConfig+0x4bc>)
 80036bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036c2:	f7fe f95f 	bl	8001984 <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036c8:	e008      	b.n	80036dc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ca:	f7fe f95b 	bl	8001984 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e18b      	b.n	80039f4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036dc:	4b6c      	ldr	r3, [pc, #432]	; (8003890 <HAL_RCC_OscConfig+0x4bc>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0f0      	beq.n	80036ca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d108      	bne.n	8003702 <HAL_RCC_OscConfig+0x32e>
 80036f0:	4b66      	ldr	r3, [pc, #408]	; (800388c <HAL_RCC_OscConfig+0x4b8>)
 80036f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f6:	4a65      	ldr	r2, [pc, #404]	; (800388c <HAL_RCC_OscConfig+0x4b8>)
 80036f8:	f043 0301 	orr.w	r3, r3, #1
 80036fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003700:	e024      	b.n	800374c <HAL_RCC_OscConfig+0x378>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	2b05      	cmp	r3, #5
 8003708:	d110      	bne.n	800372c <HAL_RCC_OscConfig+0x358>
 800370a:	4b60      	ldr	r3, [pc, #384]	; (800388c <HAL_RCC_OscConfig+0x4b8>)
 800370c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003710:	4a5e      	ldr	r2, [pc, #376]	; (800388c <HAL_RCC_OscConfig+0x4b8>)
 8003712:	f043 0304 	orr.w	r3, r3, #4
 8003716:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800371a:	4b5c      	ldr	r3, [pc, #368]	; (800388c <HAL_RCC_OscConfig+0x4b8>)
 800371c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003720:	4a5a      	ldr	r2, [pc, #360]	; (800388c <HAL_RCC_OscConfig+0x4b8>)
 8003722:	f043 0301 	orr.w	r3, r3, #1
 8003726:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800372a:	e00f      	b.n	800374c <HAL_RCC_OscConfig+0x378>
 800372c:	4b57      	ldr	r3, [pc, #348]	; (800388c <HAL_RCC_OscConfig+0x4b8>)
 800372e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003732:	4a56      	ldr	r2, [pc, #344]	; (800388c <HAL_RCC_OscConfig+0x4b8>)
 8003734:	f023 0301 	bic.w	r3, r3, #1
 8003738:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800373c:	4b53      	ldr	r3, [pc, #332]	; (800388c <HAL_RCC_OscConfig+0x4b8>)
 800373e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003742:	4a52      	ldr	r2, [pc, #328]	; (800388c <HAL_RCC_OscConfig+0x4b8>)
 8003744:	f023 0304 	bic.w	r3, r3, #4
 8003748:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d016      	beq.n	8003782 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003754:	f7fe f916 	bl	8001984 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800375a:	e00a      	b.n	8003772 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800375c:	f7fe f912 	bl	8001984 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	f241 3288 	movw	r2, #5000	; 0x1388
 800376a:	4293      	cmp	r3, r2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e140      	b.n	80039f4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003772:	4b46      	ldr	r3, [pc, #280]	; (800388c <HAL_RCC_OscConfig+0x4b8>)
 8003774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0ed      	beq.n	800375c <HAL_RCC_OscConfig+0x388>
 8003780:	e015      	b.n	80037ae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003782:	f7fe f8ff 	bl	8001984 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003788:	e00a      	b.n	80037a0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800378a:	f7fe f8fb 	bl	8001984 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	f241 3288 	movw	r2, #5000	; 0x1388
 8003798:	4293      	cmp	r3, r2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e129      	b.n	80039f4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037a0:	4b3a      	ldr	r3, [pc, #232]	; (800388c <HAL_RCC_OscConfig+0x4b8>)
 80037a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1ed      	bne.n	800378a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037ae:	7ffb      	ldrb	r3, [r7, #31]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d105      	bne.n	80037c0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b4:	4b35      	ldr	r3, [pc, #212]	; (800388c <HAL_RCC_OscConfig+0x4b8>)
 80037b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b8:	4a34      	ldr	r2, [pc, #208]	; (800388c <HAL_RCC_OscConfig+0x4b8>)
 80037ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037be:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0320 	and.w	r3, r3, #32
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d03c      	beq.n	8003846 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d01c      	beq.n	800380e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037d4:	4b2d      	ldr	r3, [pc, #180]	; (800388c <HAL_RCC_OscConfig+0x4b8>)
 80037d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037da:	4a2c      	ldr	r2, [pc, #176]	; (800388c <HAL_RCC_OscConfig+0x4b8>)
 80037dc:	f043 0301 	orr.w	r3, r3, #1
 80037e0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e4:	f7fe f8ce 	bl	8001984 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037ec:	f7fe f8ca 	bl	8001984 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e0fa      	b.n	80039f4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037fe:	4b23      	ldr	r3, [pc, #140]	; (800388c <HAL_RCC_OscConfig+0x4b8>)
 8003800:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0ef      	beq.n	80037ec <HAL_RCC_OscConfig+0x418>
 800380c:	e01b      	b.n	8003846 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800380e:	4b1f      	ldr	r3, [pc, #124]	; (800388c <HAL_RCC_OscConfig+0x4b8>)
 8003810:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003814:	4a1d      	ldr	r2, [pc, #116]	; (800388c <HAL_RCC_OscConfig+0x4b8>)
 8003816:	f023 0301 	bic.w	r3, r3, #1
 800381a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800381e:	f7fe f8b1 	bl	8001984 <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003826:	f7fe f8ad 	bl	8001984 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e0dd      	b.n	80039f4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003838:	4b14      	ldr	r3, [pc, #80]	; (800388c <HAL_RCC_OscConfig+0x4b8>)
 800383a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1ef      	bne.n	8003826 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 80d1 	beq.w	80039f2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003850:	4b0e      	ldr	r3, [pc, #56]	; (800388c <HAL_RCC_OscConfig+0x4b8>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f003 030c 	and.w	r3, r3, #12
 8003858:	2b0c      	cmp	r3, #12
 800385a:	f000 808b 	beq.w	8003974 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	2b02      	cmp	r3, #2
 8003864:	d15e      	bne.n	8003924 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003866:	4b09      	ldr	r3, [pc, #36]	; (800388c <HAL_RCC_OscConfig+0x4b8>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a08      	ldr	r2, [pc, #32]	; (800388c <HAL_RCC_OscConfig+0x4b8>)
 800386c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003870:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003872:	f7fe f887 	bl	8001984 <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003878:	e00c      	b.n	8003894 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800387a:	f7fe f883 	bl	8001984 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d905      	bls.n	8003894 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e0b3      	b.n	80039f4 <HAL_RCC_OscConfig+0x620>
 800388c:	40021000 	.word	0x40021000
 8003890:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003894:	4b59      	ldr	r3, [pc, #356]	; (80039fc <HAL_RCC_OscConfig+0x628>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1ec      	bne.n	800387a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038a0:	4b56      	ldr	r3, [pc, #344]	; (80039fc <HAL_RCC_OscConfig+0x628>)
 80038a2:	68da      	ldr	r2, [r3, #12]
 80038a4:	4b56      	ldr	r3, [pc, #344]	; (8003a00 <HAL_RCC_OscConfig+0x62c>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6a11      	ldr	r1, [r2, #32]
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038b0:	3a01      	subs	r2, #1
 80038b2:	0112      	lsls	r2, r2, #4
 80038b4:	4311      	orrs	r1, r2
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80038ba:	0212      	lsls	r2, r2, #8
 80038bc:	4311      	orrs	r1, r2
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80038c2:	0852      	lsrs	r2, r2, #1
 80038c4:	3a01      	subs	r2, #1
 80038c6:	0552      	lsls	r2, r2, #21
 80038c8:	4311      	orrs	r1, r2
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038ce:	0852      	lsrs	r2, r2, #1
 80038d0:	3a01      	subs	r2, #1
 80038d2:	0652      	lsls	r2, r2, #25
 80038d4:	4311      	orrs	r1, r2
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80038da:	06d2      	lsls	r2, r2, #27
 80038dc:	430a      	orrs	r2, r1
 80038de:	4947      	ldr	r1, [pc, #284]	; (80039fc <HAL_RCC_OscConfig+0x628>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038e4:	4b45      	ldr	r3, [pc, #276]	; (80039fc <HAL_RCC_OscConfig+0x628>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a44      	ldr	r2, [pc, #272]	; (80039fc <HAL_RCC_OscConfig+0x628>)
 80038ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038ee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038f0:	4b42      	ldr	r3, [pc, #264]	; (80039fc <HAL_RCC_OscConfig+0x628>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	4a41      	ldr	r2, [pc, #260]	; (80039fc <HAL_RCC_OscConfig+0x628>)
 80038f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038fa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fc:	f7fe f842 	bl	8001984 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003904:	f7fe f83e 	bl	8001984 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e06e      	b.n	80039f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003916:	4b39      	ldr	r3, [pc, #228]	; (80039fc <HAL_RCC_OscConfig+0x628>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0f0      	beq.n	8003904 <HAL_RCC_OscConfig+0x530>
 8003922:	e066      	b.n	80039f2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003924:	4b35      	ldr	r3, [pc, #212]	; (80039fc <HAL_RCC_OscConfig+0x628>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a34      	ldr	r2, [pc, #208]	; (80039fc <HAL_RCC_OscConfig+0x628>)
 800392a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800392e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003930:	4b32      	ldr	r3, [pc, #200]	; (80039fc <HAL_RCC_OscConfig+0x628>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	4a31      	ldr	r2, [pc, #196]	; (80039fc <HAL_RCC_OscConfig+0x628>)
 8003936:	f023 0303 	bic.w	r3, r3, #3
 800393a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800393c:	4b2f      	ldr	r3, [pc, #188]	; (80039fc <HAL_RCC_OscConfig+0x628>)
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	4a2e      	ldr	r2, [pc, #184]	; (80039fc <HAL_RCC_OscConfig+0x628>)
 8003942:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800394a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394c:	f7fe f81a 	bl	8001984 <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003954:	f7fe f816 	bl	8001984 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e046      	b.n	80039f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003966:	4b25      	ldr	r3, [pc, #148]	; (80039fc <HAL_RCC_OscConfig+0x628>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1f0      	bne.n	8003954 <HAL_RCC_OscConfig+0x580>
 8003972:	e03e      	b.n	80039f2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e039      	b.n	80039f4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003980:	4b1e      	ldr	r3, [pc, #120]	; (80039fc <HAL_RCC_OscConfig+0x628>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f003 0203 	and.w	r2, r3, #3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	429a      	cmp	r2, r3
 8003992:	d12c      	bne.n	80039ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	3b01      	subs	r3, #1
 80039a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d123      	bne.n	80039ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d11b      	bne.n	80039ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d113      	bne.n	80039ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d0:	085b      	lsrs	r3, r3, #1
 80039d2:	3b01      	subs	r3, #1
 80039d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d109      	bne.n	80039ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e4:	085b      	lsrs	r3, r3, #1
 80039e6:	3b01      	subs	r3, #1
 80039e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d001      	beq.n	80039f2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e000      	b.n	80039f4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3720      	adds	r7, #32
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40021000 	.word	0x40021000
 8003a00:	019f800c 	.word	0x019f800c

08003a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e11e      	b.n	8003c5a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a1c:	4b91      	ldr	r3, [pc, #580]	; (8003c64 <HAL_RCC_ClockConfig+0x260>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 030f 	and.w	r3, r3, #15
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d910      	bls.n	8003a4c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a2a:	4b8e      	ldr	r3, [pc, #568]	; (8003c64 <HAL_RCC_ClockConfig+0x260>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f023 020f 	bic.w	r2, r3, #15
 8003a32:	498c      	ldr	r1, [pc, #560]	; (8003c64 <HAL_RCC_ClockConfig+0x260>)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a3a:	4b8a      	ldr	r3, [pc, #552]	; (8003c64 <HAL_RCC_ClockConfig+0x260>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d001      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e106      	b.n	8003c5a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d073      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	2b03      	cmp	r3, #3
 8003a5e:	d129      	bne.n	8003ab4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a60:	4b81      	ldr	r3, [pc, #516]	; (8003c68 <HAL_RCC_ClockConfig+0x264>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d101      	bne.n	8003a70 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e0f4      	b.n	8003c5a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003a70:	f000 f9d0 	bl	8003e14 <RCC_GetSysClockFreqFromPLLSource>
 8003a74:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	4a7c      	ldr	r2, [pc, #496]	; (8003c6c <HAL_RCC_ClockConfig+0x268>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d93f      	bls.n	8003afe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a7e:	4b7a      	ldr	r3, [pc, #488]	; (8003c68 <HAL_RCC_ClockConfig+0x264>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d009      	beq.n	8003a9e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d033      	beq.n	8003afe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d12f      	bne.n	8003afe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a9e:	4b72      	ldr	r3, [pc, #456]	; (8003c68 <HAL_RCC_ClockConfig+0x264>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aa6:	4a70      	ldr	r2, [pc, #448]	; (8003c68 <HAL_RCC_ClockConfig+0x264>)
 8003aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003aae:	2380      	movs	r3, #128	; 0x80
 8003ab0:	617b      	str	r3, [r7, #20]
 8003ab2:	e024      	b.n	8003afe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d107      	bne.n	8003acc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003abc:	4b6a      	ldr	r3, [pc, #424]	; (8003c68 <HAL_RCC_ClockConfig+0x264>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d109      	bne.n	8003adc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e0c6      	b.n	8003c5a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003acc:	4b66      	ldr	r3, [pc, #408]	; (8003c68 <HAL_RCC_ClockConfig+0x264>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e0be      	b.n	8003c5a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003adc:	f000 f8ce 	bl	8003c7c <HAL_RCC_GetSysClockFreq>
 8003ae0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	4a61      	ldr	r2, [pc, #388]	; (8003c6c <HAL_RCC_ClockConfig+0x268>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d909      	bls.n	8003afe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003aea:	4b5f      	ldr	r3, [pc, #380]	; (8003c68 <HAL_RCC_ClockConfig+0x264>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003af2:	4a5d      	ldr	r2, [pc, #372]	; (8003c68 <HAL_RCC_ClockConfig+0x264>)
 8003af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003af8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003afa:	2380      	movs	r3, #128	; 0x80
 8003afc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003afe:	4b5a      	ldr	r3, [pc, #360]	; (8003c68 <HAL_RCC_ClockConfig+0x264>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f023 0203 	bic.w	r2, r3, #3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	4957      	ldr	r1, [pc, #348]	; (8003c68 <HAL_RCC_ClockConfig+0x264>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b10:	f7fd ff38 	bl	8001984 <HAL_GetTick>
 8003b14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b16:	e00a      	b.n	8003b2e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b18:	f7fd ff34 	bl	8001984 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e095      	b.n	8003c5a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2e:	4b4e      	ldr	r3, [pc, #312]	; (8003c68 <HAL_RCC_ClockConfig+0x264>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 020c 	and.w	r2, r3, #12
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d1eb      	bne.n	8003b18 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d023      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d005      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b58:	4b43      	ldr	r3, [pc, #268]	; (8003c68 <HAL_RCC_ClockConfig+0x264>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	4a42      	ldr	r2, [pc, #264]	; (8003c68 <HAL_RCC_ClockConfig+0x264>)
 8003b5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b62:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0308 	and.w	r3, r3, #8
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d007      	beq.n	8003b80 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003b70:	4b3d      	ldr	r3, [pc, #244]	; (8003c68 <HAL_RCC_ClockConfig+0x264>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003b78:	4a3b      	ldr	r2, [pc, #236]	; (8003c68 <HAL_RCC_ClockConfig+0x264>)
 8003b7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b7e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b80:	4b39      	ldr	r3, [pc, #228]	; (8003c68 <HAL_RCC_ClockConfig+0x264>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	4936      	ldr	r1, [pc, #216]	; (8003c68 <HAL_RCC_ClockConfig+0x264>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	608b      	str	r3, [r1, #8]
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	2b80      	cmp	r3, #128	; 0x80
 8003b98:	d105      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003b9a:	4b33      	ldr	r3, [pc, #204]	; (8003c68 <HAL_RCC_ClockConfig+0x264>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	4a32      	ldr	r2, [pc, #200]	; (8003c68 <HAL_RCC_ClockConfig+0x264>)
 8003ba0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ba4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ba6:	4b2f      	ldr	r3, [pc, #188]	; (8003c64 <HAL_RCC_ClockConfig+0x260>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d21d      	bcs.n	8003bf0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb4:	4b2b      	ldr	r3, [pc, #172]	; (8003c64 <HAL_RCC_ClockConfig+0x260>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f023 020f 	bic.w	r2, r3, #15
 8003bbc:	4929      	ldr	r1, [pc, #164]	; (8003c64 <HAL_RCC_ClockConfig+0x260>)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003bc4:	f7fd fede 	bl	8001984 <HAL_GetTick>
 8003bc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bca:	e00a      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bcc:	f7fd feda 	bl	8001984 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e03b      	b.n	8003c5a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be2:	4b20      	ldr	r3, [pc, #128]	; (8003c64 <HAL_RCC_ClockConfig+0x260>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d1ed      	bne.n	8003bcc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0304 	and.w	r3, r3, #4
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d008      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bfc:	4b1a      	ldr	r3, [pc, #104]	; (8003c68 <HAL_RCC_ClockConfig+0x264>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	4917      	ldr	r1, [pc, #92]	; (8003c68 <HAL_RCC_ClockConfig+0x264>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d009      	beq.n	8003c2e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c1a:	4b13      	ldr	r3, [pc, #76]	; (8003c68 <HAL_RCC_ClockConfig+0x264>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	490f      	ldr	r1, [pc, #60]	; (8003c68 <HAL_RCC_ClockConfig+0x264>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c2e:	f000 f825 	bl	8003c7c <HAL_RCC_GetSysClockFreq>
 8003c32:	4602      	mov	r2, r0
 8003c34:	4b0c      	ldr	r3, [pc, #48]	; (8003c68 <HAL_RCC_ClockConfig+0x264>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	091b      	lsrs	r3, r3, #4
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	490c      	ldr	r1, [pc, #48]	; (8003c70 <HAL_RCC_ClockConfig+0x26c>)
 8003c40:	5ccb      	ldrb	r3, [r1, r3]
 8003c42:	f003 031f 	and.w	r3, r3, #31
 8003c46:	fa22 f303 	lsr.w	r3, r2, r3
 8003c4a:	4a0a      	ldr	r2, [pc, #40]	; (8003c74 <HAL_RCC_ClockConfig+0x270>)
 8003c4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003c4e:	4b0a      	ldr	r3, [pc, #40]	; (8003c78 <HAL_RCC_ClockConfig+0x274>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fd f99e 	bl	8000f94 <HAL_InitTick>
 8003c58:	4603      	mov	r3, r0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	40022000 	.word	0x40022000
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	04c4b400 	.word	0x04c4b400
 8003c70:	080095e0 	.word	0x080095e0
 8003c74:	20000078 	.word	0x20000078
 8003c78:	2000007c 	.word	0x2000007c

08003c7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003c82:	4b2c      	ldr	r3, [pc, #176]	; (8003d34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 030c 	and.w	r3, r3, #12
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d102      	bne.n	8003c94 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c8e:	4b2a      	ldr	r3, [pc, #168]	; (8003d38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c90:	613b      	str	r3, [r7, #16]
 8003c92:	e047      	b.n	8003d24 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003c94:	4b27      	ldr	r3, [pc, #156]	; (8003d34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f003 030c 	and.w	r3, r3, #12
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d102      	bne.n	8003ca6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ca0:	4b26      	ldr	r3, [pc, #152]	; (8003d3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ca2:	613b      	str	r3, [r7, #16]
 8003ca4:	e03e      	b.n	8003d24 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003ca6:	4b23      	ldr	r3, [pc, #140]	; (8003d34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 030c 	and.w	r3, r3, #12
 8003cae:	2b0c      	cmp	r3, #12
 8003cb0:	d136      	bne.n	8003d20 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cb2:	4b20      	ldr	r3, [pc, #128]	; (8003d34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f003 0303 	and.w	r3, r3, #3
 8003cba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cbc:	4b1d      	ldr	r3, [pc, #116]	; (8003d34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	091b      	lsrs	r3, r3, #4
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2b03      	cmp	r3, #3
 8003cce:	d10c      	bne.n	8003cea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cd0:	4a1a      	ldr	r2, [pc, #104]	; (8003d3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd8:	4a16      	ldr	r2, [pc, #88]	; (8003d34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cda:	68d2      	ldr	r2, [r2, #12]
 8003cdc:	0a12      	lsrs	r2, r2, #8
 8003cde:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ce2:	fb02 f303 	mul.w	r3, r2, r3
 8003ce6:	617b      	str	r3, [r7, #20]
      break;
 8003ce8:	e00c      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cea:	4a13      	ldr	r2, [pc, #76]	; (8003d38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf2:	4a10      	ldr	r2, [pc, #64]	; (8003d34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cf4:	68d2      	ldr	r2, [r2, #12]
 8003cf6:	0a12      	lsrs	r2, r2, #8
 8003cf8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cfc:	fb02 f303 	mul.w	r3, r2, r3
 8003d00:	617b      	str	r3, [r7, #20]
      break;
 8003d02:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d04:	4b0b      	ldr	r3, [pc, #44]	; (8003d34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	0e5b      	lsrs	r3, r3, #25
 8003d0a:	f003 0303 	and.w	r3, r3, #3
 8003d0e:	3301      	adds	r3, #1
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1c:	613b      	str	r3, [r7, #16]
 8003d1e:	e001      	b.n	8003d24 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003d20:	2300      	movs	r3, #0
 8003d22:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003d24:	693b      	ldr	r3, [r7, #16]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	371c      	adds	r7, #28
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	40021000 	.word	0x40021000
 8003d38:	00f42400 	.word	0x00f42400
 8003d3c:	016e3600 	.word	0x016e3600

08003d40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d44:	4b03      	ldr	r3, [pc, #12]	; (8003d54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d46:	681b      	ldr	r3, [r3, #0]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	20000078 	.word	0x20000078

08003d58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d5c:	f7ff fff0 	bl	8003d40 <HAL_RCC_GetHCLKFreq>
 8003d60:	4602      	mov	r2, r0
 8003d62:	4b06      	ldr	r3, [pc, #24]	; (8003d7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	0a1b      	lsrs	r3, r3, #8
 8003d68:	f003 0307 	and.w	r3, r3, #7
 8003d6c:	4904      	ldr	r1, [pc, #16]	; (8003d80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d6e:	5ccb      	ldrb	r3, [r1, r3]
 8003d70:	f003 031f 	and.w	r3, r3, #31
 8003d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	080095f0 	.word	0x080095f0

08003d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d88:	f7ff ffda 	bl	8003d40 <HAL_RCC_GetHCLKFreq>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	0adb      	lsrs	r3, r3, #11
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	4904      	ldr	r1, [pc, #16]	; (8003dac <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d9a:	5ccb      	ldrb	r3, [r1, r3]
 8003d9c:	f003 031f 	and.w	r3, r3, #31
 8003da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40021000 	.word	0x40021000
 8003dac:	080095f0 	.word	0x080095f0

08003db0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	220f      	movs	r2, #15
 8003dbe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003dc0:	4b12      	ldr	r3, [pc, #72]	; (8003e0c <HAL_RCC_GetClockConfig+0x5c>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f003 0203 	and.w	r2, r3, #3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003dcc:	4b0f      	ldr	r3, [pc, #60]	; (8003e0c <HAL_RCC_GetClockConfig+0x5c>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003dd8:	4b0c      	ldr	r3, [pc, #48]	; (8003e0c <HAL_RCC_GetClockConfig+0x5c>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003de4:	4b09      	ldr	r3, [pc, #36]	; (8003e0c <HAL_RCC_GetClockConfig+0x5c>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	08db      	lsrs	r3, r3, #3
 8003dea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003df2:	4b07      	ldr	r3, [pc, #28]	; (8003e10 <HAL_RCC_GetClockConfig+0x60>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 020f 	and.w	r2, r3, #15
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	601a      	str	r2, [r3, #0]
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	40022000 	.word	0x40022000

08003e14 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e1a:	4b1e      	ldr	r3, [pc, #120]	; (8003e94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e24:	4b1b      	ldr	r3, [pc, #108]	; (8003e94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	091b      	lsrs	r3, r3, #4
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	3301      	adds	r3, #1
 8003e30:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	2b03      	cmp	r3, #3
 8003e36:	d10c      	bne.n	8003e52 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e38:	4a17      	ldr	r2, [pc, #92]	; (8003e98 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e40:	4a14      	ldr	r2, [pc, #80]	; (8003e94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e42:	68d2      	ldr	r2, [r2, #12]
 8003e44:	0a12      	lsrs	r2, r2, #8
 8003e46:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e4a:	fb02 f303 	mul.w	r3, r2, r3
 8003e4e:	617b      	str	r3, [r7, #20]
    break;
 8003e50:	e00c      	b.n	8003e6c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e52:	4a12      	ldr	r2, [pc, #72]	; (8003e9c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5a:	4a0e      	ldr	r2, [pc, #56]	; (8003e94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e5c:	68d2      	ldr	r2, [r2, #12]
 8003e5e:	0a12      	lsrs	r2, r2, #8
 8003e60:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e64:	fb02 f303 	mul.w	r3, r2, r3
 8003e68:	617b      	str	r3, [r7, #20]
    break;
 8003e6a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e6c:	4b09      	ldr	r3, [pc, #36]	; (8003e94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	0e5b      	lsrs	r3, r3, #25
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	3301      	adds	r3, #1
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e84:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003e86:	687b      	ldr	r3, [r7, #4]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	371c      	adds	r7, #28
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	40021000 	.word	0x40021000
 8003e98:	016e3600 	.word	0x016e3600
 8003e9c:	00f42400 	.word	0x00f42400

08003ea0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003eac:	2300      	movs	r3, #0
 8003eae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 8098 	beq.w	8003fee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ec2:	4b43      	ldr	r3, [pc, #268]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10d      	bne.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ece:	4b40      	ldr	r3, [pc, #256]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed2:	4a3f      	ldr	r2, [pc, #252]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed8:	6593      	str	r3, [r2, #88]	; 0x58
 8003eda:	4b3d      	ldr	r3, [pc, #244]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee2:	60bb      	str	r3, [r7, #8]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003eea:	4b3a      	ldr	r3, [pc, #232]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a39      	ldr	r2, [pc, #228]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ef6:	f7fd fd45 	bl	8001984 <HAL_GetTick>
 8003efa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003efc:	e009      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003efe:	f7fd fd41 	bl	8001984 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d902      	bls.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	74fb      	strb	r3, [r7, #19]
        break;
 8003f10:	e005      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f12:	4b30      	ldr	r3, [pc, #192]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0ef      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003f1e:	7cfb      	ldrb	r3, [r7, #19]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d159      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f24:	4b2a      	ldr	r3, [pc, #168]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f2e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d01e      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d019      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f40:	4b23      	ldr	r3, [pc, #140]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f4c:	4b20      	ldr	r3, [pc, #128]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f52:	4a1f      	ldr	r2, [pc, #124]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f5c:	4b1c      	ldr	r3, [pc, #112]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f62:	4a1b      	ldr	r2, [pc, #108]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f6c:	4a18      	ldr	r2, [pc, #96]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d016      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7e:	f7fd fd01 	bl	8001984 <HAL_GetTick>
 8003f82:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f84:	e00b      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f86:	f7fd fcfd 	bl	8001984 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d902      	bls.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	74fb      	strb	r3, [r7, #19]
            break;
 8003f9c:	e006      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f9e:	4b0c      	ldr	r3, [pc, #48]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d0ec      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003fac:	7cfb      	ldrb	r3, [r7, #19]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10b      	bne.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fb2:	4b07      	ldr	r3, [pc, #28]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fc0:	4903      	ldr	r1, [pc, #12]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003fc8:	e008      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fca:	7cfb      	ldrb	r3, [r7, #19]
 8003fcc:	74bb      	strb	r3, [r7, #18]
 8003fce:	e005      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd8:	7cfb      	ldrb	r3, [r7, #19]
 8003fda:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fdc:	7c7b      	ldrb	r3, [r7, #17]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d105      	bne.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fe2:	4ba7      	ldr	r3, [pc, #668]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe6:	4aa6      	ldr	r2, [pc, #664]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ffa:	4ba1      	ldr	r3, [pc, #644]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004000:	f023 0203 	bic.w	r2, r3, #3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	499d      	ldr	r1, [pc, #628]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00a      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800401c:	4b98      	ldr	r3, [pc, #608]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800401e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004022:	f023 020c 	bic.w	r2, r3, #12
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	4995      	ldr	r1, [pc, #596]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00a      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800403e:	4b90      	ldr	r3, [pc, #576]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004044:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	498c      	ldr	r1, [pc, #560]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800404e:	4313      	orrs	r3, r2
 8004050:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0308 	and.w	r3, r3, #8
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00a      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004060:	4b87      	ldr	r3, [pc, #540]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004066:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	4984      	ldr	r1, [pc, #528]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004070:	4313      	orrs	r3, r2
 8004072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0310 	and.w	r3, r3, #16
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00a      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004082:	4b7f      	ldr	r3, [pc, #508]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004088:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	497b      	ldr	r1, [pc, #492]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004092:	4313      	orrs	r3, r2
 8004094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0320 	and.w	r3, r3, #32
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040a4:	4b76      	ldr	r3, [pc, #472]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	4973      	ldr	r1, [pc, #460]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00a      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040c6:	4b6e      	ldr	r3, [pc, #440]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	69db      	ldr	r3, [r3, #28]
 80040d4:	496a      	ldr	r1, [pc, #424]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00a      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040e8:	4b65      	ldr	r3, [pc, #404]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	4962      	ldr	r1, [pc, #392]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800410a:	4b5d      	ldr	r3, [pc, #372]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800410c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004110:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	4959      	ldr	r1, [pc, #356]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800411a:	4313      	orrs	r3, r2
 800411c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00a      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800412c:	4b54      	ldr	r3, [pc, #336]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800412e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004132:	f023 0203 	bic.w	r2, r3, #3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413a:	4951      	ldr	r1, [pc, #324]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800413c:	4313      	orrs	r3, r2
 800413e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00a      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800414e:	4b4c      	ldr	r3, [pc, #304]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004154:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415c:	4948      	ldr	r1, [pc, #288]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800415e:	4313      	orrs	r3, r2
 8004160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800416c:	2b00      	cmp	r3, #0
 800416e:	d015      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004170:	4b43      	ldr	r3, [pc, #268]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004176:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417e:	4940      	ldr	r1, [pc, #256]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004180:	4313      	orrs	r3, r2
 8004182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800418e:	d105      	bne.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004190:	4b3b      	ldr	r3, [pc, #236]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	4a3a      	ldr	r2, [pc, #232]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004196:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800419a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d015      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041a8:	4b35      	ldr	r3, [pc, #212]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b6:	4932      	ldr	r1, [pc, #200]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041c6:	d105      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041c8:	4b2d      	ldr	r3, [pc, #180]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	4a2c      	ldr	r2, [pc, #176]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041d2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d015      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80041e0:	4b27      	ldr	r3, [pc, #156]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ee:	4924      	ldr	r1, [pc, #144]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041fe:	d105      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004200:	4b1f      	ldr	r3, [pc, #124]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	4a1e      	ldr	r2, [pc, #120]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004206:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800420a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d015      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004218:	4b19      	ldr	r3, [pc, #100]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800421a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004226:	4916      	ldr	r1, [pc, #88]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004228:	4313      	orrs	r3, r2
 800422a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004232:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004236:	d105      	bne.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004238:	4b11      	ldr	r3, [pc, #68]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	4a10      	ldr	r2, [pc, #64]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800423e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004242:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d019      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004250:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004256:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	4908      	ldr	r1, [pc, #32]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004260:	4313      	orrs	r3, r2
 8004262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800426e:	d109      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004270:	4b03      	ldr	r3, [pc, #12]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	4a02      	ldr	r2, [pc, #8]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004276:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800427a:	60d3      	str	r3, [r2, #12]
 800427c:	e002      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800427e:	bf00      	nop
 8004280:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d015      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004290:	4b29      	ldr	r3, [pc, #164]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004296:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429e:	4926      	ldr	r1, [pc, #152]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042ae:	d105      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80042b0:	4b21      	ldr	r3, [pc, #132]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	4a20      	ldr	r2, [pc, #128]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ba:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d015      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80042c8:	4b1b      	ldr	r3, [pc, #108]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ce:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d6:	4918      	ldr	r1, [pc, #96]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e6:	d105      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80042e8:	4b13      	ldr	r3, [pc, #76]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	4a12      	ldr	r2, [pc, #72]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d015      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004300:	4b0d      	ldr	r3, [pc, #52]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004302:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004306:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800430e:	490a      	ldr	r1, [pc, #40]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004310:	4313      	orrs	r3, r2
 8004312:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800431a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800431e:	d105      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004320:	4b05      	ldr	r3, [pc, #20]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	4a04      	ldr	r2, [pc, #16]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004326:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800432a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800432c:	7cbb      	ldrb	r3, [r7, #18]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3718      	adds	r7, #24
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	40021000 	.word	0x40021000

0800433c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e049      	b.n	80043e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d106      	bne.n	8004368 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7fd f87a 	bl	800145c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3304      	adds	r3, #4
 8004378:	4619      	mov	r1, r3
 800437a:	4610      	mov	r0, r2
 800437c:	f000 fdf4 	bl	8004f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
	...

080043ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d001      	beq.n	8004404 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e054      	b.n	80044ae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2202      	movs	r2, #2
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68da      	ldr	r2, [r3, #12]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0201 	orr.w	r2, r2, #1
 800441a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a26      	ldr	r2, [pc, #152]	; (80044bc <HAL_TIM_Base_Start_IT+0xd0>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d022      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x80>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800442e:	d01d      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x80>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a22      	ldr	r2, [pc, #136]	; (80044c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d018      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x80>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a21      	ldr	r2, [pc, #132]	; (80044c4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d013      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x80>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a1f      	ldr	r2, [pc, #124]	; (80044c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d00e      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x80>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a1e      	ldr	r2, [pc, #120]	; (80044cc <HAL_TIM_Base_Start_IT+0xe0>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d009      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x80>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a1c      	ldr	r2, [pc, #112]	; (80044d0 <HAL_TIM_Base_Start_IT+0xe4>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d004      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x80>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a1b      	ldr	r2, [pc, #108]	; (80044d4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d115      	bne.n	8004498 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	4b19      	ldr	r3, [pc, #100]	; (80044d8 <HAL_TIM_Base_Start_IT+0xec>)
 8004474:	4013      	ands	r3, r2
 8004476:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2b06      	cmp	r3, #6
 800447c:	d015      	beq.n	80044aa <HAL_TIM_Base_Start_IT+0xbe>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004484:	d011      	beq.n	80044aa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f042 0201 	orr.w	r2, r2, #1
 8004494:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004496:	e008      	b.n	80044aa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0201 	orr.w	r2, r2, #1
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	e000      	b.n	80044ac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	40012c00 	.word	0x40012c00
 80044c0:	40000400 	.word	0x40000400
 80044c4:	40000800 	.word	0x40000800
 80044c8:	40000c00 	.word	0x40000c00
 80044cc:	40013400 	.word	0x40013400
 80044d0:	40014000 	.word	0x40014000
 80044d4:	40015000 	.word	0x40015000
 80044d8:	00010007 	.word	0x00010007

080044dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e049      	b.n	8004582 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d106      	bne.n	8004508 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f841 	bl	800458a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2202      	movs	r2, #2
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	3304      	adds	r3, #4
 8004518:	4619      	mov	r1, r3
 800451a:	4610      	mov	r0, r2
 800451c:	f000 fd24 	bl	8004f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800458a:	b480      	push	{r7}
 800458c:	b083      	sub	sp, #12
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004592:	bf00      	nop
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
	...

080045a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d109      	bne.n	80045c4 <HAL_TIM_PWM_Start+0x24>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	bf14      	ite	ne
 80045bc:	2301      	movne	r3, #1
 80045be:	2300      	moveq	r3, #0
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	e03c      	b.n	800463e <HAL_TIM_PWM_Start+0x9e>
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d109      	bne.n	80045de <HAL_TIM_PWM_Start+0x3e>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	bf14      	ite	ne
 80045d6:	2301      	movne	r3, #1
 80045d8:	2300      	moveq	r3, #0
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	e02f      	b.n	800463e <HAL_TIM_PWM_Start+0x9e>
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b08      	cmp	r3, #8
 80045e2:	d109      	bne.n	80045f8 <HAL_TIM_PWM_Start+0x58>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	bf14      	ite	ne
 80045f0:	2301      	movne	r3, #1
 80045f2:	2300      	moveq	r3, #0
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	e022      	b.n	800463e <HAL_TIM_PWM_Start+0x9e>
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	2b0c      	cmp	r3, #12
 80045fc:	d109      	bne.n	8004612 <HAL_TIM_PWM_Start+0x72>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b01      	cmp	r3, #1
 8004608:	bf14      	ite	ne
 800460a:	2301      	movne	r3, #1
 800460c:	2300      	moveq	r3, #0
 800460e:	b2db      	uxtb	r3, r3
 8004610:	e015      	b.n	800463e <HAL_TIM_PWM_Start+0x9e>
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b10      	cmp	r3, #16
 8004616:	d109      	bne.n	800462c <HAL_TIM_PWM_Start+0x8c>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b01      	cmp	r3, #1
 8004622:	bf14      	ite	ne
 8004624:	2301      	movne	r3, #1
 8004626:	2300      	moveq	r3, #0
 8004628:	b2db      	uxtb	r3, r3
 800462a:	e008      	b.n	800463e <HAL_TIM_PWM_Start+0x9e>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b01      	cmp	r3, #1
 8004636:	bf14      	ite	ne
 8004638:	2301      	movne	r3, #1
 800463a:	2300      	moveq	r3, #0
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e0a6      	b.n	8004794 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d104      	bne.n	8004656 <HAL_TIM_PWM_Start+0xb6>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2202      	movs	r2, #2
 8004650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004654:	e023      	b.n	800469e <HAL_TIM_PWM_Start+0xfe>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b04      	cmp	r3, #4
 800465a:	d104      	bne.n	8004666 <HAL_TIM_PWM_Start+0xc6>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2202      	movs	r2, #2
 8004660:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004664:	e01b      	b.n	800469e <HAL_TIM_PWM_Start+0xfe>
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b08      	cmp	r3, #8
 800466a:	d104      	bne.n	8004676 <HAL_TIM_PWM_Start+0xd6>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2202      	movs	r2, #2
 8004670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004674:	e013      	b.n	800469e <HAL_TIM_PWM_Start+0xfe>
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	2b0c      	cmp	r3, #12
 800467a:	d104      	bne.n	8004686 <HAL_TIM_PWM_Start+0xe6>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004684:	e00b      	b.n	800469e <HAL_TIM_PWM_Start+0xfe>
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	2b10      	cmp	r3, #16
 800468a:	d104      	bne.n	8004696 <HAL_TIM_PWM_Start+0xf6>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2202      	movs	r2, #2
 8004690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004694:	e003      	b.n	800469e <HAL_TIM_PWM_Start+0xfe>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2202      	movs	r2, #2
 800469a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2201      	movs	r2, #1
 80046a4:	6839      	ldr	r1, [r7, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f001 f940 	bl	800592c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a3a      	ldr	r2, [pc, #232]	; (800479c <HAL_TIM_PWM_Start+0x1fc>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d018      	beq.n	80046e8 <HAL_TIM_PWM_Start+0x148>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a39      	ldr	r2, [pc, #228]	; (80047a0 <HAL_TIM_PWM_Start+0x200>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d013      	beq.n	80046e8 <HAL_TIM_PWM_Start+0x148>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a37      	ldr	r2, [pc, #220]	; (80047a4 <HAL_TIM_PWM_Start+0x204>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d00e      	beq.n	80046e8 <HAL_TIM_PWM_Start+0x148>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a36      	ldr	r2, [pc, #216]	; (80047a8 <HAL_TIM_PWM_Start+0x208>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d009      	beq.n	80046e8 <HAL_TIM_PWM_Start+0x148>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a34      	ldr	r2, [pc, #208]	; (80047ac <HAL_TIM_PWM_Start+0x20c>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d004      	beq.n	80046e8 <HAL_TIM_PWM_Start+0x148>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a33      	ldr	r2, [pc, #204]	; (80047b0 <HAL_TIM_PWM_Start+0x210>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d101      	bne.n	80046ec <HAL_TIM_PWM_Start+0x14c>
 80046e8:	2301      	movs	r3, #1
 80046ea:	e000      	b.n	80046ee <HAL_TIM_PWM_Start+0x14e>
 80046ec:	2300      	movs	r3, #0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d007      	beq.n	8004702 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004700:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a25      	ldr	r2, [pc, #148]	; (800479c <HAL_TIM_PWM_Start+0x1fc>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d022      	beq.n	8004752 <HAL_TIM_PWM_Start+0x1b2>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004714:	d01d      	beq.n	8004752 <HAL_TIM_PWM_Start+0x1b2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a26      	ldr	r2, [pc, #152]	; (80047b4 <HAL_TIM_PWM_Start+0x214>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d018      	beq.n	8004752 <HAL_TIM_PWM_Start+0x1b2>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a24      	ldr	r2, [pc, #144]	; (80047b8 <HAL_TIM_PWM_Start+0x218>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d013      	beq.n	8004752 <HAL_TIM_PWM_Start+0x1b2>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a23      	ldr	r2, [pc, #140]	; (80047bc <HAL_TIM_PWM_Start+0x21c>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d00e      	beq.n	8004752 <HAL_TIM_PWM_Start+0x1b2>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a19      	ldr	r2, [pc, #100]	; (80047a0 <HAL_TIM_PWM_Start+0x200>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d009      	beq.n	8004752 <HAL_TIM_PWM_Start+0x1b2>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a18      	ldr	r2, [pc, #96]	; (80047a4 <HAL_TIM_PWM_Start+0x204>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d004      	beq.n	8004752 <HAL_TIM_PWM_Start+0x1b2>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a18      	ldr	r2, [pc, #96]	; (80047b0 <HAL_TIM_PWM_Start+0x210>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d115      	bne.n	800477e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	4b19      	ldr	r3, [pc, #100]	; (80047c0 <HAL_TIM_PWM_Start+0x220>)
 800475a:	4013      	ands	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2b06      	cmp	r3, #6
 8004762:	d015      	beq.n	8004790 <HAL_TIM_PWM_Start+0x1f0>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800476a:	d011      	beq.n	8004790 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f042 0201 	orr.w	r2, r2, #1
 800477a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800477c:	e008      	b.n	8004790 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f042 0201 	orr.w	r2, r2, #1
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	e000      	b.n	8004792 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004790:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40012c00 	.word	0x40012c00
 80047a0:	40013400 	.word	0x40013400
 80047a4:	40014000 	.word	0x40014000
 80047a8:	40014400 	.word	0x40014400
 80047ac:	40014800 	.word	0x40014800
 80047b0:	40015000 	.word	0x40015000
 80047b4:	40000400 	.word	0x40000400
 80047b8:	40000800 	.word	0x40000800
 80047bc:	40000c00 	.word	0x40000c00
 80047c0:	00010007 	.word	0x00010007

080047c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d122      	bne.n	8004820 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d11b      	bne.n	8004820 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f06f 0202 	mvn.w	r2, #2
 80047f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	f003 0303 	and.w	r3, r3, #3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d003      	beq.n	800480e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 fb90 	bl	8004f2c <HAL_TIM_IC_CaptureCallback>
 800480c:	e005      	b.n	800481a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 fb82 	bl	8004f18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 fb93 	bl	8004f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	f003 0304 	and.w	r3, r3, #4
 800482a:	2b04      	cmp	r3, #4
 800482c:	d122      	bne.n	8004874 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b04      	cmp	r3, #4
 800483a:	d11b      	bne.n	8004874 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f06f 0204 	mvn.w	r2, #4
 8004844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2202      	movs	r2, #2
 800484a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 fb66 	bl	8004f2c <HAL_TIM_IC_CaptureCallback>
 8004860:	e005      	b.n	800486e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 fb58 	bl	8004f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 fb69 	bl	8004f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	f003 0308 	and.w	r3, r3, #8
 800487e:	2b08      	cmp	r3, #8
 8004880:	d122      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f003 0308 	and.w	r3, r3, #8
 800488c:	2b08      	cmp	r3, #8
 800488e:	d11b      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f06f 0208 	mvn.w	r2, #8
 8004898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2204      	movs	r2, #4
 800489e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	f003 0303 	and.w	r3, r3, #3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 fb3c 	bl	8004f2c <HAL_TIM_IC_CaptureCallback>
 80048b4:	e005      	b.n	80048c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 fb2e 	bl	8004f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 fb3f 	bl	8004f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f003 0310 	and.w	r3, r3, #16
 80048d2:	2b10      	cmp	r3, #16
 80048d4:	d122      	bne.n	800491c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f003 0310 	and.w	r3, r3, #16
 80048e0:	2b10      	cmp	r3, #16
 80048e2:	d11b      	bne.n	800491c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f06f 0210 	mvn.w	r2, #16
 80048ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2208      	movs	r2, #8
 80048f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 fb12 	bl	8004f2c <HAL_TIM_IC_CaptureCallback>
 8004908:	e005      	b.n	8004916 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 fb04 	bl	8004f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 fb15 	bl	8004f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b01      	cmp	r3, #1
 8004928:	d10e      	bne.n	8004948 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b01      	cmp	r3, #1
 8004936:	d107      	bne.n	8004948 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f06f 0201 	mvn.w	r2, #1
 8004940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7fc f98a 	bl	8000c5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004952:	2b80      	cmp	r3, #128	; 0x80
 8004954:	d10e      	bne.n	8004974 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004960:	2b80      	cmp	r3, #128	; 0x80
 8004962:	d107      	bne.n	8004974 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800496c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f001 fad7 	bl	8005f22 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004982:	d10e      	bne.n	80049a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800498e:	2b80      	cmp	r3, #128	; 0x80
 8004990:	d107      	bne.n	80049a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800499a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f001 faca 	bl	8005f36 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ac:	2b40      	cmp	r3, #64	; 0x40
 80049ae:	d10e      	bne.n	80049ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ba:	2b40      	cmp	r3, #64	; 0x40
 80049bc:	d107      	bne.n	80049ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 fac3 	bl	8004f54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	f003 0320 	and.w	r3, r3, #32
 80049d8:	2b20      	cmp	r3, #32
 80049da:	d10e      	bne.n	80049fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	f003 0320 	and.w	r3, r3, #32
 80049e6:	2b20      	cmp	r3, #32
 80049e8:	d107      	bne.n	80049fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f06f 0220 	mvn.w	r2, #32
 80049f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f001 fa8a 	bl	8005f0e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a08:	d10f      	bne.n	8004a2a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a18:	d107      	bne.n	8004a2a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f001 fa90 	bl	8005f4a <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a38:	d10f      	bne.n	8004a5a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a48:	d107      	bne.n	8004a5a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004a52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f001 fa82 	bl	8005f5e <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a68:	d10f      	bne.n	8004a8a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a78:	d107      	bne.n	8004a8a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f001 fa74 	bl	8005f72 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a98:	d10f      	bne.n	8004aba <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004aa4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004aa8:	d107      	bne.n	8004aba <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004ab2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f001 fa66 	bl	8005f86 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004aba:	bf00      	nop
 8004abc:	3708      	adds	r7, #8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
	...

08004ac4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d101      	bne.n	8004ae2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ade:	2302      	movs	r3, #2
 8004ae0:	e0ff      	b.n	8004ce2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b14      	cmp	r3, #20
 8004aee:	f200 80f0 	bhi.w	8004cd2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004af2:	a201      	add	r2, pc, #4	; (adr r2, 8004af8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af8:	08004b4d 	.word	0x08004b4d
 8004afc:	08004cd3 	.word	0x08004cd3
 8004b00:	08004cd3 	.word	0x08004cd3
 8004b04:	08004cd3 	.word	0x08004cd3
 8004b08:	08004b8d 	.word	0x08004b8d
 8004b0c:	08004cd3 	.word	0x08004cd3
 8004b10:	08004cd3 	.word	0x08004cd3
 8004b14:	08004cd3 	.word	0x08004cd3
 8004b18:	08004bcf 	.word	0x08004bcf
 8004b1c:	08004cd3 	.word	0x08004cd3
 8004b20:	08004cd3 	.word	0x08004cd3
 8004b24:	08004cd3 	.word	0x08004cd3
 8004b28:	08004c0f 	.word	0x08004c0f
 8004b2c:	08004cd3 	.word	0x08004cd3
 8004b30:	08004cd3 	.word	0x08004cd3
 8004b34:	08004cd3 	.word	0x08004cd3
 8004b38:	08004c51 	.word	0x08004c51
 8004b3c:	08004cd3 	.word	0x08004cd3
 8004b40:	08004cd3 	.word	0x08004cd3
 8004b44:	08004cd3 	.word	0x08004cd3
 8004b48:	08004c91 	.word	0x08004c91
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68b9      	ldr	r1, [r7, #8]
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 fab0 	bl	80050b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	699a      	ldr	r2, [r3, #24]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f042 0208 	orr.w	r2, r2, #8
 8004b66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	699a      	ldr	r2, [r3, #24]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f022 0204 	bic.w	r2, r2, #4
 8004b76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6999      	ldr	r1, [r3, #24]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	691a      	ldr	r2, [r3, #16]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	619a      	str	r2, [r3, #24]
      break;
 8004b8a:	e0a5      	b.n	8004cd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68b9      	ldr	r1, [r7, #8]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 fb2a 	bl	80051ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	699a      	ldr	r2, [r3, #24]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ba6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	699a      	ldr	r2, [r3, #24]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6999      	ldr	r1, [r3, #24]
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	021a      	lsls	r2, r3, #8
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	619a      	str	r2, [r3, #24]
      break;
 8004bcc:	e084      	b.n	8004cd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68b9      	ldr	r1, [r7, #8]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f000 fb9d 	bl	8005314 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	69da      	ldr	r2, [r3, #28]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f042 0208 	orr.w	r2, r2, #8
 8004be8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	69da      	ldr	r2, [r3, #28]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0204 	bic.w	r2, r2, #4
 8004bf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	69d9      	ldr	r1, [r3, #28]
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	691a      	ldr	r2, [r3, #16]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	61da      	str	r2, [r3, #28]
      break;
 8004c0c:	e064      	b.n	8004cd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68b9      	ldr	r1, [r7, #8]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 fc0f 	bl	8005438 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	69da      	ldr	r2, [r3, #28]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	69da      	ldr	r2, [r3, #28]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	69d9      	ldr	r1, [r3, #28]
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	021a      	lsls	r2, r3, #8
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	61da      	str	r2, [r3, #28]
      break;
 8004c4e:	e043      	b.n	8004cd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68b9      	ldr	r1, [r7, #8]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 fc82 	bl	8005560 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f042 0208 	orr.w	r2, r2, #8
 8004c6a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f022 0204 	bic.w	r2, r2, #4
 8004c7a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	691a      	ldr	r2, [r3, #16]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004c8e:	e023      	b.n	8004cd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68b9      	ldr	r1, [r7, #8]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 fccc 	bl	8005634 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004caa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cba:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	021a      	lsls	r2, r3, #8
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004cd0:	e002      	b.n	8004cd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	75fb      	strb	r3, [r7, #23]
      break;
 8004cd6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3718      	adds	r7, #24
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop

08004cec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d101      	bne.n	8004d08 <HAL_TIM_ConfigClockSource+0x1c>
 8004d04:	2302      	movs	r3, #2
 8004d06:	e0f6      	b.n	8004ef6 <HAL_TIM_ConfigClockSource+0x20a>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2202      	movs	r2, #2
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004d26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a6f      	ldr	r2, [pc, #444]	; (8004f00 <HAL_TIM_ConfigClockSource+0x214>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	f000 80c1 	beq.w	8004eca <HAL_TIM_ConfigClockSource+0x1de>
 8004d48:	4a6d      	ldr	r2, [pc, #436]	; (8004f00 <HAL_TIM_ConfigClockSource+0x214>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	f200 80c6 	bhi.w	8004edc <HAL_TIM_ConfigClockSource+0x1f0>
 8004d50:	4a6c      	ldr	r2, [pc, #432]	; (8004f04 <HAL_TIM_ConfigClockSource+0x218>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	f000 80b9 	beq.w	8004eca <HAL_TIM_ConfigClockSource+0x1de>
 8004d58:	4a6a      	ldr	r2, [pc, #424]	; (8004f04 <HAL_TIM_ConfigClockSource+0x218>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	f200 80be 	bhi.w	8004edc <HAL_TIM_ConfigClockSource+0x1f0>
 8004d60:	4a69      	ldr	r2, [pc, #420]	; (8004f08 <HAL_TIM_ConfigClockSource+0x21c>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	f000 80b1 	beq.w	8004eca <HAL_TIM_ConfigClockSource+0x1de>
 8004d68:	4a67      	ldr	r2, [pc, #412]	; (8004f08 <HAL_TIM_ConfigClockSource+0x21c>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	f200 80b6 	bhi.w	8004edc <HAL_TIM_ConfigClockSource+0x1f0>
 8004d70:	4a66      	ldr	r2, [pc, #408]	; (8004f0c <HAL_TIM_ConfigClockSource+0x220>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	f000 80a9 	beq.w	8004eca <HAL_TIM_ConfigClockSource+0x1de>
 8004d78:	4a64      	ldr	r2, [pc, #400]	; (8004f0c <HAL_TIM_ConfigClockSource+0x220>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	f200 80ae 	bhi.w	8004edc <HAL_TIM_ConfigClockSource+0x1f0>
 8004d80:	4a63      	ldr	r2, [pc, #396]	; (8004f10 <HAL_TIM_ConfigClockSource+0x224>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	f000 80a1 	beq.w	8004eca <HAL_TIM_ConfigClockSource+0x1de>
 8004d88:	4a61      	ldr	r2, [pc, #388]	; (8004f10 <HAL_TIM_ConfigClockSource+0x224>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	f200 80a6 	bhi.w	8004edc <HAL_TIM_ConfigClockSource+0x1f0>
 8004d90:	4a60      	ldr	r2, [pc, #384]	; (8004f14 <HAL_TIM_ConfigClockSource+0x228>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	f000 8099 	beq.w	8004eca <HAL_TIM_ConfigClockSource+0x1de>
 8004d98:	4a5e      	ldr	r2, [pc, #376]	; (8004f14 <HAL_TIM_ConfigClockSource+0x228>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	f200 809e 	bhi.w	8004edc <HAL_TIM_ConfigClockSource+0x1f0>
 8004da0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004da4:	f000 8091 	beq.w	8004eca <HAL_TIM_ConfigClockSource+0x1de>
 8004da8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004dac:	f200 8096 	bhi.w	8004edc <HAL_TIM_ConfigClockSource+0x1f0>
 8004db0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004db4:	f000 8089 	beq.w	8004eca <HAL_TIM_ConfigClockSource+0x1de>
 8004db8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dbc:	f200 808e 	bhi.w	8004edc <HAL_TIM_ConfigClockSource+0x1f0>
 8004dc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dc4:	d03e      	beq.n	8004e44 <HAL_TIM_ConfigClockSource+0x158>
 8004dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dca:	f200 8087 	bhi.w	8004edc <HAL_TIM_ConfigClockSource+0x1f0>
 8004dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd2:	f000 8086 	beq.w	8004ee2 <HAL_TIM_ConfigClockSource+0x1f6>
 8004dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dda:	d87f      	bhi.n	8004edc <HAL_TIM_ConfigClockSource+0x1f0>
 8004ddc:	2b70      	cmp	r3, #112	; 0x70
 8004dde:	d01a      	beq.n	8004e16 <HAL_TIM_ConfigClockSource+0x12a>
 8004de0:	2b70      	cmp	r3, #112	; 0x70
 8004de2:	d87b      	bhi.n	8004edc <HAL_TIM_ConfigClockSource+0x1f0>
 8004de4:	2b60      	cmp	r3, #96	; 0x60
 8004de6:	d050      	beq.n	8004e8a <HAL_TIM_ConfigClockSource+0x19e>
 8004de8:	2b60      	cmp	r3, #96	; 0x60
 8004dea:	d877      	bhi.n	8004edc <HAL_TIM_ConfigClockSource+0x1f0>
 8004dec:	2b50      	cmp	r3, #80	; 0x50
 8004dee:	d03c      	beq.n	8004e6a <HAL_TIM_ConfigClockSource+0x17e>
 8004df0:	2b50      	cmp	r3, #80	; 0x50
 8004df2:	d873      	bhi.n	8004edc <HAL_TIM_ConfigClockSource+0x1f0>
 8004df4:	2b40      	cmp	r3, #64	; 0x40
 8004df6:	d058      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0x1be>
 8004df8:	2b40      	cmp	r3, #64	; 0x40
 8004dfa:	d86f      	bhi.n	8004edc <HAL_TIM_ConfigClockSource+0x1f0>
 8004dfc:	2b30      	cmp	r3, #48	; 0x30
 8004dfe:	d064      	beq.n	8004eca <HAL_TIM_ConfigClockSource+0x1de>
 8004e00:	2b30      	cmp	r3, #48	; 0x30
 8004e02:	d86b      	bhi.n	8004edc <HAL_TIM_ConfigClockSource+0x1f0>
 8004e04:	2b20      	cmp	r3, #32
 8004e06:	d060      	beq.n	8004eca <HAL_TIM_ConfigClockSource+0x1de>
 8004e08:	2b20      	cmp	r3, #32
 8004e0a:	d867      	bhi.n	8004edc <HAL_TIM_ConfigClockSource+0x1f0>
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d05c      	beq.n	8004eca <HAL_TIM_ConfigClockSource+0x1de>
 8004e10:	2b10      	cmp	r3, #16
 8004e12:	d05a      	beq.n	8004eca <HAL_TIM_ConfigClockSource+0x1de>
 8004e14:	e062      	b.n	8004edc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6818      	ldr	r0, [r3, #0]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	6899      	ldr	r1, [r3, #8]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685a      	ldr	r2, [r3, #4]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	f000 fd61 	bl	80058ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	609a      	str	r2, [r3, #8]
      break;
 8004e42:	e04f      	b.n	8004ee4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6818      	ldr	r0, [r3, #0]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	6899      	ldr	r1, [r3, #8]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	f000 fd4a 	bl	80058ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689a      	ldr	r2, [r3, #8]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e66:	609a      	str	r2, [r3, #8]
      break;
 8004e68:	e03c      	b.n	8004ee4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6818      	ldr	r0, [r3, #0]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	6859      	ldr	r1, [r3, #4]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	461a      	mov	r2, r3
 8004e78:	f000 fcbc 	bl	80057f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2150      	movs	r1, #80	; 0x50
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 fd15 	bl	80058b2 <TIM_ITRx_SetConfig>
      break;
 8004e88:	e02c      	b.n	8004ee4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6818      	ldr	r0, [r3, #0]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	6859      	ldr	r1, [r3, #4]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	461a      	mov	r2, r3
 8004e98:	f000 fcdb 	bl	8005852 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2160      	movs	r1, #96	; 0x60
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 fd05 	bl	80058b2 <TIM_ITRx_SetConfig>
      break;
 8004ea8:	e01c      	b.n	8004ee4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6818      	ldr	r0, [r3, #0]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	6859      	ldr	r1, [r3, #4]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	f000 fc9c 	bl	80057f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2140      	movs	r1, #64	; 0x40
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 fcf5 	bl	80058b2 <TIM_ITRx_SetConfig>
      break;
 8004ec8:	e00c      	b.n	8004ee4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	4610      	mov	r0, r2
 8004ed6:	f000 fcec 	bl	80058b2 <TIM_ITRx_SetConfig>
      break;
 8004eda:	e003      	b.n	8004ee4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	73fb      	strb	r3, [r7, #15]
      break;
 8004ee0:	e000      	b.n	8004ee4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004ee2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	00100070 	.word	0x00100070
 8004f04:	00100060 	.word	0x00100060
 8004f08:	00100050 	.word	0x00100050
 8004f0c:	00100040 	.word	0x00100040
 8004f10:	00100030 	.word	0x00100030
 8004f14:	00100020 	.word	0x00100020

08004f18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a46      	ldr	r2, [pc, #280]	; (8005094 <TIM_Base_SetConfig+0x12c>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d017      	beq.n	8004fb0 <TIM_Base_SetConfig+0x48>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f86:	d013      	beq.n	8004fb0 <TIM_Base_SetConfig+0x48>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a43      	ldr	r2, [pc, #268]	; (8005098 <TIM_Base_SetConfig+0x130>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d00f      	beq.n	8004fb0 <TIM_Base_SetConfig+0x48>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a42      	ldr	r2, [pc, #264]	; (800509c <TIM_Base_SetConfig+0x134>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d00b      	beq.n	8004fb0 <TIM_Base_SetConfig+0x48>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a41      	ldr	r2, [pc, #260]	; (80050a0 <TIM_Base_SetConfig+0x138>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d007      	beq.n	8004fb0 <TIM_Base_SetConfig+0x48>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a40      	ldr	r2, [pc, #256]	; (80050a4 <TIM_Base_SetConfig+0x13c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d003      	beq.n	8004fb0 <TIM_Base_SetConfig+0x48>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a3f      	ldr	r2, [pc, #252]	; (80050a8 <TIM_Base_SetConfig+0x140>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d108      	bne.n	8004fc2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a33      	ldr	r2, [pc, #204]	; (8005094 <TIM_Base_SetConfig+0x12c>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d023      	beq.n	8005012 <TIM_Base_SetConfig+0xaa>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd0:	d01f      	beq.n	8005012 <TIM_Base_SetConfig+0xaa>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a30      	ldr	r2, [pc, #192]	; (8005098 <TIM_Base_SetConfig+0x130>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d01b      	beq.n	8005012 <TIM_Base_SetConfig+0xaa>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a2f      	ldr	r2, [pc, #188]	; (800509c <TIM_Base_SetConfig+0x134>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d017      	beq.n	8005012 <TIM_Base_SetConfig+0xaa>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a2e      	ldr	r2, [pc, #184]	; (80050a0 <TIM_Base_SetConfig+0x138>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d013      	beq.n	8005012 <TIM_Base_SetConfig+0xaa>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a2d      	ldr	r2, [pc, #180]	; (80050a4 <TIM_Base_SetConfig+0x13c>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d00f      	beq.n	8005012 <TIM_Base_SetConfig+0xaa>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a2d      	ldr	r2, [pc, #180]	; (80050ac <TIM_Base_SetConfig+0x144>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d00b      	beq.n	8005012 <TIM_Base_SetConfig+0xaa>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a2c      	ldr	r2, [pc, #176]	; (80050b0 <TIM_Base_SetConfig+0x148>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d007      	beq.n	8005012 <TIM_Base_SetConfig+0xaa>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a2b      	ldr	r2, [pc, #172]	; (80050b4 <TIM_Base_SetConfig+0x14c>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d003      	beq.n	8005012 <TIM_Base_SetConfig+0xaa>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a26      	ldr	r2, [pc, #152]	; (80050a8 <TIM_Base_SetConfig+0x140>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d108      	bne.n	8005024 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005018:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	4313      	orrs	r3, r2
 8005022:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	4313      	orrs	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	689a      	ldr	r2, [r3, #8]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a12      	ldr	r2, [pc, #72]	; (8005094 <TIM_Base_SetConfig+0x12c>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d013      	beq.n	8005078 <TIM_Base_SetConfig+0x110>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a14      	ldr	r2, [pc, #80]	; (80050a4 <TIM_Base_SetConfig+0x13c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d00f      	beq.n	8005078 <TIM_Base_SetConfig+0x110>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a14      	ldr	r2, [pc, #80]	; (80050ac <TIM_Base_SetConfig+0x144>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d00b      	beq.n	8005078 <TIM_Base_SetConfig+0x110>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a13      	ldr	r2, [pc, #76]	; (80050b0 <TIM_Base_SetConfig+0x148>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d007      	beq.n	8005078 <TIM_Base_SetConfig+0x110>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a12      	ldr	r2, [pc, #72]	; (80050b4 <TIM_Base_SetConfig+0x14c>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d003      	beq.n	8005078 <TIM_Base_SetConfig+0x110>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a0d      	ldr	r2, [pc, #52]	; (80050a8 <TIM_Base_SetConfig+0x140>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d103      	bne.n	8005080 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	691a      	ldr	r2, [r3, #16]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	615a      	str	r2, [r3, #20]
}
 8005086:	bf00      	nop
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	40012c00 	.word	0x40012c00
 8005098:	40000400 	.word	0x40000400
 800509c:	40000800 	.word	0x40000800
 80050a0:	40000c00 	.word	0x40000c00
 80050a4:	40013400 	.word	0x40013400
 80050a8:	40015000 	.word	0x40015000
 80050ac:	40014000 	.word	0x40014000
 80050b0:	40014400 	.word	0x40014400
 80050b4:	40014800 	.word	0x40014800

080050b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b087      	sub	sp, #28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	f023 0201 	bic.w	r2, r3, #1
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f023 0303 	bic.w	r3, r3, #3
 80050f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f023 0302 	bic.w	r3, r3, #2
 8005104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	4313      	orrs	r3, r2
 800510e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a30      	ldr	r2, [pc, #192]	; (80051d4 <TIM_OC1_SetConfig+0x11c>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d013      	beq.n	8005140 <TIM_OC1_SetConfig+0x88>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a2f      	ldr	r2, [pc, #188]	; (80051d8 <TIM_OC1_SetConfig+0x120>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d00f      	beq.n	8005140 <TIM_OC1_SetConfig+0x88>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a2e      	ldr	r2, [pc, #184]	; (80051dc <TIM_OC1_SetConfig+0x124>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d00b      	beq.n	8005140 <TIM_OC1_SetConfig+0x88>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a2d      	ldr	r2, [pc, #180]	; (80051e0 <TIM_OC1_SetConfig+0x128>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d007      	beq.n	8005140 <TIM_OC1_SetConfig+0x88>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a2c      	ldr	r2, [pc, #176]	; (80051e4 <TIM_OC1_SetConfig+0x12c>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d003      	beq.n	8005140 <TIM_OC1_SetConfig+0x88>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a2b      	ldr	r2, [pc, #172]	; (80051e8 <TIM_OC1_SetConfig+0x130>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d10c      	bne.n	800515a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f023 0308 	bic.w	r3, r3, #8
 8005146:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	4313      	orrs	r3, r2
 8005150:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f023 0304 	bic.w	r3, r3, #4
 8005158:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a1d      	ldr	r2, [pc, #116]	; (80051d4 <TIM_OC1_SetConfig+0x11c>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d013      	beq.n	800518a <TIM_OC1_SetConfig+0xd2>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a1c      	ldr	r2, [pc, #112]	; (80051d8 <TIM_OC1_SetConfig+0x120>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d00f      	beq.n	800518a <TIM_OC1_SetConfig+0xd2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a1b      	ldr	r2, [pc, #108]	; (80051dc <TIM_OC1_SetConfig+0x124>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d00b      	beq.n	800518a <TIM_OC1_SetConfig+0xd2>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a1a      	ldr	r2, [pc, #104]	; (80051e0 <TIM_OC1_SetConfig+0x128>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d007      	beq.n	800518a <TIM_OC1_SetConfig+0xd2>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a19      	ldr	r2, [pc, #100]	; (80051e4 <TIM_OC1_SetConfig+0x12c>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d003      	beq.n	800518a <TIM_OC1_SetConfig+0xd2>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a18      	ldr	r2, [pc, #96]	; (80051e8 <TIM_OC1_SetConfig+0x130>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d111      	bne.n	80051ae <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005190:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005198:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	621a      	str	r2, [r3, #32]
}
 80051c8:	bf00      	nop
 80051ca:	371c      	adds	r7, #28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	40012c00 	.word	0x40012c00
 80051d8:	40013400 	.word	0x40013400
 80051dc:	40014000 	.word	0x40014000
 80051e0:	40014400 	.word	0x40014400
 80051e4:	40014800 	.word	0x40014800
 80051e8:	40015000 	.word	0x40015000

080051ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b087      	sub	sp, #28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	f023 0210 	bic.w	r2, r3, #16
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800521a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800521e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005226:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	021b      	lsls	r3, r3, #8
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	4313      	orrs	r3, r2
 8005232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f023 0320 	bic.w	r3, r3, #32
 800523a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	011b      	lsls	r3, r3, #4
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	4313      	orrs	r3, r2
 8005246:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a2c      	ldr	r2, [pc, #176]	; (80052fc <TIM_OC2_SetConfig+0x110>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d007      	beq.n	8005260 <TIM_OC2_SetConfig+0x74>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a2b      	ldr	r2, [pc, #172]	; (8005300 <TIM_OC2_SetConfig+0x114>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d003      	beq.n	8005260 <TIM_OC2_SetConfig+0x74>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a2a      	ldr	r2, [pc, #168]	; (8005304 <TIM_OC2_SetConfig+0x118>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d10d      	bne.n	800527c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005266:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	011b      	lsls	r3, r3, #4
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	4313      	orrs	r3, r2
 8005272:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800527a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a1f      	ldr	r2, [pc, #124]	; (80052fc <TIM_OC2_SetConfig+0x110>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d013      	beq.n	80052ac <TIM_OC2_SetConfig+0xc0>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a1e      	ldr	r2, [pc, #120]	; (8005300 <TIM_OC2_SetConfig+0x114>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d00f      	beq.n	80052ac <TIM_OC2_SetConfig+0xc0>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a1e      	ldr	r2, [pc, #120]	; (8005308 <TIM_OC2_SetConfig+0x11c>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d00b      	beq.n	80052ac <TIM_OC2_SetConfig+0xc0>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a1d      	ldr	r2, [pc, #116]	; (800530c <TIM_OC2_SetConfig+0x120>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d007      	beq.n	80052ac <TIM_OC2_SetConfig+0xc0>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a1c      	ldr	r2, [pc, #112]	; (8005310 <TIM_OC2_SetConfig+0x124>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d003      	beq.n	80052ac <TIM_OC2_SetConfig+0xc0>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a17      	ldr	r2, [pc, #92]	; (8005304 <TIM_OC2_SetConfig+0x118>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d113      	bne.n	80052d4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	621a      	str	r2, [r3, #32]
}
 80052ee:	bf00      	nop
 80052f0:	371c      	adds	r7, #28
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	40012c00 	.word	0x40012c00
 8005300:	40013400 	.word	0x40013400
 8005304:	40015000 	.word	0x40015000
 8005308:	40014000 	.word	0x40014000
 800530c:	40014400 	.word	0x40014400
 8005310:	40014800 	.word	0x40014800

08005314 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005314:	b480      	push	{r7}
 8005316:	b087      	sub	sp, #28
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f023 0303 	bic.w	r3, r3, #3
 800534e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	4313      	orrs	r3, r2
 8005358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005360:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	021b      	lsls	r3, r3, #8
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	4313      	orrs	r3, r2
 800536c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a2b      	ldr	r2, [pc, #172]	; (8005420 <TIM_OC3_SetConfig+0x10c>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d007      	beq.n	8005386 <TIM_OC3_SetConfig+0x72>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a2a      	ldr	r2, [pc, #168]	; (8005424 <TIM_OC3_SetConfig+0x110>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d003      	beq.n	8005386 <TIM_OC3_SetConfig+0x72>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a29      	ldr	r2, [pc, #164]	; (8005428 <TIM_OC3_SetConfig+0x114>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d10d      	bne.n	80053a2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800538c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	021b      	lsls	r3, r3, #8
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	4313      	orrs	r3, r2
 8005398:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a1e      	ldr	r2, [pc, #120]	; (8005420 <TIM_OC3_SetConfig+0x10c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d013      	beq.n	80053d2 <TIM_OC3_SetConfig+0xbe>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a1d      	ldr	r2, [pc, #116]	; (8005424 <TIM_OC3_SetConfig+0x110>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d00f      	beq.n	80053d2 <TIM_OC3_SetConfig+0xbe>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a1d      	ldr	r2, [pc, #116]	; (800542c <TIM_OC3_SetConfig+0x118>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d00b      	beq.n	80053d2 <TIM_OC3_SetConfig+0xbe>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a1c      	ldr	r2, [pc, #112]	; (8005430 <TIM_OC3_SetConfig+0x11c>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d007      	beq.n	80053d2 <TIM_OC3_SetConfig+0xbe>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a1b      	ldr	r2, [pc, #108]	; (8005434 <TIM_OC3_SetConfig+0x120>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d003      	beq.n	80053d2 <TIM_OC3_SetConfig+0xbe>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a16      	ldr	r2, [pc, #88]	; (8005428 <TIM_OC3_SetConfig+0x114>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d113      	bne.n	80053fa <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	011b      	lsls	r3, r3, #4
 80053e8:	693a      	ldr	r2, [r7, #16]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	011b      	lsls	r3, r3, #4
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	621a      	str	r2, [r3, #32]
}
 8005414:	bf00      	nop
 8005416:	371c      	adds	r7, #28
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	40012c00 	.word	0x40012c00
 8005424:	40013400 	.word	0x40013400
 8005428:	40015000 	.word	0x40015000
 800542c:	40014000 	.word	0x40014000
 8005430:	40014400 	.word	0x40014400
 8005434:	40014800 	.word	0x40014800

08005438 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005438:	b480      	push	{r7}
 800543a:	b087      	sub	sp, #28
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800546a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005472:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	021b      	lsls	r3, r3, #8
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4313      	orrs	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005486:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	031b      	lsls	r3, r3, #12
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	4313      	orrs	r3, r2
 8005492:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a2c      	ldr	r2, [pc, #176]	; (8005548 <TIM_OC4_SetConfig+0x110>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d007      	beq.n	80054ac <TIM_OC4_SetConfig+0x74>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a2b      	ldr	r2, [pc, #172]	; (800554c <TIM_OC4_SetConfig+0x114>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d003      	beq.n	80054ac <TIM_OC4_SetConfig+0x74>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a2a      	ldr	r2, [pc, #168]	; (8005550 <TIM_OC4_SetConfig+0x118>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d10d      	bne.n	80054c8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	031b      	lsls	r3, r3, #12
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	4313      	orrs	r3, r2
 80054be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a1f      	ldr	r2, [pc, #124]	; (8005548 <TIM_OC4_SetConfig+0x110>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d013      	beq.n	80054f8 <TIM_OC4_SetConfig+0xc0>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a1e      	ldr	r2, [pc, #120]	; (800554c <TIM_OC4_SetConfig+0x114>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d00f      	beq.n	80054f8 <TIM_OC4_SetConfig+0xc0>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a1e      	ldr	r2, [pc, #120]	; (8005554 <TIM_OC4_SetConfig+0x11c>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d00b      	beq.n	80054f8 <TIM_OC4_SetConfig+0xc0>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a1d      	ldr	r2, [pc, #116]	; (8005558 <TIM_OC4_SetConfig+0x120>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d007      	beq.n	80054f8 <TIM_OC4_SetConfig+0xc0>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a1c      	ldr	r2, [pc, #112]	; (800555c <TIM_OC4_SetConfig+0x124>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d003      	beq.n	80054f8 <TIM_OC4_SetConfig+0xc0>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a17      	ldr	r2, [pc, #92]	; (8005550 <TIM_OC4_SetConfig+0x118>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d113      	bne.n	8005520 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054fe:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005506:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	019b      	lsls	r3, r3, #6
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	4313      	orrs	r3, r2
 8005512:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	019b      	lsls	r3, r3, #6
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	4313      	orrs	r3, r2
 800551e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	621a      	str	r2, [r3, #32]
}
 800553a:	bf00      	nop
 800553c:	371c      	adds	r7, #28
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	40012c00 	.word	0x40012c00
 800554c:	40013400 	.word	0x40013400
 8005550:	40015000 	.word	0x40015000
 8005554:	40014000 	.word	0x40014000
 8005558:	40014400 	.word	0x40014400
 800555c:	40014800 	.word	0x40014800

08005560 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005560:	b480      	push	{r7}
 8005562:	b087      	sub	sp, #28
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800558e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	4313      	orrs	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80055a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	041b      	lsls	r3, r3, #16
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a19      	ldr	r2, [pc, #100]	; (800561c <TIM_OC5_SetConfig+0xbc>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d013      	beq.n	80055e2 <TIM_OC5_SetConfig+0x82>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a18      	ldr	r2, [pc, #96]	; (8005620 <TIM_OC5_SetConfig+0xc0>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d00f      	beq.n	80055e2 <TIM_OC5_SetConfig+0x82>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a17      	ldr	r2, [pc, #92]	; (8005624 <TIM_OC5_SetConfig+0xc4>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d00b      	beq.n	80055e2 <TIM_OC5_SetConfig+0x82>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a16      	ldr	r2, [pc, #88]	; (8005628 <TIM_OC5_SetConfig+0xc8>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d007      	beq.n	80055e2 <TIM_OC5_SetConfig+0x82>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a15      	ldr	r2, [pc, #84]	; (800562c <TIM_OC5_SetConfig+0xcc>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d003      	beq.n	80055e2 <TIM_OC5_SetConfig+0x82>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a14      	ldr	r2, [pc, #80]	; (8005630 <TIM_OC5_SetConfig+0xd0>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d109      	bne.n	80055f6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	021b      	lsls	r3, r3, #8
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	621a      	str	r2, [r3, #32]
}
 8005610:	bf00      	nop
 8005612:	371c      	adds	r7, #28
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	40012c00 	.word	0x40012c00
 8005620:	40013400 	.word	0x40013400
 8005624:	40014000 	.word	0x40014000
 8005628:	40014400 	.word	0x40014400
 800562c:	40014800 	.word	0x40014800
 8005630:	40015000 	.word	0x40015000

08005634 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005634:	b480      	push	{r7}
 8005636:	b087      	sub	sp, #28
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800565a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	021b      	lsls	r3, r3, #8
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	4313      	orrs	r3, r2
 8005672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800567a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	051b      	lsls	r3, r3, #20
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	4313      	orrs	r3, r2
 8005686:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a1a      	ldr	r2, [pc, #104]	; (80056f4 <TIM_OC6_SetConfig+0xc0>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d013      	beq.n	80056b8 <TIM_OC6_SetConfig+0x84>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a19      	ldr	r2, [pc, #100]	; (80056f8 <TIM_OC6_SetConfig+0xc4>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d00f      	beq.n	80056b8 <TIM_OC6_SetConfig+0x84>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a18      	ldr	r2, [pc, #96]	; (80056fc <TIM_OC6_SetConfig+0xc8>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d00b      	beq.n	80056b8 <TIM_OC6_SetConfig+0x84>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a17      	ldr	r2, [pc, #92]	; (8005700 <TIM_OC6_SetConfig+0xcc>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d007      	beq.n	80056b8 <TIM_OC6_SetConfig+0x84>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a16      	ldr	r2, [pc, #88]	; (8005704 <TIM_OC6_SetConfig+0xd0>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d003      	beq.n	80056b8 <TIM_OC6_SetConfig+0x84>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a15      	ldr	r2, [pc, #84]	; (8005708 <TIM_OC6_SetConfig+0xd4>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d109      	bne.n	80056cc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	695b      	ldr	r3, [r3, #20]
 80056c4:	029b      	lsls	r3, r3, #10
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	621a      	str	r2, [r3, #32]
}
 80056e6:	bf00      	nop
 80056e8:	371c      	adds	r7, #28
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	40012c00 	.word	0x40012c00
 80056f8:	40013400 	.word	0x40013400
 80056fc:	40014000 	.word	0x40014000
 8005700:	40014400 	.word	0x40014400
 8005704:	40014800 	.word	0x40014800
 8005708:	40015000 	.word	0x40015000

0800570c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800570c:	b480      	push	{r7}
 800570e:	b087      	sub	sp, #28
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
 8005718:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	f023 0201 	bic.w	r2, r3, #1
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6a1b      	ldr	r3, [r3, #32]
 8005730:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	4a28      	ldr	r2, [pc, #160]	; (80057d8 <TIM_TI1_SetConfig+0xcc>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d01b      	beq.n	8005772 <TIM_TI1_SetConfig+0x66>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005740:	d017      	beq.n	8005772 <TIM_TI1_SetConfig+0x66>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	4a25      	ldr	r2, [pc, #148]	; (80057dc <TIM_TI1_SetConfig+0xd0>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d013      	beq.n	8005772 <TIM_TI1_SetConfig+0x66>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	4a24      	ldr	r2, [pc, #144]	; (80057e0 <TIM_TI1_SetConfig+0xd4>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d00f      	beq.n	8005772 <TIM_TI1_SetConfig+0x66>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	4a23      	ldr	r2, [pc, #140]	; (80057e4 <TIM_TI1_SetConfig+0xd8>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d00b      	beq.n	8005772 <TIM_TI1_SetConfig+0x66>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	4a22      	ldr	r2, [pc, #136]	; (80057e8 <TIM_TI1_SetConfig+0xdc>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d007      	beq.n	8005772 <TIM_TI1_SetConfig+0x66>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	4a21      	ldr	r2, [pc, #132]	; (80057ec <TIM_TI1_SetConfig+0xe0>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d003      	beq.n	8005772 <TIM_TI1_SetConfig+0x66>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	4a20      	ldr	r2, [pc, #128]	; (80057f0 <TIM_TI1_SetConfig+0xe4>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d101      	bne.n	8005776 <TIM_TI1_SetConfig+0x6a>
 8005772:	2301      	movs	r3, #1
 8005774:	e000      	b.n	8005778 <TIM_TI1_SetConfig+0x6c>
 8005776:	2300      	movs	r3, #0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d008      	beq.n	800578e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f023 0303 	bic.w	r3, r3, #3
 8005782:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4313      	orrs	r3, r2
 800578a:	617b      	str	r3, [r7, #20]
 800578c:	e003      	b.n	8005796 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f043 0301 	orr.w	r3, r3, #1
 8005794:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800579c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	011b      	lsls	r3, r3, #4
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	f023 030a 	bic.w	r3, r3, #10
 80057b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	f003 030a 	and.w	r3, r3, #10
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	621a      	str	r2, [r3, #32]
}
 80057ca:	bf00      	nop
 80057cc:	371c      	adds	r7, #28
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	40012c00 	.word	0x40012c00
 80057dc:	40000400 	.word	0x40000400
 80057e0:	40000800 	.word	0x40000800
 80057e4:	40000c00 	.word	0x40000c00
 80057e8:	40013400 	.word	0x40013400
 80057ec:	40014000 	.word	0x40014000
 80057f0:	40015000 	.word	0x40015000

080057f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b087      	sub	sp, #28
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6a1b      	ldr	r3, [r3, #32]
 8005804:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	f023 0201 	bic.w	r2, r3, #1
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800581e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	011b      	lsls	r3, r3, #4
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	4313      	orrs	r3, r2
 8005828:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f023 030a 	bic.w	r3, r3, #10
 8005830:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	4313      	orrs	r3, r2
 8005838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	621a      	str	r2, [r3, #32]
}
 8005846:	bf00      	nop
 8005848:	371c      	adds	r7, #28
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr

08005852 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005852:	b480      	push	{r7}
 8005854:	b087      	sub	sp, #28
 8005856:	af00      	add	r7, sp, #0
 8005858:	60f8      	str	r0, [r7, #12]
 800585a:	60b9      	str	r1, [r7, #8]
 800585c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	f023 0210 	bic.w	r2, r3, #16
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800587c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	031b      	lsls	r3, r3, #12
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	4313      	orrs	r3, r2
 8005886:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800588e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	011b      	lsls	r3, r3, #4
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	4313      	orrs	r3, r2
 8005898:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	621a      	str	r2, [r3, #32]
}
 80058a6:	bf00      	nop
 80058a8:	371c      	adds	r7, #28
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b085      	sub	sp, #20
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
 80058ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80058c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058ce:	683a      	ldr	r2, [r7, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	f043 0307 	orr.w	r3, r3, #7
 80058d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	609a      	str	r2, [r3, #8]
}
 80058e0:	bf00      	nop
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b087      	sub	sp, #28
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
 80058f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005906:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	021a      	lsls	r2, r3, #8
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	431a      	orrs	r2, r3
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	4313      	orrs	r3, r2
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	4313      	orrs	r3, r2
 8005918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	609a      	str	r2, [r3, #8]
}
 8005920:	bf00      	nop
 8005922:	371c      	adds	r7, #28
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800592c:	b480      	push	{r7}
 800592e:	b087      	sub	sp, #28
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	f003 031f 	and.w	r3, r3, #31
 800593e:	2201      	movs	r2, #1
 8005940:	fa02 f303 	lsl.w	r3, r2, r3
 8005944:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6a1a      	ldr	r2, [r3, #32]
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	43db      	mvns	r3, r3
 800594e:	401a      	ands	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6a1a      	ldr	r2, [r3, #32]
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	f003 031f 	and.w	r3, r3, #31
 800595e:	6879      	ldr	r1, [r7, #4]
 8005960:	fa01 f303 	lsl.w	r3, r1, r3
 8005964:	431a      	orrs	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	621a      	str	r2, [r3, #32]
}
 800596a:	bf00      	nop
 800596c:	371c      	adds	r7, #28
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b08a      	sub	sp, #40	; 0x28
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
 800597e:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e0a0      	b.n	8005acc <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d106      	bne.n	80059a4 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f7fb fd9a 	bl	80014d8 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2202      	movs	r2, #2
 80059a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	3304      	adds	r3, #4
 80059b4:	4619      	mov	r1, r3
 80059b6:	4610      	mov	r0, r2
 80059b8:	f7ff fad6 	bl	8004f68 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6818      	ldr	r0, [r3, #0]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	6819      	ldr	r1, [r3, #0]
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	2203      	movs	r2, #3
 80059ca:	f7ff fe9f 	bl	800570c <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	699a      	ldr	r2, [r3, #24]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f022 020c 	bic.w	r2, r2, #12
 80059dc:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	6999      	ldr	r1, [r3, #24]
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	685a      	ldr	r2, [r3, #4]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	430a      	orrs	r2, r1
 80059ee:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80059fe:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	6812      	ldr	r2, [r2, #0]
 8005a0a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a12:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689a      	ldr	r2, [r3, #8]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a22:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	6812      	ldr	r2, [r2, #0]
 8005a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a32:	f023 0307 	bic.w	r3, r3, #7
 8005a36:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689a      	ldr	r2, [r3, #8]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 0204 	orr.w	r2, r2, #4
 8005a46:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8005a50:	2370      	movs	r3, #112	; 0x70
 8005a52:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005a54:	2300      	movs	r3, #0
 8005a56:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f107 020c 	add.w	r2, r7, #12
 8005a6e:	4611      	mov	r1, r2
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7ff fbbb 	bl	80051ec <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	6812      	ldr	r2, [r2, #0]
 8005a80:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005a84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a88:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	685a      	ldr	r2, [r3, #4]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8005a98:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3728      	adds	r7, #40	; 0x28
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d109      	bne.n	8005af8 <HAL_TIMEx_PWMN_Start+0x24>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	bf14      	ite	ne
 8005af0:	2301      	movne	r3, #1
 8005af2:	2300      	moveq	r3, #0
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	e022      	b.n	8005b3e <HAL_TIMEx_PWMN_Start+0x6a>
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	2b04      	cmp	r3, #4
 8005afc:	d109      	bne.n	8005b12 <HAL_TIMEx_PWMN_Start+0x3e>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	bf14      	ite	ne
 8005b0a:	2301      	movne	r3, #1
 8005b0c:	2300      	moveq	r3, #0
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	e015      	b.n	8005b3e <HAL_TIMEx_PWMN_Start+0x6a>
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b08      	cmp	r3, #8
 8005b16:	d109      	bne.n	8005b2c <HAL_TIMEx_PWMN_Start+0x58>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	bf14      	ite	ne
 8005b24:	2301      	movne	r3, #1
 8005b26:	2300      	moveq	r3, #0
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	e008      	b.n	8005b3e <HAL_TIMEx_PWMN_Start+0x6a>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	bf14      	ite	ne
 8005b38:	2301      	movne	r3, #1
 8005b3a:	2300      	moveq	r3, #0
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d001      	beq.n	8005b46 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e073      	b.n	8005c2e <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d104      	bne.n	8005b56 <HAL_TIMEx_PWMN_Start+0x82>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2202      	movs	r2, #2
 8005b50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b54:	e013      	b.n	8005b7e <HAL_TIMEx_PWMN_Start+0xaa>
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	2b04      	cmp	r3, #4
 8005b5a:	d104      	bne.n	8005b66 <HAL_TIMEx_PWMN_Start+0x92>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b64:	e00b      	b.n	8005b7e <HAL_TIMEx_PWMN_Start+0xaa>
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	2b08      	cmp	r3, #8
 8005b6a:	d104      	bne.n	8005b76 <HAL_TIMEx_PWMN_Start+0xa2>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2202      	movs	r2, #2
 8005b70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b74:	e003      	b.n	8005b7e <HAL_TIMEx_PWMN_Start+0xaa>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2202      	movs	r2, #2
 8005b7a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2204      	movs	r2, #4
 8005b84:	6839      	ldr	r1, [r7, #0]
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 fa07 	bl	8005f9a <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b9a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a25      	ldr	r2, [pc, #148]	; (8005c38 <HAL_TIMEx_PWMN_Start+0x164>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d022      	beq.n	8005bec <HAL_TIMEx_PWMN_Start+0x118>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bae:	d01d      	beq.n	8005bec <HAL_TIMEx_PWMN_Start+0x118>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a21      	ldr	r2, [pc, #132]	; (8005c3c <HAL_TIMEx_PWMN_Start+0x168>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d018      	beq.n	8005bec <HAL_TIMEx_PWMN_Start+0x118>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a20      	ldr	r2, [pc, #128]	; (8005c40 <HAL_TIMEx_PWMN_Start+0x16c>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d013      	beq.n	8005bec <HAL_TIMEx_PWMN_Start+0x118>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a1e      	ldr	r2, [pc, #120]	; (8005c44 <HAL_TIMEx_PWMN_Start+0x170>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d00e      	beq.n	8005bec <HAL_TIMEx_PWMN_Start+0x118>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a1d      	ldr	r2, [pc, #116]	; (8005c48 <HAL_TIMEx_PWMN_Start+0x174>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d009      	beq.n	8005bec <HAL_TIMEx_PWMN_Start+0x118>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a1b      	ldr	r2, [pc, #108]	; (8005c4c <HAL_TIMEx_PWMN_Start+0x178>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d004      	beq.n	8005bec <HAL_TIMEx_PWMN_Start+0x118>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a1a      	ldr	r2, [pc, #104]	; (8005c50 <HAL_TIMEx_PWMN_Start+0x17c>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d115      	bne.n	8005c18 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	689a      	ldr	r2, [r3, #8]
 8005bf2:	4b18      	ldr	r3, [pc, #96]	; (8005c54 <HAL_TIMEx_PWMN_Start+0x180>)
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2b06      	cmp	r3, #6
 8005bfc:	d015      	beq.n	8005c2a <HAL_TIMEx_PWMN_Start+0x156>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c04:	d011      	beq.n	8005c2a <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f042 0201 	orr.w	r2, r2, #1
 8005c14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c16:	e008      	b.n	8005c2a <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f042 0201 	orr.w	r2, r2, #1
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	e000      	b.n	8005c2c <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	40012c00 	.word	0x40012c00
 8005c3c:	40000400 	.word	0x40000400
 8005c40:	40000800 	.word	0x40000800
 8005c44:	40000c00 	.word	0x40000c00
 8005c48:	40013400 	.word	0x40013400
 8005c4c:	40014000 	.word	0x40014000
 8005c50:	40015000 	.word	0x40015000
 8005c54:	00010007 	.word	0x00010007

08005c58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d101      	bne.n	8005c70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	e074      	b.n	8005d5a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a34      	ldr	r2, [pc, #208]	; (8005d68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d009      	beq.n	8005cae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a33      	ldr	r2, [pc, #204]	; (8005d6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d004      	beq.n	8005cae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a31      	ldr	r2, [pc, #196]	; (8005d70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d108      	bne.n	8005cc0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005cb4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a21      	ldr	r2, [pc, #132]	; (8005d68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d022      	beq.n	8005d2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cf0:	d01d      	beq.n	8005d2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a1f      	ldr	r2, [pc, #124]	; (8005d74 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d018      	beq.n	8005d2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a1d      	ldr	r2, [pc, #116]	; (8005d78 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d013      	beq.n	8005d2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a1c      	ldr	r2, [pc, #112]	; (8005d7c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d00e      	beq.n	8005d2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a15      	ldr	r2, [pc, #84]	; (8005d6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d009      	beq.n	8005d2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a18      	ldr	r2, [pc, #96]	; (8005d80 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d004      	beq.n	8005d2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a11      	ldr	r2, [pc, #68]	; (8005d70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d10c      	bne.n	8005d48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3714      	adds	r7, #20
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	40012c00 	.word	0x40012c00
 8005d6c:	40013400 	.word	0x40013400
 8005d70:	40015000 	.word	0x40015000
 8005d74:	40000400 	.word	0x40000400
 8005d78:	40000800 	.word	0x40000800
 8005d7c:	40000c00 	.word	0x40000c00
 8005d80:	40014000 	.word	0x40014000

08005d84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d101      	bne.n	8005da0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	e096      	b.n	8005ece <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	695b      	ldr	r3, [r3, #20]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e06:	4313      	orrs	r3, r2
 8005e08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	041b      	lsls	r3, r3, #16
 8005e16:	4313      	orrs	r3, r2
 8005e18:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a2f      	ldr	r2, [pc, #188]	; (8005edc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d009      	beq.n	8005e38 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a2d      	ldr	r2, [pc, #180]	; (8005ee0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d004      	beq.n	8005e38 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a2c      	ldr	r2, [pc, #176]	; (8005ee4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d106      	bne.n	8005e46 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a24      	ldr	r2, [pc, #144]	; (8005edc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d009      	beq.n	8005e64 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a22      	ldr	r2, [pc, #136]	; (8005ee0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d004      	beq.n	8005e64 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a21      	ldr	r2, [pc, #132]	; (8005ee4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d12b      	bne.n	8005ebc <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6e:	051b      	lsls	r3, r3, #20
 8005e70:	4313      	orrs	r3, r2
 8005e72:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a11      	ldr	r2, [pc, #68]	; (8005edc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d009      	beq.n	8005eae <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a10      	ldr	r2, [pc, #64]	; (8005ee0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d004      	beq.n	8005eae <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a0e      	ldr	r2, [pc, #56]	; (8005ee4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d106      	bne.n	8005ebc <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3714      	adds	r7, #20
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	40012c00 	.word	0x40012c00
 8005ee0:	40013400 	.word	0x40013400
 8005ee4:	40015000 	.word	0x40015000

08005ee8 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005efe:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	370c      	adds	r7, #12
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr

08005f0e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b083      	sub	sp, #12
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f16:	bf00      	nop
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b083      	sub	sp, #12
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f2a:	bf00      	nop
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b083      	sub	sp, #12
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f3e:	bf00      	nop
 8005f40:	370c      	adds	r7, #12
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b083      	sub	sp, #12
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005f52:	bf00      	nop
 8005f54:	370c      	adds	r7, #12
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b083      	sub	sp, #12
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005f66:	bf00      	nop
 8005f68:	370c      	adds	r7, #12
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b083      	sub	sp, #12
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005f7a:	bf00      	nop
 8005f7c:	370c      	adds	r7, #12
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b083      	sub	sp, #12
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005f8e:	bf00      	nop
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr

08005f9a <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b087      	sub	sp, #28
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	60f8      	str	r0, [r7, #12]
 8005fa2:	60b9      	str	r1, [r7, #8]
 8005fa4:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	f003 031f 	and.w	r3, r3, #31
 8005fac:	2204      	movs	r2, #4
 8005fae:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6a1a      	ldr	r2, [r3, #32]
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	43db      	mvns	r3, r3
 8005fbc:	401a      	ands	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6a1a      	ldr	r2, [r3, #32]
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	f003 031f 	and.w	r3, r3, #31
 8005fcc:	6879      	ldr	r1, [r7, #4]
 8005fce:	fa01 f303 	lsl.w	r3, r1, r3
 8005fd2:	431a      	orrs	r2, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	621a      	str	r2, [r3, #32]
}
 8005fd8:	bf00      	nop
 8005fda:	371c      	adds	r7, #28
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e042      	b.n	800607c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d106      	bne.n	800600e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f7fb fbc7 	bl	800179c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2224      	movs	r2, #36	; 0x24
 8006012:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f022 0201 	bic.w	r2, r2, #1
 8006024:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 fc50 	bl	80068cc <UART_SetConfig>
 800602c:	4603      	mov	r3, r0
 800602e:	2b01      	cmp	r3, #1
 8006030:	d101      	bne.n	8006036 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e022      	b.n	800607c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603a:	2b00      	cmp	r3, #0
 800603c:	d002      	beq.n	8006044 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 ff40 	bl	8006ec4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	685a      	ldr	r2, [r3, #4]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006052:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	689a      	ldr	r2, [r3, #8]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006062:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f042 0201 	orr.w	r2, r2, #1
 8006072:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 ffc7 	bl	8007008 <UART_CheckIdleState>
 800607a:	4603      	mov	r3, r0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3708      	adds	r7, #8
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b08a      	sub	sp, #40	; 0x28
 8006088:	af02      	add	r7, sp, #8
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	603b      	str	r3, [r7, #0]
 8006090:	4613      	mov	r3, r2
 8006092:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800609a:	2b20      	cmp	r3, #32
 800609c:	f040 8083 	bne.w	80061a6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d002      	beq.n	80060ac <HAL_UART_Transmit+0x28>
 80060a6:	88fb      	ldrh	r3, [r7, #6]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e07b      	b.n	80061a8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d101      	bne.n	80060be <HAL_UART_Transmit+0x3a>
 80060ba:	2302      	movs	r3, #2
 80060bc:	e074      	b.n	80061a8 <HAL_UART_Transmit+0x124>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2221      	movs	r2, #33	; 0x21
 80060d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060d6:	f7fb fc55 	bl	8001984 <HAL_GetTick>
 80060da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	88fa      	ldrh	r2, [r7, #6]
 80060e0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	88fa      	ldrh	r2, [r7, #6]
 80060e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060f4:	d108      	bne.n	8006108 <HAL_UART_Transmit+0x84>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d104      	bne.n	8006108 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80060fe:	2300      	movs	r3, #0
 8006100:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	61bb      	str	r3, [r7, #24]
 8006106:	e003      	b.n	8006110 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800610c:	2300      	movs	r3, #0
 800610e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006118:	e02c      	b.n	8006174 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	9300      	str	r3, [sp, #0]
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	2200      	movs	r2, #0
 8006122:	2180      	movs	r1, #128	; 0x80
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f000 ffba 	bl	800709e <UART_WaitOnFlagUntilTimeout>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d001      	beq.n	8006134 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e039      	b.n	80061a8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10b      	bne.n	8006152 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	881b      	ldrh	r3, [r3, #0]
 800613e:	461a      	mov	r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006148:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	3302      	adds	r3, #2
 800614e:	61bb      	str	r3, [r7, #24]
 8006150:	e007      	b.n	8006162 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	781a      	ldrb	r2, [r3, #0]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	3301      	adds	r3, #1
 8006160:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006168:	b29b      	uxth	r3, r3
 800616a:	3b01      	subs	r3, #1
 800616c:	b29a      	uxth	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800617a:	b29b      	uxth	r3, r3
 800617c:	2b00      	cmp	r3, #0
 800617e:	d1cc      	bne.n	800611a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	2200      	movs	r2, #0
 8006188:	2140      	movs	r1, #64	; 0x40
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f000 ff87 	bl	800709e <UART_WaitOnFlagUntilTimeout>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d001      	beq.n	800619a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e006      	b.n	80061a8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2220      	movs	r2, #32
 800619e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80061a2:	2300      	movs	r3, #0
 80061a4:	e000      	b.n	80061a8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80061a6:	2302      	movs	r3, #2
  }
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3720      	adds	r7, #32
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b08a      	sub	sp, #40	; 0x28
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	4613      	mov	r3, r2
 80061bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c4:	2b20      	cmp	r3, #32
 80061c6:	d142      	bne.n	800624e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d002      	beq.n	80061d4 <HAL_UART_Receive_IT+0x24>
 80061ce:	88fb      	ldrh	r3, [r7, #6]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e03b      	b.n	8006250 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d101      	bne.n	80061e6 <HAL_UART_Receive_IT+0x36>
 80061e2:	2302      	movs	r3, #2
 80061e4:	e034      	b.n	8006250 <HAL_UART_Receive_IT+0xa0>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a17      	ldr	r2, [pc, #92]	; (8006258 <HAL_UART_Receive_IT+0xa8>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d01f      	beq.n	800623e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d018      	beq.n	800623e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	e853 3f00 	ldrex	r3, [r3]
 8006218:	613b      	str	r3, [r7, #16]
   return(result);
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006220:	627b      	str	r3, [r7, #36]	; 0x24
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	461a      	mov	r2, r3
 8006228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622a:	623b      	str	r3, [r7, #32]
 800622c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622e:	69f9      	ldr	r1, [r7, #28]
 8006230:	6a3a      	ldr	r2, [r7, #32]
 8006232:	e841 2300 	strex	r3, r2, [r1]
 8006236:	61bb      	str	r3, [r7, #24]
   return(result);
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1e6      	bne.n	800620c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800623e:	88fb      	ldrh	r3, [r7, #6]
 8006240:	461a      	mov	r2, r3
 8006242:	68b9      	ldr	r1, [r7, #8]
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f000 fff3 	bl	8007230 <UART_Start_Receive_IT>
 800624a:	4603      	mov	r3, r0
 800624c:	e000      	b.n	8006250 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800624e:	2302      	movs	r3, #2
  }
}
 8006250:	4618      	mov	r0, r3
 8006252:	3728      	adds	r7, #40	; 0x28
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	40008000 	.word	0x40008000

0800625c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b0ba      	sub	sp, #232	; 0xe8
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	69db      	ldr	r3, [r3, #28]
 800626a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006282:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006286:	f640 030f 	movw	r3, #2063	; 0x80f
 800628a:	4013      	ands	r3, r2
 800628c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006290:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006294:	2b00      	cmp	r3, #0
 8006296:	d11b      	bne.n	80062d0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800629c:	f003 0320 	and.w	r3, r3, #32
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d015      	beq.n	80062d0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80062a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062a8:	f003 0320 	and.w	r3, r3, #32
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d105      	bne.n	80062bc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80062b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d009      	beq.n	80062d0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f000 82d6 	beq.w	8006872 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	4798      	blx	r3
      }
      return;
 80062ce:	e2d0      	b.n	8006872 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80062d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f000 811f 	beq.w	8006518 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80062da:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80062de:	4b8b      	ldr	r3, [pc, #556]	; (800650c <HAL_UART_IRQHandler+0x2b0>)
 80062e0:	4013      	ands	r3, r2
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d106      	bne.n	80062f4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80062e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80062ea:	4b89      	ldr	r3, [pc, #548]	; (8006510 <HAL_UART_IRQHandler+0x2b4>)
 80062ec:	4013      	ands	r3, r2
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f000 8112 	beq.w	8006518 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80062f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d011      	beq.n	8006324 <HAL_UART_IRQHandler+0xc8>
 8006300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00b      	beq.n	8006324 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2201      	movs	r2, #1
 8006312:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800631a:	f043 0201 	orr.w	r2, r3, #1
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006328:	f003 0302 	and.w	r3, r3, #2
 800632c:	2b00      	cmp	r3, #0
 800632e:	d011      	beq.n	8006354 <HAL_UART_IRQHandler+0xf8>
 8006330:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00b      	beq.n	8006354 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2202      	movs	r2, #2
 8006342:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800634a:	f043 0204 	orr.w	r2, r3, #4
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006358:	f003 0304 	and.w	r3, r3, #4
 800635c:	2b00      	cmp	r3, #0
 800635e:	d011      	beq.n	8006384 <HAL_UART_IRQHandler+0x128>
 8006360:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006364:	f003 0301 	and.w	r3, r3, #1
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00b      	beq.n	8006384 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2204      	movs	r2, #4
 8006372:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800637a:	f043 0202 	orr.w	r2, r3, #2
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006388:	f003 0308 	and.w	r3, r3, #8
 800638c:	2b00      	cmp	r3, #0
 800638e:	d017      	beq.n	80063c0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006394:	f003 0320 	and.w	r3, r3, #32
 8006398:	2b00      	cmp	r3, #0
 800639a:	d105      	bne.n	80063a8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800639c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80063a0:	4b5a      	ldr	r3, [pc, #360]	; (800650c <HAL_UART_IRQHandler+0x2b0>)
 80063a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00b      	beq.n	80063c0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2208      	movs	r2, #8
 80063ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063b6:	f043 0208 	orr.w	r2, r3, #8
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80063c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d012      	beq.n	80063f2 <HAL_UART_IRQHandler+0x196>
 80063cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00c      	beq.n	80063f2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063e8:	f043 0220 	orr.w	r2, r3, #32
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f000 823c 	beq.w	8006876 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80063fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006402:	f003 0320 	and.w	r3, r3, #32
 8006406:	2b00      	cmp	r3, #0
 8006408:	d013      	beq.n	8006432 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800640a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800640e:	f003 0320 	and.w	r3, r3, #32
 8006412:	2b00      	cmp	r3, #0
 8006414:	d105      	bne.n	8006422 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006416:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800641a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d007      	beq.n	8006432 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006426:	2b00      	cmp	r3, #0
 8006428:	d003      	beq.n	8006432 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006438:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006446:	2b40      	cmp	r3, #64	; 0x40
 8006448:	d005      	beq.n	8006456 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800644a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800644e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006452:	2b00      	cmp	r3, #0
 8006454:	d04f      	beq.n	80064f6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f001 f814 	bl	8007484 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006466:	2b40      	cmp	r3, #64	; 0x40
 8006468:	d141      	bne.n	80064ee <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	3308      	adds	r3, #8
 8006470:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006474:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006478:	e853 3f00 	ldrex	r3, [r3]
 800647c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006480:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006488:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	3308      	adds	r3, #8
 8006492:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006496:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800649a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80064a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80064a6:	e841 2300 	strex	r3, r2, [r1]
 80064aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80064ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1d9      	bne.n	800646a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d013      	beq.n	80064e6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064c2:	4a14      	ldr	r2, [pc, #80]	; (8006514 <HAL_UART_IRQHandler+0x2b8>)
 80064c4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fc fca9 	bl	8002e22 <HAL_DMA_Abort_IT>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d017      	beq.n	8006506 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80064e0:	4610      	mov	r0, r2
 80064e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064e4:	e00f      	b.n	8006506 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f9da 	bl	80068a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064ec:	e00b      	b.n	8006506 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f9d6 	bl	80068a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064f4:	e007      	b.n	8006506 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f9d2 	bl	80068a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006504:	e1b7      	b.n	8006876 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006506:	bf00      	nop
    return;
 8006508:	e1b5      	b.n	8006876 <HAL_UART_IRQHandler+0x61a>
 800650a:	bf00      	nop
 800650c:	10000001 	.word	0x10000001
 8006510:	04000120 	.word	0x04000120
 8006514:	08007551 	.word	0x08007551

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800651c:	2b01      	cmp	r3, #1
 800651e:	f040 814a 	bne.w	80067b6 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006526:	f003 0310 	and.w	r3, r3, #16
 800652a:	2b00      	cmp	r3, #0
 800652c:	f000 8143 	beq.w	80067b6 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006534:	f003 0310 	and.w	r3, r3, #16
 8006538:	2b00      	cmp	r3, #0
 800653a:	f000 813c 	beq.w	80067b6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2210      	movs	r2, #16
 8006544:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006550:	2b40      	cmp	r3, #64	; 0x40
 8006552:	f040 80b5 	bne.w	80066c0 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006562:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006566:	2b00      	cmp	r3, #0
 8006568:	f000 8187 	beq.w	800687a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006572:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006576:	429a      	cmp	r2, r3
 8006578:	f080 817f 	bcs.w	800687a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006582:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0320 	and.w	r3, r3, #32
 8006592:	2b00      	cmp	r3, #0
 8006594:	f040 8086 	bne.w	80066a4 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80065a4:	e853 3f00 	ldrex	r3, [r3]
 80065a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80065ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	461a      	mov	r2, r3
 80065be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80065c6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80065ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80065d2:	e841 2300 	strex	r3, r2, [r1]
 80065d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80065da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1da      	bne.n	8006598 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	3308      	adds	r3, #8
 80065e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065ec:	e853 3f00 	ldrex	r3, [r3]
 80065f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80065f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065f4:	f023 0301 	bic.w	r3, r3, #1
 80065f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3308      	adds	r3, #8
 8006602:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006606:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800660a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800660e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006612:	e841 2300 	strex	r3, r2, [r1]
 8006616:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006618:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1e1      	bne.n	80065e2 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	3308      	adds	r3, #8
 8006624:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006626:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006628:	e853 3f00 	ldrex	r3, [r3]
 800662c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800662e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006634:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	3308      	adds	r3, #8
 800663e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006642:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006644:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006646:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006648:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800664a:	e841 2300 	strex	r3, r2, [r1]
 800664e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006650:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1e3      	bne.n	800661e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2220      	movs	r2, #32
 800665a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800666c:	e853 3f00 	ldrex	r3, [r3]
 8006670:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006674:	f023 0310 	bic.w	r3, r3, #16
 8006678:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	461a      	mov	r2, r3
 8006682:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006686:	65bb      	str	r3, [r7, #88]	; 0x58
 8006688:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800668c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800668e:	e841 2300 	strex	r3, r2, [r1]
 8006692:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1e4      	bne.n	8006664 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800669e:	4618      	mov	r0, r3
 80066a0:	f7fc fb66 	bl	8002d70 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	4619      	mov	r1, r3
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 f8fb 	bl	80068b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80066be:	e0dc      	b.n	800687a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066da:	b29b      	uxth	r3, r3
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f000 80ce 	beq.w	800687e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80066e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f000 80c9 	beq.w	800687e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f4:	e853 3f00 	ldrex	r3, [r3]
 80066f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006700:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	461a      	mov	r2, r3
 800670a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800670e:	647b      	str	r3, [r7, #68]	; 0x44
 8006710:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006712:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006714:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006716:	e841 2300 	strex	r3, r2, [r1]
 800671a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800671c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1e4      	bne.n	80066ec <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	3308      	adds	r3, #8
 8006728:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	e853 3f00 	ldrex	r3, [r3]
 8006730:	623b      	str	r3, [r7, #32]
   return(result);
 8006732:	6a3b      	ldr	r3, [r7, #32]
 8006734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006738:	f023 0301 	bic.w	r3, r3, #1
 800673c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	3308      	adds	r3, #8
 8006746:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800674a:	633a      	str	r2, [r7, #48]	; 0x30
 800674c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006752:	e841 2300 	strex	r3, r2, [r1]
 8006756:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1e1      	bne.n	8006722 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2220      	movs	r2, #32
 8006762:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	e853 3f00 	ldrex	r3, [r3]
 800677e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f023 0310 	bic.w	r3, r3, #16
 8006786:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	461a      	mov	r2, r3
 8006790:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006794:	61fb      	str	r3, [r7, #28]
 8006796:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006798:	69b9      	ldr	r1, [r7, #24]
 800679a:	69fa      	ldr	r2, [r7, #28]
 800679c:	e841 2300 	strex	r3, r2, [r1]
 80067a0:	617b      	str	r3, [r7, #20]
   return(result);
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1e4      	bne.n	8006772 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067ac:	4619      	mov	r1, r3
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f880 	bl	80068b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80067b4:	e063      	b.n	800687e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80067b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00e      	beq.n	80067e0 <HAL_UART_IRQHandler+0x584>
 80067c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d008      	beq.n	80067e0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80067d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f001 fb57 	bl	8007e8c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80067de:	e051      	b.n	8006884 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80067e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d014      	beq.n	8006816 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80067ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d105      	bne.n	8006804 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80067f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d008      	beq.n	8006816 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006808:	2b00      	cmp	r3, #0
 800680a:	d03a      	beq.n	8006882 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	4798      	blx	r3
    }
    return;
 8006814:	e035      	b.n	8006882 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800681a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800681e:	2b00      	cmp	r3, #0
 8006820:	d009      	beq.n	8006836 <HAL_UART_IRQHandler+0x5da>
 8006822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682a:	2b00      	cmp	r3, #0
 800682c:	d003      	beq.n	8006836 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fea4 	bl	800757c <UART_EndTransmit_IT>
    return;
 8006834:	e026      	b.n	8006884 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800683a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d009      	beq.n	8006856 <HAL_UART_IRQHandler+0x5fa>
 8006842:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006846:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d003      	beq.n	8006856 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f001 fb30 	bl	8007eb4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006854:	e016      	b.n	8006884 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800685a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d010      	beq.n	8006884 <HAL_UART_IRQHandler+0x628>
 8006862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006866:	2b00      	cmp	r3, #0
 8006868:	da0c      	bge.n	8006884 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f001 fb18 	bl	8007ea0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006870:	e008      	b.n	8006884 <HAL_UART_IRQHandler+0x628>
      return;
 8006872:	bf00      	nop
 8006874:	e006      	b.n	8006884 <HAL_UART_IRQHandler+0x628>
    return;
 8006876:	bf00      	nop
 8006878:	e004      	b.n	8006884 <HAL_UART_IRQHandler+0x628>
      return;
 800687a:	bf00      	nop
 800687c:	e002      	b.n	8006884 <HAL_UART_IRQHandler+0x628>
      return;
 800687e:	bf00      	nop
 8006880:	e000      	b.n	8006884 <HAL_UART_IRQHandler+0x628>
    return;
 8006882:	bf00      	nop
  }
}
 8006884:	37e8      	adds	r7, #232	; 0xe8
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop

0800688c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	460b      	mov	r3, r1
 80068be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068d0:	b08c      	sub	sp, #48	; 0x30
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068d6:	2300      	movs	r3, #0
 80068d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	689a      	ldr	r2, [r3, #8]
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	431a      	orrs	r2, r3
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	431a      	orrs	r2, r3
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	69db      	ldr	r3, [r3, #28]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	4baa      	ldr	r3, [pc, #680]	; (8006ba4 <UART_SetConfig+0x2d8>)
 80068fc:	4013      	ands	r3, r2
 80068fe:	697a      	ldr	r2, [r7, #20]
 8006900:	6812      	ldr	r2, [r2, #0]
 8006902:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006904:	430b      	orrs	r3, r1
 8006906:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	68da      	ldr	r2, [r3, #12]
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	430a      	orrs	r2, r1
 800691c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a9f      	ldr	r2, [pc, #636]	; (8006ba8 <UART_SetConfig+0x2dc>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d004      	beq.n	8006938 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	6a1b      	ldr	r3, [r3, #32]
 8006932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006934:	4313      	orrs	r3, r2
 8006936:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006942:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	6812      	ldr	r2, [r2, #0]
 800694a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800694c:	430b      	orrs	r3, r1
 800694e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006956:	f023 010f 	bic.w	r1, r3, #15
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	430a      	orrs	r2, r1
 8006964:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a90      	ldr	r2, [pc, #576]	; (8006bac <UART_SetConfig+0x2e0>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d125      	bne.n	80069bc <UART_SetConfig+0xf0>
 8006970:	4b8f      	ldr	r3, [pc, #572]	; (8006bb0 <UART_SetConfig+0x2e4>)
 8006972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006976:	f003 0303 	and.w	r3, r3, #3
 800697a:	2b03      	cmp	r3, #3
 800697c:	d81a      	bhi.n	80069b4 <UART_SetConfig+0xe8>
 800697e:	a201      	add	r2, pc, #4	; (adr r2, 8006984 <UART_SetConfig+0xb8>)
 8006980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006984:	08006995 	.word	0x08006995
 8006988:	080069a5 	.word	0x080069a5
 800698c:	0800699d 	.word	0x0800699d
 8006990:	080069ad 	.word	0x080069ad
 8006994:	2301      	movs	r3, #1
 8006996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800699a:	e116      	b.n	8006bca <UART_SetConfig+0x2fe>
 800699c:	2302      	movs	r3, #2
 800699e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069a2:	e112      	b.n	8006bca <UART_SetConfig+0x2fe>
 80069a4:	2304      	movs	r3, #4
 80069a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069aa:	e10e      	b.n	8006bca <UART_SetConfig+0x2fe>
 80069ac:	2308      	movs	r3, #8
 80069ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069b2:	e10a      	b.n	8006bca <UART_SetConfig+0x2fe>
 80069b4:	2310      	movs	r3, #16
 80069b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069ba:	e106      	b.n	8006bca <UART_SetConfig+0x2fe>
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a7c      	ldr	r2, [pc, #496]	; (8006bb4 <UART_SetConfig+0x2e8>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d138      	bne.n	8006a38 <UART_SetConfig+0x16c>
 80069c6:	4b7a      	ldr	r3, [pc, #488]	; (8006bb0 <UART_SetConfig+0x2e4>)
 80069c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069cc:	f003 030c 	and.w	r3, r3, #12
 80069d0:	2b0c      	cmp	r3, #12
 80069d2:	d82d      	bhi.n	8006a30 <UART_SetConfig+0x164>
 80069d4:	a201      	add	r2, pc, #4	; (adr r2, 80069dc <UART_SetConfig+0x110>)
 80069d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069da:	bf00      	nop
 80069dc:	08006a11 	.word	0x08006a11
 80069e0:	08006a31 	.word	0x08006a31
 80069e4:	08006a31 	.word	0x08006a31
 80069e8:	08006a31 	.word	0x08006a31
 80069ec:	08006a21 	.word	0x08006a21
 80069f0:	08006a31 	.word	0x08006a31
 80069f4:	08006a31 	.word	0x08006a31
 80069f8:	08006a31 	.word	0x08006a31
 80069fc:	08006a19 	.word	0x08006a19
 8006a00:	08006a31 	.word	0x08006a31
 8006a04:	08006a31 	.word	0x08006a31
 8006a08:	08006a31 	.word	0x08006a31
 8006a0c:	08006a29 	.word	0x08006a29
 8006a10:	2300      	movs	r3, #0
 8006a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a16:	e0d8      	b.n	8006bca <UART_SetConfig+0x2fe>
 8006a18:	2302      	movs	r3, #2
 8006a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a1e:	e0d4      	b.n	8006bca <UART_SetConfig+0x2fe>
 8006a20:	2304      	movs	r3, #4
 8006a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a26:	e0d0      	b.n	8006bca <UART_SetConfig+0x2fe>
 8006a28:	2308      	movs	r3, #8
 8006a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a2e:	e0cc      	b.n	8006bca <UART_SetConfig+0x2fe>
 8006a30:	2310      	movs	r3, #16
 8006a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a36:	e0c8      	b.n	8006bca <UART_SetConfig+0x2fe>
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a5e      	ldr	r2, [pc, #376]	; (8006bb8 <UART_SetConfig+0x2ec>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d125      	bne.n	8006a8e <UART_SetConfig+0x1c2>
 8006a42:	4b5b      	ldr	r3, [pc, #364]	; (8006bb0 <UART_SetConfig+0x2e4>)
 8006a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a48:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a4c:	2b30      	cmp	r3, #48	; 0x30
 8006a4e:	d016      	beq.n	8006a7e <UART_SetConfig+0x1b2>
 8006a50:	2b30      	cmp	r3, #48	; 0x30
 8006a52:	d818      	bhi.n	8006a86 <UART_SetConfig+0x1ba>
 8006a54:	2b20      	cmp	r3, #32
 8006a56:	d00a      	beq.n	8006a6e <UART_SetConfig+0x1a2>
 8006a58:	2b20      	cmp	r3, #32
 8006a5a:	d814      	bhi.n	8006a86 <UART_SetConfig+0x1ba>
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d002      	beq.n	8006a66 <UART_SetConfig+0x19a>
 8006a60:	2b10      	cmp	r3, #16
 8006a62:	d008      	beq.n	8006a76 <UART_SetConfig+0x1aa>
 8006a64:	e00f      	b.n	8006a86 <UART_SetConfig+0x1ba>
 8006a66:	2300      	movs	r3, #0
 8006a68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a6c:	e0ad      	b.n	8006bca <UART_SetConfig+0x2fe>
 8006a6e:	2302      	movs	r3, #2
 8006a70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a74:	e0a9      	b.n	8006bca <UART_SetConfig+0x2fe>
 8006a76:	2304      	movs	r3, #4
 8006a78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a7c:	e0a5      	b.n	8006bca <UART_SetConfig+0x2fe>
 8006a7e:	2308      	movs	r3, #8
 8006a80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a84:	e0a1      	b.n	8006bca <UART_SetConfig+0x2fe>
 8006a86:	2310      	movs	r3, #16
 8006a88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a8c:	e09d      	b.n	8006bca <UART_SetConfig+0x2fe>
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a4a      	ldr	r2, [pc, #296]	; (8006bbc <UART_SetConfig+0x2f0>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d125      	bne.n	8006ae4 <UART_SetConfig+0x218>
 8006a98:	4b45      	ldr	r3, [pc, #276]	; (8006bb0 <UART_SetConfig+0x2e4>)
 8006a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a9e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006aa2:	2bc0      	cmp	r3, #192	; 0xc0
 8006aa4:	d016      	beq.n	8006ad4 <UART_SetConfig+0x208>
 8006aa6:	2bc0      	cmp	r3, #192	; 0xc0
 8006aa8:	d818      	bhi.n	8006adc <UART_SetConfig+0x210>
 8006aaa:	2b80      	cmp	r3, #128	; 0x80
 8006aac:	d00a      	beq.n	8006ac4 <UART_SetConfig+0x1f8>
 8006aae:	2b80      	cmp	r3, #128	; 0x80
 8006ab0:	d814      	bhi.n	8006adc <UART_SetConfig+0x210>
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d002      	beq.n	8006abc <UART_SetConfig+0x1f0>
 8006ab6:	2b40      	cmp	r3, #64	; 0x40
 8006ab8:	d008      	beq.n	8006acc <UART_SetConfig+0x200>
 8006aba:	e00f      	b.n	8006adc <UART_SetConfig+0x210>
 8006abc:	2300      	movs	r3, #0
 8006abe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ac2:	e082      	b.n	8006bca <UART_SetConfig+0x2fe>
 8006ac4:	2302      	movs	r3, #2
 8006ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006aca:	e07e      	b.n	8006bca <UART_SetConfig+0x2fe>
 8006acc:	2304      	movs	r3, #4
 8006ace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ad2:	e07a      	b.n	8006bca <UART_SetConfig+0x2fe>
 8006ad4:	2308      	movs	r3, #8
 8006ad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ada:	e076      	b.n	8006bca <UART_SetConfig+0x2fe>
 8006adc:	2310      	movs	r3, #16
 8006ade:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ae2:	e072      	b.n	8006bca <UART_SetConfig+0x2fe>
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a35      	ldr	r2, [pc, #212]	; (8006bc0 <UART_SetConfig+0x2f4>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d12a      	bne.n	8006b44 <UART_SetConfig+0x278>
 8006aee:	4b30      	ldr	r3, [pc, #192]	; (8006bb0 <UART_SetConfig+0x2e4>)
 8006af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006af4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006af8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006afc:	d01a      	beq.n	8006b34 <UART_SetConfig+0x268>
 8006afe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b02:	d81b      	bhi.n	8006b3c <UART_SetConfig+0x270>
 8006b04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b08:	d00c      	beq.n	8006b24 <UART_SetConfig+0x258>
 8006b0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b0e:	d815      	bhi.n	8006b3c <UART_SetConfig+0x270>
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d003      	beq.n	8006b1c <UART_SetConfig+0x250>
 8006b14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b18:	d008      	beq.n	8006b2c <UART_SetConfig+0x260>
 8006b1a:	e00f      	b.n	8006b3c <UART_SetConfig+0x270>
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b22:	e052      	b.n	8006bca <UART_SetConfig+0x2fe>
 8006b24:	2302      	movs	r3, #2
 8006b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b2a:	e04e      	b.n	8006bca <UART_SetConfig+0x2fe>
 8006b2c:	2304      	movs	r3, #4
 8006b2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b32:	e04a      	b.n	8006bca <UART_SetConfig+0x2fe>
 8006b34:	2308      	movs	r3, #8
 8006b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b3a:	e046      	b.n	8006bca <UART_SetConfig+0x2fe>
 8006b3c:	2310      	movs	r3, #16
 8006b3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b42:	e042      	b.n	8006bca <UART_SetConfig+0x2fe>
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a17      	ldr	r2, [pc, #92]	; (8006ba8 <UART_SetConfig+0x2dc>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d13a      	bne.n	8006bc4 <UART_SetConfig+0x2f8>
 8006b4e:	4b18      	ldr	r3, [pc, #96]	; (8006bb0 <UART_SetConfig+0x2e4>)
 8006b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b5c:	d01a      	beq.n	8006b94 <UART_SetConfig+0x2c8>
 8006b5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b62:	d81b      	bhi.n	8006b9c <UART_SetConfig+0x2d0>
 8006b64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b68:	d00c      	beq.n	8006b84 <UART_SetConfig+0x2b8>
 8006b6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b6e:	d815      	bhi.n	8006b9c <UART_SetConfig+0x2d0>
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d003      	beq.n	8006b7c <UART_SetConfig+0x2b0>
 8006b74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b78:	d008      	beq.n	8006b8c <UART_SetConfig+0x2c0>
 8006b7a:	e00f      	b.n	8006b9c <UART_SetConfig+0x2d0>
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b82:	e022      	b.n	8006bca <UART_SetConfig+0x2fe>
 8006b84:	2302      	movs	r3, #2
 8006b86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b8a:	e01e      	b.n	8006bca <UART_SetConfig+0x2fe>
 8006b8c:	2304      	movs	r3, #4
 8006b8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b92:	e01a      	b.n	8006bca <UART_SetConfig+0x2fe>
 8006b94:	2308      	movs	r3, #8
 8006b96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b9a:	e016      	b.n	8006bca <UART_SetConfig+0x2fe>
 8006b9c:	2310      	movs	r3, #16
 8006b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ba2:	e012      	b.n	8006bca <UART_SetConfig+0x2fe>
 8006ba4:	cfff69f3 	.word	0xcfff69f3
 8006ba8:	40008000 	.word	0x40008000
 8006bac:	40013800 	.word	0x40013800
 8006bb0:	40021000 	.word	0x40021000
 8006bb4:	40004400 	.word	0x40004400
 8006bb8:	40004800 	.word	0x40004800
 8006bbc:	40004c00 	.word	0x40004c00
 8006bc0:	40005000 	.word	0x40005000
 8006bc4:	2310      	movs	r3, #16
 8006bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4aae      	ldr	r2, [pc, #696]	; (8006e88 <UART_SetConfig+0x5bc>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	f040 8097 	bne.w	8006d04 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006bd6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006bda:	2b08      	cmp	r3, #8
 8006bdc:	d823      	bhi.n	8006c26 <UART_SetConfig+0x35a>
 8006bde:	a201      	add	r2, pc, #4	; (adr r2, 8006be4 <UART_SetConfig+0x318>)
 8006be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be4:	08006c09 	.word	0x08006c09
 8006be8:	08006c27 	.word	0x08006c27
 8006bec:	08006c11 	.word	0x08006c11
 8006bf0:	08006c27 	.word	0x08006c27
 8006bf4:	08006c17 	.word	0x08006c17
 8006bf8:	08006c27 	.word	0x08006c27
 8006bfc:	08006c27 	.word	0x08006c27
 8006c00:	08006c27 	.word	0x08006c27
 8006c04:	08006c1f 	.word	0x08006c1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c08:	f7fd f8a6 	bl	8003d58 <HAL_RCC_GetPCLK1Freq>
 8006c0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c0e:	e010      	b.n	8006c32 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c10:	4b9e      	ldr	r3, [pc, #632]	; (8006e8c <UART_SetConfig+0x5c0>)
 8006c12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c14:	e00d      	b.n	8006c32 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c16:	f7fd f831 	bl	8003c7c <HAL_RCC_GetSysClockFreq>
 8006c1a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c1c:	e009      	b.n	8006c32 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c24:	e005      	b.n	8006c32 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006c26:	2300      	movs	r3, #0
 8006c28:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006c30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f000 8130 	beq.w	8006e9a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3e:	4a94      	ldr	r2, [pc, #592]	; (8006e90 <UART_SetConfig+0x5c4>)
 8006c40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c44:	461a      	mov	r2, r3
 8006c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c48:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c4c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	685a      	ldr	r2, [r3, #4]
 8006c52:	4613      	mov	r3, r2
 8006c54:	005b      	lsls	r3, r3, #1
 8006c56:	4413      	add	r3, r2
 8006c58:	69ba      	ldr	r2, [r7, #24]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d305      	bcc.n	8006c6a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c64:	69ba      	ldr	r2, [r7, #24]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d903      	bls.n	8006c72 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006c70:	e113      	b.n	8006e9a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c74:	2200      	movs	r2, #0
 8006c76:	60bb      	str	r3, [r7, #8]
 8006c78:	60fa      	str	r2, [r7, #12]
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7e:	4a84      	ldr	r2, [pc, #528]	; (8006e90 <UART_SetConfig+0x5c4>)
 8006c80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	2200      	movs	r2, #0
 8006c88:	603b      	str	r3, [r7, #0]
 8006c8a:	607a      	str	r2, [r7, #4]
 8006c8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c94:	f7f9 fb2c 	bl	80002f0 <__aeabi_uldivmod>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	4610      	mov	r0, r2
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	f04f 0200 	mov.w	r2, #0
 8006ca4:	f04f 0300 	mov.w	r3, #0
 8006ca8:	020b      	lsls	r3, r1, #8
 8006caa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006cae:	0202      	lsls	r2, r0, #8
 8006cb0:	6979      	ldr	r1, [r7, #20]
 8006cb2:	6849      	ldr	r1, [r1, #4]
 8006cb4:	0849      	lsrs	r1, r1, #1
 8006cb6:	2000      	movs	r0, #0
 8006cb8:	460c      	mov	r4, r1
 8006cba:	4605      	mov	r5, r0
 8006cbc:	eb12 0804 	adds.w	r8, r2, r4
 8006cc0:	eb43 0905 	adc.w	r9, r3, r5
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	469a      	mov	sl, r3
 8006ccc:	4693      	mov	fp, r2
 8006cce:	4652      	mov	r2, sl
 8006cd0:	465b      	mov	r3, fp
 8006cd2:	4640      	mov	r0, r8
 8006cd4:	4649      	mov	r1, r9
 8006cd6:	f7f9 fb0b 	bl	80002f0 <__aeabi_uldivmod>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	460b      	mov	r3, r1
 8006cde:	4613      	mov	r3, r2
 8006ce0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ce2:	6a3b      	ldr	r3, [r7, #32]
 8006ce4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ce8:	d308      	bcc.n	8006cfc <UART_SetConfig+0x430>
 8006cea:	6a3b      	ldr	r3, [r7, #32]
 8006cec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cf0:	d204      	bcs.n	8006cfc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	6a3a      	ldr	r2, [r7, #32]
 8006cf8:	60da      	str	r2, [r3, #12]
 8006cfa:	e0ce      	b.n	8006e9a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006d02:	e0ca      	b.n	8006e9a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	69db      	ldr	r3, [r3, #28]
 8006d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d0c:	d166      	bne.n	8006ddc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006d0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d12:	2b08      	cmp	r3, #8
 8006d14:	d827      	bhi.n	8006d66 <UART_SetConfig+0x49a>
 8006d16:	a201      	add	r2, pc, #4	; (adr r2, 8006d1c <UART_SetConfig+0x450>)
 8006d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d1c:	08006d41 	.word	0x08006d41
 8006d20:	08006d49 	.word	0x08006d49
 8006d24:	08006d51 	.word	0x08006d51
 8006d28:	08006d67 	.word	0x08006d67
 8006d2c:	08006d57 	.word	0x08006d57
 8006d30:	08006d67 	.word	0x08006d67
 8006d34:	08006d67 	.word	0x08006d67
 8006d38:	08006d67 	.word	0x08006d67
 8006d3c:	08006d5f 	.word	0x08006d5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d40:	f7fd f80a 	bl	8003d58 <HAL_RCC_GetPCLK1Freq>
 8006d44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d46:	e014      	b.n	8006d72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d48:	f7fd f81c 	bl	8003d84 <HAL_RCC_GetPCLK2Freq>
 8006d4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d4e:	e010      	b.n	8006d72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d50:	4b4e      	ldr	r3, [pc, #312]	; (8006e8c <UART_SetConfig+0x5c0>)
 8006d52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006d54:	e00d      	b.n	8006d72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d56:	f7fc ff91 	bl	8003c7c <HAL_RCC_GetSysClockFreq>
 8006d5a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d5c:	e009      	b.n	8006d72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006d64:	e005      	b.n	8006d72 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006d66:	2300      	movs	r3, #0
 8006d68:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006d70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f000 8090 	beq.w	8006e9a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7e:	4a44      	ldr	r2, [pc, #272]	; (8006e90 <UART_SetConfig+0x5c4>)
 8006d80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d84:	461a      	mov	r2, r3
 8006d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d88:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d8c:	005a      	lsls	r2, r3, #1
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	085b      	lsrs	r3, r3, #1
 8006d94:	441a      	add	r2, r3
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d9e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006da0:	6a3b      	ldr	r3, [r7, #32]
 8006da2:	2b0f      	cmp	r3, #15
 8006da4:	d916      	bls.n	8006dd4 <UART_SetConfig+0x508>
 8006da6:	6a3b      	ldr	r3, [r7, #32]
 8006da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dac:	d212      	bcs.n	8006dd4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006dae:	6a3b      	ldr	r3, [r7, #32]
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	f023 030f 	bic.w	r3, r3, #15
 8006db6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006db8:	6a3b      	ldr	r3, [r7, #32]
 8006dba:	085b      	lsrs	r3, r3, #1
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	f003 0307 	and.w	r3, r3, #7
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	8bfb      	ldrh	r3, [r7, #30]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	8bfa      	ldrh	r2, [r7, #30]
 8006dd0:	60da      	str	r2, [r3, #12]
 8006dd2:	e062      	b.n	8006e9a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006dda:	e05e      	b.n	8006e9a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ddc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006de0:	2b08      	cmp	r3, #8
 8006de2:	d828      	bhi.n	8006e36 <UART_SetConfig+0x56a>
 8006de4:	a201      	add	r2, pc, #4	; (adr r2, 8006dec <UART_SetConfig+0x520>)
 8006de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dea:	bf00      	nop
 8006dec:	08006e11 	.word	0x08006e11
 8006df0:	08006e19 	.word	0x08006e19
 8006df4:	08006e21 	.word	0x08006e21
 8006df8:	08006e37 	.word	0x08006e37
 8006dfc:	08006e27 	.word	0x08006e27
 8006e00:	08006e37 	.word	0x08006e37
 8006e04:	08006e37 	.word	0x08006e37
 8006e08:	08006e37 	.word	0x08006e37
 8006e0c:	08006e2f 	.word	0x08006e2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e10:	f7fc ffa2 	bl	8003d58 <HAL_RCC_GetPCLK1Freq>
 8006e14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e16:	e014      	b.n	8006e42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e18:	f7fc ffb4 	bl	8003d84 <HAL_RCC_GetPCLK2Freq>
 8006e1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e1e:	e010      	b.n	8006e42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e20:	4b1a      	ldr	r3, [pc, #104]	; (8006e8c <UART_SetConfig+0x5c0>)
 8006e22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e24:	e00d      	b.n	8006e42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e26:	f7fc ff29 	bl	8003c7c <HAL_RCC_GetSysClockFreq>
 8006e2a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e2c:	e009      	b.n	8006e42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e34:	e005      	b.n	8006e42 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006e36:	2300      	movs	r3, #0
 8006e38:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006e40:	bf00      	nop
    }

    if (pclk != 0U)
 8006e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d028      	beq.n	8006e9a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4c:	4a10      	ldr	r2, [pc, #64]	; (8006e90 <UART_SetConfig+0x5c4>)
 8006e4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e52:	461a      	mov	r2, r3
 8006e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e56:	fbb3 f2f2 	udiv	r2, r3, r2
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	085b      	lsrs	r3, r3, #1
 8006e60:	441a      	add	r2, r3
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e6c:	6a3b      	ldr	r3, [r7, #32]
 8006e6e:	2b0f      	cmp	r3, #15
 8006e70:	d910      	bls.n	8006e94 <UART_SetConfig+0x5c8>
 8006e72:	6a3b      	ldr	r3, [r7, #32]
 8006e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e78:	d20c      	bcs.n	8006e94 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e7a:	6a3b      	ldr	r3, [r7, #32]
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	60da      	str	r2, [r3, #12]
 8006e84:	e009      	b.n	8006e9a <UART_SetConfig+0x5ce>
 8006e86:	bf00      	nop
 8006e88:	40008000 	.word	0x40008000
 8006e8c:	00f42400 	.word	0x00f42400
 8006e90:	080095f8 	.word	0x080095f8
      }
      else
      {
        ret = HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	2200      	movs	r2, #0
 8006eae:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006eb6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3730      	adds	r7, #48	; 0x30
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006ec4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed0:	f003 0301 	and.w	r3, r3, #1
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00a      	beq.n	8006eee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	430a      	orrs	r2, r1
 8006eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef2:	f003 0302 	and.w	r3, r3, #2
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00a      	beq.n	8006f10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	430a      	orrs	r2, r1
 8006f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f14:	f003 0304 	and.w	r3, r3, #4
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00a      	beq.n	8006f32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	430a      	orrs	r2, r1
 8006f30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f36:	f003 0308 	and.w	r3, r3, #8
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00a      	beq.n	8006f54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	430a      	orrs	r2, r1
 8006f52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f58:	f003 0310 	and.w	r3, r3, #16
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00a      	beq.n	8006f76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	430a      	orrs	r2, r1
 8006f74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f7a:	f003 0320 	and.w	r3, r3, #32
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00a      	beq.n	8006f98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	430a      	orrs	r2, r1
 8006f96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d01a      	beq.n	8006fda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fc2:	d10a      	bne.n	8006fda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00a      	beq.n	8006ffc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	605a      	str	r2, [r3, #4]
  }
}
 8006ffc:	bf00      	nop
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b086      	sub	sp, #24
 800700c:	af02      	add	r7, sp, #8
 800700e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007018:	f7fa fcb4 	bl	8001984 <HAL_GetTick>
 800701c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0308 	and.w	r3, r3, #8
 8007028:	2b08      	cmp	r3, #8
 800702a:	d10e      	bne.n	800704a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800702c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007030:	9300      	str	r3, [sp, #0]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2200      	movs	r2, #0
 8007036:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f82f 	bl	800709e <UART_WaitOnFlagUntilTimeout>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d001      	beq.n	800704a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007046:	2303      	movs	r3, #3
 8007048:	e025      	b.n	8007096 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 0304 	and.w	r3, r3, #4
 8007054:	2b04      	cmp	r3, #4
 8007056:	d10e      	bne.n	8007076 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007058:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800705c:	9300      	str	r3, [sp, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f819 	bl	800709e <UART_WaitOnFlagUntilTimeout>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d001      	beq.n	8007076 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e00f      	b.n	8007096 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2220      	movs	r2, #32
 800707a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2220      	movs	r2, #32
 8007082:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b09c      	sub	sp, #112	; 0x70
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	60f8      	str	r0, [r7, #12]
 80070a6:	60b9      	str	r1, [r7, #8]
 80070a8:	603b      	str	r3, [r7, #0]
 80070aa:	4613      	mov	r3, r2
 80070ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070ae:	e0a9      	b.n	8007204 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b6:	f000 80a5 	beq.w	8007204 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070ba:	f7fa fc63 	bl	8001984 <HAL_GetTick>
 80070be:	4602      	mov	r2, r0
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	1ad3      	subs	r3, r2, r3
 80070c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d302      	bcc.n	80070d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80070ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d140      	bne.n	8007152 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070d8:	e853 3f00 	ldrex	r3, [r3]
 80070dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80070de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070e4:	667b      	str	r3, [r7, #100]	; 0x64
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	461a      	mov	r2, r3
 80070ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070f0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80070f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80070f6:	e841 2300 	strex	r3, r2, [r1]
 80070fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80070fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1e6      	bne.n	80070d0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	3308      	adds	r3, #8
 8007108:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800710c:	e853 3f00 	ldrex	r3, [r3]
 8007110:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007114:	f023 0301 	bic.w	r3, r3, #1
 8007118:	663b      	str	r3, [r7, #96]	; 0x60
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	3308      	adds	r3, #8
 8007120:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007122:	64ba      	str	r2, [r7, #72]	; 0x48
 8007124:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007126:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007128:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800712a:	e841 2300 	strex	r3, r2, [r1]
 800712e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1e5      	bne.n	8007102 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2220      	movs	r2, #32
 800713a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2220      	movs	r2, #32
 8007142:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800714e:	2303      	movs	r3, #3
 8007150:	e069      	b.n	8007226 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 0304 	and.w	r3, r3, #4
 800715c:	2b00      	cmp	r3, #0
 800715e:	d051      	beq.n	8007204 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	69db      	ldr	r3, [r3, #28]
 8007166:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800716a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800716e:	d149      	bne.n	8007204 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007178:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007182:	e853 3f00 	ldrex	r3, [r3]
 8007186:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800718e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	461a      	mov	r2, r3
 8007196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007198:	637b      	str	r3, [r7, #52]	; 0x34
 800719a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800719e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071a0:	e841 2300 	strex	r3, r2, [r1]
 80071a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80071a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1e6      	bne.n	800717a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	3308      	adds	r3, #8
 80071b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	e853 3f00 	ldrex	r3, [r3]
 80071ba:	613b      	str	r3, [r7, #16]
   return(result);
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	f023 0301 	bic.w	r3, r3, #1
 80071c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	3308      	adds	r3, #8
 80071ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80071cc:	623a      	str	r2, [r7, #32]
 80071ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d0:	69f9      	ldr	r1, [r7, #28]
 80071d2:	6a3a      	ldr	r2, [r7, #32]
 80071d4:	e841 2300 	strex	r3, r2, [r1]
 80071d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1e5      	bne.n	80071ac <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2220      	movs	r2, #32
 80071e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2220      	movs	r2, #32
 80071ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2220      	movs	r2, #32
 80071f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007200:	2303      	movs	r3, #3
 8007202:	e010      	b.n	8007226 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	69da      	ldr	r2, [r3, #28]
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	4013      	ands	r3, r2
 800720e:	68ba      	ldr	r2, [r7, #8]
 8007210:	429a      	cmp	r2, r3
 8007212:	bf0c      	ite	eq
 8007214:	2301      	moveq	r3, #1
 8007216:	2300      	movne	r3, #0
 8007218:	b2db      	uxtb	r3, r3
 800721a:	461a      	mov	r2, r3
 800721c:	79fb      	ldrb	r3, [r7, #7]
 800721e:	429a      	cmp	r2, r3
 8007220:	f43f af46 	beq.w	80070b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3770      	adds	r7, #112	; 0x70
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
	...

08007230 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007230:	b480      	push	{r7}
 8007232:	b0a3      	sub	sp, #140	; 0x8c
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	4613      	mov	r3, r2
 800723c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	68ba      	ldr	r2, [r7, #8]
 8007242:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	88fa      	ldrh	r2, [r7, #6]
 8007248:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	88fa      	ldrh	r2, [r7, #6]
 8007250:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2200      	movs	r2, #0
 8007258:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007262:	d10e      	bne.n	8007282 <UART_Start_Receive_IT+0x52>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d105      	bne.n	8007278 <UART_Start_Receive_IT+0x48>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007272:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007276:	e02d      	b.n	80072d4 <UART_Start_Receive_IT+0xa4>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	22ff      	movs	r2, #255	; 0xff
 800727c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007280:	e028      	b.n	80072d4 <UART_Start_Receive_IT+0xa4>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10d      	bne.n	80072a6 <UART_Start_Receive_IT+0x76>
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d104      	bne.n	800729c <UART_Start_Receive_IT+0x6c>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	22ff      	movs	r2, #255	; 0xff
 8007296:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800729a:	e01b      	b.n	80072d4 <UART_Start_Receive_IT+0xa4>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	227f      	movs	r2, #127	; 0x7f
 80072a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80072a4:	e016      	b.n	80072d4 <UART_Start_Receive_IT+0xa4>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072ae:	d10d      	bne.n	80072cc <UART_Start_Receive_IT+0x9c>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d104      	bne.n	80072c2 <UART_Start_Receive_IT+0x92>
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	227f      	movs	r2, #127	; 0x7f
 80072bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80072c0:	e008      	b.n	80072d4 <UART_Start_Receive_IT+0xa4>
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	223f      	movs	r2, #63	; 0x3f
 80072c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80072ca:	e003      	b.n	80072d4 <UART_Start_Receive_IT+0xa4>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2222      	movs	r2, #34	; 0x22
 80072e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	3308      	adds	r3, #8
 80072ea:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072ee:	e853 3f00 	ldrex	r3, [r3]
 80072f2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80072f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072f6:	f043 0301 	orr.w	r3, r3, #1
 80072fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	3308      	adds	r3, #8
 8007304:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007308:	673a      	str	r2, [r7, #112]	; 0x70
 800730a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800730e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007310:	e841 2300 	strex	r3, r2, [r1]
 8007314:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007316:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1e3      	bne.n	80072e4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007320:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007324:	d153      	bne.n	80073ce <UART_Start_Receive_IT+0x19e>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800732c:	88fa      	ldrh	r2, [r7, #6]
 800732e:	429a      	cmp	r2, r3
 8007330:	d34d      	bcc.n	80073ce <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800733a:	d107      	bne.n	800734c <UART_Start_Receive_IT+0x11c>
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d103      	bne.n	800734c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	4a4b      	ldr	r2, [pc, #300]	; (8007474 <UART_Start_Receive_IT+0x244>)
 8007348:	671a      	str	r2, [r3, #112]	; 0x70
 800734a:	e002      	b.n	8007352 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	4a4a      	ldr	r2, [pc, #296]	; (8007478 <UART_Start_Receive_IT+0x248>)
 8007350:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d01a      	beq.n	8007398 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800736a:	e853 3f00 	ldrex	r3, [r3]
 800736e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007376:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	461a      	mov	r2, r3
 8007380:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007384:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007386:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007388:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800738a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800738c:	e841 2300 	strex	r3, r2, [r1]
 8007390:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007392:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007394:	2b00      	cmp	r3, #0
 8007396:	d1e4      	bne.n	8007362 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	3308      	adds	r3, #8
 800739e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073a2:	e853 3f00 	ldrex	r3, [r3]
 80073a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	3308      	adds	r3, #8
 80073b6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80073b8:	64ba      	str	r2, [r7, #72]	; 0x48
 80073ba:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073bc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80073be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073c0:	e841 2300 	strex	r3, r2, [r1]
 80073c4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80073c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1e5      	bne.n	8007398 <UART_Start_Receive_IT+0x168>
 80073cc:	e04a      	b.n	8007464 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073d6:	d107      	bne.n	80073e8 <UART_Start_Receive_IT+0x1b8>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d103      	bne.n	80073e8 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4a26      	ldr	r2, [pc, #152]	; (800747c <UART_Start_Receive_IT+0x24c>)
 80073e4:	671a      	str	r2, [r3, #112]	; 0x70
 80073e6:	e002      	b.n	80073ee <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	4a25      	ldr	r2, [pc, #148]	; (8007480 <UART_Start_Receive_IT+0x250>)
 80073ec:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	691b      	ldr	r3, [r3, #16]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d019      	beq.n	8007432 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007406:	e853 3f00 	ldrex	r3, [r3]
 800740a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800740c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007412:	677b      	str	r3, [r7, #116]	; 0x74
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	461a      	mov	r2, r3
 800741a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800741c:	637b      	str	r3, [r7, #52]	; 0x34
 800741e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007420:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007422:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007424:	e841 2300 	strex	r3, r2, [r1]
 8007428:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800742a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800742c:	2b00      	cmp	r3, #0
 800742e:	d1e6      	bne.n	80073fe <UART_Start_Receive_IT+0x1ce>
 8007430:	e018      	b.n	8007464 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	e853 3f00 	ldrex	r3, [r3]
 800743e:	613b      	str	r3, [r7, #16]
   return(result);
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	f043 0320 	orr.w	r3, r3, #32
 8007446:	67bb      	str	r3, [r7, #120]	; 0x78
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	461a      	mov	r2, r3
 800744e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007450:	623b      	str	r3, [r7, #32]
 8007452:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007454:	69f9      	ldr	r1, [r7, #28]
 8007456:	6a3a      	ldr	r2, [r7, #32]
 8007458:	e841 2300 	strex	r3, r2, [r1]
 800745c:	61bb      	str	r3, [r7, #24]
   return(result);
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d1e6      	bne.n	8007432 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	378c      	adds	r7, #140	; 0x8c
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	08007b8d 	.word	0x08007b8d
 8007478:	08007895 	.word	0x08007895
 800747c:	08007733 	.word	0x08007733
 8007480:	080075d3 	.word	0x080075d3

08007484 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007484:	b480      	push	{r7}
 8007486:	b095      	sub	sp, #84	; 0x54
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007494:	e853 3f00 	ldrex	r3, [r3]
 8007498:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800749a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	461a      	mov	r2, r3
 80074a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074aa:	643b      	str	r3, [r7, #64]	; 0x40
 80074ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80074b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80074b2:	e841 2300 	strex	r3, r2, [r1]
 80074b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1e6      	bne.n	800748c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	3308      	adds	r3, #8
 80074c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c6:	6a3b      	ldr	r3, [r7, #32]
 80074c8:	e853 3f00 	ldrex	r3, [r3]
 80074cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074d4:	f023 0301 	bic.w	r3, r3, #1
 80074d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	3308      	adds	r3, #8
 80074e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074ea:	e841 2300 	strex	r3, r2, [r1]
 80074ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1e3      	bne.n	80074be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d118      	bne.n	8007530 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	e853 3f00 	ldrex	r3, [r3]
 800750a:	60bb      	str	r3, [r7, #8]
   return(result);
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	f023 0310 	bic.w	r3, r3, #16
 8007512:	647b      	str	r3, [r7, #68]	; 0x44
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	461a      	mov	r2, r3
 800751a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800751c:	61bb      	str	r3, [r7, #24]
 800751e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007520:	6979      	ldr	r1, [r7, #20]
 8007522:	69ba      	ldr	r2, [r7, #24]
 8007524:	e841 2300 	strex	r3, r2, [r1]
 8007528:	613b      	str	r3, [r7, #16]
   return(result);
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1e6      	bne.n	80074fe <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2220      	movs	r2, #32
 8007534:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007544:	bf00      	nop
 8007546:	3754      	adds	r7, #84	; 0x54
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800755c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2200      	movs	r2, #0
 800756a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f7ff f996 	bl	80068a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007574:	bf00      	nop
 8007576:	3710      	adds	r7, #16
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b088      	sub	sp, #32
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	e853 3f00 	ldrex	r3, [r3]
 8007590:	60bb      	str	r3, [r7, #8]
   return(result);
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007598:	61fb      	str	r3, [r7, #28]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	461a      	mov	r2, r3
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	61bb      	str	r3, [r7, #24]
 80075a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a6:	6979      	ldr	r1, [r7, #20]
 80075a8:	69ba      	ldr	r2, [r7, #24]
 80075aa:	e841 2300 	strex	r3, r2, [r1]
 80075ae:	613b      	str	r3, [r7, #16]
   return(result);
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1e6      	bne.n	8007584 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2220      	movs	r2, #32
 80075ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f7ff f961 	bl	800688c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075ca:	bf00      	nop
 80075cc:	3720      	adds	r7, #32
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b096      	sub	sp, #88	; 0x58
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80075e0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ea:	2b22      	cmp	r3, #34	; 0x22
 80075ec:	f040 8095 	bne.w	800771a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80075fa:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80075fe:	b2d9      	uxtb	r1, r3
 8007600:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007604:	b2da      	uxtb	r2, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800760a:	400a      	ands	r2, r1
 800760c:	b2d2      	uxtb	r2, r2
 800760e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007614:	1c5a      	adds	r2, r3, #1
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007620:	b29b      	uxth	r3, r3
 8007622:	3b01      	subs	r3, #1
 8007624:	b29a      	uxth	r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007632:	b29b      	uxth	r3, r3
 8007634:	2b00      	cmp	r3, #0
 8007636:	d178      	bne.n	800772a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007640:	e853 3f00 	ldrex	r3, [r3]
 8007644:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007648:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800764c:	653b      	str	r3, [r7, #80]	; 0x50
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	461a      	mov	r2, r3
 8007654:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007656:	647b      	str	r3, [r7, #68]	; 0x44
 8007658:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800765c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800765e:	e841 2300 	strex	r3, r2, [r1]
 8007662:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007666:	2b00      	cmp	r3, #0
 8007668:	d1e6      	bne.n	8007638 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	3308      	adds	r3, #8
 8007670:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007674:	e853 3f00 	ldrex	r3, [r3]
 8007678:	623b      	str	r3, [r7, #32]
   return(result);
 800767a:	6a3b      	ldr	r3, [r7, #32]
 800767c:	f023 0301 	bic.w	r3, r3, #1
 8007680:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	3308      	adds	r3, #8
 8007688:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800768a:	633a      	str	r2, [r7, #48]	; 0x30
 800768c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007692:	e841 2300 	strex	r3, r2, [r1]
 8007696:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769a:	2b00      	cmp	r3, #0
 800769c:	d1e5      	bne.n	800766a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2220      	movs	r2, #32
 80076a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d12e      	bne.n	8007712 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	e853 3f00 	ldrex	r3, [r3]
 80076c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f023 0310 	bic.w	r3, r3, #16
 80076ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	461a      	mov	r2, r3
 80076d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076d8:	61fb      	str	r3, [r7, #28]
 80076da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076dc:	69b9      	ldr	r1, [r7, #24]
 80076de:	69fa      	ldr	r2, [r7, #28]
 80076e0:	e841 2300 	strex	r3, r2, [r1]
 80076e4:	617b      	str	r3, [r7, #20]
   return(result);
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1e6      	bne.n	80076ba <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	69db      	ldr	r3, [r3, #28]
 80076f2:	f003 0310 	and.w	r3, r3, #16
 80076f6:	2b10      	cmp	r3, #16
 80076f8:	d103      	bne.n	8007702 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2210      	movs	r2, #16
 8007700:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007708:	4619      	mov	r1, r3
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f7ff f8d2 	bl	80068b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007710:	e00b      	b.n	800772a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f7f9 fa86 	bl	8000c24 <HAL_UART_RxCpltCallback>
}
 8007718:	e007      	b.n	800772a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	699a      	ldr	r2, [r3, #24]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f042 0208 	orr.w	r2, r2, #8
 8007728:	619a      	str	r2, [r3, #24]
}
 800772a:	bf00      	nop
 800772c:	3758      	adds	r7, #88	; 0x58
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b096      	sub	sp, #88	; 0x58
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007740:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800774a:	2b22      	cmp	r3, #34	; 0x22
 800774c:	f040 8095 	bne.w	800787a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007756:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800775e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007760:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007764:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007768:	4013      	ands	r3, r2
 800776a:	b29a      	uxth	r2, r3
 800776c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800776e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007774:	1c9a      	adds	r2, r3, #2
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007780:	b29b      	uxth	r3, r3
 8007782:	3b01      	subs	r3, #1
 8007784:	b29a      	uxth	r2, r3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007792:	b29b      	uxth	r3, r3
 8007794:	2b00      	cmp	r3, #0
 8007796:	d178      	bne.n	800788a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a0:	e853 3f00 	ldrex	r3, [r3]
 80077a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	461a      	mov	r2, r3
 80077b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077b6:	643b      	str	r3, [r7, #64]	; 0x40
 80077b8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077be:	e841 2300 	strex	r3, r2, [r1]
 80077c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1e6      	bne.n	8007798 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	3308      	adds	r3, #8
 80077d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d2:	6a3b      	ldr	r3, [r7, #32]
 80077d4:	e853 3f00 	ldrex	r3, [r3]
 80077d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	f023 0301 	bic.w	r3, r3, #1
 80077e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	3308      	adds	r3, #8
 80077e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077f2:	e841 2300 	strex	r3, r2, [r1]
 80077f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1e5      	bne.n	80077ca <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2220      	movs	r2, #32
 8007802:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007810:	2b01      	cmp	r3, #1
 8007812:	d12e      	bne.n	8007872 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	e853 3f00 	ldrex	r3, [r3]
 8007826:	60bb      	str	r3, [r7, #8]
   return(result);
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	f023 0310 	bic.w	r3, r3, #16
 800782e:	647b      	str	r3, [r7, #68]	; 0x44
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	461a      	mov	r2, r3
 8007836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007838:	61bb      	str	r3, [r7, #24]
 800783a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783c:	6979      	ldr	r1, [r7, #20]
 800783e:	69ba      	ldr	r2, [r7, #24]
 8007840:	e841 2300 	strex	r3, r2, [r1]
 8007844:	613b      	str	r3, [r7, #16]
   return(result);
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d1e6      	bne.n	800781a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	69db      	ldr	r3, [r3, #28]
 8007852:	f003 0310 	and.w	r3, r3, #16
 8007856:	2b10      	cmp	r3, #16
 8007858:	d103      	bne.n	8007862 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2210      	movs	r2, #16
 8007860:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007868:	4619      	mov	r1, r3
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f7ff f822 	bl	80068b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007870:	e00b      	b.n	800788a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f7f9 f9d6 	bl	8000c24 <HAL_UART_RxCpltCallback>
}
 8007878:	e007      	b.n	800788a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	699a      	ldr	r2, [r3, #24]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f042 0208 	orr.w	r2, r2, #8
 8007888:	619a      	str	r2, [r3, #24]
}
 800788a:	bf00      	nop
 800788c:	3758      	adds	r7, #88	; 0x58
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
	...

08007894 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b0a6      	sub	sp, #152	; 0x98
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80078a2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	69db      	ldr	r3, [r3, #28]
 80078ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078ca:	2b22      	cmp	r3, #34	; 0x22
 80078cc:	f040 814f 	bne.w	8007b6e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80078d6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80078da:	e0f6      	b.n	8007aca <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80078e6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80078ea:	b2d9      	uxtb	r1, r3
 80078ec:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80078f0:	b2da      	uxtb	r2, r3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078f6:	400a      	ands	r2, r1
 80078f8:	b2d2      	uxtb	r2, r2
 80078fa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007900:	1c5a      	adds	r2, r3, #1
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800790c:	b29b      	uxth	r3, r3
 800790e:	3b01      	subs	r3, #1
 8007910:	b29a      	uxth	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	69db      	ldr	r3, [r3, #28]
 800791e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007922:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007926:	f003 0307 	and.w	r3, r3, #7
 800792a:	2b00      	cmp	r3, #0
 800792c:	d053      	beq.n	80079d6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800792e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007932:	f003 0301 	and.w	r3, r3, #1
 8007936:	2b00      	cmp	r3, #0
 8007938:	d011      	beq.n	800795e <UART_RxISR_8BIT_FIFOEN+0xca>
 800793a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800793e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007942:	2b00      	cmp	r3, #0
 8007944:	d00b      	beq.n	800795e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2201      	movs	r2, #1
 800794c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007954:	f043 0201 	orr.w	r2, r3, #1
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800795e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007962:	f003 0302 	and.w	r3, r3, #2
 8007966:	2b00      	cmp	r3, #0
 8007968:	d011      	beq.n	800798e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800796a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800796e:	f003 0301 	and.w	r3, r3, #1
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00b      	beq.n	800798e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2202      	movs	r2, #2
 800797c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007984:	f043 0204 	orr.w	r2, r3, #4
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800798e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007992:	f003 0304 	and.w	r3, r3, #4
 8007996:	2b00      	cmp	r3, #0
 8007998:	d011      	beq.n	80079be <UART_RxISR_8BIT_FIFOEN+0x12a>
 800799a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800799e:	f003 0301 	and.w	r3, r3, #1
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00b      	beq.n	80079be <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2204      	movs	r2, #4
 80079ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079b4:	f043 0202 	orr.w	r2, r3, #2
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d006      	beq.n	80079d6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f7fe ff69 	bl	80068a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80079dc:	b29b      	uxth	r3, r3
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d173      	bne.n	8007aca <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079ea:	e853 3f00 	ldrex	r3, [r3]
 80079ee:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80079f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	461a      	mov	r2, r3
 8007a00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a04:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a06:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a08:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007a0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a0c:	e841 2300 	strex	r3, r2, [r1]
 8007a10:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007a12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1e4      	bne.n	80079e2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	3308      	adds	r3, #8
 8007a1e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a22:	e853 3f00 	ldrex	r3, [r3]
 8007a26:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a2e:	f023 0301 	bic.w	r3, r3, #1
 8007a32:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	3308      	adds	r3, #8
 8007a3a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007a3c:	657a      	str	r2, [r7, #84]	; 0x54
 8007a3e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a40:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007a42:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007a44:	e841 2300 	strex	r3, r2, [r1]
 8007a48:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1e3      	bne.n	8007a18 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2220      	movs	r2, #32
 8007a54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d12e      	bne.n	8007ac4 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a74:	e853 3f00 	ldrex	r3, [r3]
 8007a78:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7c:	f023 0310 	bic.w	r3, r3, #16
 8007a80:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	461a      	mov	r2, r3
 8007a88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a8a:	643b      	str	r3, [r7, #64]	; 0x40
 8007a8c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a92:	e841 2300 	strex	r3, r2, [r1]
 8007a96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1e6      	bne.n	8007a6c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	69db      	ldr	r3, [r3, #28]
 8007aa4:	f003 0310 	and.w	r3, r3, #16
 8007aa8:	2b10      	cmp	r3, #16
 8007aaa:	d103      	bne.n	8007ab4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2210      	movs	r2, #16
 8007ab2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007aba:	4619      	mov	r1, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f7fe fef9 	bl	80068b4 <HAL_UARTEx_RxEventCallback>
 8007ac2:	e002      	b.n	8007aca <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f7f9 f8ad 	bl	8000c24 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007aca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d006      	beq.n	8007ae0 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8007ad2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ad6:	f003 0320 	and.w	r3, r3, #32
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	f47f aefe 	bne.w	80078dc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ae6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007aea:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d045      	beq.n	8007b7e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007af8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d23e      	bcs.n	8007b7e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	3308      	adds	r3, #8
 8007b06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b08:	6a3b      	ldr	r3, [r7, #32]
 8007b0a:	e853 3f00 	ldrex	r3, [r3]
 8007b0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b16:	673b      	str	r3, [r7, #112]	; 0x70
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	3308      	adds	r3, #8
 8007b1e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007b20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b28:	e841 2300 	strex	r3, r2, [r1]
 8007b2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1e5      	bne.n	8007b00 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a14      	ldr	r2, [pc, #80]	; (8007b88 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8007b38:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	e853 3f00 	ldrex	r3, [r3]
 8007b46:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	f043 0320 	orr.w	r3, r3, #32
 8007b4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	461a      	mov	r2, r3
 8007b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b58:	61bb      	str	r3, [r7, #24]
 8007b5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5c:	6979      	ldr	r1, [r7, #20]
 8007b5e:	69ba      	ldr	r2, [r7, #24]
 8007b60:	e841 2300 	strex	r3, r2, [r1]
 8007b64:	613b      	str	r3, [r7, #16]
   return(result);
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d1e6      	bne.n	8007b3a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b6c:	e007      	b.n	8007b7e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	699a      	ldr	r2, [r3, #24]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f042 0208 	orr.w	r2, r2, #8
 8007b7c:	619a      	str	r2, [r3, #24]
}
 8007b7e:	bf00      	nop
 8007b80:	3798      	adds	r7, #152	; 0x98
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	080075d3 	.word	0x080075d3

08007b8c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b0a8      	sub	sp, #160	; 0xa0
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007b9a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	69db      	ldr	r3, [r3, #28]
 8007ba4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bc2:	2b22      	cmp	r3, #34	; 0x22
 8007bc4:	f040 8153 	bne.w	8007e6e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007bce:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007bd2:	e0fa      	b.n	8007dca <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bda:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007be2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8007be6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8007bea:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007bee:	4013      	ands	r3, r2
 8007bf0:	b29a      	uxth	r2, r3
 8007bf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007bf6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bfc:	1c9a      	adds	r2, r3, #2
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	b29a      	uxth	r2, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	69db      	ldr	r3, [r3, #28]
 8007c1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007c1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c22:	f003 0307 	and.w	r3, r3, #7
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d053      	beq.n	8007cd2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c2e:	f003 0301 	and.w	r3, r3, #1
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d011      	beq.n	8007c5a <UART_RxISR_16BIT_FIFOEN+0xce>
 8007c36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00b      	beq.n	8007c5a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2201      	movs	r2, #1
 8007c48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c50:	f043 0201 	orr.w	r2, r3, #1
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c5e:	f003 0302 	and.w	r3, r3, #2
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d011      	beq.n	8007c8a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007c66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c6a:	f003 0301 	and.w	r3, r3, #1
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00b      	beq.n	8007c8a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2202      	movs	r2, #2
 8007c78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c80:	f043 0204 	orr.w	r2, r3, #4
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c8e:	f003 0304 	and.w	r3, r3, #4
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d011      	beq.n	8007cba <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007c96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c9a:	f003 0301 	and.w	r3, r3, #1
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00b      	beq.n	8007cba <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2204      	movs	r2, #4
 8007ca8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cb0:	f043 0202 	orr.w	r2, r3, #2
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d006      	beq.n	8007cd2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f7fe fdeb 	bl	80068a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d175      	bne.n	8007dca <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ce6:	e853 3f00 	ldrex	r3, [r3]
 8007cea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007cec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cf2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d02:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d04:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d06:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d08:	e841 2300 	strex	r3, r2, [r1]
 8007d0c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1e4      	bne.n	8007cde <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	3308      	adds	r3, #8
 8007d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d1e:	e853 3f00 	ldrex	r3, [r3]
 8007d22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d2a:	f023 0301 	bic.w	r3, r3, #1
 8007d2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	3308      	adds	r3, #8
 8007d38:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007d3c:	65ba      	str	r2, [r7, #88]	; 0x58
 8007d3e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d44:	e841 2300 	strex	r3, r2, [r1]
 8007d48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d1e1      	bne.n	8007d14 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2220      	movs	r2, #32
 8007d54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d12e      	bne.n	8007dc4 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d74:	e853 3f00 	ldrex	r3, [r3]
 8007d78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d7c:	f023 0310 	bic.w	r3, r3, #16
 8007d80:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	461a      	mov	r2, r3
 8007d88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007d8a:	647b      	str	r3, [r7, #68]	; 0x44
 8007d8c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d92:	e841 2300 	strex	r3, r2, [r1]
 8007d96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d1e6      	bne.n	8007d6c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	69db      	ldr	r3, [r3, #28]
 8007da4:	f003 0310 	and.w	r3, r3, #16
 8007da8:	2b10      	cmp	r3, #16
 8007daa:	d103      	bne.n	8007db4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2210      	movs	r2, #16
 8007db2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007dba:	4619      	mov	r1, r3
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f7fe fd79 	bl	80068b4 <HAL_UARTEx_RxEventCallback>
 8007dc2:	e002      	b.n	8007dca <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f7f8 ff2d 	bl	8000c24 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007dca:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d006      	beq.n	8007de0 <UART_RxISR_16BIT_FIFOEN+0x254>
 8007dd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007dd6:	f003 0320 	and.w	r3, r3, #32
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	f47f aefa 	bne.w	8007bd4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007de6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007dea:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d045      	beq.n	8007e7e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007df8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d23e      	bcs.n	8007e7e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	3308      	adds	r3, #8
 8007e06:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0a:	e853 3f00 	ldrex	r3, [r3]
 8007e0e:	623b      	str	r3, [r7, #32]
   return(result);
 8007e10:	6a3b      	ldr	r3, [r7, #32]
 8007e12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e16:	677b      	str	r3, [r7, #116]	; 0x74
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	3308      	adds	r3, #8
 8007e1e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007e20:	633a      	str	r2, [r7, #48]	; 0x30
 8007e22:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e28:	e841 2300 	strex	r3, r2, [r1]
 8007e2c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d1e5      	bne.n	8007e00 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a14      	ldr	r2, [pc, #80]	; (8007e88 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8007e38:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	e853 3f00 	ldrex	r3, [r3]
 8007e46:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f043 0320 	orr.w	r3, r3, #32
 8007e4e:	673b      	str	r3, [r7, #112]	; 0x70
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	461a      	mov	r2, r3
 8007e56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e58:	61fb      	str	r3, [r7, #28]
 8007e5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5c:	69b9      	ldr	r1, [r7, #24]
 8007e5e:	69fa      	ldr	r2, [r7, #28]
 8007e60:	e841 2300 	strex	r3, r2, [r1]
 8007e64:	617b      	str	r3, [r7, #20]
   return(result);
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1e6      	bne.n	8007e3a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e6c:	e007      	b.n	8007e7e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	699a      	ldr	r2, [r3, #24]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f042 0208 	orr.w	r2, r2, #8
 8007e7c:	619a      	str	r2, [r3, #24]
}
 8007e7e:	bf00      	nop
 8007e80:	37a0      	adds	r7, #160	; 0xa0
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	08007733 	.word	0x08007733

08007e8c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007e94:	bf00      	nop
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007ea8:	bf00      	nop
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007ebc:	bf00      	nop
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d101      	bne.n	8007ede <HAL_UARTEx_DisableFifoMode+0x16>
 8007eda:	2302      	movs	r3, #2
 8007edc:	e027      	b.n	8007f2e <HAL_UARTEx_DisableFifoMode+0x66>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2224      	movs	r2, #36	; 0x24
 8007eea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f022 0201 	bic.w	r2, r2, #1
 8007f04:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007f0c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2220      	movs	r2, #32
 8007f20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3714      	adds	r7, #20
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr

08007f3a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b084      	sub	sp, #16
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
 8007f42:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d101      	bne.n	8007f52 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007f4e:	2302      	movs	r3, #2
 8007f50:	e02d      	b.n	8007fae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2201      	movs	r2, #1
 8007f56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2224      	movs	r2, #36	; 0x24
 8007f5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f022 0201 	bic.w	r2, r2, #1
 8007f78:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	683a      	ldr	r2, [r7, #0]
 8007f8a:	430a      	orrs	r2, r1
 8007f8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 f850 	bl	8008034 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2220      	movs	r2, #32
 8007fa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b084      	sub	sp, #16
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
 8007fbe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d101      	bne.n	8007fce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007fca:	2302      	movs	r3, #2
 8007fcc:	e02d      	b.n	800802a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2224      	movs	r2, #36	; 0x24
 8007fda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f022 0201 	bic.w	r2, r2, #1
 8007ff4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	683a      	ldr	r2, [r7, #0]
 8008006:	430a      	orrs	r2, r1
 8008008:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 f812 	bl	8008034 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2220      	movs	r2, #32
 800801c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
	...

08008034 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008040:	2b00      	cmp	r3, #0
 8008042:	d108      	bne.n	8008056 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2201      	movs	r2, #1
 8008048:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008054:	e031      	b.n	80080ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008056:	2308      	movs	r3, #8
 8008058:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800805a:	2308      	movs	r3, #8
 800805c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	0e5b      	lsrs	r3, r3, #25
 8008066:	b2db      	uxtb	r3, r3
 8008068:	f003 0307 	and.w	r3, r3, #7
 800806c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	0f5b      	lsrs	r3, r3, #29
 8008076:	b2db      	uxtb	r3, r3
 8008078:	f003 0307 	and.w	r3, r3, #7
 800807c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800807e:	7bbb      	ldrb	r3, [r7, #14]
 8008080:	7b3a      	ldrb	r2, [r7, #12]
 8008082:	4911      	ldr	r1, [pc, #68]	; (80080c8 <UARTEx_SetNbDataToProcess+0x94>)
 8008084:	5c8a      	ldrb	r2, [r1, r2]
 8008086:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800808a:	7b3a      	ldrb	r2, [r7, #12]
 800808c:	490f      	ldr	r1, [pc, #60]	; (80080cc <UARTEx_SetNbDataToProcess+0x98>)
 800808e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008090:	fb93 f3f2 	sdiv	r3, r3, r2
 8008094:	b29a      	uxth	r2, r3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800809c:	7bfb      	ldrb	r3, [r7, #15]
 800809e:	7b7a      	ldrb	r2, [r7, #13]
 80080a0:	4909      	ldr	r1, [pc, #36]	; (80080c8 <UARTEx_SetNbDataToProcess+0x94>)
 80080a2:	5c8a      	ldrb	r2, [r1, r2]
 80080a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80080a8:	7b7a      	ldrb	r2, [r7, #13]
 80080aa:	4908      	ldr	r1, [pc, #32]	; (80080cc <UARTEx_SetNbDataToProcess+0x98>)
 80080ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80080ba:	bf00      	nop
 80080bc:	3714      	adds	r7, #20
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr
 80080c6:	bf00      	nop
 80080c8:	08009610 	.word	0x08009610
 80080cc:	08009618 	.word	0x08009618

080080d0 <sniprintf>:
 80080d0:	b40c      	push	{r2, r3}
 80080d2:	b530      	push	{r4, r5, lr}
 80080d4:	4b17      	ldr	r3, [pc, #92]	; (8008134 <sniprintf+0x64>)
 80080d6:	1e0c      	subs	r4, r1, #0
 80080d8:	681d      	ldr	r5, [r3, #0]
 80080da:	b09d      	sub	sp, #116	; 0x74
 80080dc:	da08      	bge.n	80080f0 <sniprintf+0x20>
 80080de:	238b      	movs	r3, #139	; 0x8b
 80080e0:	602b      	str	r3, [r5, #0]
 80080e2:	f04f 30ff 	mov.w	r0, #4294967295
 80080e6:	b01d      	add	sp, #116	; 0x74
 80080e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080ec:	b002      	add	sp, #8
 80080ee:	4770      	bx	lr
 80080f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80080f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80080f8:	bf14      	ite	ne
 80080fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80080fe:	4623      	moveq	r3, r4
 8008100:	9304      	str	r3, [sp, #16]
 8008102:	9307      	str	r3, [sp, #28]
 8008104:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008108:	9002      	str	r0, [sp, #8]
 800810a:	9006      	str	r0, [sp, #24]
 800810c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008110:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008112:	ab21      	add	r3, sp, #132	; 0x84
 8008114:	a902      	add	r1, sp, #8
 8008116:	4628      	mov	r0, r5
 8008118:	9301      	str	r3, [sp, #4]
 800811a:	f000 f9d3 	bl	80084c4 <_svfiprintf_r>
 800811e:	1c43      	adds	r3, r0, #1
 8008120:	bfbc      	itt	lt
 8008122:	238b      	movlt	r3, #139	; 0x8b
 8008124:	602b      	strlt	r3, [r5, #0]
 8008126:	2c00      	cmp	r4, #0
 8008128:	d0dd      	beq.n	80080e6 <sniprintf+0x16>
 800812a:	9b02      	ldr	r3, [sp, #8]
 800812c:	2200      	movs	r2, #0
 800812e:	701a      	strb	r2, [r3, #0]
 8008130:	e7d9      	b.n	80080e6 <sniprintf+0x16>
 8008132:	bf00      	nop
 8008134:	200000d0 	.word	0x200000d0

08008138 <siscanf>:
 8008138:	b40e      	push	{r1, r2, r3}
 800813a:	b510      	push	{r4, lr}
 800813c:	b09f      	sub	sp, #124	; 0x7c
 800813e:	ac21      	add	r4, sp, #132	; 0x84
 8008140:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008144:	f854 2b04 	ldr.w	r2, [r4], #4
 8008148:	9201      	str	r2, [sp, #4]
 800814a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800814e:	9004      	str	r0, [sp, #16]
 8008150:	9008      	str	r0, [sp, #32]
 8008152:	f7f8 f86f 	bl	8000234 <strlen>
 8008156:	4b0c      	ldr	r3, [pc, #48]	; (8008188 <siscanf+0x50>)
 8008158:	9005      	str	r0, [sp, #20]
 800815a:	9009      	str	r0, [sp, #36]	; 0x24
 800815c:	930d      	str	r3, [sp, #52]	; 0x34
 800815e:	480b      	ldr	r0, [pc, #44]	; (800818c <siscanf+0x54>)
 8008160:	9a01      	ldr	r2, [sp, #4]
 8008162:	6800      	ldr	r0, [r0, #0]
 8008164:	9403      	str	r4, [sp, #12]
 8008166:	2300      	movs	r3, #0
 8008168:	9311      	str	r3, [sp, #68]	; 0x44
 800816a:	9316      	str	r3, [sp, #88]	; 0x58
 800816c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008170:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008174:	a904      	add	r1, sp, #16
 8008176:	4623      	mov	r3, r4
 8008178:	f000 fafc 	bl	8008774 <__ssvfiscanf_r>
 800817c:	b01f      	add	sp, #124	; 0x7c
 800817e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008182:	b003      	add	sp, #12
 8008184:	4770      	bx	lr
 8008186:	bf00      	nop
 8008188:	08008191 	.word	0x08008191
 800818c:	200000d0 	.word	0x200000d0

08008190 <__seofread>:
 8008190:	2000      	movs	r0, #0
 8008192:	4770      	bx	lr

08008194 <memset>:
 8008194:	4402      	add	r2, r0
 8008196:	4603      	mov	r3, r0
 8008198:	4293      	cmp	r3, r2
 800819a:	d100      	bne.n	800819e <memset+0xa>
 800819c:	4770      	bx	lr
 800819e:	f803 1b01 	strb.w	r1, [r3], #1
 80081a2:	e7f9      	b.n	8008198 <memset+0x4>

080081a4 <strncmp>:
 80081a4:	b510      	push	{r4, lr}
 80081a6:	b16a      	cbz	r2, 80081c4 <strncmp+0x20>
 80081a8:	3901      	subs	r1, #1
 80081aa:	1884      	adds	r4, r0, r2
 80081ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081b0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d103      	bne.n	80081c0 <strncmp+0x1c>
 80081b8:	42a0      	cmp	r0, r4
 80081ba:	d001      	beq.n	80081c0 <strncmp+0x1c>
 80081bc:	2a00      	cmp	r2, #0
 80081be:	d1f5      	bne.n	80081ac <strncmp+0x8>
 80081c0:	1ad0      	subs	r0, r2, r3
 80081c2:	bd10      	pop	{r4, pc}
 80081c4:	4610      	mov	r0, r2
 80081c6:	e7fc      	b.n	80081c2 <strncmp+0x1e>

080081c8 <__errno>:
 80081c8:	4b01      	ldr	r3, [pc, #4]	; (80081d0 <__errno+0x8>)
 80081ca:	6818      	ldr	r0, [r3, #0]
 80081cc:	4770      	bx	lr
 80081ce:	bf00      	nop
 80081d0:	200000d0 	.word	0x200000d0

080081d4 <__libc_init_array>:
 80081d4:	b570      	push	{r4, r5, r6, lr}
 80081d6:	4d0d      	ldr	r5, [pc, #52]	; (800820c <__libc_init_array+0x38>)
 80081d8:	4c0d      	ldr	r4, [pc, #52]	; (8008210 <__libc_init_array+0x3c>)
 80081da:	1b64      	subs	r4, r4, r5
 80081dc:	10a4      	asrs	r4, r4, #2
 80081de:	2600      	movs	r6, #0
 80081e0:	42a6      	cmp	r6, r4
 80081e2:	d109      	bne.n	80081f8 <__libc_init_array+0x24>
 80081e4:	4d0b      	ldr	r5, [pc, #44]	; (8008214 <__libc_init_array+0x40>)
 80081e6:	4c0c      	ldr	r4, [pc, #48]	; (8008218 <__libc_init_array+0x44>)
 80081e8:	f001 f8f6 	bl	80093d8 <_init>
 80081ec:	1b64      	subs	r4, r4, r5
 80081ee:	10a4      	asrs	r4, r4, #2
 80081f0:	2600      	movs	r6, #0
 80081f2:	42a6      	cmp	r6, r4
 80081f4:	d105      	bne.n	8008202 <__libc_init_array+0x2e>
 80081f6:	bd70      	pop	{r4, r5, r6, pc}
 80081f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80081fc:	4798      	blx	r3
 80081fe:	3601      	adds	r6, #1
 8008200:	e7ee      	b.n	80081e0 <__libc_init_array+0xc>
 8008202:	f855 3b04 	ldr.w	r3, [r5], #4
 8008206:	4798      	blx	r3
 8008208:	3601      	adds	r6, #1
 800820a:	e7f2      	b.n	80081f2 <__libc_init_array+0x1e>
 800820c:	08009778 	.word	0x08009778
 8008210:	08009778 	.word	0x08009778
 8008214:	08009778 	.word	0x08009778
 8008218:	0800977c 	.word	0x0800977c

0800821c <__retarget_lock_acquire_recursive>:
 800821c:	4770      	bx	lr

0800821e <__retarget_lock_release_recursive>:
 800821e:	4770      	bx	lr

08008220 <_free_r>:
 8008220:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008222:	2900      	cmp	r1, #0
 8008224:	d044      	beq.n	80082b0 <_free_r+0x90>
 8008226:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800822a:	9001      	str	r0, [sp, #4]
 800822c:	2b00      	cmp	r3, #0
 800822e:	f1a1 0404 	sub.w	r4, r1, #4
 8008232:	bfb8      	it	lt
 8008234:	18e4      	addlt	r4, r4, r3
 8008236:	f000 f8df 	bl	80083f8 <__malloc_lock>
 800823a:	4a1e      	ldr	r2, [pc, #120]	; (80082b4 <_free_r+0x94>)
 800823c:	9801      	ldr	r0, [sp, #4]
 800823e:	6813      	ldr	r3, [r2, #0]
 8008240:	b933      	cbnz	r3, 8008250 <_free_r+0x30>
 8008242:	6063      	str	r3, [r4, #4]
 8008244:	6014      	str	r4, [r2, #0]
 8008246:	b003      	add	sp, #12
 8008248:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800824c:	f000 b8da 	b.w	8008404 <__malloc_unlock>
 8008250:	42a3      	cmp	r3, r4
 8008252:	d908      	bls.n	8008266 <_free_r+0x46>
 8008254:	6825      	ldr	r5, [r4, #0]
 8008256:	1961      	adds	r1, r4, r5
 8008258:	428b      	cmp	r3, r1
 800825a:	bf01      	itttt	eq
 800825c:	6819      	ldreq	r1, [r3, #0]
 800825e:	685b      	ldreq	r3, [r3, #4]
 8008260:	1949      	addeq	r1, r1, r5
 8008262:	6021      	streq	r1, [r4, #0]
 8008264:	e7ed      	b.n	8008242 <_free_r+0x22>
 8008266:	461a      	mov	r2, r3
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	b10b      	cbz	r3, 8008270 <_free_r+0x50>
 800826c:	42a3      	cmp	r3, r4
 800826e:	d9fa      	bls.n	8008266 <_free_r+0x46>
 8008270:	6811      	ldr	r1, [r2, #0]
 8008272:	1855      	adds	r5, r2, r1
 8008274:	42a5      	cmp	r5, r4
 8008276:	d10b      	bne.n	8008290 <_free_r+0x70>
 8008278:	6824      	ldr	r4, [r4, #0]
 800827a:	4421      	add	r1, r4
 800827c:	1854      	adds	r4, r2, r1
 800827e:	42a3      	cmp	r3, r4
 8008280:	6011      	str	r1, [r2, #0]
 8008282:	d1e0      	bne.n	8008246 <_free_r+0x26>
 8008284:	681c      	ldr	r4, [r3, #0]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	6053      	str	r3, [r2, #4]
 800828a:	440c      	add	r4, r1
 800828c:	6014      	str	r4, [r2, #0]
 800828e:	e7da      	b.n	8008246 <_free_r+0x26>
 8008290:	d902      	bls.n	8008298 <_free_r+0x78>
 8008292:	230c      	movs	r3, #12
 8008294:	6003      	str	r3, [r0, #0]
 8008296:	e7d6      	b.n	8008246 <_free_r+0x26>
 8008298:	6825      	ldr	r5, [r4, #0]
 800829a:	1961      	adds	r1, r4, r5
 800829c:	428b      	cmp	r3, r1
 800829e:	bf04      	itt	eq
 80082a0:	6819      	ldreq	r1, [r3, #0]
 80082a2:	685b      	ldreq	r3, [r3, #4]
 80082a4:	6063      	str	r3, [r4, #4]
 80082a6:	bf04      	itt	eq
 80082a8:	1949      	addeq	r1, r1, r5
 80082aa:	6021      	streq	r1, [r4, #0]
 80082ac:	6054      	str	r4, [r2, #4]
 80082ae:	e7ca      	b.n	8008246 <_free_r+0x26>
 80082b0:	b003      	add	sp, #12
 80082b2:	bd30      	pop	{r4, r5, pc}
 80082b4:	20000544 	.word	0x20000544

080082b8 <sbrk_aligned>:
 80082b8:	b570      	push	{r4, r5, r6, lr}
 80082ba:	4e0e      	ldr	r6, [pc, #56]	; (80082f4 <sbrk_aligned+0x3c>)
 80082bc:	460c      	mov	r4, r1
 80082be:	6831      	ldr	r1, [r6, #0]
 80082c0:	4605      	mov	r5, r0
 80082c2:	b911      	cbnz	r1, 80082ca <sbrk_aligned+0x12>
 80082c4:	f000 ff3a 	bl	800913c <_sbrk_r>
 80082c8:	6030      	str	r0, [r6, #0]
 80082ca:	4621      	mov	r1, r4
 80082cc:	4628      	mov	r0, r5
 80082ce:	f000 ff35 	bl	800913c <_sbrk_r>
 80082d2:	1c43      	adds	r3, r0, #1
 80082d4:	d00a      	beq.n	80082ec <sbrk_aligned+0x34>
 80082d6:	1cc4      	adds	r4, r0, #3
 80082d8:	f024 0403 	bic.w	r4, r4, #3
 80082dc:	42a0      	cmp	r0, r4
 80082de:	d007      	beq.n	80082f0 <sbrk_aligned+0x38>
 80082e0:	1a21      	subs	r1, r4, r0
 80082e2:	4628      	mov	r0, r5
 80082e4:	f000 ff2a 	bl	800913c <_sbrk_r>
 80082e8:	3001      	adds	r0, #1
 80082ea:	d101      	bne.n	80082f0 <sbrk_aligned+0x38>
 80082ec:	f04f 34ff 	mov.w	r4, #4294967295
 80082f0:	4620      	mov	r0, r4
 80082f2:	bd70      	pop	{r4, r5, r6, pc}
 80082f4:	20000548 	.word	0x20000548

080082f8 <_malloc_r>:
 80082f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082fc:	1ccd      	adds	r5, r1, #3
 80082fe:	f025 0503 	bic.w	r5, r5, #3
 8008302:	3508      	adds	r5, #8
 8008304:	2d0c      	cmp	r5, #12
 8008306:	bf38      	it	cc
 8008308:	250c      	movcc	r5, #12
 800830a:	2d00      	cmp	r5, #0
 800830c:	4607      	mov	r7, r0
 800830e:	db01      	blt.n	8008314 <_malloc_r+0x1c>
 8008310:	42a9      	cmp	r1, r5
 8008312:	d905      	bls.n	8008320 <_malloc_r+0x28>
 8008314:	230c      	movs	r3, #12
 8008316:	603b      	str	r3, [r7, #0]
 8008318:	2600      	movs	r6, #0
 800831a:	4630      	mov	r0, r6
 800831c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008320:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80083f4 <_malloc_r+0xfc>
 8008324:	f000 f868 	bl	80083f8 <__malloc_lock>
 8008328:	f8d8 3000 	ldr.w	r3, [r8]
 800832c:	461c      	mov	r4, r3
 800832e:	bb5c      	cbnz	r4, 8008388 <_malloc_r+0x90>
 8008330:	4629      	mov	r1, r5
 8008332:	4638      	mov	r0, r7
 8008334:	f7ff ffc0 	bl	80082b8 <sbrk_aligned>
 8008338:	1c43      	adds	r3, r0, #1
 800833a:	4604      	mov	r4, r0
 800833c:	d155      	bne.n	80083ea <_malloc_r+0xf2>
 800833e:	f8d8 4000 	ldr.w	r4, [r8]
 8008342:	4626      	mov	r6, r4
 8008344:	2e00      	cmp	r6, #0
 8008346:	d145      	bne.n	80083d4 <_malloc_r+0xdc>
 8008348:	2c00      	cmp	r4, #0
 800834a:	d048      	beq.n	80083de <_malloc_r+0xe6>
 800834c:	6823      	ldr	r3, [r4, #0]
 800834e:	4631      	mov	r1, r6
 8008350:	4638      	mov	r0, r7
 8008352:	eb04 0903 	add.w	r9, r4, r3
 8008356:	f000 fef1 	bl	800913c <_sbrk_r>
 800835a:	4581      	cmp	r9, r0
 800835c:	d13f      	bne.n	80083de <_malloc_r+0xe6>
 800835e:	6821      	ldr	r1, [r4, #0]
 8008360:	1a6d      	subs	r5, r5, r1
 8008362:	4629      	mov	r1, r5
 8008364:	4638      	mov	r0, r7
 8008366:	f7ff ffa7 	bl	80082b8 <sbrk_aligned>
 800836a:	3001      	adds	r0, #1
 800836c:	d037      	beq.n	80083de <_malloc_r+0xe6>
 800836e:	6823      	ldr	r3, [r4, #0]
 8008370:	442b      	add	r3, r5
 8008372:	6023      	str	r3, [r4, #0]
 8008374:	f8d8 3000 	ldr.w	r3, [r8]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d038      	beq.n	80083ee <_malloc_r+0xf6>
 800837c:	685a      	ldr	r2, [r3, #4]
 800837e:	42a2      	cmp	r2, r4
 8008380:	d12b      	bne.n	80083da <_malloc_r+0xe2>
 8008382:	2200      	movs	r2, #0
 8008384:	605a      	str	r2, [r3, #4]
 8008386:	e00f      	b.n	80083a8 <_malloc_r+0xb0>
 8008388:	6822      	ldr	r2, [r4, #0]
 800838a:	1b52      	subs	r2, r2, r5
 800838c:	d41f      	bmi.n	80083ce <_malloc_r+0xd6>
 800838e:	2a0b      	cmp	r2, #11
 8008390:	d917      	bls.n	80083c2 <_malloc_r+0xca>
 8008392:	1961      	adds	r1, r4, r5
 8008394:	42a3      	cmp	r3, r4
 8008396:	6025      	str	r5, [r4, #0]
 8008398:	bf18      	it	ne
 800839a:	6059      	strne	r1, [r3, #4]
 800839c:	6863      	ldr	r3, [r4, #4]
 800839e:	bf08      	it	eq
 80083a0:	f8c8 1000 	streq.w	r1, [r8]
 80083a4:	5162      	str	r2, [r4, r5]
 80083a6:	604b      	str	r3, [r1, #4]
 80083a8:	4638      	mov	r0, r7
 80083aa:	f104 060b 	add.w	r6, r4, #11
 80083ae:	f000 f829 	bl	8008404 <__malloc_unlock>
 80083b2:	f026 0607 	bic.w	r6, r6, #7
 80083b6:	1d23      	adds	r3, r4, #4
 80083b8:	1af2      	subs	r2, r6, r3
 80083ba:	d0ae      	beq.n	800831a <_malloc_r+0x22>
 80083bc:	1b9b      	subs	r3, r3, r6
 80083be:	50a3      	str	r3, [r4, r2]
 80083c0:	e7ab      	b.n	800831a <_malloc_r+0x22>
 80083c2:	42a3      	cmp	r3, r4
 80083c4:	6862      	ldr	r2, [r4, #4]
 80083c6:	d1dd      	bne.n	8008384 <_malloc_r+0x8c>
 80083c8:	f8c8 2000 	str.w	r2, [r8]
 80083cc:	e7ec      	b.n	80083a8 <_malloc_r+0xb0>
 80083ce:	4623      	mov	r3, r4
 80083d0:	6864      	ldr	r4, [r4, #4]
 80083d2:	e7ac      	b.n	800832e <_malloc_r+0x36>
 80083d4:	4634      	mov	r4, r6
 80083d6:	6876      	ldr	r6, [r6, #4]
 80083d8:	e7b4      	b.n	8008344 <_malloc_r+0x4c>
 80083da:	4613      	mov	r3, r2
 80083dc:	e7cc      	b.n	8008378 <_malloc_r+0x80>
 80083de:	230c      	movs	r3, #12
 80083e0:	603b      	str	r3, [r7, #0]
 80083e2:	4638      	mov	r0, r7
 80083e4:	f000 f80e 	bl	8008404 <__malloc_unlock>
 80083e8:	e797      	b.n	800831a <_malloc_r+0x22>
 80083ea:	6025      	str	r5, [r4, #0]
 80083ec:	e7dc      	b.n	80083a8 <_malloc_r+0xb0>
 80083ee:	605b      	str	r3, [r3, #4]
 80083f0:	deff      	udf	#255	; 0xff
 80083f2:	bf00      	nop
 80083f4:	20000544 	.word	0x20000544

080083f8 <__malloc_lock>:
 80083f8:	4801      	ldr	r0, [pc, #4]	; (8008400 <__malloc_lock+0x8>)
 80083fa:	f7ff bf0f 	b.w	800821c <__retarget_lock_acquire_recursive>
 80083fe:	bf00      	nop
 8008400:	20000540 	.word	0x20000540

08008404 <__malloc_unlock>:
 8008404:	4801      	ldr	r0, [pc, #4]	; (800840c <__malloc_unlock+0x8>)
 8008406:	f7ff bf0a 	b.w	800821e <__retarget_lock_release_recursive>
 800840a:	bf00      	nop
 800840c:	20000540 	.word	0x20000540

08008410 <__ssputs_r>:
 8008410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008414:	688e      	ldr	r6, [r1, #8]
 8008416:	461f      	mov	r7, r3
 8008418:	42be      	cmp	r6, r7
 800841a:	680b      	ldr	r3, [r1, #0]
 800841c:	4682      	mov	sl, r0
 800841e:	460c      	mov	r4, r1
 8008420:	4690      	mov	r8, r2
 8008422:	d82c      	bhi.n	800847e <__ssputs_r+0x6e>
 8008424:	898a      	ldrh	r2, [r1, #12]
 8008426:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800842a:	d026      	beq.n	800847a <__ssputs_r+0x6a>
 800842c:	6965      	ldr	r5, [r4, #20]
 800842e:	6909      	ldr	r1, [r1, #16]
 8008430:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008434:	eba3 0901 	sub.w	r9, r3, r1
 8008438:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800843c:	1c7b      	adds	r3, r7, #1
 800843e:	444b      	add	r3, r9
 8008440:	106d      	asrs	r5, r5, #1
 8008442:	429d      	cmp	r5, r3
 8008444:	bf38      	it	cc
 8008446:	461d      	movcc	r5, r3
 8008448:	0553      	lsls	r3, r2, #21
 800844a:	d527      	bpl.n	800849c <__ssputs_r+0x8c>
 800844c:	4629      	mov	r1, r5
 800844e:	f7ff ff53 	bl	80082f8 <_malloc_r>
 8008452:	4606      	mov	r6, r0
 8008454:	b360      	cbz	r0, 80084b0 <__ssputs_r+0xa0>
 8008456:	6921      	ldr	r1, [r4, #16]
 8008458:	464a      	mov	r2, r9
 800845a:	f000 fe7f 	bl	800915c <memcpy>
 800845e:	89a3      	ldrh	r3, [r4, #12]
 8008460:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008468:	81a3      	strh	r3, [r4, #12]
 800846a:	6126      	str	r6, [r4, #16]
 800846c:	6165      	str	r5, [r4, #20]
 800846e:	444e      	add	r6, r9
 8008470:	eba5 0509 	sub.w	r5, r5, r9
 8008474:	6026      	str	r6, [r4, #0]
 8008476:	60a5      	str	r5, [r4, #8]
 8008478:	463e      	mov	r6, r7
 800847a:	42be      	cmp	r6, r7
 800847c:	d900      	bls.n	8008480 <__ssputs_r+0x70>
 800847e:	463e      	mov	r6, r7
 8008480:	6820      	ldr	r0, [r4, #0]
 8008482:	4632      	mov	r2, r6
 8008484:	4641      	mov	r1, r8
 8008486:	f000 fe3e 	bl	8009106 <memmove>
 800848a:	68a3      	ldr	r3, [r4, #8]
 800848c:	1b9b      	subs	r3, r3, r6
 800848e:	60a3      	str	r3, [r4, #8]
 8008490:	6823      	ldr	r3, [r4, #0]
 8008492:	4433      	add	r3, r6
 8008494:	6023      	str	r3, [r4, #0]
 8008496:	2000      	movs	r0, #0
 8008498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800849c:	462a      	mov	r2, r5
 800849e:	f000 fe6b 	bl	8009178 <_realloc_r>
 80084a2:	4606      	mov	r6, r0
 80084a4:	2800      	cmp	r0, #0
 80084a6:	d1e0      	bne.n	800846a <__ssputs_r+0x5a>
 80084a8:	6921      	ldr	r1, [r4, #16]
 80084aa:	4650      	mov	r0, sl
 80084ac:	f7ff feb8 	bl	8008220 <_free_r>
 80084b0:	230c      	movs	r3, #12
 80084b2:	f8ca 3000 	str.w	r3, [sl]
 80084b6:	89a3      	ldrh	r3, [r4, #12]
 80084b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084bc:	81a3      	strh	r3, [r4, #12]
 80084be:	f04f 30ff 	mov.w	r0, #4294967295
 80084c2:	e7e9      	b.n	8008498 <__ssputs_r+0x88>

080084c4 <_svfiprintf_r>:
 80084c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c8:	4698      	mov	r8, r3
 80084ca:	898b      	ldrh	r3, [r1, #12]
 80084cc:	061b      	lsls	r3, r3, #24
 80084ce:	b09d      	sub	sp, #116	; 0x74
 80084d0:	4607      	mov	r7, r0
 80084d2:	460d      	mov	r5, r1
 80084d4:	4614      	mov	r4, r2
 80084d6:	d50e      	bpl.n	80084f6 <_svfiprintf_r+0x32>
 80084d8:	690b      	ldr	r3, [r1, #16]
 80084da:	b963      	cbnz	r3, 80084f6 <_svfiprintf_r+0x32>
 80084dc:	2140      	movs	r1, #64	; 0x40
 80084de:	f7ff ff0b 	bl	80082f8 <_malloc_r>
 80084e2:	6028      	str	r0, [r5, #0]
 80084e4:	6128      	str	r0, [r5, #16]
 80084e6:	b920      	cbnz	r0, 80084f2 <_svfiprintf_r+0x2e>
 80084e8:	230c      	movs	r3, #12
 80084ea:	603b      	str	r3, [r7, #0]
 80084ec:	f04f 30ff 	mov.w	r0, #4294967295
 80084f0:	e0d0      	b.n	8008694 <_svfiprintf_r+0x1d0>
 80084f2:	2340      	movs	r3, #64	; 0x40
 80084f4:	616b      	str	r3, [r5, #20]
 80084f6:	2300      	movs	r3, #0
 80084f8:	9309      	str	r3, [sp, #36]	; 0x24
 80084fa:	2320      	movs	r3, #32
 80084fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008500:	f8cd 800c 	str.w	r8, [sp, #12]
 8008504:	2330      	movs	r3, #48	; 0x30
 8008506:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80086ac <_svfiprintf_r+0x1e8>
 800850a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800850e:	f04f 0901 	mov.w	r9, #1
 8008512:	4623      	mov	r3, r4
 8008514:	469a      	mov	sl, r3
 8008516:	f813 2b01 	ldrb.w	r2, [r3], #1
 800851a:	b10a      	cbz	r2, 8008520 <_svfiprintf_r+0x5c>
 800851c:	2a25      	cmp	r2, #37	; 0x25
 800851e:	d1f9      	bne.n	8008514 <_svfiprintf_r+0x50>
 8008520:	ebba 0b04 	subs.w	fp, sl, r4
 8008524:	d00b      	beq.n	800853e <_svfiprintf_r+0x7a>
 8008526:	465b      	mov	r3, fp
 8008528:	4622      	mov	r2, r4
 800852a:	4629      	mov	r1, r5
 800852c:	4638      	mov	r0, r7
 800852e:	f7ff ff6f 	bl	8008410 <__ssputs_r>
 8008532:	3001      	adds	r0, #1
 8008534:	f000 80a9 	beq.w	800868a <_svfiprintf_r+0x1c6>
 8008538:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800853a:	445a      	add	r2, fp
 800853c:	9209      	str	r2, [sp, #36]	; 0x24
 800853e:	f89a 3000 	ldrb.w	r3, [sl]
 8008542:	2b00      	cmp	r3, #0
 8008544:	f000 80a1 	beq.w	800868a <_svfiprintf_r+0x1c6>
 8008548:	2300      	movs	r3, #0
 800854a:	f04f 32ff 	mov.w	r2, #4294967295
 800854e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008552:	f10a 0a01 	add.w	sl, sl, #1
 8008556:	9304      	str	r3, [sp, #16]
 8008558:	9307      	str	r3, [sp, #28]
 800855a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800855e:	931a      	str	r3, [sp, #104]	; 0x68
 8008560:	4654      	mov	r4, sl
 8008562:	2205      	movs	r2, #5
 8008564:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008568:	4850      	ldr	r0, [pc, #320]	; (80086ac <_svfiprintf_r+0x1e8>)
 800856a:	f7f7 fe71 	bl	8000250 <memchr>
 800856e:	9a04      	ldr	r2, [sp, #16]
 8008570:	b9d8      	cbnz	r0, 80085aa <_svfiprintf_r+0xe6>
 8008572:	06d0      	lsls	r0, r2, #27
 8008574:	bf44      	itt	mi
 8008576:	2320      	movmi	r3, #32
 8008578:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800857c:	0711      	lsls	r1, r2, #28
 800857e:	bf44      	itt	mi
 8008580:	232b      	movmi	r3, #43	; 0x2b
 8008582:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008586:	f89a 3000 	ldrb.w	r3, [sl]
 800858a:	2b2a      	cmp	r3, #42	; 0x2a
 800858c:	d015      	beq.n	80085ba <_svfiprintf_r+0xf6>
 800858e:	9a07      	ldr	r2, [sp, #28]
 8008590:	4654      	mov	r4, sl
 8008592:	2000      	movs	r0, #0
 8008594:	f04f 0c0a 	mov.w	ip, #10
 8008598:	4621      	mov	r1, r4
 800859a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800859e:	3b30      	subs	r3, #48	; 0x30
 80085a0:	2b09      	cmp	r3, #9
 80085a2:	d94d      	bls.n	8008640 <_svfiprintf_r+0x17c>
 80085a4:	b1b0      	cbz	r0, 80085d4 <_svfiprintf_r+0x110>
 80085a6:	9207      	str	r2, [sp, #28]
 80085a8:	e014      	b.n	80085d4 <_svfiprintf_r+0x110>
 80085aa:	eba0 0308 	sub.w	r3, r0, r8
 80085ae:	fa09 f303 	lsl.w	r3, r9, r3
 80085b2:	4313      	orrs	r3, r2
 80085b4:	9304      	str	r3, [sp, #16]
 80085b6:	46a2      	mov	sl, r4
 80085b8:	e7d2      	b.n	8008560 <_svfiprintf_r+0x9c>
 80085ba:	9b03      	ldr	r3, [sp, #12]
 80085bc:	1d19      	adds	r1, r3, #4
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	9103      	str	r1, [sp, #12]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	bfbb      	ittet	lt
 80085c6:	425b      	neglt	r3, r3
 80085c8:	f042 0202 	orrlt.w	r2, r2, #2
 80085cc:	9307      	strge	r3, [sp, #28]
 80085ce:	9307      	strlt	r3, [sp, #28]
 80085d0:	bfb8      	it	lt
 80085d2:	9204      	strlt	r2, [sp, #16]
 80085d4:	7823      	ldrb	r3, [r4, #0]
 80085d6:	2b2e      	cmp	r3, #46	; 0x2e
 80085d8:	d10c      	bne.n	80085f4 <_svfiprintf_r+0x130>
 80085da:	7863      	ldrb	r3, [r4, #1]
 80085dc:	2b2a      	cmp	r3, #42	; 0x2a
 80085de:	d134      	bne.n	800864a <_svfiprintf_r+0x186>
 80085e0:	9b03      	ldr	r3, [sp, #12]
 80085e2:	1d1a      	adds	r2, r3, #4
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	9203      	str	r2, [sp, #12]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	bfb8      	it	lt
 80085ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80085f0:	3402      	adds	r4, #2
 80085f2:	9305      	str	r3, [sp, #20]
 80085f4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80086bc <_svfiprintf_r+0x1f8>
 80085f8:	7821      	ldrb	r1, [r4, #0]
 80085fa:	2203      	movs	r2, #3
 80085fc:	4650      	mov	r0, sl
 80085fe:	f7f7 fe27 	bl	8000250 <memchr>
 8008602:	b138      	cbz	r0, 8008614 <_svfiprintf_r+0x150>
 8008604:	9b04      	ldr	r3, [sp, #16]
 8008606:	eba0 000a 	sub.w	r0, r0, sl
 800860a:	2240      	movs	r2, #64	; 0x40
 800860c:	4082      	lsls	r2, r0
 800860e:	4313      	orrs	r3, r2
 8008610:	3401      	adds	r4, #1
 8008612:	9304      	str	r3, [sp, #16]
 8008614:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008618:	4825      	ldr	r0, [pc, #148]	; (80086b0 <_svfiprintf_r+0x1ec>)
 800861a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800861e:	2206      	movs	r2, #6
 8008620:	f7f7 fe16 	bl	8000250 <memchr>
 8008624:	2800      	cmp	r0, #0
 8008626:	d038      	beq.n	800869a <_svfiprintf_r+0x1d6>
 8008628:	4b22      	ldr	r3, [pc, #136]	; (80086b4 <_svfiprintf_r+0x1f0>)
 800862a:	bb1b      	cbnz	r3, 8008674 <_svfiprintf_r+0x1b0>
 800862c:	9b03      	ldr	r3, [sp, #12]
 800862e:	3307      	adds	r3, #7
 8008630:	f023 0307 	bic.w	r3, r3, #7
 8008634:	3308      	adds	r3, #8
 8008636:	9303      	str	r3, [sp, #12]
 8008638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800863a:	4433      	add	r3, r6
 800863c:	9309      	str	r3, [sp, #36]	; 0x24
 800863e:	e768      	b.n	8008512 <_svfiprintf_r+0x4e>
 8008640:	fb0c 3202 	mla	r2, ip, r2, r3
 8008644:	460c      	mov	r4, r1
 8008646:	2001      	movs	r0, #1
 8008648:	e7a6      	b.n	8008598 <_svfiprintf_r+0xd4>
 800864a:	2300      	movs	r3, #0
 800864c:	3401      	adds	r4, #1
 800864e:	9305      	str	r3, [sp, #20]
 8008650:	4619      	mov	r1, r3
 8008652:	f04f 0c0a 	mov.w	ip, #10
 8008656:	4620      	mov	r0, r4
 8008658:	f810 2b01 	ldrb.w	r2, [r0], #1
 800865c:	3a30      	subs	r2, #48	; 0x30
 800865e:	2a09      	cmp	r2, #9
 8008660:	d903      	bls.n	800866a <_svfiprintf_r+0x1a6>
 8008662:	2b00      	cmp	r3, #0
 8008664:	d0c6      	beq.n	80085f4 <_svfiprintf_r+0x130>
 8008666:	9105      	str	r1, [sp, #20]
 8008668:	e7c4      	b.n	80085f4 <_svfiprintf_r+0x130>
 800866a:	fb0c 2101 	mla	r1, ip, r1, r2
 800866e:	4604      	mov	r4, r0
 8008670:	2301      	movs	r3, #1
 8008672:	e7f0      	b.n	8008656 <_svfiprintf_r+0x192>
 8008674:	ab03      	add	r3, sp, #12
 8008676:	9300      	str	r3, [sp, #0]
 8008678:	462a      	mov	r2, r5
 800867a:	4b0f      	ldr	r3, [pc, #60]	; (80086b8 <_svfiprintf_r+0x1f4>)
 800867c:	a904      	add	r1, sp, #16
 800867e:	4638      	mov	r0, r7
 8008680:	f3af 8000 	nop.w
 8008684:	1c42      	adds	r2, r0, #1
 8008686:	4606      	mov	r6, r0
 8008688:	d1d6      	bne.n	8008638 <_svfiprintf_r+0x174>
 800868a:	89ab      	ldrh	r3, [r5, #12]
 800868c:	065b      	lsls	r3, r3, #25
 800868e:	f53f af2d 	bmi.w	80084ec <_svfiprintf_r+0x28>
 8008692:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008694:	b01d      	add	sp, #116	; 0x74
 8008696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800869a:	ab03      	add	r3, sp, #12
 800869c:	9300      	str	r3, [sp, #0]
 800869e:	462a      	mov	r2, r5
 80086a0:	4b05      	ldr	r3, [pc, #20]	; (80086b8 <_svfiprintf_r+0x1f4>)
 80086a2:	a904      	add	r1, sp, #16
 80086a4:	4638      	mov	r0, r7
 80086a6:	f000 fa4b 	bl	8008b40 <_printf_i>
 80086aa:	e7eb      	b.n	8008684 <_svfiprintf_r+0x1c0>
 80086ac:	08009620 	.word	0x08009620
 80086b0:	0800962a 	.word	0x0800962a
 80086b4:	00000000 	.word	0x00000000
 80086b8:	08008411 	.word	0x08008411
 80086bc:	08009626 	.word	0x08009626

080086c0 <_sungetc_r>:
 80086c0:	b538      	push	{r3, r4, r5, lr}
 80086c2:	1c4b      	adds	r3, r1, #1
 80086c4:	4614      	mov	r4, r2
 80086c6:	d103      	bne.n	80086d0 <_sungetc_r+0x10>
 80086c8:	f04f 35ff 	mov.w	r5, #4294967295
 80086cc:	4628      	mov	r0, r5
 80086ce:	bd38      	pop	{r3, r4, r5, pc}
 80086d0:	8993      	ldrh	r3, [r2, #12]
 80086d2:	f023 0320 	bic.w	r3, r3, #32
 80086d6:	8193      	strh	r3, [r2, #12]
 80086d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80086da:	6852      	ldr	r2, [r2, #4]
 80086dc:	b2cd      	uxtb	r5, r1
 80086de:	b18b      	cbz	r3, 8008704 <_sungetc_r+0x44>
 80086e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80086e2:	4293      	cmp	r3, r2
 80086e4:	dd08      	ble.n	80086f8 <_sungetc_r+0x38>
 80086e6:	6823      	ldr	r3, [r4, #0]
 80086e8:	1e5a      	subs	r2, r3, #1
 80086ea:	6022      	str	r2, [r4, #0]
 80086ec:	f803 5c01 	strb.w	r5, [r3, #-1]
 80086f0:	6863      	ldr	r3, [r4, #4]
 80086f2:	3301      	adds	r3, #1
 80086f4:	6063      	str	r3, [r4, #4]
 80086f6:	e7e9      	b.n	80086cc <_sungetc_r+0xc>
 80086f8:	4621      	mov	r1, r4
 80086fa:	f000 fcca 	bl	8009092 <__submore>
 80086fe:	2800      	cmp	r0, #0
 8008700:	d0f1      	beq.n	80086e6 <_sungetc_r+0x26>
 8008702:	e7e1      	b.n	80086c8 <_sungetc_r+0x8>
 8008704:	6921      	ldr	r1, [r4, #16]
 8008706:	6823      	ldr	r3, [r4, #0]
 8008708:	b151      	cbz	r1, 8008720 <_sungetc_r+0x60>
 800870a:	4299      	cmp	r1, r3
 800870c:	d208      	bcs.n	8008720 <_sungetc_r+0x60>
 800870e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008712:	42a9      	cmp	r1, r5
 8008714:	d104      	bne.n	8008720 <_sungetc_r+0x60>
 8008716:	3b01      	subs	r3, #1
 8008718:	3201      	adds	r2, #1
 800871a:	6023      	str	r3, [r4, #0]
 800871c:	6062      	str	r2, [r4, #4]
 800871e:	e7d5      	b.n	80086cc <_sungetc_r+0xc>
 8008720:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008724:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008728:	6363      	str	r3, [r4, #52]	; 0x34
 800872a:	2303      	movs	r3, #3
 800872c:	63a3      	str	r3, [r4, #56]	; 0x38
 800872e:	4623      	mov	r3, r4
 8008730:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008734:	6023      	str	r3, [r4, #0]
 8008736:	2301      	movs	r3, #1
 8008738:	e7dc      	b.n	80086f4 <_sungetc_r+0x34>

0800873a <__ssrefill_r>:
 800873a:	b510      	push	{r4, lr}
 800873c:	460c      	mov	r4, r1
 800873e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008740:	b169      	cbz	r1, 800875e <__ssrefill_r+0x24>
 8008742:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008746:	4299      	cmp	r1, r3
 8008748:	d001      	beq.n	800874e <__ssrefill_r+0x14>
 800874a:	f7ff fd69 	bl	8008220 <_free_r>
 800874e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008750:	6063      	str	r3, [r4, #4]
 8008752:	2000      	movs	r0, #0
 8008754:	6360      	str	r0, [r4, #52]	; 0x34
 8008756:	b113      	cbz	r3, 800875e <__ssrefill_r+0x24>
 8008758:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800875a:	6023      	str	r3, [r4, #0]
 800875c:	bd10      	pop	{r4, pc}
 800875e:	6923      	ldr	r3, [r4, #16]
 8008760:	6023      	str	r3, [r4, #0]
 8008762:	2300      	movs	r3, #0
 8008764:	6063      	str	r3, [r4, #4]
 8008766:	89a3      	ldrh	r3, [r4, #12]
 8008768:	f043 0320 	orr.w	r3, r3, #32
 800876c:	81a3      	strh	r3, [r4, #12]
 800876e:	f04f 30ff 	mov.w	r0, #4294967295
 8008772:	e7f3      	b.n	800875c <__ssrefill_r+0x22>

08008774 <__ssvfiscanf_r>:
 8008774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008778:	460c      	mov	r4, r1
 800877a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800877e:	2100      	movs	r1, #0
 8008780:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008784:	49a6      	ldr	r1, [pc, #664]	; (8008a20 <__ssvfiscanf_r+0x2ac>)
 8008786:	91a0      	str	r1, [sp, #640]	; 0x280
 8008788:	f10d 0804 	add.w	r8, sp, #4
 800878c:	49a5      	ldr	r1, [pc, #660]	; (8008a24 <__ssvfiscanf_r+0x2b0>)
 800878e:	4fa6      	ldr	r7, [pc, #664]	; (8008a28 <__ssvfiscanf_r+0x2b4>)
 8008790:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8008a2c <__ssvfiscanf_r+0x2b8>
 8008794:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008798:	4606      	mov	r6, r0
 800879a:	91a1      	str	r1, [sp, #644]	; 0x284
 800879c:	9300      	str	r3, [sp, #0]
 800879e:	7813      	ldrb	r3, [r2, #0]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	f000 815a 	beq.w	8008a5a <__ssvfiscanf_r+0x2e6>
 80087a6:	5cf9      	ldrb	r1, [r7, r3]
 80087a8:	f011 0108 	ands.w	r1, r1, #8
 80087ac:	f102 0501 	add.w	r5, r2, #1
 80087b0:	d019      	beq.n	80087e6 <__ssvfiscanf_r+0x72>
 80087b2:	6863      	ldr	r3, [r4, #4]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	dd0f      	ble.n	80087d8 <__ssvfiscanf_r+0x64>
 80087b8:	6823      	ldr	r3, [r4, #0]
 80087ba:	781a      	ldrb	r2, [r3, #0]
 80087bc:	5cba      	ldrb	r2, [r7, r2]
 80087be:	0712      	lsls	r2, r2, #28
 80087c0:	d401      	bmi.n	80087c6 <__ssvfiscanf_r+0x52>
 80087c2:	462a      	mov	r2, r5
 80087c4:	e7eb      	b.n	800879e <__ssvfiscanf_r+0x2a>
 80087c6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80087c8:	3201      	adds	r2, #1
 80087ca:	9245      	str	r2, [sp, #276]	; 0x114
 80087cc:	6862      	ldr	r2, [r4, #4]
 80087ce:	3301      	adds	r3, #1
 80087d0:	3a01      	subs	r2, #1
 80087d2:	6062      	str	r2, [r4, #4]
 80087d4:	6023      	str	r3, [r4, #0]
 80087d6:	e7ec      	b.n	80087b2 <__ssvfiscanf_r+0x3e>
 80087d8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80087da:	4621      	mov	r1, r4
 80087dc:	4630      	mov	r0, r6
 80087de:	4798      	blx	r3
 80087e0:	2800      	cmp	r0, #0
 80087e2:	d0e9      	beq.n	80087b8 <__ssvfiscanf_r+0x44>
 80087e4:	e7ed      	b.n	80087c2 <__ssvfiscanf_r+0x4e>
 80087e6:	2b25      	cmp	r3, #37	; 0x25
 80087e8:	d012      	beq.n	8008810 <__ssvfiscanf_r+0x9c>
 80087ea:	469a      	mov	sl, r3
 80087ec:	6863      	ldr	r3, [r4, #4]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f340 8091 	ble.w	8008916 <__ssvfiscanf_r+0x1a2>
 80087f4:	6822      	ldr	r2, [r4, #0]
 80087f6:	7813      	ldrb	r3, [r2, #0]
 80087f8:	4553      	cmp	r3, sl
 80087fa:	f040 812e 	bne.w	8008a5a <__ssvfiscanf_r+0x2e6>
 80087fe:	6863      	ldr	r3, [r4, #4]
 8008800:	3b01      	subs	r3, #1
 8008802:	6063      	str	r3, [r4, #4]
 8008804:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008806:	3201      	adds	r2, #1
 8008808:	3301      	adds	r3, #1
 800880a:	6022      	str	r2, [r4, #0]
 800880c:	9345      	str	r3, [sp, #276]	; 0x114
 800880e:	e7d8      	b.n	80087c2 <__ssvfiscanf_r+0x4e>
 8008810:	9141      	str	r1, [sp, #260]	; 0x104
 8008812:	9143      	str	r1, [sp, #268]	; 0x10c
 8008814:	7853      	ldrb	r3, [r2, #1]
 8008816:	2b2a      	cmp	r3, #42	; 0x2a
 8008818:	bf02      	ittt	eq
 800881a:	2310      	moveq	r3, #16
 800881c:	1c95      	addeq	r5, r2, #2
 800881e:	9341      	streq	r3, [sp, #260]	; 0x104
 8008820:	220a      	movs	r2, #10
 8008822:	46aa      	mov	sl, r5
 8008824:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008828:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800882c:	2b09      	cmp	r3, #9
 800882e:	d91c      	bls.n	800886a <__ssvfiscanf_r+0xf6>
 8008830:	487e      	ldr	r0, [pc, #504]	; (8008a2c <__ssvfiscanf_r+0x2b8>)
 8008832:	2203      	movs	r2, #3
 8008834:	f7f7 fd0c 	bl	8000250 <memchr>
 8008838:	b138      	cbz	r0, 800884a <__ssvfiscanf_r+0xd6>
 800883a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800883c:	eba0 0009 	sub.w	r0, r0, r9
 8008840:	2301      	movs	r3, #1
 8008842:	4083      	lsls	r3, r0
 8008844:	4313      	orrs	r3, r2
 8008846:	9341      	str	r3, [sp, #260]	; 0x104
 8008848:	4655      	mov	r5, sl
 800884a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800884e:	2b78      	cmp	r3, #120	; 0x78
 8008850:	d806      	bhi.n	8008860 <__ssvfiscanf_r+0xec>
 8008852:	2b57      	cmp	r3, #87	; 0x57
 8008854:	d810      	bhi.n	8008878 <__ssvfiscanf_r+0x104>
 8008856:	2b25      	cmp	r3, #37	; 0x25
 8008858:	d0c7      	beq.n	80087ea <__ssvfiscanf_r+0x76>
 800885a:	d857      	bhi.n	800890c <__ssvfiscanf_r+0x198>
 800885c:	2b00      	cmp	r3, #0
 800885e:	d065      	beq.n	800892c <__ssvfiscanf_r+0x1b8>
 8008860:	2303      	movs	r3, #3
 8008862:	9347      	str	r3, [sp, #284]	; 0x11c
 8008864:	230a      	movs	r3, #10
 8008866:	9342      	str	r3, [sp, #264]	; 0x108
 8008868:	e076      	b.n	8008958 <__ssvfiscanf_r+0x1e4>
 800886a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800886c:	fb02 1103 	mla	r1, r2, r3, r1
 8008870:	3930      	subs	r1, #48	; 0x30
 8008872:	9143      	str	r1, [sp, #268]	; 0x10c
 8008874:	4655      	mov	r5, sl
 8008876:	e7d4      	b.n	8008822 <__ssvfiscanf_r+0xae>
 8008878:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800887c:	2a20      	cmp	r2, #32
 800887e:	d8ef      	bhi.n	8008860 <__ssvfiscanf_r+0xec>
 8008880:	a101      	add	r1, pc, #4	; (adr r1, 8008888 <__ssvfiscanf_r+0x114>)
 8008882:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008886:	bf00      	nop
 8008888:	0800893b 	.word	0x0800893b
 800888c:	08008861 	.word	0x08008861
 8008890:	08008861 	.word	0x08008861
 8008894:	08008999 	.word	0x08008999
 8008898:	08008861 	.word	0x08008861
 800889c:	08008861 	.word	0x08008861
 80088a0:	08008861 	.word	0x08008861
 80088a4:	08008861 	.word	0x08008861
 80088a8:	08008861 	.word	0x08008861
 80088ac:	08008861 	.word	0x08008861
 80088b0:	08008861 	.word	0x08008861
 80088b4:	080089af 	.word	0x080089af
 80088b8:	08008995 	.word	0x08008995
 80088bc:	08008913 	.word	0x08008913
 80088c0:	08008913 	.word	0x08008913
 80088c4:	08008913 	.word	0x08008913
 80088c8:	08008861 	.word	0x08008861
 80088cc:	08008951 	.word	0x08008951
 80088d0:	08008861 	.word	0x08008861
 80088d4:	08008861 	.word	0x08008861
 80088d8:	08008861 	.word	0x08008861
 80088dc:	08008861 	.word	0x08008861
 80088e0:	080089bf 	.word	0x080089bf
 80088e4:	0800898d 	.word	0x0800898d
 80088e8:	08008933 	.word	0x08008933
 80088ec:	08008861 	.word	0x08008861
 80088f0:	08008861 	.word	0x08008861
 80088f4:	080089bb 	.word	0x080089bb
 80088f8:	08008861 	.word	0x08008861
 80088fc:	08008995 	.word	0x08008995
 8008900:	08008861 	.word	0x08008861
 8008904:	08008861 	.word	0x08008861
 8008908:	0800893b 	.word	0x0800893b
 800890c:	3b45      	subs	r3, #69	; 0x45
 800890e:	2b02      	cmp	r3, #2
 8008910:	d8a6      	bhi.n	8008860 <__ssvfiscanf_r+0xec>
 8008912:	2305      	movs	r3, #5
 8008914:	e01f      	b.n	8008956 <__ssvfiscanf_r+0x1e2>
 8008916:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008918:	4621      	mov	r1, r4
 800891a:	4630      	mov	r0, r6
 800891c:	4798      	blx	r3
 800891e:	2800      	cmp	r0, #0
 8008920:	f43f af68 	beq.w	80087f4 <__ssvfiscanf_r+0x80>
 8008924:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008926:	2800      	cmp	r0, #0
 8008928:	f040 808d 	bne.w	8008a46 <__ssvfiscanf_r+0x2d2>
 800892c:	f04f 30ff 	mov.w	r0, #4294967295
 8008930:	e08f      	b.n	8008a52 <__ssvfiscanf_r+0x2de>
 8008932:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008934:	f042 0220 	orr.w	r2, r2, #32
 8008938:	9241      	str	r2, [sp, #260]	; 0x104
 800893a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800893c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008940:	9241      	str	r2, [sp, #260]	; 0x104
 8008942:	2210      	movs	r2, #16
 8008944:	2b6f      	cmp	r3, #111	; 0x6f
 8008946:	9242      	str	r2, [sp, #264]	; 0x108
 8008948:	bf34      	ite	cc
 800894a:	2303      	movcc	r3, #3
 800894c:	2304      	movcs	r3, #4
 800894e:	e002      	b.n	8008956 <__ssvfiscanf_r+0x1e2>
 8008950:	2300      	movs	r3, #0
 8008952:	9342      	str	r3, [sp, #264]	; 0x108
 8008954:	2303      	movs	r3, #3
 8008956:	9347      	str	r3, [sp, #284]	; 0x11c
 8008958:	6863      	ldr	r3, [r4, #4]
 800895a:	2b00      	cmp	r3, #0
 800895c:	dd3d      	ble.n	80089da <__ssvfiscanf_r+0x266>
 800895e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008960:	0659      	lsls	r1, r3, #25
 8008962:	d404      	bmi.n	800896e <__ssvfiscanf_r+0x1fa>
 8008964:	6823      	ldr	r3, [r4, #0]
 8008966:	781a      	ldrb	r2, [r3, #0]
 8008968:	5cba      	ldrb	r2, [r7, r2]
 800896a:	0712      	lsls	r2, r2, #28
 800896c:	d43c      	bmi.n	80089e8 <__ssvfiscanf_r+0x274>
 800896e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008970:	2b02      	cmp	r3, #2
 8008972:	dc4b      	bgt.n	8008a0c <__ssvfiscanf_r+0x298>
 8008974:	466b      	mov	r3, sp
 8008976:	4622      	mov	r2, r4
 8008978:	a941      	add	r1, sp, #260	; 0x104
 800897a:	4630      	mov	r0, r6
 800897c:	f000 fa02 	bl	8008d84 <_scanf_chars>
 8008980:	2801      	cmp	r0, #1
 8008982:	d06a      	beq.n	8008a5a <__ssvfiscanf_r+0x2e6>
 8008984:	2802      	cmp	r0, #2
 8008986:	f47f af1c 	bne.w	80087c2 <__ssvfiscanf_r+0x4e>
 800898a:	e7cb      	b.n	8008924 <__ssvfiscanf_r+0x1b0>
 800898c:	2308      	movs	r3, #8
 800898e:	9342      	str	r3, [sp, #264]	; 0x108
 8008990:	2304      	movs	r3, #4
 8008992:	e7e0      	b.n	8008956 <__ssvfiscanf_r+0x1e2>
 8008994:	220a      	movs	r2, #10
 8008996:	e7d5      	b.n	8008944 <__ssvfiscanf_r+0x1d0>
 8008998:	4629      	mov	r1, r5
 800899a:	4640      	mov	r0, r8
 800899c:	f000 fb40 	bl	8009020 <__sccl>
 80089a0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80089a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089a6:	9341      	str	r3, [sp, #260]	; 0x104
 80089a8:	4605      	mov	r5, r0
 80089aa:	2301      	movs	r3, #1
 80089ac:	e7d3      	b.n	8008956 <__ssvfiscanf_r+0x1e2>
 80089ae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80089b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089b4:	9341      	str	r3, [sp, #260]	; 0x104
 80089b6:	2300      	movs	r3, #0
 80089b8:	e7cd      	b.n	8008956 <__ssvfiscanf_r+0x1e2>
 80089ba:	2302      	movs	r3, #2
 80089bc:	e7cb      	b.n	8008956 <__ssvfiscanf_r+0x1e2>
 80089be:	9841      	ldr	r0, [sp, #260]	; 0x104
 80089c0:	06c3      	lsls	r3, r0, #27
 80089c2:	f53f aefe 	bmi.w	80087c2 <__ssvfiscanf_r+0x4e>
 80089c6:	9b00      	ldr	r3, [sp, #0]
 80089c8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80089ca:	1d19      	adds	r1, r3, #4
 80089cc:	9100      	str	r1, [sp, #0]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	07c0      	lsls	r0, r0, #31
 80089d2:	bf4c      	ite	mi
 80089d4:	801a      	strhmi	r2, [r3, #0]
 80089d6:	601a      	strpl	r2, [r3, #0]
 80089d8:	e6f3      	b.n	80087c2 <__ssvfiscanf_r+0x4e>
 80089da:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80089dc:	4621      	mov	r1, r4
 80089de:	4630      	mov	r0, r6
 80089e0:	4798      	blx	r3
 80089e2:	2800      	cmp	r0, #0
 80089e4:	d0bb      	beq.n	800895e <__ssvfiscanf_r+0x1ea>
 80089e6:	e79d      	b.n	8008924 <__ssvfiscanf_r+0x1b0>
 80089e8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80089ea:	3201      	adds	r2, #1
 80089ec:	9245      	str	r2, [sp, #276]	; 0x114
 80089ee:	6862      	ldr	r2, [r4, #4]
 80089f0:	3a01      	subs	r2, #1
 80089f2:	2a00      	cmp	r2, #0
 80089f4:	6062      	str	r2, [r4, #4]
 80089f6:	dd02      	ble.n	80089fe <__ssvfiscanf_r+0x28a>
 80089f8:	3301      	adds	r3, #1
 80089fa:	6023      	str	r3, [r4, #0]
 80089fc:	e7b2      	b.n	8008964 <__ssvfiscanf_r+0x1f0>
 80089fe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008a00:	4621      	mov	r1, r4
 8008a02:	4630      	mov	r0, r6
 8008a04:	4798      	blx	r3
 8008a06:	2800      	cmp	r0, #0
 8008a08:	d0ac      	beq.n	8008964 <__ssvfiscanf_r+0x1f0>
 8008a0a:	e78b      	b.n	8008924 <__ssvfiscanf_r+0x1b0>
 8008a0c:	2b04      	cmp	r3, #4
 8008a0e:	dc0f      	bgt.n	8008a30 <__ssvfiscanf_r+0x2bc>
 8008a10:	466b      	mov	r3, sp
 8008a12:	4622      	mov	r2, r4
 8008a14:	a941      	add	r1, sp, #260	; 0x104
 8008a16:	4630      	mov	r0, r6
 8008a18:	f000 fa0e 	bl	8008e38 <_scanf_i>
 8008a1c:	e7b0      	b.n	8008980 <__ssvfiscanf_r+0x20c>
 8008a1e:	bf00      	nop
 8008a20:	080086c1 	.word	0x080086c1
 8008a24:	0800873b 	.word	0x0800873b
 8008a28:	0800966f 	.word	0x0800966f
 8008a2c:	08009626 	.word	0x08009626
 8008a30:	4b0b      	ldr	r3, [pc, #44]	; (8008a60 <__ssvfiscanf_r+0x2ec>)
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	f43f aec5 	beq.w	80087c2 <__ssvfiscanf_r+0x4e>
 8008a38:	466b      	mov	r3, sp
 8008a3a:	4622      	mov	r2, r4
 8008a3c:	a941      	add	r1, sp, #260	; 0x104
 8008a3e:	4630      	mov	r0, r6
 8008a40:	f3af 8000 	nop.w
 8008a44:	e79c      	b.n	8008980 <__ssvfiscanf_r+0x20c>
 8008a46:	89a3      	ldrh	r3, [r4, #12]
 8008a48:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008a4c:	bf18      	it	ne
 8008a4e:	f04f 30ff 	movne.w	r0, #4294967295
 8008a52:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8008a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a5a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008a5c:	e7f9      	b.n	8008a52 <__ssvfiscanf_r+0x2de>
 8008a5e:	bf00      	nop
 8008a60:	00000000 	.word	0x00000000

08008a64 <_printf_common>:
 8008a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a68:	4616      	mov	r6, r2
 8008a6a:	4699      	mov	r9, r3
 8008a6c:	688a      	ldr	r2, [r1, #8]
 8008a6e:	690b      	ldr	r3, [r1, #16]
 8008a70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a74:	4293      	cmp	r3, r2
 8008a76:	bfb8      	it	lt
 8008a78:	4613      	movlt	r3, r2
 8008a7a:	6033      	str	r3, [r6, #0]
 8008a7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a80:	4607      	mov	r7, r0
 8008a82:	460c      	mov	r4, r1
 8008a84:	b10a      	cbz	r2, 8008a8a <_printf_common+0x26>
 8008a86:	3301      	adds	r3, #1
 8008a88:	6033      	str	r3, [r6, #0]
 8008a8a:	6823      	ldr	r3, [r4, #0]
 8008a8c:	0699      	lsls	r1, r3, #26
 8008a8e:	bf42      	ittt	mi
 8008a90:	6833      	ldrmi	r3, [r6, #0]
 8008a92:	3302      	addmi	r3, #2
 8008a94:	6033      	strmi	r3, [r6, #0]
 8008a96:	6825      	ldr	r5, [r4, #0]
 8008a98:	f015 0506 	ands.w	r5, r5, #6
 8008a9c:	d106      	bne.n	8008aac <_printf_common+0x48>
 8008a9e:	f104 0a19 	add.w	sl, r4, #25
 8008aa2:	68e3      	ldr	r3, [r4, #12]
 8008aa4:	6832      	ldr	r2, [r6, #0]
 8008aa6:	1a9b      	subs	r3, r3, r2
 8008aa8:	42ab      	cmp	r3, r5
 8008aaa:	dc26      	bgt.n	8008afa <_printf_common+0x96>
 8008aac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ab0:	1e13      	subs	r3, r2, #0
 8008ab2:	6822      	ldr	r2, [r4, #0]
 8008ab4:	bf18      	it	ne
 8008ab6:	2301      	movne	r3, #1
 8008ab8:	0692      	lsls	r2, r2, #26
 8008aba:	d42b      	bmi.n	8008b14 <_printf_common+0xb0>
 8008abc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ac0:	4649      	mov	r1, r9
 8008ac2:	4638      	mov	r0, r7
 8008ac4:	47c0      	blx	r8
 8008ac6:	3001      	adds	r0, #1
 8008ac8:	d01e      	beq.n	8008b08 <_printf_common+0xa4>
 8008aca:	6823      	ldr	r3, [r4, #0]
 8008acc:	6922      	ldr	r2, [r4, #16]
 8008ace:	f003 0306 	and.w	r3, r3, #6
 8008ad2:	2b04      	cmp	r3, #4
 8008ad4:	bf02      	ittt	eq
 8008ad6:	68e5      	ldreq	r5, [r4, #12]
 8008ad8:	6833      	ldreq	r3, [r6, #0]
 8008ada:	1aed      	subeq	r5, r5, r3
 8008adc:	68a3      	ldr	r3, [r4, #8]
 8008ade:	bf0c      	ite	eq
 8008ae0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ae4:	2500      	movne	r5, #0
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	bfc4      	itt	gt
 8008aea:	1a9b      	subgt	r3, r3, r2
 8008aec:	18ed      	addgt	r5, r5, r3
 8008aee:	2600      	movs	r6, #0
 8008af0:	341a      	adds	r4, #26
 8008af2:	42b5      	cmp	r5, r6
 8008af4:	d11a      	bne.n	8008b2c <_printf_common+0xc8>
 8008af6:	2000      	movs	r0, #0
 8008af8:	e008      	b.n	8008b0c <_printf_common+0xa8>
 8008afa:	2301      	movs	r3, #1
 8008afc:	4652      	mov	r2, sl
 8008afe:	4649      	mov	r1, r9
 8008b00:	4638      	mov	r0, r7
 8008b02:	47c0      	blx	r8
 8008b04:	3001      	adds	r0, #1
 8008b06:	d103      	bne.n	8008b10 <_printf_common+0xac>
 8008b08:	f04f 30ff 	mov.w	r0, #4294967295
 8008b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b10:	3501      	adds	r5, #1
 8008b12:	e7c6      	b.n	8008aa2 <_printf_common+0x3e>
 8008b14:	18e1      	adds	r1, r4, r3
 8008b16:	1c5a      	adds	r2, r3, #1
 8008b18:	2030      	movs	r0, #48	; 0x30
 8008b1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b1e:	4422      	add	r2, r4
 8008b20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b28:	3302      	adds	r3, #2
 8008b2a:	e7c7      	b.n	8008abc <_printf_common+0x58>
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	4622      	mov	r2, r4
 8008b30:	4649      	mov	r1, r9
 8008b32:	4638      	mov	r0, r7
 8008b34:	47c0      	blx	r8
 8008b36:	3001      	adds	r0, #1
 8008b38:	d0e6      	beq.n	8008b08 <_printf_common+0xa4>
 8008b3a:	3601      	adds	r6, #1
 8008b3c:	e7d9      	b.n	8008af2 <_printf_common+0x8e>
	...

08008b40 <_printf_i>:
 8008b40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b44:	7e0f      	ldrb	r7, [r1, #24]
 8008b46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b48:	2f78      	cmp	r7, #120	; 0x78
 8008b4a:	4691      	mov	r9, r2
 8008b4c:	4680      	mov	r8, r0
 8008b4e:	460c      	mov	r4, r1
 8008b50:	469a      	mov	sl, r3
 8008b52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b56:	d807      	bhi.n	8008b68 <_printf_i+0x28>
 8008b58:	2f62      	cmp	r7, #98	; 0x62
 8008b5a:	d80a      	bhi.n	8008b72 <_printf_i+0x32>
 8008b5c:	2f00      	cmp	r7, #0
 8008b5e:	f000 80d4 	beq.w	8008d0a <_printf_i+0x1ca>
 8008b62:	2f58      	cmp	r7, #88	; 0x58
 8008b64:	f000 80c0 	beq.w	8008ce8 <_printf_i+0x1a8>
 8008b68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b70:	e03a      	b.n	8008be8 <_printf_i+0xa8>
 8008b72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b76:	2b15      	cmp	r3, #21
 8008b78:	d8f6      	bhi.n	8008b68 <_printf_i+0x28>
 8008b7a:	a101      	add	r1, pc, #4	; (adr r1, 8008b80 <_printf_i+0x40>)
 8008b7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b80:	08008bd9 	.word	0x08008bd9
 8008b84:	08008bed 	.word	0x08008bed
 8008b88:	08008b69 	.word	0x08008b69
 8008b8c:	08008b69 	.word	0x08008b69
 8008b90:	08008b69 	.word	0x08008b69
 8008b94:	08008b69 	.word	0x08008b69
 8008b98:	08008bed 	.word	0x08008bed
 8008b9c:	08008b69 	.word	0x08008b69
 8008ba0:	08008b69 	.word	0x08008b69
 8008ba4:	08008b69 	.word	0x08008b69
 8008ba8:	08008b69 	.word	0x08008b69
 8008bac:	08008cf1 	.word	0x08008cf1
 8008bb0:	08008c19 	.word	0x08008c19
 8008bb4:	08008cab 	.word	0x08008cab
 8008bb8:	08008b69 	.word	0x08008b69
 8008bbc:	08008b69 	.word	0x08008b69
 8008bc0:	08008d13 	.word	0x08008d13
 8008bc4:	08008b69 	.word	0x08008b69
 8008bc8:	08008c19 	.word	0x08008c19
 8008bcc:	08008b69 	.word	0x08008b69
 8008bd0:	08008b69 	.word	0x08008b69
 8008bd4:	08008cb3 	.word	0x08008cb3
 8008bd8:	682b      	ldr	r3, [r5, #0]
 8008bda:	1d1a      	adds	r2, r3, #4
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	602a      	str	r2, [r5, #0]
 8008be0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008be4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008be8:	2301      	movs	r3, #1
 8008bea:	e09f      	b.n	8008d2c <_printf_i+0x1ec>
 8008bec:	6820      	ldr	r0, [r4, #0]
 8008bee:	682b      	ldr	r3, [r5, #0]
 8008bf0:	0607      	lsls	r7, r0, #24
 8008bf2:	f103 0104 	add.w	r1, r3, #4
 8008bf6:	6029      	str	r1, [r5, #0]
 8008bf8:	d501      	bpl.n	8008bfe <_printf_i+0xbe>
 8008bfa:	681e      	ldr	r6, [r3, #0]
 8008bfc:	e003      	b.n	8008c06 <_printf_i+0xc6>
 8008bfe:	0646      	lsls	r6, r0, #25
 8008c00:	d5fb      	bpl.n	8008bfa <_printf_i+0xba>
 8008c02:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008c06:	2e00      	cmp	r6, #0
 8008c08:	da03      	bge.n	8008c12 <_printf_i+0xd2>
 8008c0a:	232d      	movs	r3, #45	; 0x2d
 8008c0c:	4276      	negs	r6, r6
 8008c0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c12:	485a      	ldr	r0, [pc, #360]	; (8008d7c <_printf_i+0x23c>)
 8008c14:	230a      	movs	r3, #10
 8008c16:	e012      	b.n	8008c3e <_printf_i+0xfe>
 8008c18:	682b      	ldr	r3, [r5, #0]
 8008c1a:	6820      	ldr	r0, [r4, #0]
 8008c1c:	1d19      	adds	r1, r3, #4
 8008c1e:	6029      	str	r1, [r5, #0]
 8008c20:	0605      	lsls	r5, r0, #24
 8008c22:	d501      	bpl.n	8008c28 <_printf_i+0xe8>
 8008c24:	681e      	ldr	r6, [r3, #0]
 8008c26:	e002      	b.n	8008c2e <_printf_i+0xee>
 8008c28:	0641      	lsls	r1, r0, #25
 8008c2a:	d5fb      	bpl.n	8008c24 <_printf_i+0xe4>
 8008c2c:	881e      	ldrh	r6, [r3, #0]
 8008c2e:	4853      	ldr	r0, [pc, #332]	; (8008d7c <_printf_i+0x23c>)
 8008c30:	2f6f      	cmp	r7, #111	; 0x6f
 8008c32:	bf0c      	ite	eq
 8008c34:	2308      	moveq	r3, #8
 8008c36:	230a      	movne	r3, #10
 8008c38:	2100      	movs	r1, #0
 8008c3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c3e:	6865      	ldr	r5, [r4, #4]
 8008c40:	60a5      	str	r5, [r4, #8]
 8008c42:	2d00      	cmp	r5, #0
 8008c44:	bfa2      	ittt	ge
 8008c46:	6821      	ldrge	r1, [r4, #0]
 8008c48:	f021 0104 	bicge.w	r1, r1, #4
 8008c4c:	6021      	strge	r1, [r4, #0]
 8008c4e:	b90e      	cbnz	r6, 8008c54 <_printf_i+0x114>
 8008c50:	2d00      	cmp	r5, #0
 8008c52:	d04b      	beq.n	8008cec <_printf_i+0x1ac>
 8008c54:	4615      	mov	r5, r2
 8008c56:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c5a:	fb03 6711 	mls	r7, r3, r1, r6
 8008c5e:	5dc7      	ldrb	r7, [r0, r7]
 8008c60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c64:	4637      	mov	r7, r6
 8008c66:	42bb      	cmp	r3, r7
 8008c68:	460e      	mov	r6, r1
 8008c6a:	d9f4      	bls.n	8008c56 <_printf_i+0x116>
 8008c6c:	2b08      	cmp	r3, #8
 8008c6e:	d10b      	bne.n	8008c88 <_printf_i+0x148>
 8008c70:	6823      	ldr	r3, [r4, #0]
 8008c72:	07de      	lsls	r6, r3, #31
 8008c74:	d508      	bpl.n	8008c88 <_printf_i+0x148>
 8008c76:	6923      	ldr	r3, [r4, #16]
 8008c78:	6861      	ldr	r1, [r4, #4]
 8008c7a:	4299      	cmp	r1, r3
 8008c7c:	bfde      	ittt	le
 8008c7e:	2330      	movle	r3, #48	; 0x30
 8008c80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c88:	1b52      	subs	r2, r2, r5
 8008c8a:	6122      	str	r2, [r4, #16]
 8008c8c:	f8cd a000 	str.w	sl, [sp]
 8008c90:	464b      	mov	r3, r9
 8008c92:	aa03      	add	r2, sp, #12
 8008c94:	4621      	mov	r1, r4
 8008c96:	4640      	mov	r0, r8
 8008c98:	f7ff fee4 	bl	8008a64 <_printf_common>
 8008c9c:	3001      	adds	r0, #1
 8008c9e:	d14a      	bne.n	8008d36 <_printf_i+0x1f6>
 8008ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca4:	b004      	add	sp, #16
 8008ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008caa:	6823      	ldr	r3, [r4, #0]
 8008cac:	f043 0320 	orr.w	r3, r3, #32
 8008cb0:	6023      	str	r3, [r4, #0]
 8008cb2:	4833      	ldr	r0, [pc, #204]	; (8008d80 <_printf_i+0x240>)
 8008cb4:	2778      	movs	r7, #120	; 0x78
 8008cb6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008cba:	6823      	ldr	r3, [r4, #0]
 8008cbc:	6829      	ldr	r1, [r5, #0]
 8008cbe:	061f      	lsls	r7, r3, #24
 8008cc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8008cc4:	d402      	bmi.n	8008ccc <_printf_i+0x18c>
 8008cc6:	065f      	lsls	r7, r3, #25
 8008cc8:	bf48      	it	mi
 8008cca:	b2b6      	uxthmi	r6, r6
 8008ccc:	07df      	lsls	r7, r3, #31
 8008cce:	bf48      	it	mi
 8008cd0:	f043 0320 	orrmi.w	r3, r3, #32
 8008cd4:	6029      	str	r1, [r5, #0]
 8008cd6:	bf48      	it	mi
 8008cd8:	6023      	strmi	r3, [r4, #0]
 8008cda:	b91e      	cbnz	r6, 8008ce4 <_printf_i+0x1a4>
 8008cdc:	6823      	ldr	r3, [r4, #0]
 8008cde:	f023 0320 	bic.w	r3, r3, #32
 8008ce2:	6023      	str	r3, [r4, #0]
 8008ce4:	2310      	movs	r3, #16
 8008ce6:	e7a7      	b.n	8008c38 <_printf_i+0xf8>
 8008ce8:	4824      	ldr	r0, [pc, #144]	; (8008d7c <_printf_i+0x23c>)
 8008cea:	e7e4      	b.n	8008cb6 <_printf_i+0x176>
 8008cec:	4615      	mov	r5, r2
 8008cee:	e7bd      	b.n	8008c6c <_printf_i+0x12c>
 8008cf0:	682b      	ldr	r3, [r5, #0]
 8008cf2:	6826      	ldr	r6, [r4, #0]
 8008cf4:	6961      	ldr	r1, [r4, #20]
 8008cf6:	1d18      	adds	r0, r3, #4
 8008cf8:	6028      	str	r0, [r5, #0]
 8008cfa:	0635      	lsls	r5, r6, #24
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	d501      	bpl.n	8008d04 <_printf_i+0x1c4>
 8008d00:	6019      	str	r1, [r3, #0]
 8008d02:	e002      	b.n	8008d0a <_printf_i+0x1ca>
 8008d04:	0670      	lsls	r0, r6, #25
 8008d06:	d5fb      	bpl.n	8008d00 <_printf_i+0x1c0>
 8008d08:	8019      	strh	r1, [r3, #0]
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	6123      	str	r3, [r4, #16]
 8008d0e:	4615      	mov	r5, r2
 8008d10:	e7bc      	b.n	8008c8c <_printf_i+0x14c>
 8008d12:	682b      	ldr	r3, [r5, #0]
 8008d14:	1d1a      	adds	r2, r3, #4
 8008d16:	602a      	str	r2, [r5, #0]
 8008d18:	681d      	ldr	r5, [r3, #0]
 8008d1a:	6862      	ldr	r2, [r4, #4]
 8008d1c:	2100      	movs	r1, #0
 8008d1e:	4628      	mov	r0, r5
 8008d20:	f7f7 fa96 	bl	8000250 <memchr>
 8008d24:	b108      	cbz	r0, 8008d2a <_printf_i+0x1ea>
 8008d26:	1b40      	subs	r0, r0, r5
 8008d28:	6060      	str	r0, [r4, #4]
 8008d2a:	6863      	ldr	r3, [r4, #4]
 8008d2c:	6123      	str	r3, [r4, #16]
 8008d2e:	2300      	movs	r3, #0
 8008d30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d34:	e7aa      	b.n	8008c8c <_printf_i+0x14c>
 8008d36:	6923      	ldr	r3, [r4, #16]
 8008d38:	462a      	mov	r2, r5
 8008d3a:	4649      	mov	r1, r9
 8008d3c:	4640      	mov	r0, r8
 8008d3e:	47d0      	blx	sl
 8008d40:	3001      	adds	r0, #1
 8008d42:	d0ad      	beq.n	8008ca0 <_printf_i+0x160>
 8008d44:	6823      	ldr	r3, [r4, #0]
 8008d46:	079b      	lsls	r3, r3, #30
 8008d48:	d413      	bmi.n	8008d72 <_printf_i+0x232>
 8008d4a:	68e0      	ldr	r0, [r4, #12]
 8008d4c:	9b03      	ldr	r3, [sp, #12]
 8008d4e:	4298      	cmp	r0, r3
 8008d50:	bfb8      	it	lt
 8008d52:	4618      	movlt	r0, r3
 8008d54:	e7a6      	b.n	8008ca4 <_printf_i+0x164>
 8008d56:	2301      	movs	r3, #1
 8008d58:	4632      	mov	r2, r6
 8008d5a:	4649      	mov	r1, r9
 8008d5c:	4640      	mov	r0, r8
 8008d5e:	47d0      	blx	sl
 8008d60:	3001      	adds	r0, #1
 8008d62:	d09d      	beq.n	8008ca0 <_printf_i+0x160>
 8008d64:	3501      	adds	r5, #1
 8008d66:	68e3      	ldr	r3, [r4, #12]
 8008d68:	9903      	ldr	r1, [sp, #12]
 8008d6a:	1a5b      	subs	r3, r3, r1
 8008d6c:	42ab      	cmp	r3, r5
 8008d6e:	dcf2      	bgt.n	8008d56 <_printf_i+0x216>
 8008d70:	e7eb      	b.n	8008d4a <_printf_i+0x20a>
 8008d72:	2500      	movs	r5, #0
 8008d74:	f104 0619 	add.w	r6, r4, #25
 8008d78:	e7f5      	b.n	8008d66 <_printf_i+0x226>
 8008d7a:	bf00      	nop
 8008d7c:	08009631 	.word	0x08009631
 8008d80:	08009642 	.word	0x08009642

08008d84 <_scanf_chars>:
 8008d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d88:	4615      	mov	r5, r2
 8008d8a:	688a      	ldr	r2, [r1, #8]
 8008d8c:	4680      	mov	r8, r0
 8008d8e:	460c      	mov	r4, r1
 8008d90:	b932      	cbnz	r2, 8008da0 <_scanf_chars+0x1c>
 8008d92:	698a      	ldr	r2, [r1, #24]
 8008d94:	2a00      	cmp	r2, #0
 8008d96:	bf0c      	ite	eq
 8008d98:	2201      	moveq	r2, #1
 8008d9a:	f04f 32ff 	movne.w	r2, #4294967295
 8008d9e:	608a      	str	r2, [r1, #8]
 8008da0:	6822      	ldr	r2, [r4, #0]
 8008da2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8008e34 <_scanf_chars+0xb0>
 8008da6:	06d1      	lsls	r1, r2, #27
 8008da8:	bf5f      	itttt	pl
 8008daa:	681a      	ldrpl	r2, [r3, #0]
 8008dac:	1d11      	addpl	r1, r2, #4
 8008dae:	6019      	strpl	r1, [r3, #0]
 8008db0:	6816      	ldrpl	r6, [r2, #0]
 8008db2:	2700      	movs	r7, #0
 8008db4:	69a0      	ldr	r0, [r4, #24]
 8008db6:	b188      	cbz	r0, 8008ddc <_scanf_chars+0x58>
 8008db8:	2801      	cmp	r0, #1
 8008dba:	d107      	bne.n	8008dcc <_scanf_chars+0x48>
 8008dbc:	682a      	ldr	r2, [r5, #0]
 8008dbe:	7811      	ldrb	r1, [r2, #0]
 8008dc0:	6962      	ldr	r2, [r4, #20]
 8008dc2:	5c52      	ldrb	r2, [r2, r1]
 8008dc4:	b952      	cbnz	r2, 8008ddc <_scanf_chars+0x58>
 8008dc6:	2f00      	cmp	r7, #0
 8008dc8:	d031      	beq.n	8008e2e <_scanf_chars+0xaa>
 8008dca:	e022      	b.n	8008e12 <_scanf_chars+0x8e>
 8008dcc:	2802      	cmp	r0, #2
 8008dce:	d120      	bne.n	8008e12 <_scanf_chars+0x8e>
 8008dd0:	682b      	ldr	r3, [r5, #0]
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008dd8:	071b      	lsls	r3, r3, #28
 8008dda:	d41a      	bmi.n	8008e12 <_scanf_chars+0x8e>
 8008ddc:	6823      	ldr	r3, [r4, #0]
 8008dde:	06da      	lsls	r2, r3, #27
 8008de0:	bf5e      	ittt	pl
 8008de2:	682b      	ldrpl	r3, [r5, #0]
 8008de4:	781b      	ldrbpl	r3, [r3, #0]
 8008de6:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008dea:	682a      	ldr	r2, [r5, #0]
 8008dec:	686b      	ldr	r3, [r5, #4]
 8008dee:	3201      	adds	r2, #1
 8008df0:	602a      	str	r2, [r5, #0]
 8008df2:	68a2      	ldr	r2, [r4, #8]
 8008df4:	3b01      	subs	r3, #1
 8008df6:	3a01      	subs	r2, #1
 8008df8:	606b      	str	r3, [r5, #4]
 8008dfa:	3701      	adds	r7, #1
 8008dfc:	60a2      	str	r2, [r4, #8]
 8008dfe:	b142      	cbz	r2, 8008e12 <_scanf_chars+0x8e>
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	dcd7      	bgt.n	8008db4 <_scanf_chars+0x30>
 8008e04:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008e08:	4629      	mov	r1, r5
 8008e0a:	4640      	mov	r0, r8
 8008e0c:	4798      	blx	r3
 8008e0e:	2800      	cmp	r0, #0
 8008e10:	d0d0      	beq.n	8008db4 <_scanf_chars+0x30>
 8008e12:	6823      	ldr	r3, [r4, #0]
 8008e14:	f013 0310 	ands.w	r3, r3, #16
 8008e18:	d105      	bne.n	8008e26 <_scanf_chars+0xa2>
 8008e1a:	68e2      	ldr	r2, [r4, #12]
 8008e1c:	3201      	adds	r2, #1
 8008e1e:	60e2      	str	r2, [r4, #12]
 8008e20:	69a2      	ldr	r2, [r4, #24]
 8008e22:	b102      	cbz	r2, 8008e26 <_scanf_chars+0xa2>
 8008e24:	7033      	strb	r3, [r6, #0]
 8008e26:	6923      	ldr	r3, [r4, #16]
 8008e28:	443b      	add	r3, r7
 8008e2a:	6123      	str	r3, [r4, #16]
 8008e2c:	2000      	movs	r0, #0
 8008e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e32:	bf00      	nop
 8008e34:	0800966f 	.word	0x0800966f

08008e38 <_scanf_i>:
 8008e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e3c:	4698      	mov	r8, r3
 8008e3e:	4b74      	ldr	r3, [pc, #464]	; (8009010 <_scanf_i+0x1d8>)
 8008e40:	460c      	mov	r4, r1
 8008e42:	4682      	mov	sl, r0
 8008e44:	4616      	mov	r6, r2
 8008e46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e4a:	b087      	sub	sp, #28
 8008e4c:	ab03      	add	r3, sp, #12
 8008e4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008e52:	4b70      	ldr	r3, [pc, #448]	; (8009014 <_scanf_i+0x1dc>)
 8008e54:	69a1      	ldr	r1, [r4, #24]
 8008e56:	4a70      	ldr	r2, [pc, #448]	; (8009018 <_scanf_i+0x1e0>)
 8008e58:	2903      	cmp	r1, #3
 8008e5a:	bf18      	it	ne
 8008e5c:	461a      	movne	r2, r3
 8008e5e:	68a3      	ldr	r3, [r4, #8]
 8008e60:	9201      	str	r2, [sp, #4]
 8008e62:	1e5a      	subs	r2, r3, #1
 8008e64:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008e68:	bf88      	it	hi
 8008e6a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008e6e:	4627      	mov	r7, r4
 8008e70:	bf82      	ittt	hi
 8008e72:	eb03 0905 	addhi.w	r9, r3, r5
 8008e76:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008e7a:	60a3      	strhi	r3, [r4, #8]
 8008e7c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008e80:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008e84:	bf98      	it	ls
 8008e86:	f04f 0900 	movls.w	r9, #0
 8008e8a:	6023      	str	r3, [r4, #0]
 8008e8c:	463d      	mov	r5, r7
 8008e8e:	f04f 0b00 	mov.w	fp, #0
 8008e92:	6831      	ldr	r1, [r6, #0]
 8008e94:	ab03      	add	r3, sp, #12
 8008e96:	7809      	ldrb	r1, [r1, #0]
 8008e98:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008e9c:	2202      	movs	r2, #2
 8008e9e:	f7f7 f9d7 	bl	8000250 <memchr>
 8008ea2:	b328      	cbz	r0, 8008ef0 <_scanf_i+0xb8>
 8008ea4:	f1bb 0f01 	cmp.w	fp, #1
 8008ea8:	d159      	bne.n	8008f5e <_scanf_i+0x126>
 8008eaa:	6862      	ldr	r2, [r4, #4]
 8008eac:	b92a      	cbnz	r2, 8008eba <_scanf_i+0x82>
 8008eae:	6822      	ldr	r2, [r4, #0]
 8008eb0:	2308      	movs	r3, #8
 8008eb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008eb6:	6063      	str	r3, [r4, #4]
 8008eb8:	6022      	str	r2, [r4, #0]
 8008eba:	6822      	ldr	r2, [r4, #0]
 8008ebc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008ec0:	6022      	str	r2, [r4, #0]
 8008ec2:	68a2      	ldr	r2, [r4, #8]
 8008ec4:	1e51      	subs	r1, r2, #1
 8008ec6:	60a1      	str	r1, [r4, #8]
 8008ec8:	b192      	cbz	r2, 8008ef0 <_scanf_i+0xb8>
 8008eca:	6832      	ldr	r2, [r6, #0]
 8008ecc:	1c51      	adds	r1, r2, #1
 8008ece:	6031      	str	r1, [r6, #0]
 8008ed0:	7812      	ldrb	r2, [r2, #0]
 8008ed2:	f805 2b01 	strb.w	r2, [r5], #1
 8008ed6:	6872      	ldr	r2, [r6, #4]
 8008ed8:	3a01      	subs	r2, #1
 8008eda:	2a00      	cmp	r2, #0
 8008edc:	6072      	str	r2, [r6, #4]
 8008ede:	dc07      	bgt.n	8008ef0 <_scanf_i+0xb8>
 8008ee0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008ee4:	4631      	mov	r1, r6
 8008ee6:	4650      	mov	r0, sl
 8008ee8:	4790      	blx	r2
 8008eea:	2800      	cmp	r0, #0
 8008eec:	f040 8085 	bne.w	8008ffa <_scanf_i+0x1c2>
 8008ef0:	f10b 0b01 	add.w	fp, fp, #1
 8008ef4:	f1bb 0f03 	cmp.w	fp, #3
 8008ef8:	d1cb      	bne.n	8008e92 <_scanf_i+0x5a>
 8008efa:	6863      	ldr	r3, [r4, #4]
 8008efc:	b90b      	cbnz	r3, 8008f02 <_scanf_i+0xca>
 8008efe:	230a      	movs	r3, #10
 8008f00:	6063      	str	r3, [r4, #4]
 8008f02:	6863      	ldr	r3, [r4, #4]
 8008f04:	4945      	ldr	r1, [pc, #276]	; (800901c <_scanf_i+0x1e4>)
 8008f06:	6960      	ldr	r0, [r4, #20]
 8008f08:	1ac9      	subs	r1, r1, r3
 8008f0a:	f000 f889 	bl	8009020 <__sccl>
 8008f0e:	f04f 0b00 	mov.w	fp, #0
 8008f12:	68a3      	ldr	r3, [r4, #8]
 8008f14:	6822      	ldr	r2, [r4, #0]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d03d      	beq.n	8008f96 <_scanf_i+0x15e>
 8008f1a:	6831      	ldr	r1, [r6, #0]
 8008f1c:	6960      	ldr	r0, [r4, #20]
 8008f1e:	f891 c000 	ldrb.w	ip, [r1]
 8008f22:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008f26:	2800      	cmp	r0, #0
 8008f28:	d035      	beq.n	8008f96 <_scanf_i+0x15e>
 8008f2a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008f2e:	d124      	bne.n	8008f7a <_scanf_i+0x142>
 8008f30:	0510      	lsls	r0, r2, #20
 8008f32:	d522      	bpl.n	8008f7a <_scanf_i+0x142>
 8008f34:	f10b 0b01 	add.w	fp, fp, #1
 8008f38:	f1b9 0f00 	cmp.w	r9, #0
 8008f3c:	d003      	beq.n	8008f46 <_scanf_i+0x10e>
 8008f3e:	3301      	adds	r3, #1
 8008f40:	f109 39ff 	add.w	r9, r9, #4294967295
 8008f44:	60a3      	str	r3, [r4, #8]
 8008f46:	6873      	ldr	r3, [r6, #4]
 8008f48:	3b01      	subs	r3, #1
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	6073      	str	r3, [r6, #4]
 8008f4e:	dd1b      	ble.n	8008f88 <_scanf_i+0x150>
 8008f50:	6833      	ldr	r3, [r6, #0]
 8008f52:	3301      	adds	r3, #1
 8008f54:	6033      	str	r3, [r6, #0]
 8008f56:	68a3      	ldr	r3, [r4, #8]
 8008f58:	3b01      	subs	r3, #1
 8008f5a:	60a3      	str	r3, [r4, #8]
 8008f5c:	e7d9      	b.n	8008f12 <_scanf_i+0xda>
 8008f5e:	f1bb 0f02 	cmp.w	fp, #2
 8008f62:	d1ae      	bne.n	8008ec2 <_scanf_i+0x8a>
 8008f64:	6822      	ldr	r2, [r4, #0]
 8008f66:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008f6a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008f6e:	d1bf      	bne.n	8008ef0 <_scanf_i+0xb8>
 8008f70:	2310      	movs	r3, #16
 8008f72:	6063      	str	r3, [r4, #4]
 8008f74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f78:	e7a2      	b.n	8008ec0 <_scanf_i+0x88>
 8008f7a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008f7e:	6022      	str	r2, [r4, #0]
 8008f80:	780b      	ldrb	r3, [r1, #0]
 8008f82:	f805 3b01 	strb.w	r3, [r5], #1
 8008f86:	e7de      	b.n	8008f46 <_scanf_i+0x10e>
 8008f88:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008f8c:	4631      	mov	r1, r6
 8008f8e:	4650      	mov	r0, sl
 8008f90:	4798      	blx	r3
 8008f92:	2800      	cmp	r0, #0
 8008f94:	d0df      	beq.n	8008f56 <_scanf_i+0x11e>
 8008f96:	6823      	ldr	r3, [r4, #0]
 8008f98:	05d9      	lsls	r1, r3, #23
 8008f9a:	d50d      	bpl.n	8008fb8 <_scanf_i+0x180>
 8008f9c:	42bd      	cmp	r5, r7
 8008f9e:	d909      	bls.n	8008fb4 <_scanf_i+0x17c>
 8008fa0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008fa4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008fa8:	4632      	mov	r2, r6
 8008faa:	4650      	mov	r0, sl
 8008fac:	4798      	blx	r3
 8008fae:	f105 39ff 	add.w	r9, r5, #4294967295
 8008fb2:	464d      	mov	r5, r9
 8008fb4:	42bd      	cmp	r5, r7
 8008fb6:	d028      	beq.n	800900a <_scanf_i+0x1d2>
 8008fb8:	6822      	ldr	r2, [r4, #0]
 8008fba:	f012 0210 	ands.w	r2, r2, #16
 8008fbe:	d113      	bne.n	8008fe8 <_scanf_i+0x1b0>
 8008fc0:	702a      	strb	r2, [r5, #0]
 8008fc2:	6863      	ldr	r3, [r4, #4]
 8008fc4:	9e01      	ldr	r6, [sp, #4]
 8008fc6:	4639      	mov	r1, r7
 8008fc8:	4650      	mov	r0, sl
 8008fca:	47b0      	blx	r6
 8008fcc:	f8d8 3000 	ldr.w	r3, [r8]
 8008fd0:	6821      	ldr	r1, [r4, #0]
 8008fd2:	1d1a      	adds	r2, r3, #4
 8008fd4:	f8c8 2000 	str.w	r2, [r8]
 8008fd8:	f011 0f20 	tst.w	r1, #32
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	d00f      	beq.n	8009000 <_scanf_i+0x1c8>
 8008fe0:	6018      	str	r0, [r3, #0]
 8008fe2:	68e3      	ldr	r3, [r4, #12]
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	60e3      	str	r3, [r4, #12]
 8008fe8:	6923      	ldr	r3, [r4, #16]
 8008fea:	1bed      	subs	r5, r5, r7
 8008fec:	445d      	add	r5, fp
 8008fee:	442b      	add	r3, r5
 8008ff0:	6123      	str	r3, [r4, #16]
 8008ff2:	2000      	movs	r0, #0
 8008ff4:	b007      	add	sp, #28
 8008ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ffa:	f04f 0b00 	mov.w	fp, #0
 8008ffe:	e7ca      	b.n	8008f96 <_scanf_i+0x15e>
 8009000:	07ca      	lsls	r2, r1, #31
 8009002:	bf4c      	ite	mi
 8009004:	8018      	strhmi	r0, [r3, #0]
 8009006:	6018      	strpl	r0, [r3, #0]
 8009008:	e7eb      	b.n	8008fe2 <_scanf_i+0x1aa>
 800900a:	2001      	movs	r0, #1
 800900c:	e7f2      	b.n	8008ff4 <_scanf_i+0x1bc>
 800900e:	bf00      	nop
 8009010:	080095a0 	.word	0x080095a0
 8009014:	080093c5 	.word	0x080093c5
 8009018:	080092dd 	.word	0x080092dd
 800901c:	08009663 	.word	0x08009663

08009020 <__sccl>:
 8009020:	b570      	push	{r4, r5, r6, lr}
 8009022:	780b      	ldrb	r3, [r1, #0]
 8009024:	4604      	mov	r4, r0
 8009026:	2b5e      	cmp	r3, #94	; 0x5e
 8009028:	bf0b      	itete	eq
 800902a:	784b      	ldrbeq	r3, [r1, #1]
 800902c:	1c4a      	addne	r2, r1, #1
 800902e:	1c8a      	addeq	r2, r1, #2
 8009030:	2100      	movne	r1, #0
 8009032:	bf08      	it	eq
 8009034:	2101      	moveq	r1, #1
 8009036:	3801      	subs	r0, #1
 8009038:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800903c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009040:	42a8      	cmp	r0, r5
 8009042:	d1fb      	bne.n	800903c <__sccl+0x1c>
 8009044:	b90b      	cbnz	r3, 800904a <__sccl+0x2a>
 8009046:	1e50      	subs	r0, r2, #1
 8009048:	bd70      	pop	{r4, r5, r6, pc}
 800904a:	f081 0101 	eor.w	r1, r1, #1
 800904e:	54e1      	strb	r1, [r4, r3]
 8009050:	4610      	mov	r0, r2
 8009052:	4602      	mov	r2, r0
 8009054:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009058:	2d2d      	cmp	r5, #45	; 0x2d
 800905a:	d005      	beq.n	8009068 <__sccl+0x48>
 800905c:	2d5d      	cmp	r5, #93	; 0x5d
 800905e:	d016      	beq.n	800908e <__sccl+0x6e>
 8009060:	2d00      	cmp	r5, #0
 8009062:	d0f1      	beq.n	8009048 <__sccl+0x28>
 8009064:	462b      	mov	r3, r5
 8009066:	e7f2      	b.n	800904e <__sccl+0x2e>
 8009068:	7846      	ldrb	r6, [r0, #1]
 800906a:	2e5d      	cmp	r6, #93	; 0x5d
 800906c:	d0fa      	beq.n	8009064 <__sccl+0x44>
 800906e:	42b3      	cmp	r3, r6
 8009070:	dcf8      	bgt.n	8009064 <__sccl+0x44>
 8009072:	3002      	adds	r0, #2
 8009074:	461a      	mov	r2, r3
 8009076:	3201      	adds	r2, #1
 8009078:	4296      	cmp	r6, r2
 800907a:	54a1      	strb	r1, [r4, r2]
 800907c:	dcfb      	bgt.n	8009076 <__sccl+0x56>
 800907e:	1af2      	subs	r2, r6, r3
 8009080:	3a01      	subs	r2, #1
 8009082:	1c5d      	adds	r5, r3, #1
 8009084:	42b3      	cmp	r3, r6
 8009086:	bfa8      	it	ge
 8009088:	2200      	movge	r2, #0
 800908a:	18ab      	adds	r3, r5, r2
 800908c:	e7e1      	b.n	8009052 <__sccl+0x32>
 800908e:	4610      	mov	r0, r2
 8009090:	e7da      	b.n	8009048 <__sccl+0x28>

08009092 <__submore>:
 8009092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009096:	460c      	mov	r4, r1
 8009098:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800909a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800909e:	4299      	cmp	r1, r3
 80090a0:	d11d      	bne.n	80090de <__submore+0x4c>
 80090a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80090a6:	f7ff f927 	bl	80082f8 <_malloc_r>
 80090aa:	b918      	cbnz	r0, 80090b4 <__submore+0x22>
 80090ac:	f04f 30ff 	mov.w	r0, #4294967295
 80090b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090b8:	63a3      	str	r3, [r4, #56]	; 0x38
 80090ba:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80090be:	6360      	str	r0, [r4, #52]	; 0x34
 80090c0:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80090c4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80090c8:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80090cc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80090d0:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80090d4:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80090d8:	6020      	str	r0, [r4, #0]
 80090da:	2000      	movs	r0, #0
 80090dc:	e7e8      	b.n	80090b0 <__submore+0x1e>
 80090de:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80090e0:	0077      	lsls	r7, r6, #1
 80090e2:	463a      	mov	r2, r7
 80090e4:	f000 f848 	bl	8009178 <_realloc_r>
 80090e8:	4605      	mov	r5, r0
 80090ea:	2800      	cmp	r0, #0
 80090ec:	d0de      	beq.n	80090ac <__submore+0x1a>
 80090ee:	eb00 0806 	add.w	r8, r0, r6
 80090f2:	4601      	mov	r1, r0
 80090f4:	4632      	mov	r2, r6
 80090f6:	4640      	mov	r0, r8
 80090f8:	f000 f830 	bl	800915c <memcpy>
 80090fc:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009100:	f8c4 8000 	str.w	r8, [r4]
 8009104:	e7e9      	b.n	80090da <__submore+0x48>

08009106 <memmove>:
 8009106:	4288      	cmp	r0, r1
 8009108:	b510      	push	{r4, lr}
 800910a:	eb01 0402 	add.w	r4, r1, r2
 800910e:	d902      	bls.n	8009116 <memmove+0x10>
 8009110:	4284      	cmp	r4, r0
 8009112:	4623      	mov	r3, r4
 8009114:	d807      	bhi.n	8009126 <memmove+0x20>
 8009116:	1e43      	subs	r3, r0, #1
 8009118:	42a1      	cmp	r1, r4
 800911a:	d008      	beq.n	800912e <memmove+0x28>
 800911c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009120:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009124:	e7f8      	b.n	8009118 <memmove+0x12>
 8009126:	4402      	add	r2, r0
 8009128:	4601      	mov	r1, r0
 800912a:	428a      	cmp	r2, r1
 800912c:	d100      	bne.n	8009130 <memmove+0x2a>
 800912e:	bd10      	pop	{r4, pc}
 8009130:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009134:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009138:	e7f7      	b.n	800912a <memmove+0x24>
	...

0800913c <_sbrk_r>:
 800913c:	b538      	push	{r3, r4, r5, lr}
 800913e:	4d06      	ldr	r5, [pc, #24]	; (8009158 <_sbrk_r+0x1c>)
 8009140:	2300      	movs	r3, #0
 8009142:	4604      	mov	r4, r0
 8009144:	4608      	mov	r0, r1
 8009146:	602b      	str	r3, [r5, #0]
 8009148:	f7f8 f822 	bl	8001190 <_sbrk>
 800914c:	1c43      	adds	r3, r0, #1
 800914e:	d102      	bne.n	8009156 <_sbrk_r+0x1a>
 8009150:	682b      	ldr	r3, [r5, #0]
 8009152:	b103      	cbz	r3, 8009156 <_sbrk_r+0x1a>
 8009154:	6023      	str	r3, [r4, #0]
 8009156:	bd38      	pop	{r3, r4, r5, pc}
 8009158:	2000053c 	.word	0x2000053c

0800915c <memcpy>:
 800915c:	440a      	add	r2, r1
 800915e:	4291      	cmp	r1, r2
 8009160:	f100 33ff 	add.w	r3, r0, #4294967295
 8009164:	d100      	bne.n	8009168 <memcpy+0xc>
 8009166:	4770      	bx	lr
 8009168:	b510      	push	{r4, lr}
 800916a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800916e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009172:	4291      	cmp	r1, r2
 8009174:	d1f9      	bne.n	800916a <memcpy+0xe>
 8009176:	bd10      	pop	{r4, pc}

08009178 <_realloc_r>:
 8009178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800917c:	4680      	mov	r8, r0
 800917e:	4614      	mov	r4, r2
 8009180:	460e      	mov	r6, r1
 8009182:	b921      	cbnz	r1, 800918e <_realloc_r+0x16>
 8009184:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009188:	4611      	mov	r1, r2
 800918a:	f7ff b8b5 	b.w	80082f8 <_malloc_r>
 800918e:	b92a      	cbnz	r2, 800919c <_realloc_r+0x24>
 8009190:	f7ff f846 	bl	8008220 <_free_r>
 8009194:	4625      	mov	r5, r4
 8009196:	4628      	mov	r0, r5
 8009198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800919c:	f000 f914 	bl	80093c8 <_malloc_usable_size_r>
 80091a0:	4284      	cmp	r4, r0
 80091a2:	4607      	mov	r7, r0
 80091a4:	d802      	bhi.n	80091ac <_realloc_r+0x34>
 80091a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80091aa:	d812      	bhi.n	80091d2 <_realloc_r+0x5a>
 80091ac:	4621      	mov	r1, r4
 80091ae:	4640      	mov	r0, r8
 80091b0:	f7ff f8a2 	bl	80082f8 <_malloc_r>
 80091b4:	4605      	mov	r5, r0
 80091b6:	2800      	cmp	r0, #0
 80091b8:	d0ed      	beq.n	8009196 <_realloc_r+0x1e>
 80091ba:	42bc      	cmp	r4, r7
 80091bc:	4622      	mov	r2, r4
 80091be:	4631      	mov	r1, r6
 80091c0:	bf28      	it	cs
 80091c2:	463a      	movcs	r2, r7
 80091c4:	f7ff ffca 	bl	800915c <memcpy>
 80091c8:	4631      	mov	r1, r6
 80091ca:	4640      	mov	r0, r8
 80091cc:	f7ff f828 	bl	8008220 <_free_r>
 80091d0:	e7e1      	b.n	8009196 <_realloc_r+0x1e>
 80091d2:	4635      	mov	r5, r6
 80091d4:	e7df      	b.n	8009196 <_realloc_r+0x1e>
	...

080091d8 <_strtol_l.constprop.0>:
 80091d8:	2b01      	cmp	r3, #1
 80091da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091de:	d001      	beq.n	80091e4 <_strtol_l.constprop.0+0xc>
 80091e0:	2b24      	cmp	r3, #36	; 0x24
 80091e2:	d906      	bls.n	80091f2 <_strtol_l.constprop.0+0x1a>
 80091e4:	f7fe fff0 	bl	80081c8 <__errno>
 80091e8:	2316      	movs	r3, #22
 80091ea:	6003      	str	r3, [r0, #0]
 80091ec:	2000      	movs	r0, #0
 80091ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091f2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80092d8 <_strtol_l.constprop.0+0x100>
 80091f6:	460d      	mov	r5, r1
 80091f8:	462e      	mov	r6, r5
 80091fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80091fe:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009202:	f017 0708 	ands.w	r7, r7, #8
 8009206:	d1f7      	bne.n	80091f8 <_strtol_l.constprop.0+0x20>
 8009208:	2c2d      	cmp	r4, #45	; 0x2d
 800920a:	d132      	bne.n	8009272 <_strtol_l.constprop.0+0x9a>
 800920c:	782c      	ldrb	r4, [r5, #0]
 800920e:	2701      	movs	r7, #1
 8009210:	1cb5      	adds	r5, r6, #2
 8009212:	2b00      	cmp	r3, #0
 8009214:	d05b      	beq.n	80092ce <_strtol_l.constprop.0+0xf6>
 8009216:	2b10      	cmp	r3, #16
 8009218:	d109      	bne.n	800922e <_strtol_l.constprop.0+0x56>
 800921a:	2c30      	cmp	r4, #48	; 0x30
 800921c:	d107      	bne.n	800922e <_strtol_l.constprop.0+0x56>
 800921e:	782c      	ldrb	r4, [r5, #0]
 8009220:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009224:	2c58      	cmp	r4, #88	; 0x58
 8009226:	d14d      	bne.n	80092c4 <_strtol_l.constprop.0+0xec>
 8009228:	786c      	ldrb	r4, [r5, #1]
 800922a:	2310      	movs	r3, #16
 800922c:	3502      	adds	r5, #2
 800922e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009232:	f108 38ff 	add.w	r8, r8, #4294967295
 8009236:	f04f 0e00 	mov.w	lr, #0
 800923a:	fbb8 f9f3 	udiv	r9, r8, r3
 800923e:	4676      	mov	r6, lr
 8009240:	fb03 8a19 	mls	sl, r3, r9, r8
 8009244:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009248:	f1bc 0f09 	cmp.w	ip, #9
 800924c:	d816      	bhi.n	800927c <_strtol_l.constprop.0+0xa4>
 800924e:	4664      	mov	r4, ip
 8009250:	42a3      	cmp	r3, r4
 8009252:	dd24      	ble.n	800929e <_strtol_l.constprop.0+0xc6>
 8009254:	f1be 3fff 	cmp.w	lr, #4294967295
 8009258:	d008      	beq.n	800926c <_strtol_l.constprop.0+0x94>
 800925a:	45b1      	cmp	r9, r6
 800925c:	d31c      	bcc.n	8009298 <_strtol_l.constprop.0+0xc0>
 800925e:	d101      	bne.n	8009264 <_strtol_l.constprop.0+0x8c>
 8009260:	45a2      	cmp	sl, r4
 8009262:	db19      	blt.n	8009298 <_strtol_l.constprop.0+0xc0>
 8009264:	fb06 4603 	mla	r6, r6, r3, r4
 8009268:	f04f 0e01 	mov.w	lr, #1
 800926c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009270:	e7e8      	b.n	8009244 <_strtol_l.constprop.0+0x6c>
 8009272:	2c2b      	cmp	r4, #43	; 0x2b
 8009274:	bf04      	itt	eq
 8009276:	782c      	ldrbeq	r4, [r5, #0]
 8009278:	1cb5      	addeq	r5, r6, #2
 800927a:	e7ca      	b.n	8009212 <_strtol_l.constprop.0+0x3a>
 800927c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009280:	f1bc 0f19 	cmp.w	ip, #25
 8009284:	d801      	bhi.n	800928a <_strtol_l.constprop.0+0xb2>
 8009286:	3c37      	subs	r4, #55	; 0x37
 8009288:	e7e2      	b.n	8009250 <_strtol_l.constprop.0+0x78>
 800928a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800928e:	f1bc 0f19 	cmp.w	ip, #25
 8009292:	d804      	bhi.n	800929e <_strtol_l.constprop.0+0xc6>
 8009294:	3c57      	subs	r4, #87	; 0x57
 8009296:	e7db      	b.n	8009250 <_strtol_l.constprop.0+0x78>
 8009298:	f04f 3eff 	mov.w	lr, #4294967295
 800929c:	e7e6      	b.n	800926c <_strtol_l.constprop.0+0x94>
 800929e:	f1be 3fff 	cmp.w	lr, #4294967295
 80092a2:	d105      	bne.n	80092b0 <_strtol_l.constprop.0+0xd8>
 80092a4:	2322      	movs	r3, #34	; 0x22
 80092a6:	6003      	str	r3, [r0, #0]
 80092a8:	4646      	mov	r6, r8
 80092aa:	b942      	cbnz	r2, 80092be <_strtol_l.constprop.0+0xe6>
 80092ac:	4630      	mov	r0, r6
 80092ae:	e79e      	b.n	80091ee <_strtol_l.constprop.0+0x16>
 80092b0:	b107      	cbz	r7, 80092b4 <_strtol_l.constprop.0+0xdc>
 80092b2:	4276      	negs	r6, r6
 80092b4:	2a00      	cmp	r2, #0
 80092b6:	d0f9      	beq.n	80092ac <_strtol_l.constprop.0+0xd4>
 80092b8:	f1be 0f00 	cmp.w	lr, #0
 80092bc:	d000      	beq.n	80092c0 <_strtol_l.constprop.0+0xe8>
 80092be:	1e69      	subs	r1, r5, #1
 80092c0:	6011      	str	r1, [r2, #0]
 80092c2:	e7f3      	b.n	80092ac <_strtol_l.constprop.0+0xd4>
 80092c4:	2430      	movs	r4, #48	; 0x30
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d1b1      	bne.n	800922e <_strtol_l.constprop.0+0x56>
 80092ca:	2308      	movs	r3, #8
 80092cc:	e7af      	b.n	800922e <_strtol_l.constprop.0+0x56>
 80092ce:	2c30      	cmp	r4, #48	; 0x30
 80092d0:	d0a5      	beq.n	800921e <_strtol_l.constprop.0+0x46>
 80092d2:	230a      	movs	r3, #10
 80092d4:	e7ab      	b.n	800922e <_strtol_l.constprop.0+0x56>
 80092d6:	bf00      	nop
 80092d8:	0800966f 	.word	0x0800966f

080092dc <_strtol_r>:
 80092dc:	f7ff bf7c 	b.w	80091d8 <_strtol_l.constprop.0>

080092e0 <_strtoul_l.constprop.0>:
 80092e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80092e4:	4f36      	ldr	r7, [pc, #216]	; (80093c0 <_strtoul_l.constprop.0+0xe0>)
 80092e6:	4686      	mov	lr, r0
 80092e8:	460d      	mov	r5, r1
 80092ea:	4628      	mov	r0, r5
 80092ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80092f0:	5d3e      	ldrb	r6, [r7, r4]
 80092f2:	f016 0608 	ands.w	r6, r6, #8
 80092f6:	d1f8      	bne.n	80092ea <_strtoul_l.constprop.0+0xa>
 80092f8:	2c2d      	cmp	r4, #45	; 0x2d
 80092fa:	d130      	bne.n	800935e <_strtoul_l.constprop.0+0x7e>
 80092fc:	782c      	ldrb	r4, [r5, #0]
 80092fe:	2601      	movs	r6, #1
 8009300:	1c85      	adds	r5, r0, #2
 8009302:	2b00      	cmp	r3, #0
 8009304:	d057      	beq.n	80093b6 <_strtoul_l.constprop.0+0xd6>
 8009306:	2b10      	cmp	r3, #16
 8009308:	d109      	bne.n	800931e <_strtoul_l.constprop.0+0x3e>
 800930a:	2c30      	cmp	r4, #48	; 0x30
 800930c:	d107      	bne.n	800931e <_strtoul_l.constprop.0+0x3e>
 800930e:	7828      	ldrb	r0, [r5, #0]
 8009310:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009314:	2858      	cmp	r0, #88	; 0x58
 8009316:	d149      	bne.n	80093ac <_strtoul_l.constprop.0+0xcc>
 8009318:	786c      	ldrb	r4, [r5, #1]
 800931a:	2310      	movs	r3, #16
 800931c:	3502      	adds	r5, #2
 800931e:	f04f 38ff 	mov.w	r8, #4294967295
 8009322:	2700      	movs	r7, #0
 8009324:	fbb8 f8f3 	udiv	r8, r8, r3
 8009328:	fb03 f908 	mul.w	r9, r3, r8
 800932c:	ea6f 0909 	mvn.w	r9, r9
 8009330:	4638      	mov	r0, r7
 8009332:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009336:	f1bc 0f09 	cmp.w	ip, #9
 800933a:	d815      	bhi.n	8009368 <_strtoul_l.constprop.0+0x88>
 800933c:	4664      	mov	r4, ip
 800933e:	42a3      	cmp	r3, r4
 8009340:	dd23      	ble.n	800938a <_strtoul_l.constprop.0+0xaa>
 8009342:	f1b7 3fff 	cmp.w	r7, #4294967295
 8009346:	d007      	beq.n	8009358 <_strtoul_l.constprop.0+0x78>
 8009348:	4580      	cmp	r8, r0
 800934a:	d31b      	bcc.n	8009384 <_strtoul_l.constprop.0+0xa4>
 800934c:	d101      	bne.n	8009352 <_strtoul_l.constprop.0+0x72>
 800934e:	45a1      	cmp	r9, r4
 8009350:	db18      	blt.n	8009384 <_strtoul_l.constprop.0+0xa4>
 8009352:	fb00 4003 	mla	r0, r0, r3, r4
 8009356:	2701      	movs	r7, #1
 8009358:	f815 4b01 	ldrb.w	r4, [r5], #1
 800935c:	e7e9      	b.n	8009332 <_strtoul_l.constprop.0+0x52>
 800935e:	2c2b      	cmp	r4, #43	; 0x2b
 8009360:	bf04      	itt	eq
 8009362:	782c      	ldrbeq	r4, [r5, #0]
 8009364:	1c85      	addeq	r5, r0, #2
 8009366:	e7cc      	b.n	8009302 <_strtoul_l.constprop.0+0x22>
 8009368:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800936c:	f1bc 0f19 	cmp.w	ip, #25
 8009370:	d801      	bhi.n	8009376 <_strtoul_l.constprop.0+0x96>
 8009372:	3c37      	subs	r4, #55	; 0x37
 8009374:	e7e3      	b.n	800933e <_strtoul_l.constprop.0+0x5e>
 8009376:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800937a:	f1bc 0f19 	cmp.w	ip, #25
 800937e:	d804      	bhi.n	800938a <_strtoul_l.constprop.0+0xaa>
 8009380:	3c57      	subs	r4, #87	; 0x57
 8009382:	e7dc      	b.n	800933e <_strtoul_l.constprop.0+0x5e>
 8009384:	f04f 37ff 	mov.w	r7, #4294967295
 8009388:	e7e6      	b.n	8009358 <_strtoul_l.constprop.0+0x78>
 800938a:	1c7b      	adds	r3, r7, #1
 800938c:	d106      	bne.n	800939c <_strtoul_l.constprop.0+0xbc>
 800938e:	2322      	movs	r3, #34	; 0x22
 8009390:	f8ce 3000 	str.w	r3, [lr]
 8009394:	4638      	mov	r0, r7
 8009396:	b932      	cbnz	r2, 80093a6 <_strtoul_l.constprop.0+0xc6>
 8009398:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800939c:	b106      	cbz	r6, 80093a0 <_strtoul_l.constprop.0+0xc0>
 800939e:	4240      	negs	r0, r0
 80093a0:	2a00      	cmp	r2, #0
 80093a2:	d0f9      	beq.n	8009398 <_strtoul_l.constprop.0+0xb8>
 80093a4:	b107      	cbz	r7, 80093a8 <_strtoul_l.constprop.0+0xc8>
 80093a6:	1e69      	subs	r1, r5, #1
 80093a8:	6011      	str	r1, [r2, #0]
 80093aa:	e7f5      	b.n	8009398 <_strtoul_l.constprop.0+0xb8>
 80093ac:	2430      	movs	r4, #48	; 0x30
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d1b5      	bne.n	800931e <_strtoul_l.constprop.0+0x3e>
 80093b2:	2308      	movs	r3, #8
 80093b4:	e7b3      	b.n	800931e <_strtoul_l.constprop.0+0x3e>
 80093b6:	2c30      	cmp	r4, #48	; 0x30
 80093b8:	d0a9      	beq.n	800930e <_strtoul_l.constprop.0+0x2e>
 80093ba:	230a      	movs	r3, #10
 80093bc:	e7af      	b.n	800931e <_strtoul_l.constprop.0+0x3e>
 80093be:	bf00      	nop
 80093c0:	0800966f 	.word	0x0800966f

080093c4 <_strtoul_r>:
 80093c4:	f7ff bf8c 	b.w	80092e0 <_strtoul_l.constprop.0>

080093c8 <_malloc_usable_size_r>:
 80093c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093cc:	1f18      	subs	r0, r3, #4
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	bfbc      	itt	lt
 80093d2:	580b      	ldrlt	r3, [r1, r0]
 80093d4:	18c0      	addlt	r0, r0, r3
 80093d6:	4770      	bx	lr

080093d8 <_init>:
 80093d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093da:	bf00      	nop
 80093dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093de:	bc08      	pop	{r3}
 80093e0:	469e      	mov	lr, r3
 80093e2:	4770      	bx	lr

080093e4 <_fini>:
 80093e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093e6:	bf00      	nop
 80093e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ea:	bc08      	pop	{r3}
 80093ec:	469e      	mov	lr, r3
 80093ee:	4770      	bx	lr
