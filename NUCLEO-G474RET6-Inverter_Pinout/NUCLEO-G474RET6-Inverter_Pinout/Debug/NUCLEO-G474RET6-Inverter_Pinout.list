
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086f0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  080088d0  080088d0  000188d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a3c  08008a3c  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008a3c  08008a3c  00018a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a44  08008a44  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a44  08008a44  00018a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a48  08008a48  00018a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  08008a4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000474  200000d4  08008b20  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000548  08008b20  00020548  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b892  00000000  00000000  00020147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000388b  00000000  00000000  0003b9d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015c0  00000000  00000000  0003f268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010c9  00000000  00000000  00040828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029d32  00000000  00000000  000418f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c666  00000000  00000000  0006b623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00112380  00000000  00000000  00087c89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006054  00000000  00000000  0019a00c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  001a0060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000d4 	.word	0x200000d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	080088b8 	.word	0x080088b8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000d8 	.word	0x200000d8
 800021c:	080088b8 	.word	0x080088b8

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08c      	sub	sp, #48	; 0x30
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2220      	movs	r2, #32
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f007 fcd3 	bl	8007fb0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800060a:	4b32      	ldr	r3, [pc, #200]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800060c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000610:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000612:	4b30      	ldr	r3, [pc, #192]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000614:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000618:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800061a:	4b2e      	ldr	r3, [pc, #184]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000620:	4b2c      	ldr	r3, [pc, #176]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000626:	4b2b      	ldr	r3, [pc, #172]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800062c:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800062e:	2200      	movs	r2, #0
 8000630:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000632:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000634:	2204      	movs	r2, #4
 8000636:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000638:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800063a:	2200      	movs	r2, #0
 800063c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800063e:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000640:	2200      	movs	r2, #0
 8000642:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000644:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000646:	2201      	movs	r2, #1
 8000648:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800064a:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800064c:	2200      	movs	r2, #0
 800064e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000652:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000654:	2200      	movs	r2, #0
 8000656:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000658:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800065a:	2200      	movs	r2, #0
 800065c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800065e:	4b1d      	ldr	r3, [pc, #116]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000660:	2200      	movs	r2, #0
 8000662:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000666:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000668:	2200      	movs	r2, #0
 800066a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800066c:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800066e:	2200      	movs	r2, #0
 8000670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000674:	4817      	ldr	r0, [pc, #92]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000676:	f001 faa7 	bl	8001bc8 <HAL_ADC_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000680:	f000 fafe 	bl	8000c80 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000684:	2300      	movs	r3, #0
 8000686:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800068c:	4619      	mov	r1, r3
 800068e:	4811      	ldr	r0, [pc, #68]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000690:	f002 f8c2 	bl	8002818 <HAL_ADCEx_MultiModeConfigChannel>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800069a:	f000 faf1 	bl	8000c80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_ADC1_Init+0xec>)
 80006a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a2:	2306      	movs	r3, #6
 80006a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006aa:	237f      	movs	r3, #127	; 0x7f
 80006ac:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006ae:	2304      	movs	r3, #4
 80006b0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	4619      	mov	r1, r3
 80006ba:	4806      	ldr	r0, [pc, #24]	; (80006d4 <MX_ADC1_Init+0xe8>)
 80006bc:	f001 fc46 	bl	8001f4c <HAL_ADC_ConfigChannel>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006c6:	f000 fadb 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	3730      	adds	r7, #48	; 0x30
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	200000f0 	.word	0x200000f0
 80006d8:	21800100 	.word	0x21800100

080006dc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006e2:	463b      	mov	r3, r7
 80006e4:	2220      	movs	r2, #32
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f007 fc61 	bl	8007fb0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006ee:	4b2b      	ldr	r3, [pc, #172]	; (800079c <MX_ADC2_Init+0xc0>)
 80006f0:	4a2b      	ldr	r2, [pc, #172]	; (80007a0 <MX_ADC2_Init+0xc4>)
 80006f2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006f4:	4b29      	ldr	r3, [pc, #164]	; (800079c <MX_ADC2_Init+0xc0>)
 80006f6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006fa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006fc:	4b27      	ldr	r3, [pc, #156]	; (800079c <MX_ADC2_Init+0xc0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000702:	4b26      	ldr	r3, [pc, #152]	; (800079c <MX_ADC2_Init+0xc0>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000708:	4b24      	ldr	r3, [pc, #144]	; (800079c <MX_ADC2_Init+0xc0>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800070e:	4b23      	ldr	r3, [pc, #140]	; (800079c <MX_ADC2_Init+0xc0>)
 8000710:	2200      	movs	r2, #0
 8000712:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000714:	4b21      	ldr	r3, [pc, #132]	; (800079c <MX_ADC2_Init+0xc0>)
 8000716:	2204      	movs	r2, #4
 8000718:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800071a:	4b20      	ldr	r3, [pc, #128]	; (800079c <MX_ADC2_Init+0xc0>)
 800071c:	2200      	movs	r2, #0
 800071e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000720:	4b1e      	ldr	r3, [pc, #120]	; (800079c <MX_ADC2_Init+0xc0>)
 8000722:	2200      	movs	r2, #0
 8000724:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000726:	4b1d      	ldr	r3, [pc, #116]	; (800079c <MX_ADC2_Init+0xc0>)
 8000728:	2201      	movs	r2, #1
 800072a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800072c:	4b1b      	ldr	r3, [pc, #108]	; (800079c <MX_ADC2_Init+0xc0>)
 800072e:	2200      	movs	r2, #0
 8000730:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000734:	4b19      	ldr	r3, [pc, #100]	; (800079c <MX_ADC2_Init+0xc0>)
 8000736:	2200      	movs	r2, #0
 8000738:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <MX_ADC2_Init+0xc0>)
 800073c:	2200      	movs	r2, #0
 800073e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000740:	4b16      	ldr	r3, [pc, #88]	; (800079c <MX_ADC2_Init+0xc0>)
 8000742:	2200      	movs	r2, #0
 8000744:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_ADC2_Init+0xc0>)
 800074a:	2200      	movs	r2, #0
 800074c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_ADC2_Init+0xc0>)
 8000750:	2200      	movs	r2, #0
 8000752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000756:	4811      	ldr	r0, [pc, #68]	; (800079c <MX_ADC2_Init+0xc0>)
 8000758:	f001 fa36 	bl	8001bc8 <HAL_ADC_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000762:	f000 fa8d 	bl	8000c80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_ADC2_Init+0xc8>)
 8000768:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800076a:	2306      	movs	r3, #6
 800076c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000772:	237f      	movs	r3, #127	; 0x7f
 8000774:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000776:	2304      	movs	r3, #4
 8000778:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800077e:	463b      	mov	r3, r7
 8000780:	4619      	mov	r1, r3
 8000782:	4806      	ldr	r0, [pc, #24]	; (800079c <MX_ADC2_Init+0xc0>)
 8000784:	f001 fbe2 	bl	8001f4c <HAL_ADC_ConfigChannel>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800078e:	f000 fa77 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	3720      	adds	r7, #32
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	2000015c 	.word	0x2000015c
 80007a0:	50000100 	.word	0x50000100
 80007a4:	19200040 	.word	0x19200040

080007a8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b0a4      	sub	sp, #144	; 0x90
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007c4:	2254      	movs	r2, #84	; 0x54
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f007 fbf1 	bl	8007fb0 <memset>
  if(adcHandle->Instance==ADC1)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007d6:	d174      	bne.n	80008c2 <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007de:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80007e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007e8:	4618      	mov	r0, r3
 80007ea:	f003 fa95 	bl	8003d18 <HAL_RCCEx_PeriphCLKConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80007f4:	f000 fa44 	bl	8000c80 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007f8:	4b63      	ldr	r3, [pc, #396]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	3301      	adds	r3, #1
 80007fe:	4a62      	ldr	r2, [pc, #392]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 8000800:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000802:	4b61      	ldr	r3, [pc, #388]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d10b      	bne.n	8000822 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800080a:	4b60      	ldr	r3, [pc, #384]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	4a5f      	ldr	r2, [pc, #380]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000810:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000816:	4b5d      	ldr	r3, [pc, #372]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
 8000820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	4b5a      	ldr	r3, [pc, #360]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	4a59      	ldr	r2, [pc, #356]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082e:	4b57      	ldr	r3, [pc, #348]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	623b      	str	r3, [r7, #32]
 8000838:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b54      	ldr	r3, [pc, #336]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	4a53      	ldr	r2, [pc, #332]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000846:	4b51      	ldr	r3, [pc, #324]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	61fb      	str	r3, [r7, #28]
 8000850:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	4b4e      	ldr	r3, [pc, #312]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	4a4d      	ldr	r2, [pc, #308]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085e:	4b4b      	ldr	r3, [pc, #300]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	61bb      	str	r3, [r7, #24]
 8000868:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 800086a:	2304      	movs	r3, #4
 800086c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800086e:	2303      	movs	r3, #3
 8000870:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800087e:	4619      	mov	r1, r3
 8000880:	4843      	ldr	r0, [pc, #268]	; (8000990 <HAL_ADC_MspInit+0x1e8>)
 8000882:	f002 fa71 	bl	8002d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 8000886:	2302      	movs	r3, #2
 8000888:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800088a:	2303      	movs	r3, #3
 800088c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800089a:	4619      	mov	r1, r3
 800089c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a0:	f002 fa62 	bl	8002d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008a4:	2303      	movs	r3, #3
 80008a6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008a8:	2303      	movs	r3, #3
 80008aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80008b8:	4619      	mov	r1, r3
 80008ba:	4836      	ldr	r0, [pc, #216]	; (8000994 <HAL_ADC_MspInit+0x1ec>)
 80008bc:	f002 fa54 	bl	8002d68 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80008c0:	e05e      	b.n	8000980 <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a34      	ldr	r2, [pc, #208]	; (8000998 <HAL_ADC_MspInit+0x1f0>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d159      	bne.n	8000980 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80008cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008d2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80008d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008dc:	4618      	mov	r0, r3
 80008de:	f003 fa1b 	bl	8003d18 <HAL_RCCEx_PeriphCLKConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <HAL_ADC_MspInit+0x144>
      Error_Handler();
 80008e8:	f000 f9ca 	bl	8000c80 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008ec:	4b26      	ldr	r3, [pc, #152]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	3301      	adds	r3, #1
 80008f2:	4a25      	ldr	r2, [pc, #148]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 80008f4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008f6:	4b24      	ldr	r3, [pc, #144]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d10b      	bne.n	8000916 <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008fe:	4b23      	ldr	r3, [pc, #140]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	4a22      	ldr	r2, [pc, #136]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000904:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090a:	4b20      	ldr	r3, [pc, #128]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000912:	617b      	str	r3, [r7, #20]
 8000914:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	4b1d      	ldr	r3, [pc, #116]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	4a1c      	ldr	r2, [pc, #112]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000922:	4b1a      	ldr	r3, [pc, #104]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b17      	ldr	r3, [pc, #92]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	4a16      	ldr	r2, [pc, #88]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093a:	4b14      	ldr	r3, [pc, #80]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 8000946:	230b      	movs	r3, #11
 8000948:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800094a:	2303      	movs	r3, #3
 800094c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000956:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800095a:	4619      	mov	r1, r3
 800095c:	480c      	ldr	r0, [pc, #48]	; (8000990 <HAL_ADC_MspInit+0x1e8>)
 800095e:	f002 fa03 	bl	8002d68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8000962:	2301      	movs	r3, #1
 8000964:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000966:	2303      	movs	r3, #3
 8000968:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000976:	4619      	mov	r1, r3
 8000978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097c:	f002 f9f4 	bl	8002d68 <HAL_GPIO_Init>
}
 8000980:	bf00      	nop
 8000982:	3790      	adds	r7, #144	; 0x90
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	200001c8 	.word	0x200001c8
 800098c:	40021000 	.word	0x40021000
 8000990:	48000800 	.word	0x48000800
 8000994:	48000400 	.word	0x48000400
 8000998:	50000100 	.word	0x50000100

0800099c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	; 0x28
 80009a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b2:	4b3f      	ldr	r3, [pc, #252]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	4a3e      	ldr	r2, [pc, #248]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009be:	4b3c      	ldr	r3, [pc, #240]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ca:	4b39      	ldr	r3, [pc, #228]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	4a38      	ldr	r2, [pc, #224]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009d0:	f043 0320 	orr.w	r3, r3, #32
 80009d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d6:	4b36      	ldr	r3, [pc, #216]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	f003 0320 	and.w	r3, r3, #32
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	4b33      	ldr	r3, [pc, #204]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	4a32      	ldr	r2, [pc, #200]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ee:	4b30      	ldr	r3, [pc, #192]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	4b2d      	ldr	r3, [pc, #180]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	4a2c      	ldr	r2, [pc, #176]	; (8000ab0 <MX_GPIO_Init+0x114>)
 8000a00:	f043 0302 	orr.w	r3, r3, #2
 8000a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a06:	4b2a      	ldr	r3, [pc, #168]	; (8000ab0 <MX_GPIO_Init+0x114>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a12:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <MX_GPIO_Init+0x114>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	4a26      	ldr	r2, [pc, #152]	; (8000ab0 <MX_GPIO_Init+0x114>)
 8000a18:	f043 0308 	orr.w	r3, r3, #8
 8000a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1e:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <MX_GPIO_Init+0x114>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	f003 0308 	and.w	r3, r3, #8
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2120      	movs	r1, #32
 8000a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a32:	f002 fb1b 	bl	800306c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2104      	movs	r1, #4
 8000a3a:	481e      	ldr	r0, [pc, #120]	; (8000ab4 <MX_GPIO_Init+0x118>)
 8000a3c:	f002 fb16 	bl	800306c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000a40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a46:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	4818      	ldr	r0, [pc, #96]	; (8000ab8 <MX_GPIO_Init+0x11c>)
 8000a58:	f002 f986 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000a5c:	2320      	movs	r3, #32
 8000a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a76:	f002 f977 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000a7a:	2304      	movs	r3, #4
 8000a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4808      	ldr	r0, [pc, #32]	; (8000ab4 <MX_GPIO_Init+0x118>)
 8000a92:	f002 f969 	bl	8002d68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2028      	movs	r0, #40	; 0x28
 8000a9c:	f002 f87c 	bl	8002b98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000aa0:	2028      	movs	r0, #40	; 0x28
 8000aa2:	f002 f893 	bl	8002bcc <HAL_NVIC_EnableIRQ>

}
 8000aa6:	bf00      	nop
 8000aa8:	3728      	adds	r7, #40	; 0x28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	48000c00 	.word	0x48000c00
 8000ab8:	48000800 	.word	0x48000800

08000abc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac0:	f000 fe71 	bl	80017a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac4:	f000 f864 	bl	8000b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac8:	f7ff ff68 	bl	800099c <MX_GPIO_Init>
  MX_ADC2_Init();
 8000acc:	f7ff fe06 	bl	80006dc <MX_ADC2_Init>
  MX_ADC1_Init();
 8000ad0:	f7ff fd8c 	bl	80005ec <MX_ADC1_Init>
  MX_TIM1_Init();
 8000ad4:	f000 fae0 	bl	8001098 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000ad8:	f000 fbb0 	bl	800123c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000adc:	f000 fd02 	bl	80014e4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000ae0:	f000 fd4c 	bl	800157c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4822      	ldr	r0, [pc, #136]	; (8000b70 <main+0xb4>)
 8000ae8:	f003 fc96 	bl	8004418 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000aec:	2104      	movs	r1, #4
 8000aee:	4820      	ldr	r0, [pc, #128]	; (8000b70 <main+0xb4>)
 8000af0:	f003 fc92 	bl	8004418 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000af4:	2100      	movs	r1, #0
 8000af6:	481e      	ldr	r0, [pc, #120]	; (8000b70 <main+0xb4>)
 8000af8:	f004 ff28 	bl	800594c <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000afc:	2104      	movs	r1, #4
 8000afe:	481c      	ldr	r0, [pc, #112]	; (8000b70 <main+0xb4>)
 8000b00:	f004 ff24 	bl	800594c <HAL_TIMEx_PWMN_Start>
  HAL_UART_Transmit(&huart2, started, strlen(started), HAL_MAX_DELAY);
 8000b04:	f04f 33ff 	mov.w	r3, #4294967295
 8000b08:	2230      	movs	r2, #48	; 0x30
 8000b0a:	491a      	ldr	r1, [pc, #104]	; (8000b74 <main+0xb8>)
 8000b0c:	481a      	ldr	r0, [pc, #104]	; (8000b78 <main+0xbc>)
 8000b0e:	f005 f9f5 	bl	8005efc <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, uartRxBuffer, 1);
 8000b12:	2201      	movs	r2, #1
 8000b14:	4919      	ldr	r1, [pc, #100]	; (8000b7c <main+0xc0>)
 8000b16:	4818      	ldr	r0, [pc, #96]	; (8000b78 <main+0xbc>)
 8000b18:	f005 fa86 	bl	8006028 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(it_uart2){
 8000b1c:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <main+0xc4>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d0fb      	beq.n	8000b1c <main+0x60>
		  if(uartRxBuffer[0]==ENTER){
 8000b24:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <main+0xc0>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b0d      	cmp	r3, #13
 8000b2a:	d112      	bne.n	8000b52 <main+0x96>
			  HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);
 8000b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b30:	2202      	movs	r2, #2
 8000b32:	4914      	ldr	r1, [pc, #80]	; (8000b84 <main+0xc8>)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <main+0xbc>)
 8000b36:	f005 f9e1 	bl	8005efc <HAL_UART_Transmit>
			  processCommand(command); // Traitez la commande
 8000b3a:	4813      	ldr	r0, [pc, #76]	; (8000b88 <main+0xcc>)
 8000b3c:	f000 f8f2 	bl	8000d24 <processCommand>
			  memset(command, 0, sizeof(command)); // Réinitialisez le tableau
 8000b40:	2220      	movs	r2, #32
 8000b42:	2100      	movs	r1, #0
 8000b44:	4810      	ldr	r0, [pc, #64]	; (8000b88 <main+0xcc>)
 8000b46:	f007 fa33 	bl	8007fb0 <memset>
			  idx=0;
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <main+0xd0>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	701a      	strb	r2, [r3, #0]
 8000b50:	e00a      	b.n	8000b68 <main+0xac>
		  }
		  else{
			  command[idx++]=uartRxBuffer[0];
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <main+0xd0>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	1c5a      	adds	r2, r3, #1
 8000b58:	b2d1      	uxtb	r1, r2
 8000b5a:	4a0c      	ldr	r2, [pc, #48]	; (8000b8c <main+0xd0>)
 8000b5c:	7011      	strb	r1, [r2, #0]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <main+0xc0>)
 8000b62:	7819      	ldrb	r1, [r3, #0]
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <main+0xcc>)
 8000b66:	5499      	strb	r1, [r3, r2]
		  }
		  it_uart2 = 0;
 8000b68:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <main+0xc4>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
	  if(it_uart2){
 8000b6e:	e7d5      	b.n	8000b1c <main+0x60>
 8000b70:	20000244 	.word	0x20000244
 8000b74:	08008994 	.word	0x08008994
 8000b78:	200002dc 	.word	0x200002dc
 8000b7c:	200001cc 	.word	0x200001cc
 8000b80:	200001cd 	.word	0x200001cd
 8000b84:	080088d0 	.word	0x080088d0
 8000b88:	200001d0 	.word	0x200001d0
 8000b8c:	200001f0 	.word	0x200001f0

08000b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b094      	sub	sp, #80	; 0x50
 8000b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b96:	f107 0318 	add.w	r3, r7, #24
 8000b9a:	2238      	movs	r2, #56	; 0x38
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f007 fa06 	bl	8007fb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000bb2:	2000      	movs	r0, #0
 8000bb4:	f002 fa96 	bl	80030e4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bc0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000bca:	2306      	movs	r3, #6
 8000bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000bce:	2355      	movs	r3, #85	; 0x55
 8000bd0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bde:	f107 0318 	add.w	r3, r7, #24
 8000be2:	4618      	mov	r0, r3
 8000be4:	f002 fb32 	bl	800324c <HAL_RCC_OscConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000bee:	f000 f847 	bl	8000c80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf2:	230f      	movs	r3, #15
 8000bf4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2104      	movs	r1, #4
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f002 fe36 	bl	800387c <HAL_RCC_ClockConfig>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000c16:	f000 f833 	bl	8000c80 <Error_Handler>
  }
}
 8000c1a:	bf00      	nop
 8000c1c:	3750      	adds	r7, #80	; 0x50
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, uartRxBuffer, 1, 100);
 8000c2c:	2364      	movs	r3, #100	; 0x64
 8000c2e:	2201      	movs	r2, #1
 8000c30:	4907      	ldr	r1, [pc, #28]	; (8000c50 <HAL_UART_RxCpltCallback+0x2c>)
 8000c32:	4808      	ldr	r0, [pc, #32]	; (8000c54 <HAL_UART_RxCpltCallback+0x30>)
 8000c34:	f005 f962 	bl	8005efc <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, 1);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	4905      	ldr	r1, [pc, #20]	; (8000c50 <HAL_UART_RxCpltCallback+0x2c>)
 8000c3c:	4805      	ldr	r0, [pc, #20]	; (8000c54 <HAL_UART_RxCpltCallback+0x30>)
 8000c3e:	f005 f9f3 	bl	8006028 <HAL_UART_Receive_IT>
	it_uart2 = 1;
 8000c42:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <HAL_UART_RxCpltCallback+0x34>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	701a      	strb	r2, [r3, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	200001cc 	.word	0x200001cc
 8000c54:	200002dc 	.word	0x200002dc
 8000c58:	200001cd 	.word	0x200001cd

08000c5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d101      	bne.n	8000c72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c6e:	f000 fdb3 	bl	80017d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40001000 	.word	0x40001000

08000c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c84:	b672      	cpsid	i
}
 8000c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <Error_Handler+0x8>
	...

08000c8c <pinout>:
    {"PA1", "GPIO", "OUT"},
    // Ajoutez d'autres broches et leurs informations ici
};


void pinout() {
 8000c8c:	b590      	push	{r4, r7, lr}
 8000c8e:	b09d      	sub	sp, #116	; 0x74
 8000c90:	af02      	add	r7, sp, #8
    HAL_UART_Transmit(&huart2, "Pinout:\r\n", strlen("Pinout:\r\n"), HAL_MAX_DELAY);
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
 8000c96:	2209      	movs	r2, #9
 8000c98:	491e      	ldr	r1, [pc, #120]	; (8000d14 <pinout+0x88>)
 8000c9a:	481f      	ldr	r0, [pc, #124]	; (8000d18 <pinout+0x8c>)
 8000c9c:	f005 f92e 	bl	8005efc <HAL_UART_Transmit>

    for (int i = 0; i < sizeof(pins) / sizeof(pins[0]); i++) {
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	667b      	str	r3, [r7, #100]	; 0x64
 8000ca4:	e02e      	b.n	8000d04 <pinout+0x78>
        char message[100];
        snprintf(message, sizeof(message), "Pin %s: Function - %s, State - %s\r\n", pins[i].name, pins[i].function, pins[i].state);
 8000ca6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000ca8:	4613      	mov	r3, r2
 8000caa:	011b      	lsls	r3, r3, #4
 8000cac:	1a9b      	subs	r3, r3, r2
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	4a1a      	ldr	r2, [pc, #104]	; (8000d1c <pinout+0x90>)
 8000cb2:	189c      	adds	r4, r3, r2
 8000cb4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	011b      	lsls	r3, r3, #4
 8000cba:	1a9b      	subs	r3, r3, r2
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	3310      	adds	r3, #16
 8000cc0:	4a16      	ldr	r2, [pc, #88]	; (8000d1c <pinout+0x90>)
 8000cc2:	4413      	add	r3, r2
 8000cc4:	1d19      	adds	r1, r3, #4
 8000cc6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000cc8:	4613      	mov	r3, r2
 8000cca:	011b      	lsls	r3, r3, #4
 8000ccc:	1a9b      	subs	r3, r3, r2
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	3328      	adds	r3, #40	; 0x28
 8000cd2:	4a12      	ldr	r2, [pc, #72]	; (8000d1c <pinout+0x90>)
 8000cd4:	4413      	add	r3, r2
 8000cd6:	4638      	mov	r0, r7
 8000cd8:	9301      	str	r3, [sp, #4]
 8000cda:	9100      	str	r1, [sp, #0]
 8000cdc:	4623      	mov	r3, r4
 8000cde:	4a10      	ldr	r2, [pc, #64]	; (8000d20 <pinout+0x94>)
 8000ce0:	2164      	movs	r1, #100	; 0x64
 8000ce2:	f007 f931 	bl	8007f48 <sniprintf>
        HAL_UART_Transmit(&huart2, message, strlen(message), HAL_MAX_DELAY);
 8000ce6:	463b      	mov	r3, r7
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff faa3 	bl	8000234 <strlen>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	b29a      	uxth	r2, r3
 8000cf2:	4639      	mov	r1, r7
 8000cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf8:	4807      	ldr	r0, [pc, #28]	; (8000d18 <pinout+0x8c>)
 8000cfa:	f005 f8ff 	bl	8005efc <HAL_UART_Transmit>
    for (int i = 0; i < sizeof(pins) / sizeof(pins[0]); i++) {
 8000cfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d00:	3301      	adds	r3, #1
 8000d02:	667b      	str	r3, [r7, #100]	; 0x64
 8000d04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d9cd      	bls.n	8000ca6 <pinout+0x1a>
    }
}
 8000d0a:	bf00      	nop
 8000d0c:	bf00      	nop
 8000d0e:	376c      	adds	r7, #108	; 0x6c
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd90      	pop	{r4, r7, pc}
 8000d14:	080088d4 	.word	0x080088d4
 8000d18:	200002dc 	.word	0x200002dc
 8000d1c:	20000000 	.word	0x20000000
 8000d20:	080088e0 	.word	0x080088e0

08000d24 <processCommand>:
#include "string.h"
#include "pinout.h"
#include "startMotor.h"
#include "stopMotor.h"

void processCommand(char* command) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  if (strcmp(command, "help") == 0) {
 8000d2c:	491e      	ldr	r1, [pc, #120]	; (8000da8 <processCommand+0x84>)
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff fa76 	bl	8000220 <strcmp>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d10e      	bne.n	8000d58 <processCommand+0x34>
    // Affiche le message d'aide
    HAL_UART_Transmit(&huart2, "Commandes disponibles :\r\n", strlen("Commandes disponibles :\r\n"), HAL_MAX_DELAY);
 8000d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3e:	2219      	movs	r2, #25
 8000d40:	491a      	ldr	r1, [pc, #104]	; (8000dac <processCommand+0x88>)
 8000d42:	481b      	ldr	r0, [pc, #108]	; (8000db0 <processCommand+0x8c>)
 8000d44:	f005 f8da 	bl	8005efc <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, " - help : Affiche ce message d'aide\r\n", strlen(" - help : Affiche ce message d'aide\r\n"), HAL_MAX_DELAY);
 8000d48:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4c:	2225      	movs	r2, #37	; 0x25
 8000d4e:	4919      	ldr	r1, [pc, #100]	; (8000db4 <processCommand+0x90>)
 8000d50:	4817      	ldr	r0, [pc, #92]	; (8000db0 <processCommand+0x8c>)
 8000d52:	f005 f8d3 	bl	8005efc <HAL_UART_Transmit>
    // Ajoutez d'autres commandes et leurs descriptions ici
    return 0;
 8000d56:	e024      	b.n	8000da2 <processCommand+0x7e>
  }
  if (strcmp(command, "pinout") == 0) {
 8000d58:	4917      	ldr	r1, [pc, #92]	; (8000db8 <processCommand+0x94>)
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff fa60 	bl	8000220 <strcmp>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d102      	bne.n	8000d6c <processCommand+0x48>
	  pinout(); // Appeler la fonction pinout
 8000d66:	f7ff ff91 	bl	8000c8c <pinout>
	  return 0;
 8000d6a:	e01a      	b.n	8000da2 <processCommand+0x7e>
  }
  if (strcmp(command, "start") == 0) {
 8000d6c:	4913      	ldr	r1, [pc, #76]	; (8000dbc <processCommand+0x98>)
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff fa56 	bl	8000220 <strcmp>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d102      	bne.n	8000d80 <processCommand+0x5c>
	  startMotor(); // Appeler la fonction startMotor
 8000d7a:	f000 f825 	bl	8000dc8 <startMotor>
	  return 0;
 8000d7e:	e010      	b.n	8000da2 <processCommand+0x7e>
  }
  if (strcmp(command, "stop") == 0) {
 8000d80:	490f      	ldr	r1, [pc, #60]	; (8000dc0 <processCommand+0x9c>)
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f7ff fa4c 	bl	8000220 <strcmp>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d102      	bne.n	8000d94 <processCommand+0x70>
	  stopMotor(); // Appeler la fonction stopMotor
 8000d8e:	f000 f92b 	bl	8000fe8 <stopMotor>
	  return 0;
 8000d92:	e006      	b.n	8000da2 <processCommand+0x7e>
    }
  else {
	  HAL_UART_Transmit(&huart2, "Command not found\r\n", strlen("Command not found\r\n"), HAL_MAX_DELAY);
 8000d94:	f04f 33ff 	mov.w	r3, #4294967295
 8000d98:	2213      	movs	r2, #19
 8000d9a:	490a      	ldr	r1, [pc, #40]	; (8000dc4 <processCommand+0xa0>)
 8000d9c:	4804      	ldr	r0, [pc, #16]	; (8000db0 <processCommand+0x8c>)
 8000d9e:	f005 f8ad 	bl	8005efc <HAL_UART_Transmit>
  }
  // Ajoutez d'autres conditions pour d'autres commandes si nécessaire
}
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	08008904 	.word	0x08008904
 8000dac:	0800890c 	.word	0x0800890c
 8000db0:	200002dc 	.word	0x200002dc
 8000db4:	08008928 	.word	0x08008928
 8000db8:	08008950 	.word	0x08008950
 8000dbc:	08008958 	.word	0x08008958
 8000dc0:	08008960 	.word	0x08008960
 8000dc4:	08008968 	.word	0x08008968

08000dc8 <startMotor>:
#include "tim.h"
#include "usart.h"
#include "gpio.h"
#include "string.h"

void startMotor() {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
    // Activez l'étage de puissance du moteur (code pour activer le moteur)

    // Affichez le message "Power ON" dans la console
    HAL_UART_Transmit(&huart2, "Power ON\r\n", strlen("Power ON\r\n"), HAL_MAX_DELAY);
 8000dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd0:	220a      	movs	r2, #10
 8000dd2:	4903      	ldr	r1, [pc, #12]	; (8000de0 <startMotor+0x18>)
 8000dd4:	4803      	ldr	r0, [pc, #12]	; (8000de4 <startMotor+0x1c>)
 8000dd6:	f005 f891 	bl	8005efc <HAL_UART_Transmit>
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	0800897c 	.word	0x0800897c
 8000de4:	200002dc 	.word	0x200002dc

08000de8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <HAL_MspInit+0x44>)
 8000df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000df2:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <HAL_MspInit+0x44>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	6613      	str	r3, [r2, #96]	; 0x60
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <HAL_MspInit+0x44>)
 8000dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <HAL_MspInit+0x44>)
 8000e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0a:	4a08      	ldr	r2, [pc, #32]	; (8000e2c <HAL_MspInit+0x44>)
 8000e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e10:	6593      	str	r3, [r2, #88]	; 0x58
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_MspInit+0x44>)
 8000e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1a:	603b      	str	r3, [r7, #0]
 8000e1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000e1e:	f002 fa05 	bl	800322c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40021000 	.word	0x40021000

08000e30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08c      	sub	sp, #48	; 0x30
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e40:	4b2c      	ldr	r3, [pc, #176]	; (8000ef4 <HAL_InitTick+0xc4>)
 8000e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e44:	4a2b      	ldr	r2, [pc, #172]	; (8000ef4 <HAL_InitTick+0xc4>)
 8000e46:	f043 0310 	orr.w	r3, r3, #16
 8000e4a:	6593      	str	r3, [r2, #88]	; 0x58
 8000e4c:	4b29      	ldr	r3, [pc, #164]	; (8000ef4 <HAL_InitTick+0xc4>)
 8000e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e50:	f003 0310 	and.w	r3, r3, #16
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e58:	f107 020c 	add.w	r2, r7, #12
 8000e5c:	f107 0310 	add.w	r3, r7, #16
 8000e60:	4611      	mov	r1, r2
 8000e62:	4618      	mov	r0, r3
 8000e64:	f002 fee0 	bl	8003c28 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e68:	f002 feb2 	bl	8003bd0 <HAL_RCC_GetPCLK1Freq>
 8000e6c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e70:	4a21      	ldr	r2, [pc, #132]	; (8000ef8 <HAL_InitTick+0xc8>)
 8000e72:	fba2 2303 	umull	r2, r3, r2, r3
 8000e76:	0c9b      	lsrs	r3, r3, #18
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <HAL_InitTick+0xcc>)
 8000e7e:	4a20      	ldr	r2, [pc, #128]	; (8000f00 <HAL_InitTick+0xd0>)
 8000e80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e82:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <HAL_InitTick+0xcc>)
 8000e84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e88:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e8a:	4a1c      	ldr	r2, [pc, #112]	; (8000efc <HAL_InitTick+0xcc>)
 8000e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e90:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <HAL_InitTick+0xcc>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e96:	4b19      	ldr	r3, [pc, #100]	; (8000efc <HAL_InitTick+0xcc>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000e9c:	4817      	ldr	r0, [pc, #92]	; (8000efc <HAL_InitTick+0xcc>)
 8000e9e:	f003 f989 	bl	80041b4 <HAL_TIM_Base_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000ea8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d11b      	bne.n	8000ee8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000eb0:	4812      	ldr	r0, [pc, #72]	; (8000efc <HAL_InitTick+0xcc>)
 8000eb2:	f003 f9d7 	bl	8004264 <HAL_TIM_Base_Start_IT>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000ebc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d111      	bne.n	8000ee8 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ec4:	2036      	movs	r0, #54	; 0x36
 8000ec6:	f001 fe81 	bl	8002bcc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b0f      	cmp	r3, #15
 8000ece:	d808      	bhi.n	8000ee2 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	2036      	movs	r0, #54	; 0x36
 8000ed6:	f001 fe5f 	bl	8002b98 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eda:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <HAL_InitTick+0xd4>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6013      	str	r3, [r2, #0]
 8000ee0:	e002      	b.n	8000ee8 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ee8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3730      	adds	r7, #48	; 0x30
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	431bde83 	.word	0x431bde83
 8000efc:	200001f4 	.word	0x200001f4
 8000f00:	40001000 	.word	0x40001000
 8000f04:	2000007c 	.word	0x2000007c

08000f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <NMI_Handler+0x4>

08000f0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <HardFault_Handler+0x4>

08000f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <MemManage_Handler+0x4>

08000f1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <BusFault_Handler+0x4>

08000f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <UsageFault_Handler+0x4>

08000f26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f64:	4802      	ldr	r0, [pc, #8]	; (8000f70 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8000f66:	f003 fb69 	bl	800463c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000244 	.word	0x20000244

08000f74 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f78:	4802      	ldr	r0, [pc, #8]	; (8000f84 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000f7a:	f003 fb5f 	bl	800463c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000244 	.word	0x20000244

08000f88 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f8c:	4802      	ldr	r0, [pc, #8]	; (8000f98 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000f8e:	f003 fb55 	bl	800463c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000244 	.word	0x20000244

08000f9c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fa0:	4802      	ldr	r0, [pc, #8]	; (8000fac <TIM1_CC_IRQHandler+0x10>)
 8000fa2:	f003 fb4b 	bl	800463c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000244 	.word	0x20000244

08000fb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fb4:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <USART2_IRQHandler+0x10>)
 8000fb6:	f005 f88d 	bl	80060d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200002dc 	.word	0x200002dc

08000fc4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8000fc8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fcc:	f002 f866 	bl	800309c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fd8:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <TIM6_DAC_IRQHandler+0x10>)
 8000fda:	f003 fb2f 	bl	800463c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200001f4 	.word	0x200001f4

08000fe8 <stopMotor>:
#include "tim.h"
#include "usart.h"
#include "gpio.h"
#include "string.h"

void stopMotor() {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
    // Desactivez l'étage de puissance du moteur (code pour desactiver le moteur)

    // Affichez le message "Power OFF" dans la console
    HAL_UART_Transmit(&huart2, "Power OFF\r\n", strlen("Power OFF\r\n"), HAL_MAX_DELAY);
 8000fec:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff0:	220b      	movs	r2, #11
 8000ff2:	4903      	ldr	r1, [pc, #12]	; (8001000 <stopMotor+0x18>)
 8000ff4:	4803      	ldr	r0, [pc, #12]	; (8001004 <stopMotor+0x1c>)
 8000ff6:	f004 ff81 	bl	8005efc <HAL_UART_Transmit>
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	08008988 	.word	0x08008988
 8001004:	200002dc 	.word	0x200002dc

08001008 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001010:	4a14      	ldr	r2, [pc, #80]	; (8001064 <_sbrk+0x5c>)
 8001012:	4b15      	ldr	r3, [pc, #84]	; (8001068 <_sbrk+0x60>)
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800101c:	4b13      	ldr	r3, [pc, #76]	; (800106c <_sbrk+0x64>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d102      	bne.n	800102a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001024:	4b11      	ldr	r3, [pc, #68]	; (800106c <_sbrk+0x64>)
 8001026:	4a12      	ldr	r2, [pc, #72]	; (8001070 <_sbrk+0x68>)
 8001028:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800102a:	4b10      	ldr	r3, [pc, #64]	; (800106c <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	429a      	cmp	r2, r3
 8001036:	d207      	bcs.n	8001048 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001038:	f006 ffc2 	bl	8007fc0 <__errno>
 800103c:	4603      	mov	r3, r0
 800103e:	220c      	movs	r2, #12
 8001040:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001042:	f04f 33ff 	mov.w	r3, #4294967295
 8001046:	e009      	b.n	800105c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <_sbrk+0x64>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800104e:	4b07      	ldr	r3, [pc, #28]	; (800106c <_sbrk+0x64>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	4a05      	ldr	r2, [pc, #20]	; (800106c <_sbrk+0x64>)
 8001058:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800105a:	68fb      	ldr	r3, [r7, #12]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20020000 	.word	0x20020000
 8001068:	00000400 	.word	0x00000400
 800106c:	20000240 	.word	0x20000240
 8001070:	20000548 	.word	0x20000548

08001074 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <SystemInit+0x20>)
 800107a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800107e:	4a05      	ldr	r2, [pc, #20]	; (8001094 <SystemInit+0x20>)
 8001080:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001084:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b09c      	sub	sp, #112	; 0x70
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800109e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
 80010c8:	615a      	str	r2, [r3, #20]
 80010ca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	2234      	movs	r2, #52	; 0x34
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f006 ff6c 	bl	8007fb0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010d8:	4b56      	ldr	r3, [pc, #344]	; (8001234 <MX_TIM1_Init+0x19c>)
 80010da:	4a57      	ldr	r2, [pc, #348]	; (8001238 <MX_TIM1_Init+0x1a0>)
 80010dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 80010de:	4b55      	ldr	r3, [pc, #340]	; (8001234 <MX_TIM1_Init+0x19c>)
 80010e0:	2207      	movs	r2, #7
 80010e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80010e4:	4b53      	ldr	r3, [pc, #332]	; (8001234 <MX_TIM1_Init+0x19c>)
 80010e6:	2220      	movs	r2, #32
 80010e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 80010ea:	4b52      	ldr	r3, [pc, #328]	; (8001234 <MX_TIM1_Init+0x19c>)
 80010ec:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80010f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f2:	4b50      	ldr	r3, [pc, #320]	; (8001234 <MX_TIM1_Init+0x19c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010f8:	4b4e      	ldr	r3, [pc, #312]	; (8001234 <MX_TIM1_Init+0x19c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fe:	4b4d      	ldr	r3, [pc, #308]	; (8001234 <MX_TIM1_Init+0x19c>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001104:	484b      	ldr	r0, [pc, #300]	; (8001234 <MX_TIM1_Init+0x19c>)
 8001106:	f003 f855 	bl	80041b4 <HAL_TIM_Base_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001110:	f7ff fdb6 	bl	8000c80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001114:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001118:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800111a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800111e:	4619      	mov	r1, r3
 8001120:	4844      	ldr	r0, [pc, #272]	; (8001234 <MX_TIM1_Init+0x19c>)
 8001122:	f003 fd1f 	bl	8004b64 <HAL_TIM_ConfigClockSource>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800112c:	f7ff fda8 	bl	8000c80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001130:	4840      	ldr	r0, [pc, #256]	; (8001234 <MX_TIM1_Init+0x19c>)
 8001132:	f003 f90f 	bl	8004354 <HAL_TIM_PWM_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800113c:	f7ff fda0 	bl	8000c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001140:	2300      	movs	r3, #0
 8001142:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001144:	2300      	movs	r3, #0
 8001146:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001148:	2300      	movs	r3, #0
 800114a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800114c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001150:	4619      	mov	r1, r3
 8001152:	4838      	ldr	r0, [pc, #224]	; (8001234 <MX_TIM1_Init+0x19c>)
 8001154:	f004 fcbc 	bl	8005ad0 <HAL_TIMEx_MasterConfigSynchronization>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800115e:	f7ff fd8f 	bl	8000c80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001162:	2360      	movs	r3, #96	; 0x60
 8001164:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 410;
 8001166:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800116a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800116c:	2300      	movs	r3, #0
 800116e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001170:	2300      	movs	r3, #0
 8001172:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001174:	2300      	movs	r3, #0
 8001176:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001178:	2300      	movs	r3, #0
 800117a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800117c:	2300      	movs	r3, #0
 800117e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001180:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001184:	2200      	movs	r2, #0
 8001186:	4619      	mov	r1, r3
 8001188:	482a      	ldr	r0, [pc, #168]	; (8001234 <MX_TIM1_Init+0x19c>)
 800118a:	f003 fbd7 	bl	800493c <HAL_TIM_PWM_ConfigChannel>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001194:	f7ff fd74 	bl	8000c80 <Error_Handler>
  }
  sConfigOC.Pulse = 614;
 8001198:	f240 2366 	movw	r3, #614	; 0x266
 800119c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800119e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011a2:	2204      	movs	r2, #4
 80011a4:	4619      	mov	r1, r3
 80011a6:	4823      	ldr	r0, [pc, #140]	; (8001234 <MX_TIM1_Init+0x19c>)
 80011a8:	f003 fbc8 	bl	800493c <HAL_TIM_PWM_ConfigChannel>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 80011b2:	f7ff fd65 	bl	8000c80 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011be:	2208      	movs	r2, #8
 80011c0:	4619      	mov	r1, r3
 80011c2:	481c      	ldr	r0, [pc, #112]	; (8001234 <MX_TIM1_Init+0x19c>)
 80011c4:	f003 fbba 	bl	800493c <HAL_TIM_PWM_ConfigChannel>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 80011ce:	f7ff fd57 	bl	8000c80 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 80011d2:	4818      	ldr	r0, [pc, #96]	; (8001234 <MX_TIM1_Init+0x19c>)
 80011d4:	f004 fdc4 	bl	8005d60 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011d8:	2300      	movs	r3, #0
 80011da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 44;
 80011e4:	232c      	movs	r3, #44	; 0x2c
 80011e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011f0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80011f6:	2300      	movs	r3, #0
 80011f8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80011fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001202:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001208:	2300      	movs	r3, #0
 800120a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	4619      	mov	r1, r3
 8001214:	4807      	ldr	r0, [pc, #28]	; (8001234 <MX_TIM1_Init+0x19c>)
 8001216:	f004 fcf1 	bl	8005bfc <HAL_TIMEx_ConfigBreakDeadTime>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 8001220:	f7ff fd2e 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001224:	4803      	ldr	r0, [pc, #12]	; (8001234 <MX_TIM1_Init+0x19c>)
 8001226:	f000 f8f5 	bl	8001414 <HAL_TIM_MspPostInit>

}
 800122a:	bf00      	nop
 800122c:	3770      	adds	r7, #112	; 0x70
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000244 	.word	0x20000244
 8001238:	40012c00 	.word	0x40012c00

0800123c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001242:	f107 0310 	add.w	r3, r7, #16
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800125a:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <MX_TIM3_Init+0x90>)
 800125c:	4a1c      	ldr	r2, [pc, #112]	; (80012d0 <MX_TIM3_Init+0x94>)
 800125e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001260:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <MX_TIM3_Init+0x90>)
 8001262:	2200      	movs	r2, #0
 8001264:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001266:	4b19      	ldr	r3, [pc, #100]	; (80012cc <MX_TIM3_Init+0x90>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800126c:	4b17      	ldr	r3, [pc, #92]	; (80012cc <MX_TIM3_Init+0x90>)
 800126e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001272:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001274:	4b15      	ldr	r3, [pc, #84]	; (80012cc <MX_TIM3_Init+0x90>)
 8001276:	2200      	movs	r2, #0
 8001278:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127a:	4b14      	ldr	r3, [pc, #80]	; (80012cc <MX_TIM3_Init+0x90>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001280:	2300      	movs	r3, #0
 8001282:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001290:	f107 0310 	add.w	r3, r7, #16
 8001294:	4619      	mov	r1, r3
 8001296:	480d      	ldr	r0, [pc, #52]	; (80012cc <MX_TIM3_Init+0x90>)
 8001298:	f004 faa9 	bl	80057ee <HAL_TIMEx_HallSensor_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80012a2:	f7ff fced 	bl	8000c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80012a6:	2350      	movs	r3, #80	; 0x50
 80012a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	4619      	mov	r1, r3
 80012b2:	4806      	ldr	r0, [pc, #24]	; (80012cc <MX_TIM3_Init+0x90>)
 80012b4:	f004 fc0c 	bl	8005ad0 <HAL_TIMEx_MasterConfigSynchronization>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80012be:	f7ff fcdf 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	3720      	adds	r7, #32
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000290 	.word	0x20000290
 80012d0:	40000400 	.word	0x40000400

080012d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a19      	ldr	r2, [pc, #100]	; (8001348 <HAL_TIM_Base_MspInit+0x74>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d12b      	bne.n	800133e <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012e6:	4b19      	ldr	r3, [pc, #100]	; (800134c <HAL_TIM_Base_MspInit+0x78>)
 80012e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ea:	4a18      	ldr	r2, [pc, #96]	; (800134c <HAL_TIM_Base_MspInit+0x78>)
 80012ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012f0:	6613      	str	r3, [r2, #96]	; 0x60
 80012f2:	4b16      	ldr	r3, [pc, #88]	; (800134c <HAL_TIM_Base_MspInit+0x78>)
 80012f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2100      	movs	r1, #0
 8001302:	2018      	movs	r0, #24
 8001304:	f001 fc48 	bl	8002b98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001308:	2018      	movs	r0, #24
 800130a:	f001 fc5f 	bl	8002bcc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	2100      	movs	r1, #0
 8001312:	2019      	movs	r0, #25
 8001314:	f001 fc40 	bl	8002b98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001318:	2019      	movs	r0, #25
 800131a:	f001 fc57 	bl	8002bcc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800131e:	2200      	movs	r2, #0
 8001320:	2100      	movs	r1, #0
 8001322:	201a      	movs	r0, #26
 8001324:	f001 fc38 	bl	8002b98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001328:	201a      	movs	r0, #26
 800132a:	f001 fc4f 	bl	8002bcc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2100      	movs	r1, #0
 8001332:	201b      	movs	r0, #27
 8001334:	f001 fc30 	bl	8002b98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001338:	201b      	movs	r0, #27
 800133a:	f001 fc47 	bl	8002bcc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800133e:	bf00      	nop
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40012c00 	.word	0x40012c00
 800134c:	40021000 	.word	0x40021000

08001350 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	; 0x28
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a26      	ldr	r2, [pc, #152]	; (8001408 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d145      	bne.n	80013fe <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001372:	4b26      	ldr	r3, [pc, #152]	; (800140c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001376:	4a25      	ldr	r2, [pc, #148]	; (800140c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	6593      	str	r3, [r2, #88]	; 0x58
 800137e:	4b23      	ldr	r3, [pc, #140]	; (800140c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	4b20      	ldr	r3, [pc, #128]	; (800140c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138e:	4a1f      	ldr	r2, [pc, #124]	; (800140c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001396:	4b1d      	ldr	r3, [pc, #116]	; (800140c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a2:	4b1a      	ldr	r3, [pc, #104]	; (800140c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	4a19      	ldr	r2, [pc, #100]	; (800140c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80013a8:	f043 0304 	orr.w	r3, r3, #4
 80013ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ae:	4b17      	ldr	r3, [pc, #92]	; (800140c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	f003 0304 	and.w	r3, r3, #4
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80013ba:	2350      	movs	r3, #80	; 0x50
 80013bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013ca:	2302      	movs	r3, #2
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	4619      	mov	r1, r3
 80013d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d8:	f001 fcc6 	bl	8002d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e2:	2302      	movs	r3, #2
 80013e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013ee:	2302      	movs	r3, #2
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	4619      	mov	r1, r3
 80013f8:	4805      	ldr	r0, [pc, #20]	; (8001410 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 80013fa:	f001 fcb5 	bl	8002d68 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80013fe:	bf00      	nop
 8001400:	3728      	adds	r7, #40	; 0x28
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40000400 	.word	0x40000400
 800140c:	40021000 	.word	0x40021000
 8001410:	48000800 	.word	0x48000800

08001414 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	; 0x28
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a29      	ldr	r2, [pc, #164]	; (80014d8 <HAL_TIM_MspPostInit+0xc4>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d14b      	bne.n	80014ce <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001436:	4b29      	ldr	r3, [pc, #164]	; (80014dc <HAL_TIM_MspPostInit+0xc8>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143a:	4a28      	ldr	r2, [pc, #160]	; (80014dc <HAL_TIM_MspPostInit+0xc8>)
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001442:	4b26      	ldr	r3, [pc, #152]	; (80014dc <HAL_TIM_MspPostInit+0xc8>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	4b23      	ldr	r3, [pc, #140]	; (80014dc <HAL_TIM_MspPostInit+0xc8>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	4a22      	ldr	r2, [pc, #136]	; (80014dc <HAL_TIM_MspPostInit+0xc8>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145a:	4b20      	ldr	r3, [pc, #128]	; (80014dc <HAL_TIM_MspPostInit+0xc8>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8001466:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800146a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2300      	movs	r3, #0
 8001476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001478:	2306      	movs	r3, #6
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4619      	mov	r1, r3
 8001482:	4817      	ldr	r0, [pc, #92]	; (80014e0 <HAL_TIM_MspPostInit+0xcc>)
 8001484:	f001 fc70 	bl	8002d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001488:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800148c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001496:	2300      	movs	r3, #0
 8001498:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800149a:	2304      	movs	r3, #4
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4619      	mov	r1, r3
 80014a4:	480e      	ldr	r0, [pc, #56]	; (80014e0 <HAL_TIM_MspPostInit+0xcc>)
 80014a6:	f001 fc5f 	bl	8002d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 80014aa:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80014ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b8:	2300      	movs	r3, #0
 80014ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80014bc:	2306      	movs	r3, #6
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4619      	mov	r1, r3
 80014c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ca:	f001 fc4d 	bl	8002d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80014ce:	bf00      	nop
 80014d0:	3728      	adds	r7, #40	; 0x28
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40012c00 	.word	0x40012c00
 80014dc:	40021000 	.word	0x40021000
 80014e0:	48000400 	.word	0x48000400

080014e4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014e8:	4b22      	ldr	r3, [pc, #136]	; (8001574 <MX_USART2_UART_Init+0x90>)
 80014ea:	4a23      	ldr	r2, [pc, #140]	; (8001578 <MX_USART2_UART_Init+0x94>)
 80014ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014ee:	4b21      	ldr	r3, [pc, #132]	; (8001574 <MX_USART2_UART_Init+0x90>)
 80014f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014f6:	4b1f      	ldr	r3, [pc, #124]	; (8001574 <MX_USART2_UART_Init+0x90>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014fc:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <MX_USART2_UART_Init+0x90>)
 80014fe:	2200      	movs	r2, #0
 8001500:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001502:	4b1c      	ldr	r3, [pc, #112]	; (8001574 <MX_USART2_UART_Init+0x90>)
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001508:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <MX_USART2_UART_Init+0x90>)
 800150a:	220c      	movs	r2, #12
 800150c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800150e:	4b19      	ldr	r3, [pc, #100]	; (8001574 <MX_USART2_UART_Init+0x90>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001514:	4b17      	ldr	r3, [pc, #92]	; (8001574 <MX_USART2_UART_Init+0x90>)
 8001516:	2200      	movs	r2, #0
 8001518:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800151a:	4b16      	ldr	r3, [pc, #88]	; (8001574 <MX_USART2_UART_Init+0x90>)
 800151c:	2200      	movs	r2, #0
 800151e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <MX_USART2_UART_Init+0x90>)
 8001522:	2200      	movs	r2, #0
 8001524:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001526:	4b13      	ldr	r3, [pc, #76]	; (8001574 <MX_USART2_UART_Init+0x90>)
 8001528:	2200      	movs	r2, #0
 800152a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800152c:	4811      	ldr	r0, [pc, #68]	; (8001574 <MX_USART2_UART_Init+0x90>)
 800152e:	f004 fc95 	bl	8005e5c <HAL_UART_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001538:	f7ff fba2 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800153c:	2100      	movs	r1, #0
 800153e:	480d      	ldr	r0, [pc, #52]	; (8001574 <MX_USART2_UART_Init+0x90>)
 8001540:	f006 fc37 	bl	8007db2 <HAL_UARTEx_SetTxFifoThreshold>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800154a:	f7ff fb99 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800154e:	2100      	movs	r1, #0
 8001550:	4808      	ldr	r0, [pc, #32]	; (8001574 <MX_USART2_UART_Init+0x90>)
 8001552:	f006 fc6c 	bl	8007e2e <HAL_UARTEx_SetRxFifoThreshold>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800155c:	f7ff fb90 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001560:	4804      	ldr	r0, [pc, #16]	; (8001574 <MX_USART2_UART_Init+0x90>)
 8001562:	f006 fbed 	bl	8007d40 <HAL_UARTEx_DisableFifoMode>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800156c:	f7ff fb88 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}
 8001574:	200002dc 	.word	0x200002dc
 8001578:	40004400 	.word	0x40004400

0800157c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001580:	4b22      	ldr	r3, [pc, #136]	; (800160c <MX_USART3_UART_Init+0x90>)
 8001582:	4a23      	ldr	r2, [pc, #140]	; (8001610 <MX_USART3_UART_Init+0x94>)
 8001584:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001586:	4b21      	ldr	r3, [pc, #132]	; (800160c <MX_USART3_UART_Init+0x90>)
 8001588:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800158c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800158e:	4b1f      	ldr	r3, [pc, #124]	; (800160c <MX_USART3_UART_Init+0x90>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001594:	4b1d      	ldr	r3, [pc, #116]	; (800160c <MX_USART3_UART_Init+0x90>)
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800159a:	4b1c      	ldr	r3, [pc, #112]	; (800160c <MX_USART3_UART_Init+0x90>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015a0:	4b1a      	ldr	r3, [pc, #104]	; (800160c <MX_USART3_UART_Init+0x90>)
 80015a2:	220c      	movs	r2, #12
 80015a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a6:	4b19      	ldr	r3, [pc, #100]	; (800160c <MX_USART3_UART_Init+0x90>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ac:	4b17      	ldr	r3, [pc, #92]	; (800160c <MX_USART3_UART_Init+0x90>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015b2:	4b16      	ldr	r3, [pc, #88]	; (800160c <MX_USART3_UART_Init+0x90>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015b8:	4b14      	ldr	r3, [pc, #80]	; (800160c <MX_USART3_UART_Init+0x90>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015be:	4b13      	ldr	r3, [pc, #76]	; (800160c <MX_USART3_UART_Init+0x90>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015c4:	4811      	ldr	r0, [pc, #68]	; (800160c <MX_USART3_UART_Init+0x90>)
 80015c6:	f004 fc49 	bl	8005e5c <HAL_UART_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80015d0:	f7ff fb56 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015d4:	2100      	movs	r1, #0
 80015d6:	480d      	ldr	r0, [pc, #52]	; (800160c <MX_USART3_UART_Init+0x90>)
 80015d8:	f006 fbeb 	bl	8007db2 <HAL_UARTEx_SetTxFifoThreshold>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80015e2:	f7ff fb4d 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015e6:	2100      	movs	r1, #0
 80015e8:	4808      	ldr	r0, [pc, #32]	; (800160c <MX_USART3_UART_Init+0x90>)
 80015ea:	f006 fc20 	bl	8007e2e <HAL_UARTEx_SetRxFifoThreshold>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80015f4:	f7ff fb44 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80015f8:	4804      	ldr	r0, [pc, #16]	; (800160c <MX_USART3_UART_Init+0x90>)
 80015fa:	f006 fba1 	bl	8007d40 <HAL_UARTEx_DisableFifoMode>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001604:	f7ff fb3c 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}
 800160c:	2000036c 	.word	0x2000036c
 8001610:	40004800 	.word	0x40004800

08001614 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b0a0      	sub	sp, #128	; 0x80
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800162c:	f107 0318 	add.w	r3, r7, #24
 8001630:	2254      	movs	r2, #84	; 0x54
 8001632:	2100      	movs	r1, #0
 8001634:	4618      	mov	r0, r3
 8001636:	f006 fcbb 	bl	8007fb0 <memset>
  if(uartHandle->Instance==USART2)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a41      	ldr	r2, [pc, #260]	; (8001744 <HAL_UART_MspInit+0x130>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d13f      	bne.n	80016c4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001644:	2302      	movs	r3, #2
 8001646:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001648:	2300      	movs	r3, #0
 800164a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800164c:	f107 0318 	add.w	r3, r7, #24
 8001650:	4618      	mov	r0, r3
 8001652:	f002 fb61 	bl	8003d18 <HAL_RCCEx_PeriphCLKConfig>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800165c:	f7ff fb10 	bl	8000c80 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001660:	4b39      	ldr	r3, [pc, #228]	; (8001748 <HAL_UART_MspInit+0x134>)
 8001662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001664:	4a38      	ldr	r2, [pc, #224]	; (8001748 <HAL_UART_MspInit+0x134>)
 8001666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800166a:	6593      	str	r3, [r2, #88]	; 0x58
 800166c:	4b36      	ldr	r3, [pc, #216]	; (8001748 <HAL_UART_MspInit+0x134>)
 800166e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001678:	4b33      	ldr	r3, [pc, #204]	; (8001748 <HAL_UART_MspInit+0x134>)
 800167a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167c:	4a32      	ldr	r2, [pc, #200]	; (8001748 <HAL_UART_MspInit+0x134>)
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001684:	4b30      	ldr	r3, [pc, #192]	; (8001748 <HAL_UART_MspInit+0x134>)
 8001686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001690:	230c      	movs	r3, #12
 8001692:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169c:	2300      	movs	r3, #0
 800169e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016a0:	2307      	movs	r3, #7
 80016a2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016a8:	4619      	mov	r1, r3
 80016aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ae:	f001 fb5b 	bl	8002d68 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2100      	movs	r1, #0
 80016b6:	2026      	movs	r0, #38	; 0x26
 80016b8:	f001 fa6e 	bl	8002b98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016bc:	2026      	movs	r0, #38	; 0x26
 80016be:	f001 fa85 	bl	8002bcc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80016c2:	e03b      	b.n	800173c <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART3)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a20      	ldr	r2, [pc, #128]	; (800174c <HAL_UART_MspInit+0x138>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d136      	bne.n	800173c <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016ce:	2304      	movs	r3, #4
 80016d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80016d2:	2300      	movs	r3, #0
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016d6:	f107 0318 	add.w	r3, r7, #24
 80016da:	4618      	mov	r0, r3
 80016dc:	f002 fb1c 	bl	8003d18 <HAL_RCCEx_PeriphCLKConfig>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <HAL_UART_MspInit+0xd6>
      Error_Handler();
 80016e6:	f7ff facb 	bl	8000c80 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80016ea:	4b17      	ldr	r3, [pc, #92]	; (8001748 <HAL_UART_MspInit+0x134>)
 80016ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ee:	4a16      	ldr	r2, [pc, #88]	; (8001748 <HAL_UART_MspInit+0x134>)
 80016f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016f4:	6593      	str	r3, [r2, #88]	; 0x58
 80016f6:	4b14      	ldr	r3, [pc, #80]	; (8001748 <HAL_UART_MspInit+0x134>)
 80016f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <HAL_UART_MspInit+0x134>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001706:	4a10      	ldr	r2, [pc, #64]	; (8001748 <HAL_UART_MspInit+0x134>)
 8001708:	f043 0304 	orr.w	r3, r3, #4
 800170c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <HAL_UART_MspInit+0x134>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001712:	f003 0304 	and.w	r3, r3, #4
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800171a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800171e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2302      	movs	r3, #2
 8001722:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001728:	2300      	movs	r3, #0
 800172a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800172c:	2307      	movs	r3, #7
 800172e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001730:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001734:	4619      	mov	r1, r3
 8001736:	4806      	ldr	r0, [pc, #24]	; (8001750 <HAL_UART_MspInit+0x13c>)
 8001738:	f001 fb16 	bl	8002d68 <HAL_GPIO_Init>
}
 800173c:	bf00      	nop
 800173e:	3780      	adds	r7, #128	; 0x80
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40004400 	.word	0x40004400
 8001748:	40021000 	.word	0x40021000
 800174c:	40004800 	.word	0x40004800
 8001750:	48000800 	.word	0x48000800

08001754 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001754:	480d      	ldr	r0, [pc, #52]	; (800178c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001756:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001758:	480d      	ldr	r0, [pc, #52]	; (8001790 <LoopForever+0x6>)
  ldr r1, =_edata
 800175a:	490e      	ldr	r1, [pc, #56]	; (8001794 <LoopForever+0xa>)
  ldr r2, =_sidata
 800175c:	4a0e      	ldr	r2, [pc, #56]	; (8001798 <LoopForever+0xe>)
  movs r3, #0
 800175e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001760:	e002      	b.n	8001768 <LoopCopyDataInit>

08001762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001766:	3304      	adds	r3, #4

08001768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800176a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800176c:	d3f9      	bcc.n	8001762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800176e:	4a0b      	ldr	r2, [pc, #44]	; (800179c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001770:	4c0b      	ldr	r4, [pc, #44]	; (80017a0 <LoopForever+0x16>)
  movs r3, #0
 8001772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001774:	e001      	b.n	800177a <LoopFillZerobss>

08001776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001778:	3204      	adds	r2, #4

0800177a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800177a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800177c:	d3fb      	bcc.n	8001776 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800177e:	f7ff fc79 	bl	8001074 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001782:	f006 fc23 	bl	8007fcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001786:	f7ff f999 	bl	8000abc <main>

0800178a <LoopForever>:

LoopForever:
    b LoopForever
 800178a:	e7fe      	b.n	800178a <LoopForever>
  ldr   r0, =_estack
 800178c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001794:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8001798:	08008a4c 	.word	0x08008a4c
  ldr r2, =_sbss
 800179c:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 80017a0:	20000548 	.word	0x20000548

080017a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017a4:	e7fe      	b.n	80017a4 <ADC1_2_IRQHandler>

080017a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017ac:	2300      	movs	r3, #0
 80017ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b0:	2003      	movs	r0, #3
 80017b2:	f001 f9e6 	bl	8002b82 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017b6:	200f      	movs	r0, #15
 80017b8:	f7ff fb3a 	bl	8000e30 <HAL_InitTick>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d002      	beq.n	80017c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	71fb      	strb	r3, [r7, #7]
 80017c6:	e001      	b.n	80017cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017c8:	f7ff fb0e 	bl	8000de8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017cc:	79fb      	ldrb	r3, [r7, #7]

}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017dc:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <HAL_IncTick+0x1c>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <HAL_IncTick+0x20>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4413      	add	r3, r2
 80017e6:	4a03      	ldr	r2, [pc, #12]	; (80017f4 <HAL_IncTick+0x1c>)
 80017e8:	6013      	str	r3, [r2, #0]
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	200003fc 	.word	0x200003fc
 80017f8:	20000080 	.word	0x20000080

080017fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001800:	4b03      	ldr	r3, [pc, #12]	; (8001810 <HAL_GetTick+0x14>)
 8001802:	681b      	ldr	r3, [r3, #0]
}
 8001804:	4618      	mov	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	200003fc 	.word	0x200003fc

08001814 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	431a      	orrs	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	609a      	str	r2, [r3, #8]
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
 8001842:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	431a      	orrs	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	609a      	str	r2, [r3, #8]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800187c:	b480      	push	{r7}
 800187e:	b087      	sub	sp, #28
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
 8001888:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	3360      	adds	r3, #96	; 0x60
 800188e:	461a      	mov	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <LL_ADC_SetOffset+0x44>)
 800189e:	4013      	ands	r3, r2
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	430a      	orrs	r2, r1
 80018aa:	4313      	orrs	r3, r2
 80018ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80018b4:	bf00      	nop
 80018b6:	371c      	adds	r7, #28
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	03fff000 	.word	0x03fff000

080018c4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	3360      	adds	r3, #96	; 0x60
 80018d2:	461a      	mov	r2, r3
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b087      	sub	sp, #28
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	3360      	adds	r3, #96	; 0x60
 8001900:	461a      	mov	r2, r3
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	431a      	orrs	r2, r3
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800191a:	bf00      	nop
 800191c:	371c      	adds	r7, #28
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001926:	b480      	push	{r7}
 8001928:	b087      	sub	sp, #28
 800192a:	af00      	add	r7, sp, #0
 800192c:	60f8      	str	r0, [r7, #12]
 800192e:	60b9      	str	r1, [r7, #8]
 8001930:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	3360      	adds	r3, #96	; 0x60
 8001936:	461a      	mov	r2, r3
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	431a      	orrs	r2, r3
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001950:	bf00      	nop
 8001952:	371c      	adds	r7, #28
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800195c:	b480      	push	{r7}
 800195e:	b087      	sub	sp, #28
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	3360      	adds	r3, #96	; 0x60
 800196c:	461a      	mov	r2, r3
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	431a      	orrs	r2, r3
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001986:	bf00      	nop
 8001988:	371c      	adds	r7, #28
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
 800199a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	695b      	ldr	r3, [r3, #20]
 80019a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	615a      	str	r2, [r3, #20]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	3330      	adds	r3, #48	; 0x30
 80019c8:	461a      	mov	r2, r3
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	0a1b      	lsrs	r3, r3, #8
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	f003 030c 	and.w	r3, r3, #12
 80019d4:	4413      	add	r3, r2
 80019d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	f003 031f 	and.w	r3, r3, #31
 80019e2:	211f      	movs	r1, #31
 80019e4:	fa01 f303 	lsl.w	r3, r1, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	401a      	ands	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	0e9b      	lsrs	r3, r3, #26
 80019f0:	f003 011f 	and.w	r1, r3, #31
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	f003 031f 	and.w	r3, r3, #31
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	431a      	orrs	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a04:	bf00      	nop
 8001a06:	371c      	adds	r7, #28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b087      	sub	sp, #28
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	3314      	adds	r3, #20
 8001a20:	461a      	mov	r2, r3
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	0e5b      	lsrs	r3, r3, #25
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	4413      	add	r3, r2
 8001a2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	0d1b      	lsrs	r3, r3, #20
 8001a38:	f003 031f 	and.w	r3, r3, #31
 8001a3c:	2107      	movs	r1, #7
 8001a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a42:	43db      	mvns	r3, r3
 8001a44:	401a      	ands	r2, r3
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	0d1b      	lsrs	r3, r3, #20
 8001a4a:	f003 031f 	and.w	r3, r3, #31
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	fa01 f303 	lsl.w	r3, r1, r3
 8001a54:	431a      	orrs	r2, r3
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a5a:	bf00      	nop
 8001a5c:	371c      	adds	r7, #28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a0f      	ldr	r2, [pc, #60]	; (8001ab4 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d10a      	bne.n	8001a92 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001a90:	e00a      	b.n	8001aa8 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	401a      	ands	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001aa8:	bf00      	nop
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	407f0000 	.word	0x407f0000

08001ab8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001ac8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	6093      	str	r3, [r2, #8]
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001aec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001af0:	d101      	bne.n	8001af6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001af2:	2301      	movs	r3, #1
 8001af4:	e000      	b.n	8001af8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001b14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b18:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b40:	d101      	bne.n	8001b46 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b42:	2301      	movs	r3, #1
 8001b44:	e000      	b.n	8001b48 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d101      	bne.n	8001b6c <LL_ADC_IsEnabled+0x18>
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e000      	b.n	8001b6e <LL_ADC_IsEnabled+0x1a>
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 0304 	and.w	r3, r3, #4
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	d101      	bne.n	8001b92 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 0308 	and.w	r3, r3, #8
 8001bb0:	2b08      	cmp	r3, #8
 8001bb2:	d101      	bne.n	8001bb8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e000      	b.n	8001bba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
	...

08001bc8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bc8:	b590      	push	{r4, r7, lr}
 8001bca:	b089      	sub	sp, #36	; 0x24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e1af      	b.n	8001f42 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d109      	bne.n	8001c04 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7fe fdd9 	bl	80007a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ff67 	bl	8001adc <LL_ADC_IsDeepPowerDownEnabled>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d004      	beq.n	8001c1e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff ff4d 	bl	8001ab8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff ff82 	bl	8001b2c <LL_ADC_IsInternalRegulatorEnabled>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d115      	bne.n	8001c5a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff ff66 	bl	8001b04 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c38:	4b9f      	ldr	r3, [pc, #636]	; (8001eb8 <HAL_ADC_Init+0x2f0>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	099b      	lsrs	r3, r3, #6
 8001c3e:	4a9f      	ldr	r2, [pc, #636]	; (8001ebc <HAL_ADC_Init+0x2f4>)
 8001c40:	fba2 2303 	umull	r2, r3, r2, r3
 8001c44:	099b      	lsrs	r3, r3, #6
 8001c46:	3301      	adds	r3, #1
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c4c:	e002      	b.n	8001c54 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	3b01      	subs	r3, #1
 8001c52:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f9      	bne.n	8001c4e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff ff64 	bl	8001b2c <LL_ADC_IsInternalRegulatorEnabled>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10d      	bne.n	8001c86 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6e:	f043 0210 	orr.w	r2, r3, #16
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c7a:	f043 0201 	orr.w	r2, r3, #1
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff ff75 	bl	8001b7a <LL_ADC_REG_IsConversionOngoing>
 8001c90:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c96:	f003 0310 	and.w	r3, r3, #16
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f040 8148 	bne.w	8001f30 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f040 8144 	bne.w	8001f30 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001cb0:	f043 0202 	orr.w	r2, r3, #2
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff49 	bl	8001b54 <LL_ADC_IsEnabled>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d141      	bne.n	8001d4c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cd0:	d004      	beq.n	8001cdc <HAL_ADC_Init+0x114>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a7a      	ldr	r2, [pc, #488]	; (8001ec0 <HAL_ADC_Init+0x2f8>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d10f      	bne.n	8001cfc <HAL_ADC_Init+0x134>
 8001cdc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001ce0:	f7ff ff38 	bl	8001b54 <LL_ADC_IsEnabled>
 8001ce4:	4604      	mov	r4, r0
 8001ce6:	4876      	ldr	r0, [pc, #472]	; (8001ec0 <HAL_ADC_Init+0x2f8>)
 8001ce8:	f7ff ff34 	bl	8001b54 <LL_ADC_IsEnabled>
 8001cec:	4603      	mov	r3, r0
 8001cee:	4323      	orrs	r3, r4
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	bf0c      	ite	eq
 8001cf4:	2301      	moveq	r3, #1
 8001cf6:	2300      	movne	r3, #0
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	e012      	b.n	8001d22 <HAL_ADC_Init+0x15a>
 8001cfc:	4871      	ldr	r0, [pc, #452]	; (8001ec4 <HAL_ADC_Init+0x2fc>)
 8001cfe:	f7ff ff29 	bl	8001b54 <LL_ADC_IsEnabled>
 8001d02:	4604      	mov	r4, r0
 8001d04:	4870      	ldr	r0, [pc, #448]	; (8001ec8 <HAL_ADC_Init+0x300>)
 8001d06:	f7ff ff25 	bl	8001b54 <LL_ADC_IsEnabled>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	431c      	orrs	r4, r3
 8001d0e:	486f      	ldr	r0, [pc, #444]	; (8001ecc <HAL_ADC_Init+0x304>)
 8001d10:	f7ff ff20 	bl	8001b54 <LL_ADC_IsEnabled>
 8001d14:	4603      	mov	r3, r0
 8001d16:	4323      	orrs	r3, r4
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	bf0c      	ite	eq
 8001d1c:	2301      	moveq	r3, #1
 8001d1e:	2300      	movne	r3, #0
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d012      	beq.n	8001d4c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d2e:	d004      	beq.n	8001d3a <HAL_ADC_Init+0x172>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a62      	ldr	r2, [pc, #392]	; (8001ec0 <HAL_ADC_Init+0x2f8>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d101      	bne.n	8001d3e <HAL_ADC_Init+0x176>
 8001d3a:	4a65      	ldr	r2, [pc, #404]	; (8001ed0 <HAL_ADC_Init+0x308>)
 8001d3c:	e000      	b.n	8001d40 <HAL_ADC_Init+0x178>
 8001d3e:	4a65      	ldr	r2, [pc, #404]	; (8001ed4 <HAL_ADC_Init+0x30c>)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	4619      	mov	r1, r3
 8001d46:	4610      	mov	r0, r2
 8001d48:	f7ff fd64 	bl	8001814 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	7f5b      	ldrb	r3, [r3, #29]
 8001d50:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d56:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001d5c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001d62:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d6a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d106      	bne.n	8001d88 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	045b      	lsls	r3, r3, #17
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d009      	beq.n	8001da4 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d94:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68da      	ldr	r2, [r3, #12]
 8001daa:	4b4b      	ldr	r3, [pc, #300]	; (8001ed8 <HAL_ADC_Init+0x310>)
 8001dac:	4013      	ands	r3, r2
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	6812      	ldr	r2, [r2, #0]
 8001db2:	69b9      	ldr	r1, [r7, #24]
 8001db4:	430b      	orrs	r3, r1
 8001db6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fed1 	bl	8001b7a <LL_ADC_REG_IsConversionOngoing>
 8001dd8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fede 	bl	8001ba0 <LL_ADC_INJ_IsConversionOngoing>
 8001de4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d17f      	bne.n	8001eec <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d17c      	bne.n	8001eec <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001df6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001dfe:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e0e:	f023 0302 	bic.w	r3, r3, #2
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6812      	ldr	r2, [r2, #0]
 8001e16:	69b9      	ldr	r1, [r7, #24]
 8001e18:	430b      	orrs	r3, r1
 8001e1a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d017      	beq.n	8001e54 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	691a      	ldr	r2, [r3, #16]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001e32:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e3c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6911      	ldr	r1, [r2, #16]
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6812      	ldr	r2, [r2, #0]
 8001e4c:	430b      	orrs	r3, r1
 8001e4e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001e52:	e013      	b.n	8001e7c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	691a      	ldr	r2, [r3, #16]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e62:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e78:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d12a      	bne.n	8001edc <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001e90:	f023 0304 	bic.w	r3, r3, #4
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e9c:	4311      	orrs	r1, r2
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001ea2:	4311      	orrs	r1, r2
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f042 0201 	orr.w	r2, r2, #1
 8001eb4:	611a      	str	r2, [r3, #16]
 8001eb6:	e019      	b.n	8001eec <HAL_ADC_Init+0x324>
 8001eb8:	20000078 	.word	0x20000078
 8001ebc:	053e2d63 	.word	0x053e2d63
 8001ec0:	50000100 	.word	0x50000100
 8001ec4:	50000400 	.word	0x50000400
 8001ec8:	50000500 	.word	0x50000500
 8001ecc:	50000600 	.word	0x50000600
 8001ed0:	50000300 	.word	0x50000300
 8001ed4:	50000700 	.word	0x50000700
 8001ed8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691a      	ldr	r2, [r3, #16]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0201 	bic.w	r2, r2, #1
 8001eea:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d10c      	bne.n	8001f0e <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	f023 010f 	bic.w	r1, r3, #15
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	1e5a      	subs	r2, r3, #1
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	631a      	str	r2, [r3, #48]	; 0x30
 8001f0c:	e007      	b.n	8001f1e <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 020f 	bic.w	r2, r2, #15
 8001f1c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f22:	f023 0303 	bic.w	r3, r3, #3
 8001f26:	f043 0201 	orr.w	r2, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f2e:	e007      	b.n	8001f40 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f34:	f043 0210 	orr.w	r2, r3, #16
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f40:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3724      	adds	r7, #36	; 0x24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd90      	pop	{r4, r7, pc}
 8001f4a:	bf00      	nop

08001f4c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b0b6      	sub	sp, #216	; 0xd8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f56:	2300      	movs	r3, #0
 8001f58:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d102      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x24>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	f000 bc13 	b.w	8002796 <HAL_ADC_ConfigChannel+0x84a>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff fdfc 	bl	8001b7a <LL_ADC_REG_IsConversionOngoing>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f040 83f3 	bne.w	8002770 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6818      	ldr	r0, [r3, #0]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	6859      	ldr	r1, [r3, #4]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	461a      	mov	r2, r3
 8001f98:	f7ff fd0e 	bl	80019b8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff fdea 	bl	8001b7a <LL_ADC_REG_IsConversionOngoing>
 8001fa6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff fdf6 	bl	8001ba0 <LL_ADC_INJ_IsConversionOngoing>
 8001fb4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fb8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f040 81d9 	bne.w	8002374 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fc2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f040 81d4 	bne.w	8002374 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001fd4:	d10f      	bne.n	8001ff6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6818      	ldr	r0, [r3, #0]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f7ff fd15 	bl	8001a10 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fccf 	bl	8001992 <LL_ADC_SetSamplingTimeCommonConfig>
 8001ff4:	e00e      	b.n	8002014 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6818      	ldr	r0, [r3, #0]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	6819      	ldr	r1, [r3, #0]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	461a      	mov	r2, r3
 8002004:	f7ff fd04 	bl	8001a10 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2100      	movs	r1, #0
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff fcbf 	bl	8001992 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	695a      	ldr	r2, [r3, #20]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	08db      	lsrs	r3, r3, #3
 8002020:	f003 0303 	and.w	r3, r3, #3
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	2b04      	cmp	r3, #4
 8002034:	d022      	beq.n	800207c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6818      	ldr	r0, [r3, #0]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	6919      	ldr	r1, [r3, #16]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002046:	f7ff fc19 	bl	800187c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6818      	ldr	r0, [r3, #0]
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	6919      	ldr	r1, [r3, #16]
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	461a      	mov	r2, r3
 8002058:	f7ff fc65 	bl	8001926 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6818      	ldr	r0, [r3, #0]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	6919      	ldr	r1, [r3, #16]
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	7f1b      	ldrb	r3, [r3, #28]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d102      	bne.n	8002072 <HAL_ADC_ConfigChannel+0x126>
 800206c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002070:	e000      	b.n	8002074 <HAL_ADC_ConfigChannel+0x128>
 8002072:	2300      	movs	r3, #0
 8002074:	461a      	mov	r2, r3
 8002076:	f7ff fc71 	bl	800195c <LL_ADC_SetOffsetSaturation>
 800207a:	e17b      	b.n	8002374 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2100      	movs	r1, #0
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff fc1e 	bl	80018c4 <LL_ADC_GetOffsetChannel>
 8002088:	4603      	mov	r3, r0
 800208a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10a      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x15c>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2100      	movs	r1, #0
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff fc13 	bl	80018c4 <LL_ADC_GetOffsetChannel>
 800209e:	4603      	mov	r3, r0
 80020a0:	0e9b      	lsrs	r3, r3, #26
 80020a2:	f003 021f 	and.w	r2, r3, #31
 80020a6:	e01e      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x19a>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2100      	movs	r1, #0
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff fc08 	bl	80018c4 <LL_ADC_GetOffsetChannel>
 80020b4:	4603      	mov	r3, r0
 80020b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80020be:	fa93 f3a3 	rbit	r3, r3
 80020c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80020ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80020ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80020d6:	2320      	movs	r3, #32
 80020d8:	e004      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80020da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020de:	fab3 f383 	clz	r3, r3
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d105      	bne.n	80020fe <HAL_ADC_ConfigChannel+0x1b2>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	0e9b      	lsrs	r3, r3, #26
 80020f8:	f003 031f 	and.w	r3, r3, #31
 80020fc:	e018      	b.n	8002130 <HAL_ADC_ConfigChannel+0x1e4>
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002106:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800210a:	fa93 f3a3 	rbit	r3, r3
 800210e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002112:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002116:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800211a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002122:	2320      	movs	r3, #32
 8002124:	e004      	b.n	8002130 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002126:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800212a:	fab3 f383 	clz	r3, r3
 800212e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002130:	429a      	cmp	r2, r3
 8002132:	d106      	bne.n	8002142 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2200      	movs	r2, #0
 800213a:	2100      	movs	r1, #0
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fbd7 	bl	80018f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2101      	movs	r1, #1
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff fbbb 	bl	80018c4 <LL_ADC_GetOffsetChannel>
 800214e:	4603      	mov	r3, r0
 8002150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002154:	2b00      	cmp	r3, #0
 8002156:	d10a      	bne.n	800216e <HAL_ADC_ConfigChannel+0x222>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2101      	movs	r1, #1
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff fbb0 	bl	80018c4 <LL_ADC_GetOffsetChannel>
 8002164:	4603      	mov	r3, r0
 8002166:	0e9b      	lsrs	r3, r3, #26
 8002168:	f003 021f 	and.w	r2, r3, #31
 800216c:	e01e      	b.n	80021ac <HAL_ADC_ConfigChannel+0x260>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2101      	movs	r1, #1
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff fba5 	bl	80018c4 <LL_ADC_GetOffsetChannel>
 800217a:	4603      	mov	r3, r0
 800217c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002180:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002184:	fa93 f3a3 	rbit	r3, r3
 8002188:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800218c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002190:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002194:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800219c:	2320      	movs	r3, #32
 800219e:	e004      	b.n	80021aa <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80021a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80021a4:	fab3 f383 	clz	r3, r3
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d105      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x278>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	0e9b      	lsrs	r3, r3, #26
 80021be:	f003 031f 	and.w	r3, r3, #31
 80021c2:	e018      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x2aa>
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021d0:	fa93 f3a3 	rbit	r3, r3
 80021d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80021d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80021dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80021e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80021e8:	2320      	movs	r3, #32
 80021ea:	e004      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80021ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021f0:	fab3 f383 	clz	r3, r3
 80021f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d106      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2200      	movs	r2, #0
 8002200:	2101      	movs	r1, #1
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fb74 	bl	80018f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2102      	movs	r1, #2
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff fb58 	bl	80018c4 <LL_ADC_GetOffsetChannel>
 8002214:	4603      	mov	r3, r0
 8002216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10a      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x2e8>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2102      	movs	r1, #2
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff fb4d 	bl	80018c4 <LL_ADC_GetOffsetChannel>
 800222a:	4603      	mov	r3, r0
 800222c:	0e9b      	lsrs	r3, r3, #26
 800222e:	f003 021f 	and.w	r2, r3, #31
 8002232:	e01e      	b.n	8002272 <HAL_ADC_ConfigChannel+0x326>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2102      	movs	r1, #2
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff fb42 	bl	80018c4 <LL_ADC_GetOffsetChannel>
 8002240:	4603      	mov	r3, r0
 8002242:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002246:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800224a:	fa93 f3a3 	rbit	r3, r3
 800224e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002252:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002256:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800225a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002262:	2320      	movs	r3, #32
 8002264:	e004      	b.n	8002270 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002266:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800226a:	fab3 f383 	clz	r3, r3
 800226e:	b2db      	uxtb	r3, r3
 8002270:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800227a:	2b00      	cmp	r3, #0
 800227c:	d105      	bne.n	800228a <HAL_ADC_ConfigChannel+0x33e>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	0e9b      	lsrs	r3, r3, #26
 8002284:	f003 031f 	and.w	r3, r3, #31
 8002288:	e016      	b.n	80022b8 <HAL_ADC_ConfigChannel+0x36c>
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002292:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002296:	fa93 f3a3 	rbit	r3, r3
 800229a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800229c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800229e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80022a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80022aa:	2320      	movs	r3, #32
 80022ac:	e004      	b.n	80022b8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80022ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022b2:	fab3 f383 	clz	r3, r3
 80022b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d106      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2200      	movs	r2, #0
 80022c2:	2102      	movs	r1, #2
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff fb13 	bl	80018f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2103      	movs	r1, #3
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff faf7 	bl	80018c4 <LL_ADC_GetOffsetChannel>
 80022d6:	4603      	mov	r3, r0
 80022d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10a      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x3aa>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2103      	movs	r1, #3
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff faec 	bl	80018c4 <LL_ADC_GetOffsetChannel>
 80022ec:	4603      	mov	r3, r0
 80022ee:	0e9b      	lsrs	r3, r3, #26
 80022f0:	f003 021f 	and.w	r2, r3, #31
 80022f4:	e017      	b.n	8002326 <HAL_ADC_ConfigChannel+0x3da>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2103      	movs	r1, #3
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff fae1 	bl	80018c4 <LL_ADC_GetOffsetChannel>
 8002302:	4603      	mov	r3, r0
 8002304:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002306:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002308:	fa93 f3a3 	rbit	r3, r3
 800230c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800230e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002310:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002312:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002318:	2320      	movs	r3, #32
 800231a:	e003      	b.n	8002324 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800231c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800231e:	fab3 f383 	clz	r3, r3
 8002322:	b2db      	uxtb	r3, r3
 8002324:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800232e:	2b00      	cmp	r3, #0
 8002330:	d105      	bne.n	800233e <HAL_ADC_ConfigChannel+0x3f2>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	0e9b      	lsrs	r3, r3, #26
 8002338:	f003 031f 	and.w	r3, r3, #31
 800233c:	e011      	b.n	8002362 <HAL_ADC_ConfigChannel+0x416>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002344:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002346:	fa93 f3a3 	rbit	r3, r3
 800234a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800234c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800234e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002356:	2320      	movs	r3, #32
 8002358:	e003      	b.n	8002362 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800235a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800235c:	fab3 f383 	clz	r3, r3
 8002360:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002362:	429a      	cmp	r2, r3
 8002364:	d106      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2200      	movs	r2, #0
 800236c:	2103      	movs	r1, #3
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff fabe 	bl	80018f0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff fbeb 	bl	8001b54 <LL_ADC_IsEnabled>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	f040 813d 	bne.w	8002600 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6818      	ldr	r0, [r3, #0]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	6819      	ldr	r1, [r3, #0]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	461a      	mov	r2, r3
 8002394:	f7ff fb68 	bl	8001a68 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	4aa2      	ldr	r2, [pc, #648]	; (8002628 <HAL_ADC_ConfigChannel+0x6dc>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	f040 812e 	bne.w	8002600 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10b      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x480>
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	0e9b      	lsrs	r3, r3, #26
 80023ba:	3301      	adds	r3, #1
 80023bc:	f003 031f 	and.w	r3, r3, #31
 80023c0:	2b09      	cmp	r3, #9
 80023c2:	bf94      	ite	ls
 80023c4:	2301      	movls	r3, #1
 80023c6:	2300      	movhi	r3, #0
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	e019      	b.n	8002400 <HAL_ADC_ConfigChannel+0x4b4>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023d4:	fa93 f3a3 	rbit	r3, r3
 80023d8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80023da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023dc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80023de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80023e4:	2320      	movs	r3, #32
 80023e6:	e003      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80023e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023ea:	fab3 f383 	clz	r3, r3
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	3301      	adds	r3, #1
 80023f2:	f003 031f 	and.w	r3, r3, #31
 80023f6:	2b09      	cmp	r3, #9
 80023f8:	bf94      	ite	ls
 80023fa:	2301      	movls	r3, #1
 80023fc:	2300      	movhi	r3, #0
 80023fe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002400:	2b00      	cmp	r3, #0
 8002402:	d079      	beq.n	80024f8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800240c:	2b00      	cmp	r3, #0
 800240e:	d107      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x4d4>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	0e9b      	lsrs	r3, r3, #26
 8002416:	3301      	adds	r3, #1
 8002418:	069b      	lsls	r3, r3, #26
 800241a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800241e:	e015      	b.n	800244c <HAL_ADC_ConfigChannel+0x500>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002428:	fa93 f3a3 	rbit	r3, r3
 800242c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800242e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002430:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002438:	2320      	movs	r3, #32
 800243a:	e003      	b.n	8002444 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800243c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800243e:	fab3 f383 	clz	r3, r3
 8002442:	b2db      	uxtb	r3, r3
 8002444:	3301      	adds	r3, #1
 8002446:	069b      	lsls	r3, r3, #26
 8002448:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002454:	2b00      	cmp	r3, #0
 8002456:	d109      	bne.n	800246c <HAL_ADC_ConfigChannel+0x520>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	0e9b      	lsrs	r3, r3, #26
 800245e:	3301      	adds	r3, #1
 8002460:	f003 031f 	and.w	r3, r3, #31
 8002464:	2101      	movs	r1, #1
 8002466:	fa01 f303 	lsl.w	r3, r1, r3
 800246a:	e017      	b.n	800249c <HAL_ADC_ConfigChannel+0x550>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002474:	fa93 f3a3 	rbit	r3, r3
 8002478:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800247a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800247c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800247e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002484:	2320      	movs	r3, #32
 8002486:	e003      	b.n	8002490 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800248a:	fab3 f383 	clz	r3, r3
 800248e:	b2db      	uxtb	r3, r3
 8002490:	3301      	adds	r3, #1
 8002492:	f003 031f 	and.w	r3, r3, #31
 8002496:	2101      	movs	r1, #1
 8002498:	fa01 f303 	lsl.w	r3, r1, r3
 800249c:	ea42 0103 	orr.w	r1, r2, r3
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10a      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x576>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	0e9b      	lsrs	r3, r3, #26
 80024b2:	3301      	adds	r3, #1
 80024b4:	f003 021f 	and.w	r2, r3, #31
 80024b8:	4613      	mov	r3, r2
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	4413      	add	r3, r2
 80024be:	051b      	lsls	r3, r3, #20
 80024c0:	e018      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x5a8>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ca:	fa93 f3a3 	rbit	r3, r3
 80024ce:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80024d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80024d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80024da:	2320      	movs	r3, #32
 80024dc:	e003      	b.n	80024e6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80024de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024e0:	fab3 f383 	clz	r3, r3
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	3301      	adds	r3, #1
 80024e8:	f003 021f 	and.w	r2, r3, #31
 80024ec:	4613      	mov	r3, r2
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	4413      	add	r3, r2
 80024f2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024f4:	430b      	orrs	r3, r1
 80024f6:	e07e      	b.n	80025f6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002500:	2b00      	cmp	r3, #0
 8002502:	d107      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x5c8>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	0e9b      	lsrs	r3, r3, #26
 800250a:	3301      	adds	r3, #1
 800250c:	069b      	lsls	r3, r3, #26
 800250e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002512:	e015      	b.n	8002540 <HAL_ADC_ConfigChannel+0x5f4>
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251c:	fa93 f3a3 	rbit	r3, r3
 8002520:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002524:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800252c:	2320      	movs	r3, #32
 800252e:	e003      	b.n	8002538 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002532:	fab3 f383 	clz	r3, r3
 8002536:	b2db      	uxtb	r3, r3
 8002538:	3301      	adds	r3, #1
 800253a:	069b      	lsls	r3, r3, #26
 800253c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002548:	2b00      	cmp	r3, #0
 800254a:	d109      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x614>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	0e9b      	lsrs	r3, r3, #26
 8002552:	3301      	adds	r3, #1
 8002554:	f003 031f 	and.w	r3, r3, #31
 8002558:	2101      	movs	r1, #1
 800255a:	fa01 f303 	lsl.w	r3, r1, r3
 800255e:	e017      	b.n	8002590 <HAL_ADC_ConfigChannel+0x644>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002566:	6a3b      	ldr	r3, [r7, #32]
 8002568:	fa93 f3a3 	rbit	r3, r3
 800256c:	61fb      	str	r3, [r7, #28]
  return result;
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002578:	2320      	movs	r3, #32
 800257a:	e003      	b.n	8002584 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	fab3 f383 	clz	r3, r3
 8002582:	b2db      	uxtb	r3, r3
 8002584:	3301      	adds	r3, #1
 8002586:	f003 031f 	and.w	r3, r3, #31
 800258a:	2101      	movs	r1, #1
 800258c:	fa01 f303 	lsl.w	r3, r1, r3
 8002590:	ea42 0103 	orr.w	r1, r2, r3
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10d      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x670>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	0e9b      	lsrs	r3, r3, #26
 80025a6:	3301      	adds	r3, #1
 80025a8:	f003 021f 	and.w	r2, r3, #31
 80025ac:	4613      	mov	r3, r2
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	4413      	add	r3, r2
 80025b2:	3b1e      	subs	r3, #30
 80025b4:	051b      	lsls	r3, r3, #20
 80025b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025ba:	e01b      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x6a8>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	fa93 f3a3 	rbit	r3, r3
 80025c8:	613b      	str	r3, [r7, #16]
  return result;
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80025d4:	2320      	movs	r3, #32
 80025d6:	e003      	b.n	80025e0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	fab3 f383 	clz	r3, r3
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	3301      	adds	r3, #1
 80025e2:	f003 021f 	and.w	r2, r3, #31
 80025e6:	4613      	mov	r3, r2
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	4413      	add	r3, r2
 80025ec:	3b1e      	subs	r3, #30
 80025ee:	051b      	lsls	r3, r3, #20
 80025f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025f4:	430b      	orrs	r3, r1
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	6892      	ldr	r2, [r2, #8]
 80025fa:	4619      	mov	r1, r3
 80025fc:	f7ff fa08 	bl	8001a10 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	4b09      	ldr	r3, [pc, #36]	; (800262c <HAL_ADC_ConfigChannel+0x6e0>)
 8002606:	4013      	ands	r3, r2
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 80be 	beq.w	800278a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002616:	d004      	beq.n	8002622 <HAL_ADC_ConfigChannel+0x6d6>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a04      	ldr	r2, [pc, #16]	; (8002630 <HAL_ADC_ConfigChannel+0x6e4>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d10a      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x6ec>
 8002622:	4b04      	ldr	r3, [pc, #16]	; (8002634 <HAL_ADC_ConfigChannel+0x6e8>)
 8002624:	e009      	b.n	800263a <HAL_ADC_ConfigChannel+0x6ee>
 8002626:	bf00      	nop
 8002628:	407f0000 	.word	0x407f0000
 800262c:	80080000 	.word	0x80080000
 8002630:	50000100 	.word	0x50000100
 8002634:	50000300 	.word	0x50000300
 8002638:	4b59      	ldr	r3, [pc, #356]	; (80027a0 <HAL_ADC_ConfigChannel+0x854>)
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff f910 	bl	8001860 <LL_ADC_GetCommonPathInternalCh>
 8002640:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a56      	ldr	r2, [pc, #344]	; (80027a4 <HAL_ADC_ConfigChannel+0x858>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d004      	beq.n	8002658 <HAL_ADC_ConfigChannel+0x70c>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a55      	ldr	r2, [pc, #340]	; (80027a8 <HAL_ADC_ConfigChannel+0x85c>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d13a      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002658:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800265c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d134      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800266c:	d005      	beq.n	800267a <HAL_ADC_ConfigChannel+0x72e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a4e      	ldr	r2, [pc, #312]	; (80027ac <HAL_ADC_ConfigChannel+0x860>)
 8002674:	4293      	cmp	r3, r2
 8002676:	f040 8085 	bne.w	8002784 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002682:	d004      	beq.n	800268e <HAL_ADC_ConfigChannel+0x742>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a49      	ldr	r2, [pc, #292]	; (80027b0 <HAL_ADC_ConfigChannel+0x864>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d101      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x746>
 800268e:	4a49      	ldr	r2, [pc, #292]	; (80027b4 <HAL_ADC_ConfigChannel+0x868>)
 8002690:	e000      	b.n	8002694 <HAL_ADC_ConfigChannel+0x748>
 8002692:	4a43      	ldr	r2, [pc, #268]	; (80027a0 <HAL_ADC_ConfigChannel+0x854>)
 8002694:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002698:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800269c:	4619      	mov	r1, r3
 800269e:	4610      	mov	r0, r2
 80026a0:	f7ff f8cb 	bl	800183a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026a4:	4b44      	ldr	r3, [pc, #272]	; (80027b8 <HAL_ADC_ConfigChannel+0x86c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	099b      	lsrs	r3, r3, #6
 80026aa:	4a44      	ldr	r2, [pc, #272]	; (80027bc <HAL_ADC_ConfigChannel+0x870>)
 80026ac:	fba2 2303 	umull	r2, r3, r2, r3
 80026b0:	099b      	lsrs	r3, r3, #6
 80026b2:	1c5a      	adds	r2, r3, #1
 80026b4:	4613      	mov	r3, r2
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	4413      	add	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80026be:	e002      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1f9      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026cc:	e05a      	b.n	8002784 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a3b      	ldr	r2, [pc, #236]	; (80027c0 <HAL_ADC_ConfigChannel+0x874>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d125      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x7d8>
 80026d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d11f      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a31      	ldr	r2, [pc, #196]	; (80027b0 <HAL_ADC_ConfigChannel+0x864>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d104      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x7ac>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a34      	ldr	r2, [pc, #208]	; (80027c4 <HAL_ADC_ConfigChannel+0x878>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d047      	beq.n	8002788 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002700:	d004      	beq.n	800270c <HAL_ADC_ConfigChannel+0x7c0>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a2a      	ldr	r2, [pc, #168]	; (80027b0 <HAL_ADC_ConfigChannel+0x864>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d101      	bne.n	8002710 <HAL_ADC_ConfigChannel+0x7c4>
 800270c:	4a29      	ldr	r2, [pc, #164]	; (80027b4 <HAL_ADC_ConfigChannel+0x868>)
 800270e:	e000      	b.n	8002712 <HAL_ADC_ConfigChannel+0x7c6>
 8002710:	4a23      	ldr	r2, [pc, #140]	; (80027a0 <HAL_ADC_ConfigChannel+0x854>)
 8002712:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002716:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800271a:	4619      	mov	r1, r3
 800271c:	4610      	mov	r0, r2
 800271e:	f7ff f88c 	bl	800183a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002722:	e031      	b.n	8002788 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a27      	ldr	r2, [pc, #156]	; (80027c8 <HAL_ADC_ConfigChannel+0x87c>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d12d      	bne.n	800278a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800272e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d127      	bne.n	800278a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a1c      	ldr	r2, [pc, #112]	; (80027b0 <HAL_ADC_ConfigChannel+0x864>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d022      	beq.n	800278a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800274c:	d004      	beq.n	8002758 <HAL_ADC_ConfigChannel+0x80c>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a17      	ldr	r2, [pc, #92]	; (80027b0 <HAL_ADC_ConfigChannel+0x864>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d101      	bne.n	800275c <HAL_ADC_ConfigChannel+0x810>
 8002758:	4a16      	ldr	r2, [pc, #88]	; (80027b4 <HAL_ADC_ConfigChannel+0x868>)
 800275a:	e000      	b.n	800275e <HAL_ADC_ConfigChannel+0x812>
 800275c:	4a10      	ldr	r2, [pc, #64]	; (80027a0 <HAL_ADC_ConfigChannel+0x854>)
 800275e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002762:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002766:	4619      	mov	r1, r3
 8002768:	4610      	mov	r0, r2
 800276a:	f7ff f866 	bl	800183a <LL_ADC_SetCommonPathInternalCh>
 800276e:	e00c      	b.n	800278a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002774:	f043 0220 	orr.w	r2, r3, #32
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002782:	e002      	b.n	800278a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002784:	bf00      	nop
 8002786:	e000      	b.n	800278a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002788:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002792:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002796:	4618      	mov	r0, r3
 8002798:	37d8      	adds	r7, #216	; 0xd8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	50000700 	.word	0x50000700
 80027a4:	c3210000 	.word	0xc3210000
 80027a8:	90c00010 	.word	0x90c00010
 80027ac:	50000600 	.word	0x50000600
 80027b0:	50000100 	.word	0x50000100
 80027b4:	50000300 	.word	0x50000300
 80027b8:	20000078 	.word	0x20000078
 80027bc:	053e2d63 	.word	0x053e2d63
 80027c0:	c7520000 	.word	0xc7520000
 80027c4:	50000500 	.word	0x50000500
 80027c8:	cb840000 	.word	0xcb840000

080027cc <LL_ADC_IsEnabled>:
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d101      	bne.n	80027e4 <LL_ADC_IsEnabled+0x18>
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <LL_ADC_IsEnabled+0x1a>
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <LL_ADC_REG_IsConversionOngoing>:
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 0304 	and.w	r3, r3, #4
 8002802:	2b04      	cmp	r3, #4
 8002804:	d101      	bne.n	800280a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002818:	b590      	push	{r4, r7, lr}
 800281a:	b0a1      	sub	sp, #132	; 0x84
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002822:	2300      	movs	r3, #0
 8002824:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800282e:	2b01      	cmp	r3, #1
 8002830:	d101      	bne.n	8002836 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002832:	2302      	movs	r3, #2
 8002834:	e0e7      	b.n	8002a06 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800283e:	2300      	movs	r3, #0
 8002840:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002842:	2300      	movs	r3, #0
 8002844:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800284e:	d102      	bne.n	8002856 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002850:	4b6f      	ldr	r3, [pc, #444]	; (8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	e009      	b.n	800286a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a6e      	ldr	r2, [pc, #440]	; (8002a14 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d102      	bne.n	8002866 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002860:	4b6d      	ldr	r3, [pc, #436]	; (8002a18 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002862:	60bb      	str	r3, [r7, #8]
 8002864:	e001      	b.n	800286a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002866:	2300      	movs	r3, #0
 8002868:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10b      	bne.n	8002888 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002874:	f043 0220 	orr.w	r2, r3, #32
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e0be      	b.n	8002a06 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff ffb1 	bl	80027f2 <LL_ADC_REG_IsConversionOngoing>
 8002890:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff ffab 	bl	80027f2 <LL_ADC_REG_IsConversionOngoing>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f040 80a0 	bne.w	80029e4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80028a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f040 809c 	bne.w	80029e4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028b4:	d004      	beq.n	80028c0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a55      	ldr	r2, [pc, #340]	; (8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d101      	bne.n	80028c4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80028c0:	4b56      	ldr	r3, [pc, #344]	; (8002a1c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80028c2:	e000      	b.n	80028c6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80028c4:	4b56      	ldr	r3, [pc, #344]	; (8002a20 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80028c6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d04b      	beq.n	8002968 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80028d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	6859      	ldr	r1, [r3, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028e2:	035b      	lsls	r3, r3, #13
 80028e4:	430b      	orrs	r3, r1
 80028e6:	431a      	orrs	r2, r3
 80028e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028ea:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028f4:	d004      	beq.n	8002900 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a45      	ldr	r2, [pc, #276]	; (8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d10f      	bne.n	8002920 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002900:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002904:	f7ff ff62 	bl	80027cc <LL_ADC_IsEnabled>
 8002908:	4604      	mov	r4, r0
 800290a:	4841      	ldr	r0, [pc, #260]	; (8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800290c:	f7ff ff5e 	bl	80027cc <LL_ADC_IsEnabled>
 8002910:	4603      	mov	r3, r0
 8002912:	4323      	orrs	r3, r4
 8002914:	2b00      	cmp	r3, #0
 8002916:	bf0c      	ite	eq
 8002918:	2301      	moveq	r3, #1
 800291a:	2300      	movne	r3, #0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	e012      	b.n	8002946 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002920:	483c      	ldr	r0, [pc, #240]	; (8002a14 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002922:	f7ff ff53 	bl	80027cc <LL_ADC_IsEnabled>
 8002926:	4604      	mov	r4, r0
 8002928:	483b      	ldr	r0, [pc, #236]	; (8002a18 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800292a:	f7ff ff4f 	bl	80027cc <LL_ADC_IsEnabled>
 800292e:	4603      	mov	r3, r0
 8002930:	431c      	orrs	r4, r3
 8002932:	483c      	ldr	r0, [pc, #240]	; (8002a24 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002934:	f7ff ff4a 	bl	80027cc <LL_ADC_IsEnabled>
 8002938:	4603      	mov	r3, r0
 800293a:	4323      	orrs	r3, r4
 800293c:	2b00      	cmp	r3, #0
 800293e:	bf0c      	ite	eq
 8002940:	2301      	moveq	r3, #1
 8002942:	2300      	movne	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d056      	beq.n	80029f8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800294a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002952:	f023 030f 	bic.w	r3, r3, #15
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	6811      	ldr	r1, [r2, #0]
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	6892      	ldr	r2, [r2, #8]
 800295e:	430a      	orrs	r2, r1
 8002960:	431a      	orrs	r2, r3
 8002962:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002964:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002966:	e047      	b.n	80029f8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002968:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002970:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002972:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800297c:	d004      	beq.n	8002988 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a23      	ldr	r2, [pc, #140]	; (8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d10f      	bne.n	80029a8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002988:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800298c:	f7ff ff1e 	bl	80027cc <LL_ADC_IsEnabled>
 8002990:	4604      	mov	r4, r0
 8002992:	481f      	ldr	r0, [pc, #124]	; (8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002994:	f7ff ff1a 	bl	80027cc <LL_ADC_IsEnabled>
 8002998:	4603      	mov	r3, r0
 800299a:	4323      	orrs	r3, r4
 800299c:	2b00      	cmp	r3, #0
 800299e:	bf0c      	ite	eq
 80029a0:	2301      	moveq	r3, #1
 80029a2:	2300      	movne	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	e012      	b.n	80029ce <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80029a8:	481a      	ldr	r0, [pc, #104]	; (8002a14 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80029aa:	f7ff ff0f 	bl	80027cc <LL_ADC_IsEnabled>
 80029ae:	4604      	mov	r4, r0
 80029b0:	4819      	ldr	r0, [pc, #100]	; (8002a18 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80029b2:	f7ff ff0b 	bl	80027cc <LL_ADC_IsEnabled>
 80029b6:	4603      	mov	r3, r0
 80029b8:	431c      	orrs	r4, r3
 80029ba:	481a      	ldr	r0, [pc, #104]	; (8002a24 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80029bc:	f7ff ff06 	bl	80027cc <LL_ADC_IsEnabled>
 80029c0:	4603      	mov	r3, r0
 80029c2:	4323      	orrs	r3, r4
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	bf0c      	ite	eq
 80029c8:	2301      	moveq	r3, #1
 80029ca:	2300      	movne	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d012      	beq.n	80029f8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80029d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80029da:	f023 030f 	bic.w	r3, r3, #15
 80029de:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80029e0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029e2:	e009      	b.n	80029f8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e8:	f043 0220 	orr.w	r2, r3, #32
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80029f6:	e000      	b.n	80029fa <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029f8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002a02:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3784      	adds	r7, #132	; 0x84
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd90      	pop	{r4, r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	50000100 	.word	0x50000100
 8002a14:	50000400 	.word	0x50000400
 8002a18:	50000500 	.word	0x50000500
 8002a1c:	50000300 	.word	0x50000300
 8002a20:	50000700 	.word	0x50000700
 8002a24:	50000600 	.word	0x50000600

08002a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a38:	4b0c      	ldr	r3, [pc, #48]	; (8002a6c <__NVIC_SetPriorityGrouping+0x44>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a3e:	68ba      	ldr	r2, [r7, #8]
 8002a40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a44:	4013      	ands	r3, r2
 8002a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a5a:	4a04      	ldr	r2, [pc, #16]	; (8002a6c <__NVIC_SetPriorityGrouping+0x44>)
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	60d3      	str	r3, [r2, #12]
}
 8002a60:	bf00      	nop
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	e000ed00 	.word	0xe000ed00

08002a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a74:	4b04      	ldr	r3, [pc, #16]	; (8002a88 <__NVIC_GetPriorityGrouping+0x18>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	0a1b      	lsrs	r3, r3, #8
 8002a7a:	f003 0307 	and.w	r3, r3, #7
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	e000ed00 	.word	0xe000ed00

08002a8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	db0b      	blt.n	8002ab6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
 8002aa0:	f003 021f 	and.w	r2, r3, #31
 8002aa4:	4907      	ldr	r1, [pc, #28]	; (8002ac4 <__NVIC_EnableIRQ+0x38>)
 8002aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	2001      	movs	r0, #1
 8002aae:	fa00 f202 	lsl.w	r2, r0, r2
 8002ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	e000e100 	.word	0xe000e100

08002ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	6039      	str	r1, [r7, #0]
 8002ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	db0a      	blt.n	8002af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	490c      	ldr	r1, [pc, #48]	; (8002b14 <__NVIC_SetPriority+0x4c>)
 8002ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae6:	0112      	lsls	r2, r2, #4
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	440b      	add	r3, r1
 8002aec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002af0:	e00a      	b.n	8002b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	4908      	ldr	r1, [pc, #32]	; (8002b18 <__NVIC_SetPriority+0x50>)
 8002af8:	79fb      	ldrb	r3, [r7, #7]
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	3b04      	subs	r3, #4
 8002b00:	0112      	lsls	r2, r2, #4
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	440b      	add	r3, r1
 8002b06:	761a      	strb	r2, [r3, #24]
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	e000e100 	.word	0xe000e100
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b089      	sub	sp, #36	; 0x24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	f1c3 0307 	rsb	r3, r3, #7
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	bf28      	it	cs
 8002b3a:	2304      	movcs	r3, #4
 8002b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	3304      	adds	r3, #4
 8002b42:	2b06      	cmp	r3, #6
 8002b44:	d902      	bls.n	8002b4c <NVIC_EncodePriority+0x30>
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	3b03      	subs	r3, #3
 8002b4a:	e000      	b.n	8002b4e <NVIC_EncodePriority+0x32>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b50:	f04f 32ff 	mov.w	r2, #4294967295
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43da      	mvns	r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	401a      	ands	r2, r3
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b64:	f04f 31ff 	mov.w	r1, #4294967295
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6e:	43d9      	mvns	r1, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b74:	4313      	orrs	r3, r2
         );
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3724      	adds	r7, #36	; 0x24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b082      	sub	sp, #8
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7ff ff4c 	bl	8002a28 <__NVIC_SetPriorityGrouping>
}
 8002b90:	bf00      	nop
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
 8002ba4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ba6:	f7ff ff63 	bl	8002a70 <__NVIC_GetPriorityGrouping>
 8002baa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	68b9      	ldr	r1, [r7, #8]
 8002bb0:	6978      	ldr	r0, [r7, #20]
 8002bb2:	f7ff ffb3 	bl	8002b1c <NVIC_EncodePriority>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bbc:	4611      	mov	r1, r2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff ff82 	bl	8002ac8 <__NVIC_SetPriority>
}
 8002bc4:	bf00      	nop
 8002bc6:	3718      	adds	r7, #24
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff ff56 	bl	8002a8c <__NVIC_EnableIRQ>
}
 8002be0:	bf00      	nop
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d005      	beq.n	8002c0c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2204      	movs	r2, #4
 8002c04:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	73fb      	strb	r3, [r7, #15]
 8002c0a:	e037      	b.n	8002c7c <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 020e 	bic.w	r2, r2, #14
 8002c1a:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c2a:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0201 	bic.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c40:	f003 021f 	and.w	r2, r3, #31
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	2101      	movs	r1, #1
 8002c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c4e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c58:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00c      	beq.n	8002c7c <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c70:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002c7a:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b084      	sub	sp, #16
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d00d      	beq.n	8002cce <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2204      	movs	r2, #4
 8002cb6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	73fb      	strb	r3, [r7, #15]
 8002ccc:	e047      	b.n	8002d5e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 020e 	bic.w	r2, r2, #14
 8002cdc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0201 	bic.w	r2, r2, #1
 8002cec:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cfc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d02:	f003 021f 	and.w	r2, r3, #31
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d10:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d1a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00c      	beq.n	8002d3e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d32:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002d3c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	4798      	blx	r3
    }
  }
  return status;
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b087      	sub	sp, #28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002d76:	e15a      	b.n	800302e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	fa01 f303 	lsl.w	r3, r1, r3
 8002d84:	4013      	ands	r3, r2
 8002d86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 814c 	beq.w	8003028 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f003 0303 	and.w	r3, r3, #3
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d005      	beq.n	8002da8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d130      	bne.n	8002e0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	2203      	movs	r2, #3
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	43db      	mvns	r3, r3
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dde:	2201      	movs	r2, #1
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	43db      	mvns	r3, r3
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	4013      	ands	r3, r2
 8002dec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	091b      	lsrs	r3, r3, #4
 8002df4:	f003 0201 	and.w	r2, r3, #1
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	2b03      	cmp	r3, #3
 8002e14:	d017      	beq.n	8002e46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	2203      	movs	r2, #3
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	43db      	mvns	r3, r3
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	689a      	ldr	r2, [r3, #8]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f003 0303 	and.w	r3, r3, #3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d123      	bne.n	8002e9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	08da      	lsrs	r2, r3, #3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3208      	adds	r2, #8
 8002e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	220f      	movs	r2, #15
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	4013      	ands	r3, r2
 8002e74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	691a      	ldr	r2, [r3, #16]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	08da      	lsrs	r2, r3, #3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3208      	adds	r2, #8
 8002e94:	6939      	ldr	r1, [r7, #16]
 8002e96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	2203      	movs	r2, #3
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f003 0203 	and.w	r2, r3, #3
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 80a6 	beq.w	8003028 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002edc:	4b5b      	ldr	r3, [pc, #364]	; (800304c <HAL_GPIO_Init+0x2e4>)
 8002ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee0:	4a5a      	ldr	r2, [pc, #360]	; (800304c <HAL_GPIO_Init+0x2e4>)
 8002ee2:	f043 0301 	orr.w	r3, r3, #1
 8002ee6:	6613      	str	r3, [r2, #96]	; 0x60
 8002ee8:	4b58      	ldr	r3, [pc, #352]	; (800304c <HAL_GPIO_Init+0x2e4>)
 8002eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	60bb      	str	r3, [r7, #8]
 8002ef2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ef4:	4a56      	ldr	r2, [pc, #344]	; (8003050 <HAL_GPIO_Init+0x2e8>)
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	089b      	lsrs	r3, r3, #2
 8002efa:	3302      	adds	r3, #2
 8002efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	f003 0303 	and.w	r3, r3, #3
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	220f      	movs	r2, #15
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	43db      	mvns	r3, r3
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	4013      	ands	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f1e:	d01f      	beq.n	8002f60 <HAL_GPIO_Init+0x1f8>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a4c      	ldr	r2, [pc, #304]	; (8003054 <HAL_GPIO_Init+0x2ec>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d019      	beq.n	8002f5c <HAL_GPIO_Init+0x1f4>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a4b      	ldr	r2, [pc, #300]	; (8003058 <HAL_GPIO_Init+0x2f0>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d013      	beq.n	8002f58 <HAL_GPIO_Init+0x1f0>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a4a      	ldr	r2, [pc, #296]	; (800305c <HAL_GPIO_Init+0x2f4>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d00d      	beq.n	8002f54 <HAL_GPIO_Init+0x1ec>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a49      	ldr	r2, [pc, #292]	; (8003060 <HAL_GPIO_Init+0x2f8>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d007      	beq.n	8002f50 <HAL_GPIO_Init+0x1e8>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a48      	ldr	r2, [pc, #288]	; (8003064 <HAL_GPIO_Init+0x2fc>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d101      	bne.n	8002f4c <HAL_GPIO_Init+0x1e4>
 8002f48:	2305      	movs	r3, #5
 8002f4a:	e00a      	b.n	8002f62 <HAL_GPIO_Init+0x1fa>
 8002f4c:	2306      	movs	r3, #6
 8002f4e:	e008      	b.n	8002f62 <HAL_GPIO_Init+0x1fa>
 8002f50:	2304      	movs	r3, #4
 8002f52:	e006      	b.n	8002f62 <HAL_GPIO_Init+0x1fa>
 8002f54:	2303      	movs	r3, #3
 8002f56:	e004      	b.n	8002f62 <HAL_GPIO_Init+0x1fa>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e002      	b.n	8002f62 <HAL_GPIO_Init+0x1fa>
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e000      	b.n	8002f62 <HAL_GPIO_Init+0x1fa>
 8002f60:	2300      	movs	r3, #0
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	f002 0203 	and.w	r2, r2, #3
 8002f68:	0092      	lsls	r2, r2, #2
 8002f6a:	4093      	lsls	r3, r2
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f72:	4937      	ldr	r1, [pc, #220]	; (8003050 <HAL_GPIO_Init+0x2e8>)
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	089b      	lsrs	r3, r3, #2
 8002f78:	3302      	adds	r3, #2
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f80:	4b39      	ldr	r3, [pc, #228]	; (8003068 <HAL_GPIO_Init+0x300>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002fa4:	4a30      	ldr	r2, [pc, #192]	; (8003068 <HAL_GPIO_Init+0x300>)
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002faa:	4b2f      	ldr	r3, [pc, #188]	; (8003068 <HAL_GPIO_Init+0x300>)
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002fce:	4a26      	ldr	r2, [pc, #152]	; (8003068 <HAL_GPIO_Init+0x300>)
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002fd4:	4b24      	ldr	r3, [pc, #144]	; (8003068 <HAL_GPIO_Init+0x300>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ff8:	4a1b      	ldr	r2, [pc, #108]	; (8003068 <HAL_GPIO_Init+0x300>)
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ffe:	4b1a      	ldr	r3, [pc, #104]	; (8003068 <HAL_GPIO_Init+0x300>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	43db      	mvns	r3, r3
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4013      	ands	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4313      	orrs	r3, r2
 8003020:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003022:	4a11      	ldr	r2, [pc, #68]	; (8003068 <HAL_GPIO_Init+0x300>)
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	3301      	adds	r3, #1
 800302c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	fa22 f303 	lsr.w	r3, r2, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	f47f ae9d 	bne.w	8002d78 <HAL_GPIO_Init+0x10>
  }
}
 800303e:	bf00      	nop
 8003040:	bf00      	nop
 8003042:	371c      	adds	r7, #28
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	40021000 	.word	0x40021000
 8003050:	40010000 	.word	0x40010000
 8003054:	48000400 	.word	0x48000400
 8003058:	48000800 	.word	0x48000800
 800305c:	48000c00 	.word	0x48000c00
 8003060:	48001000 	.word	0x48001000
 8003064:	48001400 	.word	0x48001400
 8003068:	40010400 	.word	0x40010400

0800306c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	807b      	strh	r3, [r7, #2]
 8003078:	4613      	mov	r3, r2
 800307a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800307c:	787b      	ldrb	r3, [r7, #1]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003082:	887a      	ldrh	r2, [r7, #2]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003088:	e002      	b.n	8003090 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800308a:	887a      	ldrh	r2, [r7, #2]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80030a6:	4b08      	ldr	r3, [pc, #32]	; (80030c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030a8:	695a      	ldr	r2, [r3, #20]
 80030aa:	88fb      	ldrh	r3, [r7, #6]
 80030ac:	4013      	ands	r3, r2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d006      	beq.n	80030c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030b2:	4a05      	ldr	r2, [pc, #20]	; (80030c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030b4:	88fb      	ldrh	r3, [r7, #6]
 80030b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030b8:	88fb      	ldrh	r3, [r7, #6]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 f806 	bl	80030cc <HAL_GPIO_EXTI_Callback>
  }
}
 80030c0:	bf00      	nop
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40010400 	.word	0x40010400

080030cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
	...

080030e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d141      	bne.n	8003176 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80030f2:	4b4b      	ldr	r3, [pc, #300]	; (8003220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030fe:	d131      	bne.n	8003164 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003100:	4b47      	ldr	r3, [pc, #284]	; (8003220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003102:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003106:	4a46      	ldr	r2, [pc, #280]	; (8003220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003108:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800310c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003110:	4b43      	ldr	r3, [pc, #268]	; (8003220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003118:	4a41      	ldr	r2, [pc, #260]	; (8003220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800311a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800311e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003120:	4b40      	ldr	r3, [pc, #256]	; (8003224 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2232      	movs	r2, #50	; 0x32
 8003126:	fb02 f303 	mul.w	r3, r2, r3
 800312a:	4a3f      	ldr	r2, [pc, #252]	; (8003228 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800312c:	fba2 2303 	umull	r2, r3, r2, r3
 8003130:	0c9b      	lsrs	r3, r3, #18
 8003132:	3301      	adds	r3, #1
 8003134:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003136:	e002      	b.n	800313e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	3b01      	subs	r3, #1
 800313c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800313e:	4b38      	ldr	r3, [pc, #224]	; (8003220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800314a:	d102      	bne.n	8003152 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1f2      	bne.n	8003138 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003152:	4b33      	ldr	r3, [pc, #204]	; (8003220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800315e:	d158      	bne.n	8003212 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e057      	b.n	8003214 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003164:	4b2e      	ldr	r3, [pc, #184]	; (8003220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003166:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800316a:	4a2d      	ldr	r2, [pc, #180]	; (8003220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800316c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003170:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003174:	e04d      	b.n	8003212 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800317c:	d141      	bne.n	8003202 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800317e:	4b28      	ldr	r3, [pc, #160]	; (8003220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800318a:	d131      	bne.n	80031f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800318c:	4b24      	ldr	r3, [pc, #144]	; (8003220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800318e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003192:	4a23      	ldr	r2, [pc, #140]	; (8003220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003198:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800319c:	4b20      	ldr	r3, [pc, #128]	; (8003220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031a4:	4a1e      	ldr	r2, [pc, #120]	; (8003220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031ac:	4b1d      	ldr	r3, [pc, #116]	; (8003224 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2232      	movs	r2, #50	; 0x32
 80031b2:	fb02 f303 	mul.w	r3, r2, r3
 80031b6:	4a1c      	ldr	r2, [pc, #112]	; (8003228 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031b8:	fba2 2303 	umull	r2, r3, r2, r3
 80031bc:	0c9b      	lsrs	r3, r3, #18
 80031be:	3301      	adds	r3, #1
 80031c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031c2:	e002      	b.n	80031ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031ca:	4b15      	ldr	r3, [pc, #84]	; (8003220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031d6:	d102      	bne.n	80031de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f2      	bne.n	80031c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031de:	4b10      	ldr	r3, [pc, #64]	; (8003220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ea:	d112      	bne.n	8003212 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e011      	b.n	8003214 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031f0:	4b0b      	ldr	r3, [pc, #44]	; (8003220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031f6:	4a0a      	ldr	r2, [pc, #40]	; (8003220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003200:	e007      	b.n	8003212 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003202:	4b07      	ldr	r3, [pc, #28]	; (8003220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800320a:	4a05      	ldr	r2, [pc, #20]	; (8003220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800320c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003210:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	40007000 	.word	0x40007000
 8003224:	20000078 	.word	0x20000078
 8003228:	431bde83 	.word	0x431bde83

0800322c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003230:	4b05      	ldr	r3, [pc, #20]	; (8003248 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	4a04      	ldr	r2, [pc, #16]	; (8003248 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003236:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800323a:	6093      	str	r3, [r2, #8]
}
 800323c:	bf00      	nop
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	40007000 	.word	0x40007000

0800324c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e306      	b.n	800386c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d075      	beq.n	8003356 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800326a:	4b97      	ldr	r3, [pc, #604]	; (80034c8 <HAL_RCC_OscConfig+0x27c>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 030c 	and.w	r3, r3, #12
 8003272:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003274:	4b94      	ldr	r3, [pc, #592]	; (80034c8 <HAL_RCC_OscConfig+0x27c>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f003 0303 	and.w	r3, r3, #3
 800327c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	2b0c      	cmp	r3, #12
 8003282:	d102      	bne.n	800328a <HAL_RCC_OscConfig+0x3e>
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	2b03      	cmp	r3, #3
 8003288:	d002      	beq.n	8003290 <HAL_RCC_OscConfig+0x44>
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	2b08      	cmp	r3, #8
 800328e:	d10b      	bne.n	80032a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003290:	4b8d      	ldr	r3, [pc, #564]	; (80034c8 <HAL_RCC_OscConfig+0x27c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d05b      	beq.n	8003354 <HAL_RCC_OscConfig+0x108>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d157      	bne.n	8003354 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e2e1      	b.n	800386c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032b0:	d106      	bne.n	80032c0 <HAL_RCC_OscConfig+0x74>
 80032b2:	4b85      	ldr	r3, [pc, #532]	; (80034c8 <HAL_RCC_OscConfig+0x27c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a84      	ldr	r2, [pc, #528]	; (80034c8 <HAL_RCC_OscConfig+0x27c>)
 80032b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	e01d      	b.n	80032fc <HAL_RCC_OscConfig+0xb0>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032c8:	d10c      	bne.n	80032e4 <HAL_RCC_OscConfig+0x98>
 80032ca:	4b7f      	ldr	r3, [pc, #508]	; (80034c8 <HAL_RCC_OscConfig+0x27c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a7e      	ldr	r2, [pc, #504]	; (80034c8 <HAL_RCC_OscConfig+0x27c>)
 80032d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032d4:	6013      	str	r3, [r2, #0]
 80032d6:	4b7c      	ldr	r3, [pc, #496]	; (80034c8 <HAL_RCC_OscConfig+0x27c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a7b      	ldr	r2, [pc, #492]	; (80034c8 <HAL_RCC_OscConfig+0x27c>)
 80032dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	e00b      	b.n	80032fc <HAL_RCC_OscConfig+0xb0>
 80032e4:	4b78      	ldr	r3, [pc, #480]	; (80034c8 <HAL_RCC_OscConfig+0x27c>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a77      	ldr	r2, [pc, #476]	; (80034c8 <HAL_RCC_OscConfig+0x27c>)
 80032ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ee:	6013      	str	r3, [r2, #0]
 80032f0:	4b75      	ldr	r3, [pc, #468]	; (80034c8 <HAL_RCC_OscConfig+0x27c>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a74      	ldr	r2, [pc, #464]	; (80034c8 <HAL_RCC_OscConfig+0x27c>)
 80032f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d013      	beq.n	800332c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003304:	f7fe fa7a 	bl	80017fc <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800330c:	f7fe fa76 	bl	80017fc <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b64      	cmp	r3, #100	; 0x64
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e2a6      	b.n	800386c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800331e:	4b6a      	ldr	r3, [pc, #424]	; (80034c8 <HAL_RCC_OscConfig+0x27c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f0      	beq.n	800330c <HAL_RCC_OscConfig+0xc0>
 800332a:	e014      	b.n	8003356 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332c:	f7fe fa66 	bl	80017fc <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003334:	f7fe fa62 	bl	80017fc <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b64      	cmp	r3, #100	; 0x64
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e292      	b.n	800386c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003346:	4b60      	ldr	r3, [pc, #384]	; (80034c8 <HAL_RCC_OscConfig+0x27c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f0      	bne.n	8003334 <HAL_RCC_OscConfig+0xe8>
 8003352:	e000      	b.n	8003356 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d075      	beq.n	800344e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003362:	4b59      	ldr	r3, [pc, #356]	; (80034c8 <HAL_RCC_OscConfig+0x27c>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 030c 	and.w	r3, r3, #12
 800336a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800336c:	4b56      	ldr	r3, [pc, #344]	; (80034c8 <HAL_RCC_OscConfig+0x27c>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	f003 0303 	and.w	r3, r3, #3
 8003374:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	2b0c      	cmp	r3, #12
 800337a:	d102      	bne.n	8003382 <HAL_RCC_OscConfig+0x136>
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	2b02      	cmp	r3, #2
 8003380:	d002      	beq.n	8003388 <HAL_RCC_OscConfig+0x13c>
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	2b04      	cmp	r3, #4
 8003386:	d11f      	bne.n	80033c8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003388:	4b4f      	ldr	r3, [pc, #316]	; (80034c8 <HAL_RCC_OscConfig+0x27c>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003390:	2b00      	cmp	r3, #0
 8003392:	d005      	beq.n	80033a0 <HAL_RCC_OscConfig+0x154>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e265      	b.n	800386c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a0:	4b49      	ldr	r3, [pc, #292]	; (80034c8 <HAL_RCC_OscConfig+0x27c>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	061b      	lsls	r3, r3, #24
 80033ae:	4946      	ldr	r1, [pc, #280]	; (80034c8 <HAL_RCC_OscConfig+0x27c>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80033b4:	4b45      	ldr	r3, [pc, #276]	; (80034cc <HAL_RCC_OscConfig+0x280>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fd fd39 	bl	8000e30 <HAL_InitTick>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d043      	beq.n	800344c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e251      	b.n	800386c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d023      	beq.n	8003418 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033d0:	4b3d      	ldr	r3, [pc, #244]	; (80034c8 <HAL_RCC_OscConfig+0x27c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a3c      	ldr	r2, [pc, #240]	; (80034c8 <HAL_RCC_OscConfig+0x27c>)
 80033d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033dc:	f7fe fa0e 	bl	80017fc <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033e4:	f7fe fa0a 	bl	80017fc <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e23a      	b.n	800386c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033f6:	4b34      	ldr	r3, [pc, #208]	; (80034c8 <HAL_RCC_OscConfig+0x27c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0f0      	beq.n	80033e4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003402:	4b31      	ldr	r3, [pc, #196]	; (80034c8 <HAL_RCC_OscConfig+0x27c>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	061b      	lsls	r3, r3, #24
 8003410:	492d      	ldr	r1, [pc, #180]	; (80034c8 <HAL_RCC_OscConfig+0x27c>)
 8003412:	4313      	orrs	r3, r2
 8003414:	604b      	str	r3, [r1, #4]
 8003416:	e01a      	b.n	800344e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003418:	4b2b      	ldr	r3, [pc, #172]	; (80034c8 <HAL_RCC_OscConfig+0x27c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a2a      	ldr	r2, [pc, #168]	; (80034c8 <HAL_RCC_OscConfig+0x27c>)
 800341e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003422:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003424:	f7fe f9ea 	bl	80017fc <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800342c:	f7fe f9e6 	bl	80017fc <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e216      	b.n	800386c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800343e:	4b22      	ldr	r3, [pc, #136]	; (80034c8 <HAL_RCC_OscConfig+0x27c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1f0      	bne.n	800342c <HAL_RCC_OscConfig+0x1e0>
 800344a:	e000      	b.n	800344e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800344c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0308 	and.w	r3, r3, #8
 8003456:	2b00      	cmp	r3, #0
 8003458:	d041      	beq.n	80034de <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d01c      	beq.n	800349c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003462:	4b19      	ldr	r3, [pc, #100]	; (80034c8 <HAL_RCC_OscConfig+0x27c>)
 8003464:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003468:	4a17      	ldr	r2, [pc, #92]	; (80034c8 <HAL_RCC_OscConfig+0x27c>)
 800346a:	f043 0301 	orr.w	r3, r3, #1
 800346e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003472:	f7fe f9c3 	bl	80017fc <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800347a:	f7fe f9bf 	bl	80017fc <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e1ef      	b.n	800386c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800348c:	4b0e      	ldr	r3, [pc, #56]	; (80034c8 <HAL_RCC_OscConfig+0x27c>)
 800348e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0ef      	beq.n	800347a <HAL_RCC_OscConfig+0x22e>
 800349a:	e020      	b.n	80034de <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800349c:	4b0a      	ldr	r3, [pc, #40]	; (80034c8 <HAL_RCC_OscConfig+0x27c>)
 800349e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034a2:	4a09      	ldr	r2, [pc, #36]	; (80034c8 <HAL_RCC_OscConfig+0x27c>)
 80034a4:	f023 0301 	bic.w	r3, r3, #1
 80034a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ac:	f7fe f9a6 	bl	80017fc <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034b2:	e00d      	b.n	80034d0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034b4:	f7fe f9a2 	bl	80017fc <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d906      	bls.n	80034d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e1d2      	b.n	800386c <HAL_RCC_OscConfig+0x620>
 80034c6:	bf00      	nop
 80034c8:	40021000 	.word	0x40021000
 80034cc:	2000007c 	.word	0x2000007c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034d0:	4b8c      	ldr	r3, [pc, #560]	; (8003704 <HAL_RCC_OscConfig+0x4b8>)
 80034d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1ea      	bne.n	80034b4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0304 	and.w	r3, r3, #4
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 80a6 	beq.w	8003638 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034ec:	2300      	movs	r3, #0
 80034ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034f0:	4b84      	ldr	r3, [pc, #528]	; (8003704 <HAL_RCC_OscConfig+0x4b8>)
 80034f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <HAL_RCC_OscConfig+0x2b4>
 80034fc:	2301      	movs	r3, #1
 80034fe:	e000      	b.n	8003502 <HAL_RCC_OscConfig+0x2b6>
 8003500:	2300      	movs	r3, #0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00d      	beq.n	8003522 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003506:	4b7f      	ldr	r3, [pc, #508]	; (8003704 <HAL_RCC_OscConfig+0x4b8>)
 8003508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800350a:	4a7e      	ldr	r2, [pc, #504]	; (8003704 <HAL_RCC_OscConfig+0x4b8>)
 800350c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003510:	6593      	str	r3, [r2, #88]	; 0x58
 8003512:	4b7c      	ldr	r3, [pc, #496]	; (8003704 <HAL_RCC_OscConfig+0x4b8>)
 8003514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800351e:	2301      	movs	r3, #1
 8003520:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003522:	4b79      	ldr	r3, [pc, #484]	; (8003708 <HAL_RCC_OscConfig+0x4bc>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352a:	2b00      	cmp	r3, #0
 800352c:	d118      	bne.n	8003560 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800352e:	4b76      	ldr	r3, [pc, #472]	; (8003708 <HAL_RCC_OscConfig+0x4bc>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a75      	ldr	r2, [pc, #468]	; (8003708 <HAL_RCC_OscConfig+0x4bc>)
 8003534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800353a:	f7fe f95f 	bl	80017fc <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003542:	f7fe f95b 	bl	80017fc <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e18b      	b.n	800386c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003554:	4b6c      	ldr	r3, [pc, #432]	; (8003708 <HAL_RCC_OscConfig+0x4bc>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f0      	beq.n	8003542 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d108      	bne.n	800357a <HAL_RCC_OscConfig+0x32e>
 8003568:	4b66      	ldr	r3, [pc, #408]	; (8003704 <HAL_RCC_OscConfig+0x4b8>)
 800356a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356e:	4a65      	ldr	r2, [pc, #404]	; (8003704 <HAL_RCC_OscConfig+0x4b8>)
 8003570:	f043 0301 	orr.w	r3, r3, #1
 8003574:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003578:	e024      	b.n	80035c4 <HAL_RCC_OscConfig+0x378>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	2b05      	cmp	r3, #5
 8003580:	d110      	bne.n	80035a4 <HAL_RCC_OscConfig+0x358>
 8003582:	4b60      	ldr	r3, [pc, #384]	; (8003704 <HAL_RCC_OscConfig+0x4b8>)
 8003584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003588:	4a5e      	ldr	r2, [pc, #376]	; (8003704 <HAL_RCC_OscConfig+0x4b8>)
 800358a:	f043 0304 	orr.w	r3, r3, #4
 800358e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003592:	4b5c      	ldr	r3, [pc, #368]	; (8003704 <HAL_RCC_OscConfig+0x4b8>)
 8003594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003598:	4a5a      	ldr	r2, [pc, #360]	; (8003704 <HAL_RCC_OscConfig+0x4b8>)
 800359a:	f043 0301 	orr.w	r3, r3, #1
 800359e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035a2:	e00f      	b.n	80035c4 <HAL_RCC_OscConfig+0x378>
 80035a4:	4b57      	ldr	r3, [pc, #348]	; (8003704 <HAL_RCC_OscConfig+0x4b8>)
 80035a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035aa:	4a56      	ldr	r2, [pc, #344]	; (8003704 <HAL_RCC_OscConfig+0x4b8>)
 80035ac:	f023 0301 	bic.w	r3, r3, #1
 80035b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035b4:	4b53      	ldr	r3, [pc, #332]	; (8003704 <HAL_RCC_OscConfig+0x4b8>)
 80035b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ba:	4a52      	ldr	r2, [pc, #328]	; (8003704 <HAL_RCC_OscConfig+0x4b8>)
 80035bc:	f023 0304 	bic.w	r3, r3, #4
 80035c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d016      	beq.n	80035fa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035cc:	f7fe f916 	bl	80017fc <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035d2:	e00a      	b.n	80035ea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035d4:	f7fe f912 	bl	80017fc <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e140      	b.n	800386c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035ea:	4b46      	ldr	r3, [pc, #280]	; (8003704 <HAL_RCC_OscConfig+0x4b8>)
 80035ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0ed      	beq.n	80035d4 <HAL_RCC_OscConfig+0x388>
 80035f8:	e015      	b.n	8003626 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035fa:	f7fe f8ff 	bl	80017fc <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003600:	e00a      	b.n	8003618 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003602:	f7fe f8fb 	bl	80017fc <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003610:	4293      	cmp	r3, r2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e129      	b.n	800386c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003618:	4b3a      	ldr	r3, [pc, #232]	; (8003704 <HAL_RCC_OscConfig+0x4b8>)
 800361a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1ed      	bne.n	8003602 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003626:	7ffb      	ldrb	r3, [r7, #31]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d105      	bne.n	8003638 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800362c:	4b35      	ldr	r3, [pc, #212]	; (8003704 <HAL_RCC_OscConfig+0x4b8>)
 800362e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003630:	4a34      	ldr	r2, [pc, #208]	; (8003704 <HAL_RCC_OscConfig+0x4b8>)
 8003632:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003636:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0320 	and.w	r3, r3, #32
 8003640:	2b00      	cmp	r3, #0
 8003642:	d03c      	beq.n	80036be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d01c      	beq.n	8003686 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800364c:	4b2d      	ldr	r3, [pc, #180]	; (8003704 <HAL_RCC_OscConfig+0x4b8>)
 800364e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003652:	4a2c      	ldr	r2, [pc, #176]	; (8003704 <HAL_RCC_OscConfig+0x4b8>)
 8003654:	f043 0301 	orr.w	r3, r3, #1
 8003658:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800365c:	f7fe f8ce 	bl	80017fc <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003664:	f7fe f8ca 	bl	80017fc <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e0fa      	b.n	800386c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003676:	4b23      	ldr	r3, [pc, #140]	; (8003704 <HAL_RCC_OscConfig+0x4b8>)
 8003678:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0ef      	beq.n	8003664 <HAL_RCC_OscConfig+0x418>
 8003684:	e01b      	b.n	80036be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003686:	4b1f      	ldr	r3, [pc, #124]	; (8003704 <HAL_RCC_OscConfig+0x4b8>)
 8003688:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800368c:	4a1d      	ldr	r2, [pc, #116]	; (8003704 <HAL_RCC_OscConfig+0x4b8>)
 800368e:	f023 0301 	bic.w	r3, r3, #1
 8003692:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003696:	f7fe f8b1 	bl	80017fc <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800369e:	f7fe f8ad 	bl	80017fc <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e0dd      	b.n	800386c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036b0:	4b14      	ldr	r3, [pc, #80]	; (8003704 <HAL_RCC_OscConfig+0x4b8>)
 80036b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1ef      	bne.n	800369e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 80d1 	beq.w	800386a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036c8:	4b0e      	ldr	r3, [pc, #56]	; (8003704 <HAL_RCC_OscConfig+0x4b8>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 030c 	and.w	r3, r3, #12
 80036d0:	2b0c      	cmp	r3, #12
 80036d2:	f000 808b 	beq.w	80037ec <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d15e      	bne.n	800379c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036de:	4b09      	ldr	r3, [pc, #36]	; (8003704 <HAL_RCC_OscConfig+0x4b8>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a08      	ldr	r2, [pc, #32]	; (8003704 <HAL_RCC_OscConfig+0x4b8>)
 80036e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ea:	f7fe f887 	bl	80017fc <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036f0:	e00c      	b.n	800370c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f2:	f7fe f883 	bl	80017fc <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d905      	bls.n	800370c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e0b3      	b.n	800386c <HAL_RCC_OscConfig+0x620>
 8003704:	40021000 	.word	0x40021000
 8003708:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800370c:	4b59      	ldr	r3, [pc, #356]	; (8003874 <HAL_RCC_OscConfig+0x628>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1ec      	bne.n	80036f2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003718:	4b56      	ldr	r3, [pc, #344]	; (8003874 <HAL_RCC_OscConfig+0x628>)
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	4b56      	ldr	r3, [pc, #344]	; (8003878 <HAL_RCC_OscConfig+0x62c>)
 800371e:	4013      	ands	r3, r2
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6a11      	ldr	r1, [r2, #32]
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003728:	3a01      	subs	r2, #1
 800372a:	0112      	lsls	r2, r2, #4
 800372c:	4311      	orrs	r1, r2
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003732:	0212      	lsls	r2, r2, #8
 8003734:	4311      	orrs	r1, r2
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800373a:	0852      	lsrs	r2, r2, #1
 800373c:	3a01      	subs	r2, #1
 800373e:	0552      	lsls	r2, r2, #21
 8003740:	4311      	orrs	r1, r2
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003746:	0852      	lsrs	r2, r2, #1
 8003748:	3a01      	subs	r2, #1
 800374a:	0652      	lsls	r2, r2, #25
 800374c:	4311      	orrs	r1, r2
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003752:	06d2      	lsls	r2, r2, #27
 8003754:	430a      	orrs	r2, r1
 8003756:	4947      	ldr	r1, [pc, #284]	; (8003874 <HAL_RCC_OscConfig+0x628>)
 8003758:	4313      	orrs	r3, r2
 800375a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800375c:	4b45      	ldr	r3, [pc, #276]	; (8003874 <HAL_RCC_OscConfig+0x628>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a44      	ldr	r2, [pc, #272]	; (8003874 <HAL_RCC_OscConfig+0x628>)
 8003762:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003766:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003768:	4b42      	ldr	r3, [pc, #264]	; (8003874 <HAL_RCC_OscConfig+0x628>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	4a41      	ldr	r2, [pc, #260]	; (8003874 <HAL_RCC_OscConfig+0x628>)
 800376e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003772:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003774:	f7fe f842 	bl	80017fc <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800377c:	f7fe f83e 	bl	80017fc <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e06e      	b.n	800386c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800378e:	4b39      	ldr	r3, [pc, #228]	; (8003874 <HAL_RCC_OscConfig+0x628>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCC_OscConfig+0x530>
 800379a:	e066      	b.n	800386a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379c:	4b35      	ldr	r3, [pc, #212]	; (8003874 <HAL_RCC_OscConfig+0x628>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a34      	ldr	r2, [pc, #208]	; (8003874 <HAL_RCC_OscConfig+0x628>)
 80037a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037a6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80037a8:	4b32      	ldr	r3, [pc, #200]	; (8003874 <HAL_RCC_OscConfig+0x628>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	4a31      	ldr	r2, [pc, #196]	; (8003874 <HAL_RCC_OscConfig+0x628>)
 80037ae:	f023 0303 	bic.w	r3, r3, #3
 80037b2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80037b4:	4b2f      	ldr	r3, [pc, #188]	; (8003874 <HAL_RCC_OscConfig+0x628>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	4a2e      	ldr	r2, [pc, #184]	; (8003874 <HAL_RCC_OscConfig+0x628>)
 80037ba:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80037be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c4:	f7fe f81a 	bl	80017fc <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037cc:	f7fe f816 	bl	80017fc <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e046      	b.n	800386c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037de:	4b25      	ldr	r3, [pc, #148]	; (8003874 <HAL_RCC_OscConfig+0x628>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1f0      	bne.n	80037cc <HAL_RCC_OscConfig+0x580>
 80037ea:	e03e      	b.n	800386a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	69db      	ldr	r3, [r3, #28]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e039      	b.n	800386c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80037f8:	4b1e      	ldr	r3, [pc, #120]	; (8003874 <HAL_RCC_OscConfig+0x628>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f003 0203 	and.w	r2, r3, #3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	429a      	cmp	r2, r3
 800380a:	d12c      	bne.n	8003866 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	3b01      	subs	r3, #1
 8003818:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800381a:	429a      	cmp	r2, r3
 800381c:	d123      	bne.n	8003866 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003828:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800382a:	429a      	cmp	r2, r3
 800382c:	d11b      	bne.n	8003866 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003838:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800383a:	429a      	cmp	r2, r3
 800383c:	d113      	bne.n	8003866 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003848:	085b      	lsrs	r3, r3, #1
 800384a:	3b01      	subs	r3, #1
 800384c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800384e:	429a      	cmp	r2, r3
 8003850:	d109      	bne.n	8003866 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800385c:	085b      	lsrs	r3, r3, #1
 800385e:	3b01      	subs	r3, #1
 8003860:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003862:	429a      	cmp	r2, r3
 8003864:	d001      	beq.n	800386a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e000      	b.n	800386c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3720      	adds	r7, #32
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40021000 	.word	0x40021000
 8003878:	019f800c 	.word	0x019f800c

0800387c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003886:	2300      	movs	r3, #0
 8003888:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d101      	bne.n	8003894 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e11e      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003894:	4b91      	ldr	r3, [pc, #580]	; (8003adc <HAL_RCC_ClockConfig+0x260>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 030f 	and.w	r3, r3, #15
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d910      	bls.n	80038c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a2:	4b8e      	ldr	r3, [pc, #568]	; (8003adc <HAL_RCC_ClockConfig+0x260>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f023 020f 	bic.w	r2, r3, #15
 80038aa:	498c      	ldr	r1, [pc, #560]	; (8003adc <HAL_RCC_ClockConfig+0x260>)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b2:	4b8a      	ldr	r3, [pc, #552]	; (8003adc <HAL_RCC_ClockConfig+0x260>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d001      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e106      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d073      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	2b03      	cmp	r3, #3
 80038d6:	d129      	bne.n	800392c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038d8:	4b81      	ldr	r3, [pc, #516]	; (8003ae0 <HAL_RCC_ClockConfig+0x264>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0f4      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80038e8:	f000 f9d0 	bl	8003c8c <RCC_GetSysClockFreqFromPLLSource>
 80038ec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	4a7c      	ldr	r2, [pc, #496]	; (8003ae4 <HAL_RCC_ClockConfig+0x268>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d93f      	bls.n	8003976 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80038f6:	4b7a      	ldr	r3, [pc, #488]	; (8003ae0 <HAL_RCC_ClockConfig+0x264>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d009      	beq.n	8003916 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800390a:	2b00      	cmp	r3, #0
 800390c:	d033      	beq.n	8003976 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003912:	2b00      	cmp	r3, #0
 8003914:	d12f      	bne.n	8003976 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003916:	4b72      	ldr	r3, [pc, #456]	; (8003ae0 <HAL_RCC_ClockConfig+0x264>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800391e:	4a70      	ldr	r2, [pc, #448]	; (8003ae0 <HAL_RCC_ClockConfig+0x264>)
 8003920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003924:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003926:	2380      	movs	r3, #128	; 0x80
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	e024      	b.n	8003976 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	2b02      	cmp	r3, #2
 8003932:	d107      	bne.n	8003944 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003934:	4b6a      	ldr	r3, [pc, #424]	; (8003ae0 <HAL_RCC_ClockConfig+0x264>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d109      	bne.n	8003954 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e0c6      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003944:	4b66      	ldr	r3, [pc, #408]	; (8003ae0 <HAL_RCC_ClockConfig+0x264>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e0be      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003954:	f000 f8ce 	bl	8003af4 <HAL_RCC_GetSysClockFreq>
 8003958:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	4a61      	ldr	r2, [pc, #388]	; (8003ae4 <HAL_RCC_ClockConfig+0x268>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d909      	bls.n	8003976 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003962:	4b5f      	ldr	r3, [pc, #380]	; (8003ae0 <HAL_RCC_ClockConfig+0x264>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800396a:	4a5d      	ldr	r2, [pc, #372]	; (8003ae0 <HAL_RCC_ClockConfig+0x264>)
 800396c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003970:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003972:	2380      	movs	r3, #128	; 0x80
 8003974:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003976:	4b5a      	ldr	r3, [pc, #360]	; (8003ae0 <HAL_RCC_ClockConfig+0x264>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f023 0203 	bic.w	r2, r3, #3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	4957      	ldr	r1, [pc, #348]	; (8003ae0 <HAL_RCC_ClockConfig+0x264>)
 8003984:	4313      	orrs	r3, r2
 8003986:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003988:	f7fd ff38 	bl	80017fc <HAL_GetTick>
 800398c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800398e:	e00a      	b.n	80039a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003990:	f7fd ff34 	bl	80017fc <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	f241 3288 	movw	r2, #5000	; 0x1388
 800399e:	4293      	cmp	r3, r2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e095      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039a6:	4b4e      	ldr	r3, [pc, #312]	; (8003ae0 <HAL_RCC_ClockConfig+0x264>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 020c 	and.w	r2, r3, #12
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d1eb      	bne.n	8003990 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d023      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d005      	beq.n	80039dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039d0:	4b43      	ldr	r3, [pc, #268]	; (8003ae0 <HAL_RCC_ClockConfig+0x264>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	4a42      	ldr	r2, [pc, #264]	; (8003ae0 <HAL_RCC_ClockConfig+0x264>)
 80039d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80039da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0308 	and.w	r3, r3, #8
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d007      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80039e8:	4b3d      	ldr	r3, [pc, #244]	; (8003ae0 <HAL_RCC_ClockConfig+0x264>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80039f0:	4a3b      	ldr	r2, [pc, #236]	; (8003ae0 <HAL_RCC_ClockConfig+0x264>)
 80039f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80039f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f8:	4b39      	ldr	r3, [pc, #228]	; (8003ae0 <HAL_RCC_ClockConfig+0x264>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	4936      	ldr	r1, [pc, #216]	; (8003ae0 <HAL_RCC_ClockConfig+0x264>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	608b      	str	r3, [r1, #8]
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	2b80      	cmp	r3, #128	; 0x80
 8003a10:	d105      	bne.n	8003a1e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003a12:	4b33      	ldr	r3, [pc, #204]	; (8003ae0 <HAL_RCC_ClockConfig+0x264>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	4a32      	ldr	r2, [pc, #200]	; (8003ae0 <HAL_RCC_ClockConfig+0x264>)
 8003a18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a1c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a1e:	4b2f      	ldr	r3, [pc, #188]	; (8003adc <HAL_RCC_ClockConfig+0x260>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 030f 	and.w	r3, r3, #15
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d21d      	bcs.n	8003a68 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a2c:	4b2b      	ldr	r3, [pc, #172]	; (8003adc <HAL_RCC_ClockConfig+0x260>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f023 020f 	bic.w	r2, r3, #15
 8003a34:	4929      	ldr	r1, [pc, #164]	; (8003adc <HAL_RCC_ClockConfig+0x260>)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a3c:	f7fd fede 	bl	80017fc <HAL_GetTick>
 8003a40:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a42:	e00a      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a44:	f7fd feda 	bl	80017fc <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e03b      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5a:	4b20      	ldr	r3, [pc, #128]	; (8003adc <HAL_RCC_ClockConfig+0x260>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d1ed      	bne.n	8003a44 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d008      	beq.n	8003a86 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a74:	4b1a      	ldr	r3, [pc, #104]	; (8003ae0 <HAL_RCC_ClockConfig+0x264>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	4917      	ldr	r1, [pc, #92]	; (8003ae0 <HAL_RCC_ClockConfig+0x264>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d009      	beq.n	8003aa6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a92:	4b13      	ldr	r3, [pc, #76]	; (8003ae0 <HAL_RCC_ClockConfig+0x264>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	490f      	ldr	r1, [pc, #60]	; (8003ae0 <HAL_RCC_ClockConfig+0x264>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003aa6:	f000 f825 	bl	8003af4 <HAL_RCC_GetSysClockFreq>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	4b0c      	ldr	r3, [pc, #48]	; (8003ae0 <HAL_RCC_ClockConfig+0x264>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	091b      	lsrs	r3, r3, #4
 8003ab2:	f003 030f 	and.w	r3, r3, #15
 8003ab6:	490c      	ldr	r1, [pc, #48]	; (8003ae8 <HAL_RCC_ClockConfig+0x26c>)
 8003ab8:	5ccb      	ldrb	r3, [r1, r3]
 8003aba:	f003 031f 	and.w	r3, r3, #31
 8003abe:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac2:	4a0a      	ldr	r2, [pc, #40]	; (8003aec <HAL_RCC_ClockConfig+0x270>)
 8003ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003ac6:	4b0a      	ldr	r3, [pc, #40]	; (8003af0 <HAL_RCC_ClockConfig+0x274>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fd f9b0 	bl	8000e30 <HAL_InitTick>
 8003ad0:	4603      	mov	r3, r0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3718      	adds	r7, #24
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	40022000 	.word	0x40022000
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	04c4b400 	.word	0x04c4b400
 8003ae8:	080089c8 	.word	0x080089c8
 8003aec:	20000078 	.word	0x20000078
 8003af0:	2000007c 	.word	0x2000007c

08003af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003afa:	4b2c      	ldr	r3, [pc, #176]	; (8003bac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 030c 	and.w	r3, r3, #12
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	d102      	bne.n	8003b0c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b06:	4b2a      	ldr	r3, [pc, #168]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b08:	613b      	str	r3, [r7, #16]
 8003b0a:	e047      	b.n	8003b9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003b0c:	4b27      	ldr	r3, [pc, #156]	; (8003bac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f003 030c 	and.w	r3, r3, #12
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d102      	bne.n	8003b1e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b18:	4b26      	ldr	r3, [pc, #152]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b1a:	613b      	str	r3, [r7, #16]
 8003b1c:	e03e      	b.n	8003b9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003b1e:	4b23      	ldr	r3, [pc, #140]	; (8003bac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 030c 	and.w	r3, r3, #12
 8003b26:	2b0c      	cmp	r3, #12
 8003b28:	d136      	bne.n	8003b98 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b2a:	4b20      	ldr	r3, [pc, #128]	; (8003bac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f003 0303 	and.w	r3, r3, #3
 8003b32:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b34:	4b1d      	ldr	r3, [pc, #116]	; (8003bac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	091b      	lsrs	r3, r3, #4
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	3301      	adds	r3, #1
 8003b40:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2b03      	cmp	r3, #3
 8003b46:	d10c      	bne.n	8003b62 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b48:	4a1a      	ldr	r2, [pc, #104]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b50:	4a16      	ldr	r2, [pc, #88]	; (8003bac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b52:	68d2      	ldr	r2, [r2, #12]
 8003b54:	0a12      	lsrs	r2, r2, #8
 8003b56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b5a:	fb02 f303 	mul.w	r3, r2, r3
 8003b5e:	617b      	str	r3, [r7, #20]
      break;
 8003b60:	e00c      	b.n	8003b7c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b62:	4a13      	ldr	r2, [pc, #76]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6a:	4a10      	ldr	r2, [pc, #64]	; (8003bac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b6c:	68d2      	ldr	r2, [r2, #12]
 8003b6e:	0a12      	lsrs	r2, r2, #8
 8003b70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b74:	fb02 f303 	mul.w	r3, r2, r3
 8003b78:	617b      	str	r3, [r7, #20]
      break;
 8003b7a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b7c:	4b0b      	ldr	r3, [pc, #44]	; (8003bac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	0e5b      	lsrs	r3, r3, #25
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	3301      	adds	r3, #1
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b94:	613b      	str	r3, [r7, #16]
 8003b96:	e001      	b.n	8003b9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003b9c:	693b      	ldr	r3, [r7, #16]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	371c      	adds	r7, #28
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	00f42400 	.word	0x00f42400
 8003bb4:	016e3600 	.word	0x016e3600

08003bb8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bbc:	4b03      	ldr	r3, [pc, #12]	; (8003bcc <HAL_RCC_GetHCLKFreq+0x14>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	20000078 	.word	0x20000078

08003bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003bd4:	f7ff fff0 	bl	8003bb8 <HAL_RCC_GetHCLKFreq>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	4b06      	ldr	r3, [pc, #24]	; (8003bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	0a1b      	lsrs	r3, r3, #8
 8003be0:	f003 0307 	and.w	r3, r3, #7
 8003be4:	4904      	ldr	r1, [pc, #16]	; (8003bf8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003be6:	5ccb      	ldrb	r3, [r1, r3]
 8003be8:	f003 031f 	and.w	r3, r3, #31
 8003bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	080089d8 	.word	0x080089d8

08003bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c00:	f7ff ffda 	bl	8003bb8 <HAL_RCC_GetHCLKFreq>
 8003c04:	4602      	mov	r2, r0
 8003c06:	4b06      	ldr	r3, [pc, #24]	; (8003c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	0adb      	lsrs	r3, r3, #11
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	4904      	ldr	r1, [pc, #16]	; (8003c24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c12:	5ccb      	ldrb	r3, [r1, r3]
 8003c14:	f003 031f 	and.w	r3, r3, #31
 8003c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40021000 	.word	0x40021000
 8003c24:	080089d8 	.word	0x080089d8

08003c28 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	220f      	movs	r2, #15
 8003c36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003c38:	4b12      	ldr	r3, [pc, #72]	; (8003c84 <HAL_RCC_GetClockConfig+0x5c>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f003 0203 	and.w	r2, r3, #3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003c44:	4b0f      	ldr	r3, [pc, #60]	; (8003c84 <HAL_RCC_GetClockConfig+0x5c>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003c50:	4b0c      	ldr	r3, [pc, #48]	; (8003c84 <HAL_RCC_GetClockConfig+0x5c>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003c5c:	4b09      	ldr	r3, [pc, #36]	; (8003c84 <HAL_RCC_GetClockConfig+0x5c>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	08db      	lsrs	r3, r3, #3
 8003c62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003c6a:	4b07      	ldr	r3, [pc, #28]	; (8003c88 <HAL_RCC_GetClockConfig+0x60>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 020f 	and.w	r2, r3, #15
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	601a      	str	r2, [r3, #0]
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	40021000 	.word	0x40021000
 8003c88:	40022000 	.word	0x40022000

08003c8c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b087      	sub	sp, #28
 8003c90:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c92:	4b1e      	ldr	r3, [pc, #120]	; (8003d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c9c:	4b1b      	ldr	r3, [pc, #108]	; (8003d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	091b      	lsrs	r3, r3, #4
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	2b03      	cmp	r3, #3
 8003cae:	d10c      	bne.n	8003cca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cb0:	4a17      	ldr	r2, [pc, #92]	; (8003d10 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb8:	4a14      	ldr	r2, [pc, #80]	; (8003d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cba:	68d2      	ldr	r2, [r2, #12]
 8003cbc:	0a12      	lsrs	r2, r2, #8
 8003cbe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cc2:	fb02 f303 	mul.w	r3, r2, r3
 8003cc6:	617b      	str	r3, [r7, #20]
    break;
 8003cc8:	e00c      	b.n	8003ce4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cca:	4a12      	ldr	r2, [pc, #72]	; (8003d14 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd2:	4a0e      	ldr	r2, [pc, #56]	; (8003d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cd4:	68d2      	ldr	r2, [r2, #12]
 8003cd6:	0a12      	lsrs	r2, r2, #8
 8003cd8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cdc:	fb02 f303 	mul.w	r3, r2, r3
 8003ce0:	617b      	str	r3, [r7, #20]
    break;
 8003ce2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ce4:	4b09      	ldr	r3, [pc, #36]	; (8003d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	0e5b      	lsrs	r3, r3, #25
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	3301      	adds	r3, #1
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cfc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003cfe:	687b      	ldr	r3, [r7, #4]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	371c      	adds	r7, #28
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	016e3600 	.word	0x016e3600
 8003d14:	00f42400 	.word	0x00f42400

08003d18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d20:	2300      	movs	r3, #0
 8003d22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d24:	2300      	movs	r3, #0
 8003d26:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 8098 	beq.w	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d36:	2300      	movs	r3, #0
 8003d38:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d3a:	4b43      	ldr	r3, [pc, #268]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10d      	bne.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d46:	4b40      	ldr	r3, [pc, #256]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4a:	4a3f      	ldr	r2, [pc, #252]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d50:	6593      	str	r3, [r2, #88]	; 0x58
 8003d52:	4b3d      	ldr	r3, [pc, #244]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5a:	60bb      	str	r3, [r7, #8]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d62:	4b3a      	ldr	r3, [pc, #232]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a39      	ldr	r2, [pc, #228]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d6e:	f7fd fd45 	bl	80017fc <HAL_GetTick>
 8003d72:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d74:	e009      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d76:	f7fd fd41 	bl	80017fc <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d902      	bls.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	74fb      	strb	r3, [r7, #19]
        break;
 8003d88:	e005      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d8a:	4b30      	ldr	r3, [pc, #192]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0ef      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003d96:	7cfb      	ldrb	r3, [r7, #19]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d159      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d9c:	4b2a      	ldr	r3, [pc, #168]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003da6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d01e      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d019      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003db8:	4b23      	ldr	r3, [pc, #140]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dc2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dc4:	4b20      	ldr	r3, [pc, #128]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dca:	4a1f      	ldr	r2, [pc, #124]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dd4:	4b1c      	ldr	r3, [pc, #112]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dda:	4a1b      	ldr	r2, [pc, #108]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ddc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003de0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003de4:	4a18      	ldr	r2, [pc, #96]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d016      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df6:	f7fd fd01 	bl	80017fc <HAL_GetTick>
 8003dfa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dfc:	e00b      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dfe:	f7fd fcfd 	bl	80017fc <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d902      	bls.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	74fb      	strb	r3, [r7, #19]
            break;
 8003e14:	e006      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e16:	4b0c      	ldr	r3, [pc, #48]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0ec      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003e24:	7cfb      	ldrb	r3, [r7, #19]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10b      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e2a:	4b07      	ldr	r3, [pc, #28]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e38:	4903      	ldr	r1, [pc, #12]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e40:	e008      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e42:	7cfb      	ldrb	r3, [r7, #19]
 8003e44:	74bb      	strb	r3, [r7, #18]
 8003e46:	e005      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e50:	7cfb      	ldrb	r3, [r7, #19]
 8003e52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e54:	7c7b      	ldrb	r3, [r7, #17]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d105      	bne.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e5a:	4ba7      	ldr	r3, [pc, #668]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5e:	4aa6      	ldr	r2, [pc, #664]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e64:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00a      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e72:	4ba1      	ldr	r3, [pc, #644]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e78:	f023 0203 	bic.w	r2, r3, #3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	499d      	ldr	r1, [pc, #628]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00a      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e94:	4b98      	ldr	r3, [pc, #608]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9a:	f023 020c 	bic.w	r2, r3, #12
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	4995      	ldr	r1, [pc, #596]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0304 	and.w	r3, r3, #4
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00a      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003eb6:	4b90      	ldr	r3, [pc, #576]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ebc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	498c      	ldr	r1, [pc, #560]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0308 	and.w	r3, r3, #8
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00a      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ed8:	4b87      	ldr	r3, [pc, #540]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ede:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	4984      	ldr	r1, [pc, #528]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0310 	and.w	r3, r3, #16
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003efa:	4b7f      	ldr	r3, [pc, #508]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	497b      	ldr	r1, [pc, #492]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0320 	and.w	r3, r3, #32
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00a      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f1c:	4b76      	ldr	r3, [pc, #472]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	4973      	ldr	r1, [pc, #460]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00a      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f3e:	4b6e      	ldr	r3, [pc, #440]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	69db      	ldr	r3, [r3, #28]
 8003f4c:	496a      	ldr	r1, [pc, #424]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00a      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f60:	4b65      	ldr	r3, [pc, #404]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f66:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	4962      	ldr	r1, [pc, #392]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f82:	4b5d      	ldr	r3, [pc, #372]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f90:	4959      	ldr	r1, [pc, #356]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00a      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fa4:	4b54      	ldr	r3, [pc, #336]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003faa:	f023 0203 	bic.w	r2, r3, #3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb2:	4951      	ldr	r1, [pc, #324]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00a      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fc6:	4b4c      	ldr	r3, [pc, #304]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fcc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd4:	4948      	ldr	r1, [pc, #288]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d015      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fe8:	4b43      	ldr	r3, [pc, #268]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff6:	4940      	ldr	r1, [pc, #256]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004006:	d105      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004008:	4b3b      	ldr	r3, [pc, #236]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	4a3a      	ldr	r2, [pc, #232]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800400e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004012:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800401c:	2b00      	cmp	r3, #0
 800401e:	d015      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004020:	4b35      	ldr	r3, [pc, #212]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004026:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800402e:	4932      	ldr	r1, [pc, #200]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004030:	4313      	orrs	r3, r2
 8004032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800403a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800403e:	d105      	bne.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004040:	4b2d      	ldr	r3, [pc, #180]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	4a2c      	ldr	r2, [pc, #176]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004046:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800404a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d015      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004058:	4b27      	ldr	r3, [pc, #156]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800405a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004066:	4924      	ldr	r1, [pc, #144]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004068:	4313      	orrs	r3, r2
 800406a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004072:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004076:	d105      	bne.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004078:	4b1f      	ldr	r3, [pc, #124]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	4a1e      	ldr	r2, [pc, #120]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800407e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004082:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d015      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004090:	4b19      	ldr	r3, [pc, #100]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004096:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409e:	4916      	ldr	r1, [pc, #88]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040ae:	d105      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040b0:	4b11      	ldr	r3, [pc, #68]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	4a10      	ldr	r2, [pc, #64]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040ba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d019      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040c8:	4b0b      	ldr	r3, [pc, #44]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	4908      	ldr	r1, [pc, #32]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040e6:	d109      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040e8:	4b03      	ldr	r3, [pc, #12]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	4a02      	ldr	r2, [pc, #8]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040f2:	60d3      	str	r3, [r2, #12]
 80040f4:	e002      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80040f6:	bf00      	nop
 80040f8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d015      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004108:	4b29      	ldr	r3, [pc, #164]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800410a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004116:	4926      	ldr	r1, [pc, #152]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004118:	4313      	orrs	r3, r2
 800411a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004122:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004126:	d105      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004128:	4b21      	ldr	r3, [pc, #132]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	4a20      	ldr	r2, [pc, #128]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800412e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004132:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d015      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004140:	4b1b      	ldr	r3, [pc, #108]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004146:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800414e:	4918      	ldr	r1, [pc, #96]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800415a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800415e:	d105      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004160:	4b13      	ldr	r3, [pc, #76]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	4a12      	ldr	r2, [pc, #72]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800416a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d015      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004178:	4b0d      	ldr	r3, [pc, #52]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800417a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800417e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004186:	490a      	ldr	r1, [pc, #40]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004192:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004196:	d105      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004198:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	4a04      	ldr	r2, [pc, #16]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800419e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80041a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	40021000 	.word	0x40021000

080041b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e049      	b.n	800425a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d106      	bne.n	80041e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7fd f87a 	bl	80012d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2202      	movs	r2, #2
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3304      	adds	r3, #4
 80041f0:	4619      	mov	r1, r3
 80041f2:	4610      	mov	r0, r2
 80041f4:	f000 fdf4 	bl	8004de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
	...

08004264 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b01      	cmp	r3, #1
 8004276:	d001      	beq.n	800427c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e054      	b.n	8004326 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2202      	movs	r2, #2
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0201 	orr.w	r2, r2, #1
 8004292:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a26      	ldr	r2, [pc, #152]	; (8004334 <HAL_TIM_Base_Start_IT+0xd0>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d022      	beq.n	80042e4 <HAL_TIM_Base_Start_IT+0x80>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a6:	d01d      	beq.n	80042e4 <HAL_TIM_Base_Start_IT+0x80>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a22      	ldr	r2, [pc, #136]	; (8004338 <HAL_TIM_Base_Start_IT+0xd4>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d018      	beq.n	80042e4 <HAL_TIM_Base_Start_IT+0x80>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a21      	ldr	r2, [pc, #132]	; (800433c <HAL_TIM_Base_Start_IT+0xd8>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d013      	beq.n	80042e4 <HAL_TIM_Base_Start_IT+0x80>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a1f      	ldr	r2, [pc, #124]	; (8004340 <HAL_TIM_Base_Start_IT+0xdc>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d00e      	beq.n	80042e4 <HAL_TIM_Base_Start_IT+0x80>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a1e      	ldr	r2, [pc, #120]	; (8004344 <HAL_TIM_Base_Start_IT+0xe0>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d009      	beq.n	80042e4 <HAL_TIM_Base_Start_IT+0x80>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a1c      	ldr	r2, [pc, #112]	; (8004348 <HAL_TIM_Base_Start_IT+0xe4>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d004      	beq.n	80042e4 <HAL_TIM_Base_Start_IT+0x80>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a1b      	ldr	r2, [pc, #108]	; (800434c <HAL_TIM_Base_Start_IT+0xe8>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d115      	bne.n	8004310 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	689a      	ldr	r2, [r3, #8]
 80042ea:	4b19      	ldr	r3, [pc, #100]	; (8004350 <HAL_TIM_Base_Start_IT+0xec>)
 80042ec:	4013      	ands	r3, r2
 80042ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2b06      	cmp	r3, #6
 80042f4:	d015      	beq.n	8004322 <HAL_TIM_Base_Start_IT+0xbe>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042fc:	d011      	beq.n	8004322 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f042 0201 	orr.w	r2, r2, #1
 800430c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800430e:	e008      	b.n	8004322 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 0201 	orr.w	r2, r2, #1
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	e000      	b.n	8004324 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004322:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	40012c00 	.word	0x40012c00
 8004338:	40000400 	.word	0x40000400
 800433c:	40000800 	.word	0x40000800
 8004340:	40000c00 	.word	0x40000c00
 8004344:	40013400 	.word	0x40013400
 8004348:	40014000 	.word	0x40014000
 800434c:	40015000 	.word	0x40015000
 8004350:	00010007 	.word	0x00010007

08004354 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e049      	b.n	80043fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d106      	bne.n	8004380 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f841 	bl	8004402 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3304      	adds	r3, #4
 8004390:	4619      	mov	r1, r3
 8004392:	4610      	mov	r0, r2
 8004394:	f000 fd24 	bl	8004de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800440a:	bf00      	nop
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
	...

08004418 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d109      	bne.n	800443c <HAL_TIM_PWM_Start+0x24>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b01      	cmp	r3, #1
 8004432:	bf14      	ite	ne
 8004434:	2301      	movne	r3, #1
 8004436:	2300      	moveq	r3, #0
 8004438:	b2db      	uxtb	r3, r3
 800443a:	e03c      	b.n	80044b6 <HAL_TIM_PWM_Start+0x9e>
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	2b04      	cmp	r3, #4
 8004440:	d109      	bne.n	8004456 <HAL_TIM_PWM_Start+0x3e>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b01      	cmp	r3, #1
 800444c:	bf14      	ite	ne
 800444e:	2301      	movne	r3, #1
 8004450:	2300      	moveq	r3, #0
 8004452:	b2db      	uxtb	r3, r3
 8004454:	e02f      	b.n	80044b6 <HAL_TIM_PWM_Start+0x9e>
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	2b08      	cmp	r3, #8
 800445a:	d109      	bne.n	8004470 <HAL_TIM_PWM_Start+0x58>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b01      	cmp	r3, #1
 8004466:	bf14      	ite	ne
 8004468:	2301      	movne	r3, #1
 800446a:	2300      	moveq	r3, #0
 800446c:	b2db      	uxtb	r3, r3
 800446e:	e022      	b.n	80044b6 <HAL_TIM_PWM_Start+0x9e>
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	2b0c      	cmp	r3, #12
 8004474:	d109      	bne.n	800448a <HAL_TIM_PWM_Start+0x72>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b01      	cmp	r3, #1
 8004480:	bf14      	ite	ne
 8004482:	2301      	movne	r3, #1
 8004484:	2300      	moveq	r3, #0
 8004486:	b2db      	uxtb	r3, r3
 8004488:	e015      	b.n	80044b6 <HAL_TIM_PWM_Start+0x9e>
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	2b10      	cmp	r3, #16
 800448e:	d109      	bne.n	80044a4 <HAL_TIM_PWM_Start+0x8c>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b01      	cmp	r3, #1
 800449a:	bf14      	ite	ne
 800449c:	2301      	movne	r3, #1
 800449e:	2300      	moveq	r3, #0
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	e008      	b.n	80044b6 <HAL_TIM_PWM_Start+0x9e>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	bf14      	ite	ne
 80044b0:	2301      	movne	r3, #1
 80044b2:	2300      	moveq	r3, #0
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e0a6      	b.n	800460c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d104      	bne.n	80044ce <HAL_TIM_PWM_Start+0xb6>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2202      	movs	r2, #2
 80044c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044cc:	e023      	b.n	8004516 <HAL_TIM_PWM_Start+0xfe>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b04      	cmp	r3, #4
 80044d2:	d104      	bne.n	80044de <HAL_TIM_PWM_Start+0xc6>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2202      	movs	r2, #2
 80044d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044dc:	e01b      	b.n	8004516 <HAL_TIM_PWM_Start+0xfe>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2b08      	cmp	r3, #8
 80044e2:	d104      	bne.n	80044ee <HAL_TIM_PWM_Start+0xd6>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044ec:	e013      	b.n	8004516 <HAL_TIM_PWM_Start+0xfe>
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2b0c      	cmp	r3, #12
 80044f2:	d104      	bne.n	80044fe <HAL_TIM_PWM_Start+0xe6>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2202      	movs	r2, #2
 80044f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044fc:	e00b      	b.n	8004516 <HAL_TIM_PWM_Start+0xfe>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b10      	cmp	r3, #16
 8004502:	d104      	bne.n	800450e <HAL_TIM_PWM_Start+0xf6>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2202      	movs	r2, #2
 8004508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800450c:	e003      	b.n	8004516 <HAL_TIM_PWM_Start+0xfe>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2202      	movs	r2, #2
 8004512:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2201      	movs	r2, #1
 800451c:	6839      	ldr	r1, [r7, #0]
 800451e:	4618      	mov	r0, r3
 8004520:	f001 f940 	bl	80057a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a3a      	ldr	r2, [pc, #232]	; (8004614 <HAL_TIM_PWM_Start+0x1fc>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d018      	beq.n	8004560 <HAL_TIM_PWM_Start+0x148>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a39      	ldr	r2, [pc, #228]	; (8004618 <HAL_TIM_PWM_Start+0x200>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d013      	beq.n	8004560 <HAL_TIM_PWM_Start+0x148>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a37      	ldr	r2, [pc, #220]	; (800461c <HAL_TIM_PWM_Start+0x204>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d00e      	beq.n	8004560 <HAL_TIM_PWM_Start+0x148>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a36      	ldr	r2, [pc, #216]	; (8004620 <HAL_TIM_PWM_Start+0x208>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d009      	beq.n	8004560 <HAL_TIM_PWM_Start+0x148>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a34      	ldr	r2, [pc, #208]	; (8004624 <HAL_TIM_PWM_Start+0x20c>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d004      	beq.n	8004560 <HAL_TIM_PWM_Start+0x148>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a33      	ldr	r2, [pc, #204]	; (8004628 <HAL_TIM_PWM_Start+0x210>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d101      	bne.n	8004564 <HAL_TIM_PWM_Start+0x14c>
 8004560:	2301      	movs	r3, #1
 8004562:	e000      	b.n	8004566 <HAL_TIM_PWM_Start+0x14e>
 8004564:	2300      	movs	r3, #0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d007      	beq.n	800457a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004578:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a25      	ldr	r2, [pc, #148]	; (8004614 <HAL_TIM_PWM_Start+0x1fc>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d022      	beq.n	80045ca <HAL_TIM_PWM_Start+0x1b2>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800458c:	d01d      	beq.n	80045ca <HAL_TIM_PWM_Start+0x1b2>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a26      	ldr	r2, [pc, #152]	; (800462c <HAL_TIM_PWM_Start+0x214>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d018      	beq.n	80045ca <HAL_TIM_PWM_Start+0x1b2>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a24      	ldr	r2, [pc, #144]	; (8004630 <HAL_TIM_PWM_Start+0x218>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d013      	beq.n	80045ca <HAL_TIM_PWM_Start+0x1b2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a23      	ldr	r2, [pc, #140]	; (8004634 <HAL_TIM_PWM_Start+0x21c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d00e      	beq.n	80045ca <HAL_TIM_PWM_Start+0x1b2>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a19      	ldr	r2, [pc, #100]	; (8004618 <HAL_TIM_PWM_Start+0x200>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d009      	beq.n	80045ca <HAL_TIM_PWM_Start+0x1b2>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a18      	ldr	r2, [pc, #96]	; (800461c <HAL_TIM_PWM_Start+0x204>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d004      	beq.n	80045ca <HAL_TIM_PWM_Start+0x1b2>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a18      	ldr	r2, [pc, #96]	; (8004628 <HAL_TIM_PWM_Start+0x210>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d115      	bne.n	80045f6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	4b19      	ldr	r3, [pc, #100]	; (8004638 <HAL_TIM_PWM_Start+0x220>)
 80045d2:	4013      	ands	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2b06      	cmp	r3, #6
 80045da:	d015      	beq.n	8004608 <HAL_TIM_PWM_Start+0x1f0>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045e2:	d011      	beq.n	8004608 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0201 	orr.w	r2, r2, #1
 80045f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f4:	e008      	b.n	8004608 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f042 0201 	orr.w	r2, r2, #1
 8004604:	601a      	str	r2, [r3, #0]
 8004606:	e000      	b.n	800460a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004608:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	40012c00 	.word	0x40012c00
 8004618:	40013400 	.word	0x40013400
 800461c:	40014000 	.word	0x40014000
 8004620:	40014400 	.word	0x40014400
 8004624:	40014800 	.word	0x40014800
 8004628:	40015000 	.word	0x40015000
 800462c:	40000400 	.word	0x40000400
 8004630:	40000800 	.word	0x40000800
 8004634:	40000c00 	.word	0x40000c00
 8004638:	00010007 	.word	0x00010007

0800463c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b02      	cmp	r3, #2
 8004650:	d122      	bne.n	8004698 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b02      	cmp	r3, #2
 800465e:	d11b      	bne.n	8004698 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f06f 0202 	mvn.w	r2, #2
 8004668:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	f003 0303 	and.w	r3, r3, #3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d003      	beq.n	8004686 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 fb90 	bl	8004da4 <HAL_TIM_IC_CaptureCallback>
 8004684:	e005      	b.n	8004692 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 fb82 	bl	8004d90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 fb93 	bl	8004db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	f003 0304 	and.w	r3, r3, #4
 80046a2:	2b04      	cmp	r3, #4
 80046a4:	d122      	bne.n	80046ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f003 0304 	and.w	r3, r3, #4
 80046b0:	2b04      	cmp	r3, #4
 80046b2:	d11b      	bne.n	80046ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f06f 0204 	mvn.w	r2, #4
 80046bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2202      	movs	r2, #2
 80046c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 fb66 	bl	8004da4 <HAL_TIM_IC_CaptureCallback>
 80046d8:	e005      	b.n	80046e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 fb58 	bl	8004d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 fb69 	bl	8004db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	f003 0308 	and.w	r3, r3, #8
 80046f6:	2b08      	cmp	r3, #8
 80046f8:	d122      	bne.n	8004740 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f003 0308 	and.w	r3, r3, #8
 8004704:	2b08      	cmp	r3, #8
 8004706:	d11b      	bne.n	8004740 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f06f 0208 	mvn.w	r2, #8
 8004710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2204      	movs	r2, #4
 8004716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	f003 0303 	and.w	r3, r3, #3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 fb3c 	bl	8004da4 <HAL_TIM_IC_CaptureCallback>
 800472c:	e005      	b.n	800473a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 fb2e 	bl	8004d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 fb3f 	bl	8004db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	f003 0310 	and.w	r3, r3, #16
 800474a:	2b10      	cmp	r3, #16
 800474c:	d122      	bne.n	8004794 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	f003 0310 	and.w	r3, r3, #16
 8004758:	2b10      	cmp	r3, #16
 800475a:	d11b      	bne.n	8004794 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f06f 0210 	mvn.w	r2, #16
 8004764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2208      	movs	r2, #8
 800476a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 fb12 	bl	8004da4 <HAL_TIM_IC_CaptureCallback>
 8004780:	e005      	b.n	800478e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 fb04 	bl	8004d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 fb15 	bl	8004db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d10e      	bne.n	80047c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d107      	bne.n	80047c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f06f 0201 	mvn.w	r2, #1
 80047b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f7fc fa4e 	bl	8000c5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ca:	2b80      	cmp	r3, #128	; 0x80
 80047cc:	d10e      	bne.n	80047ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d8:	2b80      	cmp	r3, #128	; 0x80
 80047da:	d107      	bne.n	80047ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f001 fad7 	bl	8005d9a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047fa:	d10e      	bne.n	800481a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004806:	2b80      	cmp	r3, #128	; 0x80
 8004808:	d107      	bne.n	800481a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f001 faca 	bl	8005dae <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004824:	2b40      	cmp	r3, #64	; 0x40
 8004826:	d10e      	bne.n	8004846 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004832:	2b40      	cmp	r3, #64	; 0x40
 8004834:	d107      	bne.n	8004846 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800483e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 fac3 	bl	8004dcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	f003 0320 	and.w	r3, r3, #32
 8004850:	2b20      	cmp	r3, #32
 8004852:	d10e      	bne.n	8004872 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	f003 0320 	and.w	r3, r3, #32
 800485e:	2b20      	cmp	r3, #32
 8004860:	d107      	bne.n	8004872 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f06f 0220 	mvn.w	r2, #32
 800486a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f001 fa8a 	bl	8005d86 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800487c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004880:	d10f      	bne.n	80048a2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800488c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004890:	d107      	bne.n	80048a2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800489a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f001 fa90 	bl	8005dc2 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048b0:	d10f      	bne.n	80048d2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048c0:	d107      	bne.n	80048d2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80048ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f001 fa82 	bl	8005dd6 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048e0:	d10f      	bne.n	8004902 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048f0:	d107      	bne.n	8004902 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80048fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f001 fa74 	bl	8005dea <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800490c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004910:	d10f      	bne.n	8004932 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800491c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004920:	d107      	bne.n	8004932 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800492a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f001 fa66 	bl	8005dfe <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004932:	bf00      	nop
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
	...

0800493c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004948:	2300      	movs	r3, #0
 800494a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004952:	2b01      	cmp	r3, #1
 8004954:	d101      	bne.n	800495a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004956:	2302      	movs	r3, #2
 8004958:	e0ff      	b.n	8004b5a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2b14      	cmp	r3, #20
 8004966:	f200 80f0 	bhi.w	8004b4a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800496a:	a201      	add	r2, pc, #4	; (adr r2, 8004970 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800496c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004970:	080049c5 	.word	0x080049c5
 8004974:	08004b4b 	.word	0x08004b4b
 8004978:	08004b4b 	.word	0x08004b4b
 800497c:	08004b4b 	.word	0x08004b4b
 8004980:	08004a05 	.word	0x08004a05
 8004984:	08004b4b 	.word	0x08004b4b
 8004988:	08004b4b 	.word	0x08004b4b
 800498c:	08004b4b 	.word	0x08004b4b
 8004990:	08004a47 	.word	0x08004a47
 8004994:	08004b4b 	.word	0x08004b4b
 8004998:	08004b4b 	.word	0x08004b4b
 800499c:	08004b4b 	.word	0x08004b4b
 80049a0:	08004a87 	.word	0x08004a87
 80049a4:	08004b4b 	.word	0x08004b4b
 80049a8:	08004b4b 	.word	0x08004b4b
 80049ac:	08004b4b 	.word	0x08004b4b
 80049b0:	08004ac9 	.word	0x08004ac9
 80049b4:	08004b4b 	.word	0x08004b4b
 80049b8:	08004b4b 	.word	0x08004b4b
 80049bc:	08004b4b 	.word	0x08004b4b
 80049c0:	08004b09 	.word	0x08004b09
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68b9      	ldr	r1, [r7, #8]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 fab0 	bl	8004f30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	699a      	ldr	r2, [r3, #24]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0208 	orr.w	r2, r2, #8
 80049de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	699a      	ldr	r2, [r3, #24]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f022 0204 	bic.w	r2, r2, #4
 80049ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6999      	ldr	r1, [r3, #24]
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	691a      	ldr	r2, [r3, #16]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	619a      	str	r2, [r3, #24]
      break;
 8004a02:	e0a5      	b.n	8004b50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68b9      	ldr	r1, [r7, #8]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 fb2a 	bl	8005064 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	699a      	ldr	r2, [r3, #24]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	699a      	ldr	r2, [r3, #24]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	6999      	ldr	r1, [r3, #24]
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	021a      	lsls	r2, r3, #8
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	619a      	str	r2, [r3, #24]
      break;
 8004a44:	e084      	b.n	8004b50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68b9      	ldr	r1, [r7, #8]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f000 fb9d 	bl	800518c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	69da      	ldr	r2, [r3, #28]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f042 0208 	orr.w	r2, r2, #8
 8004a60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	69da      	ldr	r2, [r3, #28]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 0204 	bic.w	r2, r2, #4
 8004a70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	69d9      	ldr	r1, [r3, #28]
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	691a      	ldr	r2, [r3, #16]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	61da      	str	r2, [r3, #28]
      break;
 8004a84:	e064      	b.n	8004b50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68b9      	ldr	r1, [r7, #8]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f000 fc0f 	bl	80052b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	69da      	ldr	r2, [r3, #28]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	69da      	ldr	r2, [r3, #28]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ab0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	69d9      	ldr	r1, [r3, #28]
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	021a      	lsls	r2, r3, #8
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	61da      	str	r2, [r3, #28]
      break;
 8004ac6:	e043      	b.n	8004b50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68b9      	ldr	r1, [r7, #8]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 fc82 	bl	80053d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f042 0208 	orr.w	r2, r2, #8
 8004ae2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 0204 	bic.w	r2, r2, #4
 8004af2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	691a      	ldr	r2, [r3, #16]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004b06:	e023      	b.n	8004b50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68b9      	ldr	r1, [r7, #8]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 fccc 	bl	80054ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b22:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b32:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	021a      	lsls	r2, r3, #8
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004b48:	e002      	b.n	8004b50 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	75fb      	strb	r3, [r7, #23]
      break;
 8004b4e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3718      	adds	r7, #24
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop

08004b64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d101      	bne.n	8004b80 <HAL_TIM_ConfigClockSource+0x1c>
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	e0f6      	b.n	8004d6e <HAL_TIM_ConfigClockSource+0x20a>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004b9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ba2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004baa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a6f      	ldr	r2, [pc, #444]	; (8004d78 <HAL_TIM_ConfigClockSource+0x214>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	f000 80c1 	beq.w	8004d42 <HAL_TIM_ConfigClockSource+0x1de>
 8004bc0:	4a6d      	ldr	r2, [pc, #436]	; (8004d78 <HAL_TIM_ConfigClockSource+0x214>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	f200 80c6 	bhi.w	8004d54 <HAL_TIM_ConfigClockSource+0x1f0>
 8004bc8:	4a6c      	ldr	r2, [pc, #432]	; (8004d7c <HAL_TIM_ConfigClockSource+0x218>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	f000 80b9 	beq.w	8004d42 <HAL_TIM_ConfigClockSource+0x1de>
 8004bd0:	4a6a      	ldr	r2, [pc, #424]	; (8004d7c <HAL_TIM_ConfigClockSource+0x218>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	f200 80be 	bhi.w	8004d54 <HAL_TIM_ConfigClockSource+0x1f0>
 8004bd8:	4a69      	ldr	r2, [pc, #420]	; (8004d80 <HAL_TIM_ConfigClockSource+0x21c>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	f000 80b1 	beq.w	8004d42 <HAL_TIM_ConfigClockSource+0x1de>
 8004be0:	4a67      	ldr	r2, [pc, #412]	; (8004d80 <HAL_TIM_ConfigClockSource+0x21c>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	f200 80b6 	bhi.w	8004d54 <HAL_TIM_ConfigClockSource+0x1f0>
 8004be8:	4a66      	ldr	r2, [pc, #408]	; (8004d84 <HAL_TIM_ConfigClockSource+0x220>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	f000 80a9 	beq.w	8004d42 <HAL_TIM_ConfigClockSource+0x1de>
 8004bf0:	4a64      	ldr	r2, [pc, #400]	; (8004d84 <HAL_TIM_ConfigClockSource+0x220>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	f200 80ae 	bhi.w	8004d54 <HAL_TIM_ConfigClockSource+0x1f0>
 8004bf8:	4a63      	ldr	r2, [pc, #396]	; (8004d88 <HAL_TIM_ConfigClockSource+0x224>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	f000 80a1 	beq.w	8004d42 <HAL_TIM_ConfigClockSource+0x1de>
 8004c00:	4a61      	ldr	r2, [pc, #388]	; (8004d88 <HAL_TIM_ConfigClockSource+0x224>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	f200 80a6 	bhi.w	8004d54 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c08:	4a60      	ldr	r2, [pc, #384]	; (8004d8c <HAL_TIM_ConfigClockSource+0x228>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	f000 8099 	beq.w	8004d42 <HAL_TIM_ConfigClockSource+0x1de>
 8004c10:	4a5e      	ldr	r2, [pc, #376]	; (8004d8c <HAL_TIM_ConfigClockSource+0x228>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	f200 809e 	bhi.w	8004d54 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c18:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004c1c:	f000 8091 	beq.w	8004d42 <HAL_TIM_ConfigClockSource+0x1de>
 8004c20:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004c24:	f200 8096 	bhi.w	8004d54 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c2c:	f000 8089 	beq.w	8004d42 <HAL_TIM_ConfigClockSource+0x1de>
 8004c30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c34:	f200 808e 	bhi.w	8004d54 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c3c:	d03e      	beq.n	8004cbc <HAL_TIM_ConfigClockSource+0x158>
 8004c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c42:	f200 8087 	bhi.w	8004d54 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c4a:	f000 8086 	beq.w	8004d5a <HAL_TIM_ConfigClockSource+0x1f6>
 8004c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c52:	d87f      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c54:	2b70      	cmp	r3, #112	; 0x70
 8004c56:	d01a      	beq.n	8004c8e <HAL_TIM_ConfigClockSource+0x12a>
 8004c58:	2b70      	cmp	r3, #112	; 0x70
 8004c5a:	d87b      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c5c:	2b60      	cmp	r3, #96	; 0x60
 8004c5e:	d050      	beq.n	8004d02 <HAL_TIM_ConfigClockSource+0x19e>
 8004c60:	2b60      	cmp	r3, #96	; 0x60
 8004c62:	d877      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c64:	2b50      	cmp	r3, #80	; 0x50
 8004c66:	d03c      	beq.n	8004ce2 <HAL_TIM_ConfigClockSource+0x17e>
 8004c68:	2b50      	cmp	r3, #80	; 0x50
 8004c6a:	d873      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c6c:	2b40      	cmp	r3, #64	; 0x40
 8004c6e:	d058      	beq.n	8004d22 <HAL_TIM_ConfigClockSource+0x1be>
 8004c70:	2b40      	cmp	r3, #64	; 0x40
 8004c72:	d86f      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c74:	2b30      	cmp	r3, #48	; 0x30
 8004c76:	d064      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0x1de>
 8004c78:	2b30      	cmp	r3, #48	; 0x30
 8004c7a:	d86b      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c7c:	2b20      	cmp	r3, #32
 8004c7e:	d060      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0x1de>
 8004c80:	2b20      	cmp	r3, #32
 8004c82:	d867      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d05c      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0x1de>
 8004c88:	2b10      	cmp	r3, #16
 8004c8a:	d05a      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0x1de>
 8004c8c:	e062      	b.n	8004d54 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6818      	ldr	r0, [r3, #0]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	6899      	ldr	r1, [r3, #8]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f000 fd61 	bl	8005764 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	609a      	str	r2, [r3, #8]
      break;
 8004cba:	e04f      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6818      	ldr	r0, [r3, #0]
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	6899      	ldr	r1, [r3, #8]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f000 fd4a 	bl	8005764 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689a      	ldr	r2, [r3, #8]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cde:	609a      	str	r2, [r3, #8]
      break;
 8004ce0:	e03c      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6818      	ldr	r0, [r3, #0]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	6859      	ldr	r1, [r3, #4]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	f000 fcbc 	bl	800566c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2150      	movs	r1, #80	; 0x50
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 fd15 	bl	800572a <TIM_ITRx_SetConfig>
      break;
 8004d00:	e02c      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6818      	ldr	r0, [r3, #0]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	6859      	ldr	r1, [r3, #4]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	f000 fcdb 	bl	80056ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2160      	movs	r1, #96	; 0x60
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 fd05 	bl	800572a <TIM_ITRx_SetConfig>
      break;
 8004d20:	e01c      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6818      	ldr	r0, [r3, #0]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	6859      	ldr	r1, [r3, #4]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	f000 fc9c 	bl	800566c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2140      	movs	r1, #64	; 0x40
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 fcf5 	bl	800572a <TIM_ITRx_SetConfig>
      break;
 8004d40:	e00c      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	f000 fcec 	bl	800572a <TIM_ITRx_SetConfig>
      break;
 8004d52:	e003      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	73fb      	strb	r3, [r7, #15]
      break;
 8004d58:	e000      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004d5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	00100070 	.word	0x00100070
 8004d7c:	00100060 	.word	0x00100060
 8004d80:	00100050 	.word	0x00100050
 8004d84:	00100040 	.word	0x00100040
 8004d88:	00100030 	.word	0x00100030
 8004d8c:	00100020 	.word	0x00100020

08004d90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a46      	ldr	r2, [pc, #280]	; (8004f0c <TIM_Base_SetConfig+0x12c>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d017      	beq.n	8004e28 <TIM_Base_SetConfig+0x48>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dfe:	d013      	beq.n	8004e28 <TIM_Base_SetConfig+0x48>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a43      	ldr	r2, [pc, #268]	; (8004f10 <TIM_Base_SetConfig+0x130>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d00f      	beq.n	8004e28 <TIM_Base_SetConfig+0x48>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a42      	ldr	r2, [pc, #264]	; (8004f14 <TIM_Base_SetConfig+0x134>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d00b      	beq.n	8004e28 <TIM_Base_SetConfig+0x48>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a41      	ldr	r2, [pc, #260]	; (8004f18 <TIM_Base_SetConfig+0x138>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d007      	beq.n	8004e28 <TIM_Base_SetConfig+0x48>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a40      	ldr	r2, [pc, #256]	; (8004f1c <TIM_Base_SetConfig+0x13c>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d003      	beq.n	8004e28 <TIM_Base_SetConfig+0x48>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a3f      	ldr	r2, [pc, #252]	; (8004f20 <TIM_Base_SetConfig+0x140>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d108      	bne.n	8004e3a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a33      	ldr	r2, [pc, #204]	; (8004f0c <TIM_Base_SetConfig+0x12c>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d023      	beq.n	8004e8a <TIM_Base_SetConfig+0xaa>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e48:	d01f      	beq.n	8004e8a <TIM_Base_SetConfig+0xaa>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a30      	ldr	r2, [pc, #192]	; (8004f10 <TIM_Base_SetConfig+0x130>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d01b      	beq.n	8004e8a <TIM_Base_SetConfig+0xaa>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a2f      	ldr	r2, [pc, #188]	; (8004f14 <TIM_Base_SetConfig+0x134>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d017      	beq.n	8004e8a <TIM_Base_SetConfig+0xaa>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a2e      	ldr	r2, [pc, #184]	; (8004f18 <TIM_Base_SetConfig+0x138>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d013      	beq.n	8004e8a <TIM_Base_SetConfig+0xaa>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a2d      	ldr	r2, [pc, #180]	; (8004f1c <TIM_Base_SetConfig+0x13c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d00f      	beq.n	8004e8a <TIM_Base_SetConfig+0xaa>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a2d      	ldr	r2, [pc, #180]	; (8004f24 <TIM_Base_SetConfig+0x144>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d00b      	beq.n	8004e8a <TIM_Base_SetConfig+0xaa>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a2c      	ldr	r2, [pc, #176]	; (8004f28 <TIM_Base_SetConfig+0x148>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d007      	beq.n	8004e8a <TIM_Base_SetConfig+0xaa>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a2b      	ldr	r2, [pc, #172]	; (8004f2c <TIM_Base_SetConfig+0x14c>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d003      	beq.n	8004e8a <TIM_Base_SetConfig+0xaa>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a26      	ldr	r2, [pc, #152]	; (8004f20 <TIM_Base_SetConfig+0x140>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d108      	bne.n	8004e9c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	689a      	ldr	r2, [r3, #8]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a12      	ldr	r2, [pc, #72]	; (8004f0c <TIM_Base_SetConfig+0x12c>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d013      	beq.n	8004ef0 <TIM_Base_SetConfig+0x110>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a14      	ldr	r2, [pc, #80]	; (8004f1c <TIM_Base_SetConfig+0x13c>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d00f      	beq.n	8004ef0 <TIM_Base_SetConfig+0x110>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a14      	ldr	r2, [pc, #80]	; (8004f24 <TIM_Base_SetConfig+0x144>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d00b      	beq.n	8004ef0 <TIM_Base_SetConfig+0x110>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a13      	ldr	r2, [pc, #76]	; (8004f28 <TIM_Base_SetConfig+0x148>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d007      	beq.n	8004ef0 <TIM_Base_SetConfig+0x110>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a12      	ldr	r2, [pc, #72]	; (8004f2c <TIM_Base_SetConfig+0x14c>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d003      	beq.n	8004ef0 <TIM_Base_SetConfig+0x110>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a0d      	ldr	r2, [pc, #52]	; (8004f20 <TIM_Base_SetConfig+0x140>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d103      	bne.n	8004ef8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	691a      	ldr	r2, [r3, #16]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	615a      	str	r2, [r3, #20]
}
 8004efe:	bf00      	nop
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	40012c00 	.word	0x40012c00
 8004f10:	40000400 	.word	0x40000400
 8004f14:	40000800 	.word	0x40000800
 8004f18:	40000c00 	.word	0x40000c00
 8004f1c:	40013400 	.word	0x40013400
 8004f20:	40015000 	.word	0x40015000
 8004f24:	40014000 	.word	0x40014000
 8004f28:	40014400 	.word	0x40014400
 8004f2c:	40014800 	.word	0x40014800

08004f30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	f023 0201 	bic.w	r2, r3, #1
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f023 0303 	bic.w	r3, r3, #3
 8004f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f023 0302 	bic.w	r3, r3, #2
 8004f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a30      	ldr	r2, [pc, #192]	; (800504c <TIM_OC1_SetConfig+0x11c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d013      	beq.n	8004fb8 <TIM_OC1_SetConfig+0x88>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a2f      	ldr	r2, [pc, #188]	; (8005050 <TIM_OC1_SetConfig+0x120>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d00f      	beq.n	8004fb8 <TIM_OC1_SetConfig+0x88>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a2e      	ldr	r2, [pc, #184]	; (8005054 <TIM_OC1_SetConfig+0x124>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d00b      	beq.n	8004fb8 <TIM_OC1_SetConfig+0x88>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a2d      	ldr	r2, [pc, #180]	; (8005058 <TIM_OC1_SetConfig+0x128>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d007      	beq.n	8004fb8 <TIM_OC1_SetConfig+0x88>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a2c      	ldr	r2, [pc, #176]	; (800505c <TIM_OC1_SetConfig+0x12c>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d003      	beq.n	8004fb8 <TIM_OC1_SetConfig+0x88>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a2b      	ldr	r2, [pc, #172]	; (8005060 <TIM_OC1_SetConfig+0x130>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d10c      	bne.n	8004fd2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f023 0308 	bic.w	r3, r3, #8
 8004fbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f023 0304 	bic.w	r3, r3, #4
 8004fd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a1d      	ldr	r2, [pc, #116]	; (800504c <TIM_OC1_SetConfig+0x11c>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d013      	beq.n	8005002 <TIM_OC1_SetConfig+0xd2>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a1c      	ldr	r2, [pc, #112]	; (8005050 <TIM_OC1_SetConfig+0x120>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d00f      	beq.n	8005002 <TIM_OC1_SetConfig+0xd2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a1b      	ldr	r2, [pc, #108]	; (8005054 <TIM_OC1_SetConfig+0x124>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d00b      	beq.n	8005002 <TIM_OC1_SetConfig+0xd2>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a1a      	ldr	r2, [pc, #104]	; (8005058 <TIM_OC1_SetConfig+0x128>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d007      	beq.n	8005002 <TIM_OC1_SetConfig+0xd2>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a19      	ldr	r2, [pc, #100]	; (800505c <TIM_OC1_SetConfig+0x12c>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d003      	beq.n	8005002 <TIM_OC1_SetConfig+0xd2>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a18      	ldr	r2, [pc, #96]	; (8005060 <TIM_OC1_SetConfig+0x130>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d111      	bne.n	8005026 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	4313      	orrs	r3, r2
 800501a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	4313      	orrs	r3, r2
 8005024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	621a      	str	r2, [r3, #32]
}
 8005040:	bf00      	nop
 8005042:	371c      	adds	r7, #28
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	40012c00 	.word	0x40012c00
 8005050:	40013400 	.word	0x40013400
 8005054:	40014000 	.word	0x40014000
 8005058:	40014400 	.word	0x40014400
 800505c:	40014800 	.word	0x40014800
 8005060:	40015000 	.word	0x40015000

08005064 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005064:	b480      	push	{r7}
 8005066:	b087      	sub	sp, #28
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	f023 0210 	bic.w	r2, r3, #16
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800509e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	021b      	lsls	r3, r3, #8
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f023 0320 	bic.w	r3, r3, #32
 80050b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	011b      	lsls	r3, r3, #4
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	4313      	orrs	r3, r2
 80050be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a2c      	ldr	r2, [pc, #176]	; (8005174 <TIM_OC2_SetConfig+0x110>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d007      	beq.n	80050d8 <TIM_OC2_SetConfig+0x74>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a2b      	ldr	r2, [pc, #172]	; (8005178 <TIM_OC2_SetConfig+0x114>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d003      	beq.n	80050d8 <TIM_OC2_SetConfig+0x74>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a2a      	ldr	r2, [pc, #168]	; (800517c <TIM_OC2_SetConfig+0x118>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d10d      	bne.n	80050f4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	011b      	lsls	r3, r3, #4
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a1f      	ldr	r2, [pc, #124]	; (8005174 <TIM_OC2_SetConfig+0x110>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d013      	beq.n	8005124 <TIM_OC2_SetConfig+0xc0>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a1e      	ldr	r2, [pc, #120]	; (8005178 <TIM_OC2_SetConfig+0x114>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d00f      	beq.n	8005124 <TIM_OC2_SetConfig+0xc0>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a1e      	ldr	r2, [pc, #120]	; (8005180 <TIM_OC2_SetConfig+0x11c>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d00b      	beq.n	8005124 <TIM_OC2_SetConfig+0xc0>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a1d      	ldr	r2, [pc, #116]	; (8005184 <TIM_OC2_SetConfig+0x120>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d007      	beq.n	8005124 <TIM_OC2_SetConfig+0xc0>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a1c      	ldr	r2, [pc, #112]	; (8005188 <TIM_OC2_SetConfig+0x124>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d003      	beq.n	8005124 <TIM_OC2_SetConfig+0xc0>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a17      	ldr	r2, [pc, #92]	; (800517c <TIM_OC2_SetConfig+0x118>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d113      	bne.n	800514c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800512a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005132:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	4313      	orrs	r3, r2
 800513e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	4313      	orrs	r3, r2
 800514a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	621a      	str	r2, [r3, #32]
}
 8005166:	bf00      	nop
 8005168:	371c      	adds	r7, #28
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	40012c00 	.word	0x40012c00
 8005178:	40013400 	.word	0x40013400
 800517c:	40015000 	.word	0x40015000
 8005180:	40014000 	.word	0x40014000
 8005184:	40014400 	.word	0x40014400
 8005188:	40014800 	.word	0x40014800

0800518c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800518c:	b480      	push	{r7}
 800518e:	b087      	sub	sp, #28
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f023 0303 	bic.w	r3, r3, #3
 80051c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	021b      	lsls	r3, r3, #8
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a2b      	ldr	r2, [pc, #172]	; (8005298 <TIM_OC3_SetConfig+0x10c>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d007      	beq.n	80051fe <TIM_OC3_SetConfig+0x72>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a2a      	ldr	r2, [pc, #168]	; (800529c <TIM_OC3_SetConfig+0x110>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d003      	beq.n	80051fe <TIM_OC3_SetConfig+0x72>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a29      	ldr	r2, [pc, #164]	; (80052a0 <TIM_OC3_SetConfig+0x114>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d10d      	bne.n	800521a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005204:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	021b      	lsls	r3, r3, #8
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	4313      	orrs	r3, r2
 8005210:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005218:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a1e      	ldr	r2, [pc, #120]	; (8005298 <TIM_OC3_SetConfig+0x10c>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d013      	beq.n	800524a <TIM_OC3_SetConfig+0xbe>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a1d      	ldr	r2, [pc, #116]	; (800529c <TIM_OC3_SetConfig+0x110>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d00f      	beq.n	800524a <TIM_OC3_SetConfig+0xbe>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a1d      	ldr	r2, [pc, #116]	; (80052a4 <TIM_OC3_SetConfig+0x118>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d00b      	beq.n	800524a <TIM_OC3_SetConfig+0xbe>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a1c      	ldr	r2, [pc, #112]	; (80052a8 <TIM_OC3_SetConfig+0x11c>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d007      	beq.n	800524a <TIM_OC3_SetConfig+0xbe>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a1b      	ldr	r2, [pc, #108]	; (80052ac <TIM_OC3_SetConfig+0x120>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d003      	beq.n	800524a <TIM_OC3_SetConfig+0xbe>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a16      	ldr	r2, [pc, #88]	; (80052a0 <TIM_OC3_SetConfig+0x114>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d113      	bne.n	8005272 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005250:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005258:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	011b      	lsls	r3, r3, #4
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	4313      	orrs	r3, r2
 8005264:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	011b      	lsls	r3, r3, #4
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	4313      	orrs	r3, r2
 8005270:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	621a      	str	r2, [r3, #32]
}
 800528c:	bf00      	nop
 800528e:	371c      	adds	r7, #28
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	40012c00 	.word	0x40012c00
 800529c:	40013400 	.word	0x40013400
 80052a0:	40015000 	.word	0x40015000
 80052a4:	40014000 	.word	0x40014000
 80052a8:	40014400 	.word	0x40014400
 80052ac:	40014800 	.word	0x40014800

080052b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b087      	sub	sp, #28
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	021b      	lsls	r3, r3, #8
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	031b      	lsls	r3, r3, #12
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	4313      	orrs	r3, r2
 800530a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a2c      	ldr	r2, [pc, #176]	; (80053c0 <TIM_OC4_SetConfig+0x110>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d007      	beq.n	8005324 <TIM_OC4_SetConfig+0x74>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a2b      	ldr	r2, [pc, #172]	; (80053c4 <TIM_OC4_SetConfig+0x114>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d003      	beq.n	8005324 <TIM_OC4_SetConfig+0x74>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a2a      	ldr	r2, [pc, #168]	; (80053c8 <TIM_OC4_SetConfig+0x118>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d10d      	bne.n	8005340 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800532a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	031b      	lsls	r3, r3, #12
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	4313      	orrs	r3, r2
 8005336:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800533e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a1f      	ldr	r2, [pc, #124]	; (80053c0 <TIM_OC4_SetConfig+0x110>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d013      	beq.n	8005370 <TIM_OC4_SetConfig+0xc0>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a1e      	ldr	r2, [pc, #120]	; (80053c4 <TIM_OC4_SetConfig+0x114>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d00f      	beq.n	8005370 <TIM_OC4_SetConfig+0xc0>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a1e      	ldr	r2, [pc, #120]	; (80053cc <TIM_OC4_SetConfig+0x11c>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d00b      	beq.n	8005370 <TIM_OC4_SetConfig+0xc0>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a1d      	ldr	r2, [pc, #116]	; (80053d0 <TIM_OC4_SetConfig+0x120>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d007      	beq.n	8005370 <TIM_OC4_SetConfig+0xc0>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a1c      	ldr	r2, [pc, #112]	; (80053d4 <TIM_OC4_SetConfig+0x124>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d003      	beq.n	8005370 <TIM_OC4_SetConfig+0xc0>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a17      	ldr	r2, [pc, #92]	; (80053c8 <TIM_OC4_SetConfig+0x118>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d113      	bne.n	8005398 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005376:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800537e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	019b      	lsls	r3, r3, #6
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	4313      	orrs	r3, r2
 800538a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	019b      	lsls	r3, r3, #6
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	4313      	orrs	r3, r2
 8005396:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	621a      	str	r2, [r3, #32]
}
 80053b2:	bf00      	nop
 80053b4:	371c      	adds	r7, #28
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	40012c00 	.word	0x40012c00
 80053c4:	40013400 	.word	0x40013400
 80053c8:	40015000 	.word	0x40015000
 80053cc:	40014000 	.word	0x40014000
 80053d0:	40014400 	.word	0x40014400
 80053d4:	40014800 	.word	0x40014800

080053d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80053d8:	b480      	push	{r7}
 80053da:	b087      	sub	sp, #28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	4313      	orrs	r3, r2
 8005414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800541c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	041b      	lsls	r3, r3, #16
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	4313      	orrs	r3, r2
 8005428:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a19      	ldr	r2, [pc, #100]	; (8005494 <TIM_OC5_SetConfig+0xbc>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d013      	beq.n	800545a <TIM_OC5_SetConfig+0x82>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a18      	ldr	r2, [pc, #96]	; (8005498 <TIM_OC5_SetConfig+0xc0>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d00f      	beq.n	800545a <TIM_OC5_SetConfig+0x82>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a17      	ldr	r2, [pc, #92]	; (800549c <TIM_OC5_SetConfig+0xc4>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d00b      	beq.n	800545a <TIM_OC5_SetConfig+0x82>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a16      	ldr	r2, [pc, #88]	; (80054a0 <TIM_OC5_SetConfig+0xc8>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d007      	beq.n	800545a <TIM_OC5_SetConfig+0x82>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a15      	ldr	r2, [pc, #84]	; (80054a4 <TIM_OC5_SetConfig+0xcc>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d003      	beq.n	800545a <TIM_OC5_SetConfig+0x82>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a14      	ldr	r2, [pc, #80]	; (80054a8 <TIM_OC5_SetConfig+0xd0>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d109      	bne.n	800546e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005460:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	021b      	lsls	r3, r3, #8
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	4313      	orrs	r3, r2
 800546c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	685a      	ldr	r2, [r3, #4]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	621a      	str	r2, [r3, #32]
}
 8005488:	bf00      	nop
 800548a:	371c      	adds	r7, #28
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	40012c00 	.word	0x40012c00
 8005498:	40013400 	.word	0x40013400
 800549c:	40014000 	.word	0x40014000
 80054a0:	40014400 	.word	0x40014400
 80054a4:	40014800 	.word	0x40014800
 80054a8:	40015000 	.word	0x40015000

080054ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b087      	sub	sp, #28
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	021b      	lsls	r3, r3, #8
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	051b      	lsls	r3, r3, #20
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a1a      	ldr	r2, [pc, #104]	; (800556c <TIM_OC6_SetConfig+0xc0>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d013      	beq.n	8005530 <TIM_OC6_SetConfig+0x84>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a19      	ldr	r2, [pc, #100]	; (8005570 <TIM_OC6_SetConfig+0xc4>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d00f      	beq.n	8005530 <TIM_OC6_SetConfig+0x84>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a18      	ldr	r2, [pc, #96]	; (8005574 <TIM_OC6_SetConfig+0xc8>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d00b      	beq.n	8005530 <TIM_OC6_SetConfig+0x84>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a17      	ldr	r2, [pc, #92]	; (8005578 <TIM_OC6_SetConfig+0xcc>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d007      	beq.n	8005530 <TIM_OC6_SetConfig+0x84>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a16      	ldr	r2, [pc, #88]	; (800557c <TIM_OC6_SetConfig+0xd0>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d003      	beq.n	8005530 <TIM_OC6_SetConfig+0x84>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a15      	ldr	r2, [pc, #84]	; (8005580 <TIM_OC6_SetConfig+0xd4>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d109      	bne.n	8005544 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005536:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	029b      	lsls	r3, r3, #10
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	4313      	orrs	r3, r2
 8005542:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	621a      	str	r2, [r3, #32]
}
 800555e:	bf00      	nop
 8005560:	371c      	adds	r7, #28
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	40012c00 	.word	0x40012c00
 8005570:	40013400 	.word	0x40013400
 8005574:	40014000 	.word	0x40014000
 8005578:	40014400 	.word	0x40014400
 800557c:	40014800 	.word	0x40014800
 8005580:	40015000 	.word	0x40015000

08005584 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005584:	b480      	push	{r7}
 8005586:	b087      	sub	sp, #28
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
 8005590:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	f023 0201 	bic.w	r2, r3, #1
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4a28      	ldr	r2, [pc, #160]	; (8005650 <TIM_TI1_SetConfig+0xcc>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d01b      	beq.n	80055ea <TIM_TI1_SetConfig+0x66>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055b8:	d017      	beq.n	80055ea <TIM_TI1_SetConfig+0x66>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	4a25      	ldr	r2, [pc, #148]	; (8005654 <TIM_TI1_SetConfig+0xd0>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d013      	beq.n	80055ea <TIM_TI1_SetConfig+0x66>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4a24      	ldr	r2, [pc, #144]	; (8005658 <TIM_TI1_SetConfig+0xd4>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d00f      	beq.n	80055ea <TIM_TI1_SetConfig+0x66>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	4a23      	ldr	r2, [pc, #140]	; (800565c <TIM_TI1_SetConfig+0xd8>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d00b      	beq.n	80055ea <TIM_TI1_SetConfig+0x66>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	4a22      	ldr	r2, [pc, #136]	; (8005660 <TIM_TI1_SetConfig+0xdc>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d007      	beq.n	80055ea <TIM_TI1_SetConfig+0x66>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	4a21      	ldr	r2, [pc, #132]	; (8005664 <TIM_TI1_SetConfig+0xe0>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d003      	beq.n	80055ea <TIM_TI1_SetConfig+0x66>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	4a20      	ldr	r2, [pc, #128]	; (8005668 <TIM_TI1_SetConfig+0xe4>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d101      	bne.n	80055ee <TIM_TI1_SetConfig+0x6a>
 80055ea:	2301      	movs	r3, #1
 80055ec:	e000      	b.n	80055f0 <TIM_TI1_SetConfig+0x6c>
 80055ee:	2300      	movs	r3, #0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d008      	beq.n	8005606 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f023 0303 	bic.w	r3, r3, #3
 80055fa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4313      	orrs	r3, r2
 8005602:	617b      	str	r3, [r7, #20]
 8005604:	e003      	b.n	800560e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f043 0301 	orr.w	r3, r3, #1
 800560c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005614:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	011b      	lsls	r3, r3, #4
 800561a:	b2db      	uxtb	r3, r3
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	4313      	orrs	r3, r2
 8005620:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	f023 030a 	bic.w	r3, r3, #10
 8005628:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	f003 030a 	and.w	r3, r3, #10
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	4313      	orrs	r3, r2
 8005634:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	621a      	str	r2, [r3, #32]
}
 8005642:	bf00      	nop
 8005644:	371c      	adds	r7, #28
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	40012c00 	.word	0x40012c00
 8005654:	40000400 	.word	0x40000400
 8005658:	40000800 	.word	0x40000800
 800565c:	40000c00 	.word	0x40000c00
 8005660:	40013400 	.word	0x40013400
 8005664:	40014000 	.word	0x40014000
 8005668:	40015000 	.word	0x40015000

0800566c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800566c:	b480      	push	{r7}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6a1b      	ldr	r3, [r3, #32]
 800567c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	f023 0201 	bic.w	r2, r3, #1
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005696:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	011b      	lsls	r3, r3, #4
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	4313      	orrs	r3, r2
 80056a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f023 030a 	bic.w	r3, r3, #10
 80056a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	621a      	str	r2, [r3, #32]
}
 80056be:	bf00      	nop
 80056c0:	371c      	adds	r7, #28
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b087      	sub	sp, #28
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	60f8      	str	r0, [r7, #12]
 80056d2:	60b9      	str	r1, [r7, #8]
 80056d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	f023 0210 	bic.w	r2, r3, #16
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6a1b      	ldr	r3, [r3, #32]
 80056ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	031b      	lsls	r3, r3, #12
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005706:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	011b      	lsls	r3, r3, #4
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	4313      	orrs	r3, r2
 8005710:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	621a      	str	r2, [r3, #32]
}
 800571e:	bf00      	nop
 8005720:	371c      	adds	r7, #28
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800572a:	b480      	push	{r7}
 800572c:	b085      	sub	sp, #20
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
 8005732:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005744:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	4313      	orrs	r3, r2
 800574c:	f043 0307 	orr.w	r3, r3, #7
 8005750:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	609a      	str	r2, [r3, #8]
}
 8005758:	bf00      	nop
 800575a:	3714      	adds	r7, #20
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005764:	b480      	push	{r7}
 8005766:	b087      	sub	sp, #28
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
 8005770:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800577e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	021a      	lsls	r2, r3, #8
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	431a      	orrs	r2, r3
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	4313      	orrs	r3, r2
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	4313      	orrs	r3, r2
 8005790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	609a      	str	r2, [r3, #8]
}
 8005798:	bf00      	nop
 800579a:	371c      	adds	r7, #28
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b087      	sub	sp, #28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	f003 031f 	and.w	r3, r3, #31
 80057b6:	2201      	movs	r2, #1
 80057b8:	fa02 f303 	lsl.w	r3, r2, r3
 80057bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6a1a      	ldr	r2, [r3, #32]
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	43db      	mvns	r3, r3
 80057c6:	401a      	ands	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6a1a      	ldr	r2, [r3, #32]
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	f003 031f 	and.w	r3, r3, #31
 80057d6:	6879      	ldr	r1, [r7, #4]
 80057d8:	fa01 f303 	lsl.w	r3, r1, r3
 80057dc:	431a      	orrs	r2, r3
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	621a      	str	r2, [r3, #32]
}
 80057e2:	bf00      	nop
 80057e4:	371c      	adds	r7, #28
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b08a      	sub	sp, #40	; 0x28
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
 80057f6:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e0a0      	b.n	8005944 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	d106      	bne.n	800581c <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f7fb fd9a 	bl	8001350 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2202      	movs	r2, #2
 8005820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	3304      	adds	r3, #4
 800582c:	4619      	mov	r1, r3
 800582e:	4610      	mov	r0, r2
 8005830:	f7ff fad6 	bl	8004de0 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6818      	ldr	r0, [r3, #0]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	6819      	ldr	r1, [r3, #0]
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	2203      	movs	r2, #3
 8005842:	f7ff fe9f 	bl	8005584 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	699a      	ldr	r2, [r3, #24]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f022 020c 	bic.w	r2, r2, #12
 8005854:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6999      	ldr	r1, [r3, #24]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	430a      	orrs	r2, r1
 8005866:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005876:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	6812      	ldr	r2, [r2, #0]
 8005882:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800588a:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	689a      	ldr	r2, [r3, #8]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800589a:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	6812      	ldr	r2, [r2, #0]
 80058a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058aa:	f023 0307 	bic.w	r3, r3, #7
 80058ae:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689a      	ldr	r2, [r3, #8]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0204 	orr.w	r2, r2, #4
 80058be:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 80058c0:	2300      	movs	r3, #0
 80058c2:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 80058c4:	2300      	movs	r3, #0
 80058c6:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80058c8:	2370      	movs	r3, #112	; 0x70
 80058ca:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80058cc:	2300      	movs	r3, #0
 80058ce:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80058d0:	2300      	movs	r3, #0
 80058d2:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80058d4:	2300      	movs	r3, #0
 80058d6:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f107 020c 	add.w	r2, r7, #12
 80058e6:	4611      	mov	r1, r2
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7ff fbbb 	bl	8005064 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	6812      	ldr	r2, [r2, #0]
 80058f8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80058fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005900:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	685a      	ldr	r2, [r3, #4]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8005910:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3728      	adds	r7, #40	; 0x28
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d109      	bne.n	8005970 <HAL_TIMEx_PWMN_Start+0x24>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b01      	cmp	r3, #1
 8005966:	bf14      	ite	ne
 8005968:	2301      	movne	r3, #1
 800596a:	2300      	moveq	r3, #0
 800596c:	b2db      	uxtb	r3, r3
 800596e:	e022      	b.n	80059b6 <HAL_TIMEx_PWMN_Start+0x6a>
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	2b04      	cmp	r3, #4
 8005974:	d109      	bne.n	800598a <HAL_TIMEx_PWMN_Start+0x3e>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b01      	cmp	r3, #1
 8005980:	bf14      	ite	ne
 8005982:	2301      	movne	r3, #1
 8005984:	2300      	moveq	r3, #0
 8005986:	b2db      	uxtb	r3, r3
 8005988:	e015      	b.n	80059b6 <HAL_TIMEx_PWMN_Start+0x6a>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	2b08      	cmp	r3, #8
 800598e:	d109      	bne.n	80059a4 <HAL_TIMEx_PWMN_Start+0x58>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b01      	cmp	r3, #1
 800599a:	bf14      	ite	ne
 800599c:	2301      	movne	r3, #1
 800599e:	2300      	moveq	r3, #0
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	e008      	b.n	80059b6 <HAL_TIMEx_PWMN_Start+0x6a>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	bf14      	ite	ne
 80059b0:	2301      	movne	r3, #1
 80059b2:	2300      	moveq	r3, #0
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e073      	b.n	8005aa6 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d104      	bne.n	80059ce <HAL_TIMEx_PWMN_Start+0x82>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2202      	movs	r2, #2
 80059c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059cc:	e013      	b.n	80059f6 <HAL_TIMEx_PWMN_Start+0xaa>
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b04      	cmp	r3, #4
 80059d2:	d104      	bne.n	80059de <HAL_TIMEx_PWMN_Start+0x92>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2202      	movs	r2, #2
 80059d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059dc:	e00b      	b.n	80059f6 <HAL_TIMEx_PWMN_Start+0xaa>
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2b08      	cmp	r3, #8
 80059e2:	d104      	bne.n	80059ee <HAL_TIMEx_PWMN_Start+0xa2>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2202      	movs	r2, #2
 80059e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059ec:	e003      	b.n	80059f6 <HAL_TIMEx_PWMN_Start+0xaa>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2202      	movs	r2, #2
 80059f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2204      	movs	r2, #4
 80059fc:	6839      	ldr	r1, [r7, #0]
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 fa07 	bl	8005e12 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a12:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a25      	ldr	r2, [pc, #148]	; (8005ab0 <HAL_TIMEx_PWMN_Start+0x164>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d022      	beq.n	8005a64 <HAL_TIMEx_PWMN_Start+0x118>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a26:	d01d      	beq.n	8005a64 <HAL_TIMEx_PWMN_Start+0x118>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a21      	ldr	r2, [pc, #132]	; (8005ab4 <HAL_TIMEx_PWMN_Start+0x168>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d018      	beq.n	8005a64 <HAL_TIMEx_PWMN_Start+0x118>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a20      	ldr	r2, [pc, #128]	; (8005ab8 <HAL_TIMEx_PWMN_Start+0x16c>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d013      	beq.n	8005a64 <HAL_TIMEx_PWMN_Start+0x118>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a1e      	ldr	r2, [pc, #120]	; (8005abc <HAL_TIMEx_PWMN_Start+0x170>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d00e      	beq.n	8005a64 <HAL_TIMEx_PWMN_Start+0x118>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a1d      	ldr	r2, [pc, #116]	; (8005ac0 <HAL_TIMEx_PWMN_Start+0x174>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d009      	beq.n	8005a64 <HAL_TIMEx_PWMN_Start+0x118>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a1b      	ldr	r2, [pc, #108]	; (8005ac4 <HAL_TIMEx_PWMN_Start+0x178>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d004      	beq.n	8005a64 <HAL_TIMEx_PWMN_Start+0x118>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a1a      	ldr	r2, [pc, #104]	; (8005ac8 <HAL_TIMEx_PWMN_Start+0x17c>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d115      	bne.n	8005a90 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689a      	ldr	r2, [r3, #8]
 8005a6a:	4b18      	ldr	r3, [pc, #96]	; (8005acc <HAL_TIMEx_PWMN_Start+0x180>)
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2b06      	cmp	r3, #6
 8005a74:	d015      	beq.n	8005aa2 <HAL_TIMEx_PWMN_Start+0x156>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a7c:	d011      	beq.n	8005aa2 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f042 0201 	orr.w	r2, r2, #1
 8005a8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a8e:	e008      	b.n	8005aa2 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f042 0201 	orr.w	r2, r2, #1
 8005a9e:	601a      	str	r2, [r3, #0]
 8005aa0:	e000      	b.n	8005aa4 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aa2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	40012c00 	.word	0x40012c00
 8005ab4:	40000400 	.word	0x40000400
 8005ab8:	40000800 	.word	0x40000800
 8005abc:	40000c00 	.word	0x40000c00
 8005ac0:	40013400 	.word	0x40013400
 8005ac4:	40014000 	.word	0x40014000
 8005ac8:	40015000 	.word	0x40015000
 8005acc:	00010007 	.word	0x00010007

08005ad0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d101      	bne.n	8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	e074      	b.n	8005bd2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2202      	movs	r2, #2
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a34      	ldr	r2, [pc, #208]	; (8005be0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d009      	beq.n	8005b26 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a33      	ldr	r2, [pc, #204]	; (8005be4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d004      	beq.n	8005b26 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a31      	ldr	r2, [pc, #196]	; (8005be8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d108      	bne.n	8005b38 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b2c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a21      	ldr	r2, [pc, #132]	; (8005be0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d022      	beq.n	8005ba6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b68:	d01d      	beq.n	8005ba6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a1f      	ldr	r2, [pc, #124]	; (8005bec <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d018      	beq.n	8005ba6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a1d      	ldr	r2, [pc, #116]	; (8005bf0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d013      	beq.n	8005ba6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a1c      	ldr	r2, [pc, #112]	; (8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d00e      	beq.n	8005ba6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a15      	ldr	r2, [pc, #84]	; (8005be4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d009      	beq.n	8005ba6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a18      	ldr	r2, [pc, #96]	; (8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d004      	beq.n	8005ba6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a11      	ldr	r2, [pc, #68]	; (8005be8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d10c      	bne.n	8005bc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	40012c00 	.word	0x40012c00
 8005be4:	40013400 	.word	0x40013400
 8005be8:	40015000 	.word	0x40015000
 8005bec:	40000400 	.word	0x40000400
 8005bf0:	40000800 	.word	0x40000800
 8005bf4:	40000c00 	.word	0x40000c00
 8005bf8:	40014000 	.word	0x40014000

08005bfc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c06:	2300      	movs	r3, #0
 8005c08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d101      	bne.n	8005c18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c14:	2302      	movs	r3, #2
 8005c16:	e096      	b.n	8005d46 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	041b      	lsls	r3, r3, #16
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a2f      	ldr	r2, [pc, #188]	; (8005d54 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d009      	beq.n	8005cb0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a2d      	ldr	r2, [pc, #180]	; (8005d58 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d004      	beq.n	8005cb0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a2c      	ldr	r2, [pc, #176]	; (8005d5c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d106      	bne.n	8005cbe <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	69db      	ldr	r3, [r3, #28]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a24      	ldr	r2, [pc, #144]	; (8005d54 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d009      	beq.n	8005cdc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a22      	ldr	r2, [pc, #136]	; (8005d58 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d004      	beq.n	8005cdc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a21      	ldr	r2, [pc, #132]	; (8005d5c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d12b      	bne.n	8005d34 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce6:	051b      	lsls	r3, r3, #20
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d04:	4313      	orrs	r3, r2
 8005d06:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a11      	ldr	r2, [pc, #68]	; (8005d54 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d009      	beq.n	8005d26 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a10      	ldr	r2, [pc, #64]	; (8005d58 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d004      	beq.n	8005d26 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a0e      	ldr	r2, [pc, #56]	; (8005d5c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d106      	bne.n	8005d34 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d30:	4313      	orrs	r3, r2
 8005d32:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3714      	adds	r7, #20
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	40012c00 	.word	0x40012c00
 8005d58:	40013400 	.word	0x40013400
 8005d5c:	40015000 	.word	0x40015000

08005d60 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005d76:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b083      	sub	sp, #12
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d8e:	bf00      	nop
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b083      	sub	sp, #12
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005da2:	bf00      	nop
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b083      	sub	sp, #12
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005db6:	bf00      	nop
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b083      	sub	sp, #12
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005dca:	bf00      	nop
 8005dcc:	370c      	adds	r7, #12
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	b083      	sub	sp, #12
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005dde:	bf00      	nop
 8005de0:	370c      	adds	r7, #12
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr

08005dea <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005dea:	b480      	push	{r7}
 8005dec:	b083      	sub	sp, #12
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005df2:	bf00      	nop
 8005df4:	370c      	adds	r7, #12
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b083      	sub	sp, #12
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005e06:	bf00      	nop
 8005e08:	370c      	adds	r7, #12
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005e12:	b480      	push	{r7}
 8005e14:	b087      	sub	sp, #28
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	60f8      	str	r0, [r7, #12]
 8005e1a:	60b9      	str	r1, [r7, #8]
 8005e1c:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	f003 031f 	and.w	r3, r3, #31
 8005e24:	2204      	movs	r2, #4
 8005e26:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6a1a      	ldr	r2, [r3, #32]
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	43db      	mvns	r3, r3
 8005e34:	401a      	ands	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6a1a      	ldr	r2, [r3, #32]
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	f003 031f 	and.w	r3, r3, #31
 8005e44:	6879      	ldr	r1, [r7, #4]
 8005e46:	fa01 f303 	lsl.w	r3, r1, r3
 8005e4a:	431a      	orrs	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	621a      	str	r2, [r3, #32]
}
 8005e50:	bf00      	nop
 8005e52:	371c      	adds	r7, #28
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d101      	bne.n	8005e6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e042      	b.n	8005ef4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d106      	bne.n	8005e86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f7fb fbc7 	bl	8001614 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2224      	movs	r2, #36	; 0x24
 8005e8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f022 0201 	bic.w	r2, r2, #1
 8005e9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 fc50 	bl	8006744 <UART_SetConfig>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d101      	bne.n	8005eae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e022      	b.n	8005ef4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d002      	beq.n	8005ebc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 ff40 	bl	8006d3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005eca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689a      	ldr	r2, [r3, #8]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005eda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f042 0201 	orr.w	r2, r2, #1
 8005eea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 ffc7 	bl	8006e80 <UART_CheckIdleState>
 8005ef2:	4603      	mov	r3, r0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3708      	adds	r7, #8
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b08a      	sub	sp, #40	; 0x28
 8005f00:	af02      	add	r7, sp, #8
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	603b      	str	r3, [r7, #0]
 8005f08:	4613      	mov	r3, r2
 8005f0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f12:	2b20      	cmp	r3, #32
 8005f14:	f040 8083 	bne.w	800601e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d002      	beq.n	8005f24 <HAL_UART_Transmit+0x28>
 8005f1e:	88fb      	ldrh	r3, [r7, #6]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d101      	bne.n	8005f28 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e07b      	b.n	8006020 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d101      	bne.n	8005f36 <HAL_UART_Transmit+0x3a>
 8005f32:	2302      	movs	r3, #2
 8005f34:	e074      	b.n	8006020 <HAL_UART_Transmit+0x124>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2221      	movs	r2, #33	; 0x21
 8005f4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f4e:	f7fb fc55 	bl	80017fc <HAL_GetTick>
 8005f52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	88fa      	ldrh	r2, [r7, #6]
 8005f58:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	88fa      	ldrh	r2, [r7, #6]
 8005f60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f6c:	d108      	bne.n	8005f80 <HAL_UART_Transmit+0x84>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d104      	bne.n	8005f80 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005f76:	2300      	movs	r3, #0
 8005f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	61bb      	str	r3, [r7, #24]
 8005f7e:	e003      	b.n	8005f88 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f84:	2300      	movs	r3, #0
 8005f86:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005f90:	e02c      	b.n	8005fec <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	2180      	movs	r1, #128	; 0x80
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f000 ffba 	bl	8006f16 <UART_WaitOnFlagUntilTimeout>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e039      	b.n	8006020 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10b      	bne.n	8005fca <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fc0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	3302      	adds	r3, #2
 8005fc6:	61bb      	str	r3, [r7, #24]
 8005fc8:	e007      	b.n	8005fda <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	781a      	ldrb	r2, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1cc      	bne.n	8005f92 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	9300      	str	r3, [sp, #0]
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	2200      	movs	r2, #0
 8006000:	2140      	movs	r1, #64	; 0x40
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	f000 ff87 	bl	8006f16 <UART_WaitOnFlagUntilTimeout>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e006      	b.n	8006020 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2220      	movs	r2, #32
 8006016:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800601a:	2300      	movs	r3, #0
 800601c:	e000      	b.n	8006020 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800601e:	2302      	movs	r3, #2
  }
}
 8006020:	4618      	mov	r0, r3
 8006022:	3720      	adds	r7, #32
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b08a      	sub	sp, #40	; 0x28
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	4613      	mov	r3, r2
 8006034:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800603c:	2b20      	cmp	r3, #32
 800603e:	d142      	bne.n	80060c6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d002      	beq.n	800604c <HAL_UART_Receive_IT+0x24>
 8006046:	88fb      	ldrh	r3, [r7, #6]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d101      	bne.n	8006050 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e03b      	b.n	80060c8 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006056:	2b01      	cmp	r3, #1
 8006058:	d101      	bne.n	800605e <HAL_UART_Receive_IT+0x36>
 800605a:	2302      	movs	r3, #2
 800605c:	e034      	b.n	80060c8 <HAL_UART_Receive_IT+0xa0>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2200      	movs	r2, #0
 800606a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a17      	ldr	r2, [pc, #92]	; (80060d0 <HAL_UART_Receive_IT+0xa8>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d01f      	beq.n	80060b6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006080:	2b00      	cmp	r3, #0
 8006082:	d018      	beq.n	80060b6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	e853 3f00 	ldrex	r3, [r3]
 8006090:	613b      	str	r3, [r7, #16]
   return(result);
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006098:	627b      	str	r3, [r7, #36]	; 0x24
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	461a      	mov	r2, r3
 80060a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a2:	623b      	str	r3, [r7, #32]
 80060a4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a6:	69f9      	ldr	r1, [r7, #28]
 80060a8:	6a3a      	ldr	r2, [r7, #32]
 80060aa:	e841 2300 	strex	r3, r2, [r1]
 80060ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1e6      	bne.n	8006084 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80060b6:	88fb      	ldrh	r3, [r7, #6]
 80060b8:	461a      	mov	r2, r3
 80060ba:	68b9      	ldr	r1, [r7, #8]
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f000 fff3 	bl	80070a8 <UART_Start_Receive_IT>
 80060c2:	4603      	mov	r3, r0
 80060c4:	e000      	b.n	80060c8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80060c6:	2302      	movs	r3, #2
  }
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3728      	adds	r7, #40	; 0x28
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	40008000 	.word	0x40008000

080060d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b0ba      	sub	sp, #232	; 0xe8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	69db      	ldr	r3, [r3, #28]
 80060e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80060fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80060fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8006102:	4013      	ands	r3, r2
 8006104:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006108:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800610c:	2b00      	cmp	r3, #0
 800610e:	d11b      	bne.n	8006148 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006114:	f003 0320 	and.w	r3, r3, #32
 8006118:	2b00      	cmp	r3, #0
 800611a:	d015      	beq.n	8006148 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800611c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006120:	f003 0320 	and.w	r3, r3, #32
 8006124:	2b00      	cmp	r3, #0
 8006126:	d105      	bne.n	8006134 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006128:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800612c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d009      	beq.n	8006148 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006138:	2b00      	cmp	r3, #0
 800613a:	f000 82d6 	beq.w	80066ea <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	4798      	blx	r3
      }
      return;
 8006146:	e2d0      	b.n	80066ea <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006148:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800614c:	2b00      	cmp	r3, #0
 800614e:	f000 811f 	beq.w	8006390 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006152:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006156:	4b8b      	ldr	r3, [pc, #556]	; (8006384 <HAL_UART_IRQHandler+0x2b0>)
 8006158:	4013      	ands	r3, r2
 800615a:	2b00      	cmp	r3, #0
 800615c:	d106      	bne.n	800616c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800615e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006162:	4b89      	ldr	r3, [pc, #548]	; (8006388 <HAL_UART_IRQHandler+0x2b4>)
 8006164:	4013      	ands	r3, r2
 8006166:	2b00      	cmp	r3, #0
 8006168:	f000 8112 	beq.w	8006390 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800616c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006170:	f003 0301 	and.w	r3, r3, #1
 8006174:	2b00      	cmp	r3, #0
 8006176:	d011      	beq.n	800619c <HAL_UART_IRQHandler+0xc8>
 8006178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800617c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00b      	beq.n	800619c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2201      	movs	r2, #1
 800618a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006192:	f043 0201 	orr.w	r2, r3, #1
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800619c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061a0:	f003 0302 	and.w	r3, r3, #2
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d011      	beq.n	80061cc <HAL_UART_IRQHandler+0xf8>
 80061a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061ac:	f003 0301 	and.w	r3, r3, #1
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00b      	beq.n	80061cc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2202      	movs	r2, #2
 80061ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061c2:	f043 0204 	orr.w	r2, r3, #4
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d0:	f003 0304 	and.w	r3, r3, #4
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d011      	beq.n	80061fc <HAL_UART_IRQHandler+0x128>
 80061d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061dc:	f003 0301 	and.w	r3, r3, #1
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00b      	beq.n	80061fc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2204      	movs	r2, #4
 80061ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061f2:	f043 0202 	orr.w	r2, r3, #2
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80061fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006200:	f003 0308 	and.w	r3, r3, #8
 8006204:	2b00      	cmp	r3, #0
 8006206:	d017      	beq.n	8006238 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800620c:	f003 0320 	and.w	r3, r3, #32
 8006210:	2b00      	cmp	r3, #0
 8006212:	d105      	bne.n	8006220 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006214:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006218:	4b5a      	ldr	r3, [pc, #360]	; (8006384 <HAL_UART_IRQHandler+0x2b0>)
 800621a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00b      	beq.n	8006238 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2208      	movs	r2, #8
 8006226:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800622e:	f043 0208 	orr.w	r2, r3, #8
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800623c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006240:	2b00      	cmp	r3, #0
 8006242:	d012      	beq.n	800626a <HAL_UART_IRQHandler+0x196>
 8006244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006248:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00c      	beq.n	800626a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006258:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006260:	f043 0220 	orr.w	r2, r3, #32
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006270:	2b00      	cmp	r3, #0
 8006272:	f000 823c 	beq.w	80066ee <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800627a:	f003 0320 	and.w	r3, r3, #32
 800627e:	2b00      	cmp	r3, #0
 8006280:	d013      	beq.n	80062aa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006286:	f003 0320 	and.w	r3, r3, #32
 800628a:	2b00      	cmp	r3, #0
 800628c:	d105      	bne.n	800629a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800628e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006296:	2b00      	cmp	r3, #0
 8006298:	d007      	beq.n	80062aa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d003      	beq.n	80062aa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062be:	2b40      	cmp	r3, #64	; 0x40
 80062c0:	d005      	beq.n	80062ce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80062c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d04f      	beq.n	800636e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f001 f814 	bl	80072fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062de:	2b40      	cmp	r3, #64	; 0x40
 80062e0:	d141      	bne.n	8006366 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	3308      	adds	r3, #8
 80062e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062f0:	e853 3f00 	ldrex	r3, [r3]
 80062f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80062f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006300:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	3308      	adds	r3, #8
 800630a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800630e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006312:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006316:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800631a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800631e:	e841 2300 	strex	r3, r2, [r1]
 8006322:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006326:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1d9      	bne.n	80062e2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006332:	2b00      	cmp	r3, #0
 8006334:	d013      	beq.n	800635e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800633a:	4a14      	ldr	r2, [pc, #80]	; (800638c <HAL_UART_IRQHandler+0x2b8>)
 800633c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006342:	4618      	mov	r0, r3
 8006344:	f7fc fca9 	bl	8002c9a <HAL_DMA_Abort_IT>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d017      	beq.n	800637e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006358:	4610      	mov	r0, r2
 800635a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800635c:	e00f      	b.n	800637e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 f9da 	bl	8006718 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006364:	e00b      	b.n	800637e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f9d6 	bl	8006718 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800636c:	e007      	b.n	800637e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f9d2 	bl	8006718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800637c:	e1b7      	b.n	80066ee <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800637e:	bf00      	nop
    return;
 8006380:	e1b5      	b.n	80066ee <HAL_UART_IRQHandler+0x61a>
 8006382:	bf00      	nop
 8006384:	10000001 	.word	0x10000001
 8006388:	04000120 	.word	0x04000120
 800638c:	080073c9 	.word	0x080073c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006394:	2b01      	cmp	r3, #1
 8006396:	f040 814a 	bne.w	800662e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800639a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800639e:	f003 0310 	and.w	r3, r3, #16
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	f000 8143 	beq.w	800662e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80063a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063ac:	f003 0310 	and.w	r3, r3, #16
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f000 813c 	beq.w	800662e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2210      	movs	r2, #16
 80063bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c8:	2b40      	cmp	r3, #64	; 0x40
 80063ca:	f040 80b5 	bne.w	8006538 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063da:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f000 8187 	beq.w	80066f2 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80063ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063ee:	429a      	cmp	r2, r3
 80063f0:	f080 817f 	bcs.w	80066f2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0320 	and.w	r3, r3, #32
 800640a:	2b00      	cmp	r3, #0
 800640c:	f040 8086 	bne.w	800651c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006418:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800641c:	e853 3f00 	ldrex	r3, [r3]
 8006420:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006424:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800642c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	461a      	mov	r2, r3
 8006436:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800643a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800643e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006442:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006446:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800644a:	e841 2300 	strex	r3, r2, [r1]
 800644e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006452:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1da      	bne.n	8006410 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	3308      	adds	r3, #8
 8006460:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006462:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006464:	e853 3f00 	ldrex	r3, [r3]
 8006468:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800646a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800646c:	f023 0301 	bic.w	r3, r3, #1
 8006470:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	3308      	adds	r3, #8
 800647a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800647e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006482:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006484:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006486:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800648a:	e841 2300 	strex	r3, r2, [r1]
 800648e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006490:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1e1      	bne.n	800645a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	3308      	adds	r3, #8
 800649c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064a0:	e853 3f00 	ldrex	r3, [r3]
 80064a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80064a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	3308      	adds	r3, #8
 80064b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80064ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80064bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80064c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80064c2:	e841 2300 	strex	r3, r2, [r1]
 80064c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80064c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d1e3      	bne.n	8006496 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2220      	movs	r2, #32
 80064d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064e4:	e853 3f00 	ldrex	r3, [r3]
 80064e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80064ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064ec:	f023 0310 	bic.w	r3, r3, #16
 80064f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	461a      	mov	r2, r3
 80064fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8006500:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006502:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006504:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006506:	e841 2300 	strex	r3, r2, [r1]
 800650a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800650c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1e4      	bne.n	80064dc <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006516:	4618      	mov	r0, r3
 8006518:	f7fc fb66 	bl	8002be8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006528:	b29b      	uxth	r3, r3
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	b29b      	uxth	r3, r3
 800652e:	4619      	mov	r1, r3
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 f8fb 	bl	800672c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006536:	e0dc      	b.n	80066f2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006544:	b29b      	uxth	r3, r3
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006552:	b29b      	uxth	r3, r3
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 80ce 	beq.w	80066f6 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800655a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800655e:	2b00      	cmp	r3, #0
 8006560:	f000 80c9 	beq.w	80066f6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800656c:	e853 3f00 	ldrex	r3, [r3]
 8006570:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006574:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006578:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	461a      	mov	r2, r3
 8006582:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006586:	647b      	str	r3, [r7, #68]	; 0x44
 8006588:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800658c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800658e:	e841 2300 	strex	r3, r2, [r1]
 8006592:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1e4      	bne.n	8006564 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	3308      	adds	r3, #8
 80065a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a4:	e853 3f00 	ldrex	r3, [r3]
 80065a8:	623b      	str	r3, [r7, #32]
   return(result);
 80065aa:	6a3b      	ldr	r3, [r7, #32]
 80065ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065b0:	f023 0301 	bic.w	r3, r3, #1
 80065b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	3308      	adds	r3, #8
 80065be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80065c2:	633a      	str	r2, [r7, #48]	; 0x30
 80065c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065ca:	e841 2300 	strex	r3, r2, [r1]
 80065ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1e1      	bne.n	800659a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2220      	movs	r2, #32
 80065da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	e853 3f00 	ldrex	r3, [r3]
 80065f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f023 0310 	bic.w	r3, r3, #16
 80065fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	461a      	mov	r2, r3
 8006608:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800660c:	61fb      	str	r3, [r7, #28]
 800660e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006610:	69b9      	ldr	r1, [r7, #24]
 8006612:	69fa      	ldr	r2, [r7, #28]
 8006614:	e841 2300 	strex	r3, r2, [r1]
 8006618:	617b      	str	r3, [r7, #20]
   return(result);
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d1e4      	bne.n	80065ea <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006620:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006624:	4619      	mov	r1, r3
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f880 	bl	800672c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800662c:	e063      	b.n	80066f6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800662e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00e      	beq.n	8006658 <HAL_UART_IRQHandler+0x584>
 800663a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800663e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d008      	beq.n	8006658 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800664e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f001 fb57 	bl	8007d04 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006656:	e051      	b.n	80066fc <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800665c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006660:	2b00      	cmp	r3, #0
 8006662:	d014      	beq.n	800668e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800666c:	2b00      	cmp	r3, #0
 800666e:	d105      	bne.n	800667c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006674:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d008      	beq.n	800668e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006680:	2b00      	cmp	r3, #0
 8006682:	d03a      	beq.n	80066fa <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	4798      	blx	r3
    }
    return;
 800668c:	e035      	b.n	80066fa <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800668e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006696:	2b00      	cmp	r3, #0
 8006698:	d009      	beq.n	80066ae <HAL_UART_IRQHandler+0x5da>
 800669a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800669e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 fea4 	bl	80073f4 <UART_EndTransmit_IT>
    return;
 80066ac:	e026      	b.n	80066fc <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80066ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d009      	beq.n	80066ce <HAL_UART_IRQHandler+0x5fa>
 80066ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d003      	beq.n	80066ce <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f001 fb30 	bl	8007d2c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066cc:	e016      	b.n	80066fc <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80066ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d010      	beq.n	80066fc <HAL_UART_IRQHandler+0x628>
 80066da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	da0c      	bge.n	80066fc <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f001 fb18 	bl	8007d18 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066e8:	e008      	b.n	80066fc <HAL_UART_IRQHandler+0x628>
      return;
 80066ea:	bf00      	nop
 80066ec:	e006      	b.n	80066fc <HAL_UART_IRQHandler+0x628>
    return;
 80066ee:	bf00      	nop
 80066f0:	e004      	b.n	80066fc <HAL_UART_IRQHandler+0x628>
      return;
 80066f2:	bf00      	nop
 80066f4:	e002      	b.n	80066fc <HAL_UART_IRQHandler+0x628>
      return;
 80066f6:	bf00      	nop
 80066f8:	e000      	b.n	80066fc <HAL_UART_IRQHandler+0x628>
    return;
 80066fa:	bf00      	nop
  }
}
 80066fc:	37e8      	adds	r7, #232	; 0xe8
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop

08006704 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800670c:	bf00      	nop
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	460b      	mov	r3, r1
 8006736:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006738:	bf00      	nop
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006748:	b08c      	sub	sp, #48	; 0x30
 800674a:	af00      	add	r7, sp, #0
 800674c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800674e:	2300      	movs	r3, #0
 8006750:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	689a      	ldr	r2, [r3, #8]
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	431a      	orrs	r2, r3
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	431a      	orrs	r2, r3
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	69db      	ldr	r3, [r3, #28]
 8006768:	4313      	orrs	r3, r2
 800676a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	4baa      	ldr	r3, [pc, #680]	; (8006a1c <UART_SetConfig+0x2d8>)
 8006774:	4013      	ands	r3, r2
 8006776:	697a      	ldr	r2, [r7, #20]
 8006778:	6812      	ldr	r2, [r2, #0]
 800677a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800677c:	430b      	orrs	r3, r1
 800677e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	68da      	ldr	r2, [r3, #12]
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	430a      	orrs	r2, r1
 8006794:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	699b      	ldr	r3, [r3, #24]
 800679a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a9f      	ldr	r2, [pc, #636]	; (8006a20 <UART_SetConfig+0x2dc>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d004      	beq.n	80067b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067ac:	4313      	orrs	r3, r2
 80067ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80067ba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	6812      	ldr	r2, [r2, #0]
 80067c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067c4:	430b      	orrs	r3, r1
 80067c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ce:	f023 010f 	bic.w	r1, r3, #15
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	430a      	orrs	r2, r1
 80067dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a90      	ldr	r2, [pc, #576]	; (8006a24 <UART_SetConfig+0x2e0>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d125      	bne.n	8006834 <UART_SetConfig+0xf0>
 80067e8:	4b8f      	ldr	r3, [pc, #572]	; (8006a28 <UART_SetConfig+0x2e4>)
 80067ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ee:	f003 0303 	and.w	r3, r3, #3
 80067f2:	2b03      	cmp	r3, #3
 80067f4:	d81a      	bhi.n	800682c <UART_SetConfig+0xe8>
 80067f6:	a201      	add	r2, pc, #4	; (adr r2, 80067fc <UART_SetConfig+0xb8>)
 80067f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067fc:	0800680d 	.word	0x0800680d
 8006800:	0800681d 	.word	0x0800681d
 8006804:	08006815 	.word	0x08006815
 8006808:	08006825 	.word	0x08006825
 800680c:	2301      	movs	r3, #1
 800680e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006812:	e116      	b.n	8006a42 <UART_SetConfig+0x2fe>
 8006814:	2302      	movs	r3, #2
 8006816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800681a:	e112      	b.n	8006a42 <UART_SetConfig+0x2fe>
 800681c:	2304      	movs	r3, #4
 800681e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006822:	e10e      	b.n	8006a42 <UART_SetConfig+0x2fe>
 8006824:	2308      	movs	r3, #8
 8006826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800682a:	e10a      	b.n	8006a42 <UART_SetConfig+0x2fe>
 800682c:	2310      	movs	r3, #16
 800682e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006832:	e106      	b.n	8006a42 <UART_SetConfig+0x2fe>
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a7c      	ldr	r2, [pc, #496]	; (8006a2c <UART_SetConfig+0x2e8>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d138      	bne.n	80068b0 <UART_SetConfig+0x16c>
 800683e:	4b7a      	ldr	r3, [pc, #488]	; (8006a28 <UART_SetConfig+0x2e4>)
 8006840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006844:	f003 030c 	and.w	r3, r3, #12
 8006848:	2b0c      	cmp	r3, #12
 800684a:	d82d      	bhi.n	80068a8 <UART_SetConfig+0x164>
 800684c:	a201      	add	r2, pc, #4	; (adr r2, 8006854 <UART_SetConfig+0x110>)
 800684e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006852:	bf00      	nop
 8006854:	08006889 	.word	0x08006889
 8006858:	080068a9 	.word	0x080068a9
 800685c:	080068a9 	.word	0x080068a9
 8006860:	080068a9 	.word	0x080068a9
 8006864:	08006899 	.word	0x08006899
 8006868:	080068a9 	.word	0x080068a9
 800686c:	080068a9 	.word	0x080068a9
 8006870:	080068a9 	.word	0x080068a9
 8006874:	08006891 	.word	0x08006891
 8006878:	080068a9 	.word	0x080068a9
 800687c:	080068a9 	.word	0x080068a9
 8006880:	080068a9 	.word	0x080068a9
 8006884:	080068a1 	.word	0x080068a1
 8006888:	2300      	movs	r3, #0
 800688a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800688e:	e0d8      	b.n	8006a42 <UART_SetConfig+0x2fe>
 8006890:	2302      	movs	r3, #2
 8006892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006896:	e0d4      	b.n	8006a42 <UART_SetConfig+0x2fe>
 8006898:	2304      	movs	r3, #4
 800689a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800689e:	e0d0      	b.n	8006a42 <UART_SetConfig+0x2fe>
 80068a0:	2308      	movs	r3, #8
 80068a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068a6:	e0cc      	b.n	8006a42 <UART_SetConfig+0x2fe>
 80068a8:	2310      	movs	r3, #16
 80068aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068ae:	e0c8      	b.n	8006a42 <UART_SetConfig+0x2fe>
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a5e      	ldr	r2, [pc, #376]	; (8006a30 <UART_SetConfig+0x2ec>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d125      	bne.n	8006906 <UART_SetConfig+0x1c2>
 80068ba:	4b5b      	ldr	r3, [pc, #364]	; (8006a28 <UART_SetConfig+0x2e4>)
 80068bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80068c4:	2b30      	cmp	r3, #48	; 0x30
 80068c6:	d016      	beq.n	80068f6 <UART_SetConfig+0x1b2>
 80068c8:	2b30      	cmp	r3, #48	; 0x30
 80068ca:	d818      	bhi.n	80068fe <UART_SetConfig+0x1ba>
 80068cc:	2b20      	cmp	r3, #32
 80068ce:	d00a      	beq.n	80068e6 <UART_SetConfig+0x1a2>
 80068d0:	2b20      	cmp	r3, #32
 80068d2:	d814      	bhi.n	80068fe <UART_SetConfig+0x1ba>
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d002      	beq.n	80068de <UART_SetConfig+0x19a>
 80068d8:	2b10      	cmp	r3, #16
 80068da:	d008      	beq.n	80068ee <UART_SetConfig+0x1aa>
 80068dc:	e00f      	b.n	80068fe <UART_SetConfig+0x1ba>
 80068de:	2300      	movs	r3, #0
 80068e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068e4:	e0ad      	b.n	8006a42 <UART_SetConfig+0x2fe>
 80068e6:	2302      	movs	r3, #2
 80068e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068ec:	e0a9      	b.n	8006a42 <UART_SetConfig+0x2fe>
 80068ee:	2304      	movs	r3, #4
 80068f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068f4:	e0a5      	b.n	8006a42 <UART_SetConfig+0x2fe>
 80068f6:	2308      	movs	r3, #8
 80068f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068fc:	e0a1      	b.n	8006a42 <UART_SetConfig+0x2fe>
 80068fe:	2310      	movs	r3, #16
 8006900:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006904:	e09d      	b.n	8006a42 <UART_SetConfig+0x2fe>
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a4a      	ldr	r2, [pc, #296]	; (8006a34 <UART_SetConfig+0x2f0>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d125      	bne.n	800695c <UART_SetConfig+0x218>
 8006910:	4b45      	ldr	r3, [pc, #276]	; (8006a28 <UART_SetConfig+0x2e4>)
 8006912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006916:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800691a:	2bc0      	cmp	r3, #192	; 0xc0
 800691c:	d016      	beq.n	800694c <UART_SetConfig+0x208>
 800691e:	2bc0      	cmp	r3, #192	; 0xc0
 8006920:	d818      	bhi.n	8006954 <UART_SetConfig+0x210>
 8006922:	2b80      	cmp	r3, #128	; 0x80
 8006924:	d00a      	beq.n	800693c <UART_SetConfig+0x1f8>
 8006926:	2b80      	cmp	r3, #128	; 0x80
 8006928:	d814      	bhi.n	8006954 <UART_SetConfig+0x210>
 800692a:	2b00      	cmp	r3, #0
 800692c:	d002      	beq.n	8006934 <UART_SetConfig+0x1f0>
 800692e:	2b40      	cmp	r3, #64	; 0x40
 8006930:	d008      	beq.n	8006944 <UART_SetConfig+0x200>
 8006932:	e00f      	b.n	8006954 <UART_SetConfig+0x210>
 8006934:	2300      	movs	r3, #0
 8006936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800693a:	e082      	b.n	8006a42 <UART_SetConfig+0x2fe>
 800693c:	2302      	movs	r3, #2
 800693e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006942:	e07e      	b.n	8006a42 <UART_SetConfig+0x2fe>
 8006944:	2304      	movs	r3, #4
 8006946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800694a:	e07a      	b.n	8006a42 <UART_SetConfig+0x2fe>
 800694c:	2308      	movs	r3, #8
 800694e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006952:	e076      	b.n	8006a42 <UART_SetConfig+0x2fe>
 8006954:	2310      	movs	r3, #16
 8006956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800695a:	e072      	b.n	8006a42 <UART_SetConfig+0x2fe>
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a35      	ldr	r2, [pc, #212]	; (8006a38 <UART_SetConfig+0x2f4>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d12a      	bne.n	80069bc <UART_SetConfig+0x278>
 8006966:	4b30      	ldr	r3, [pc, #192]	; (8006a28 <UART_SetConfig+0x2e4>)
 8006968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800696c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006970:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006974:	d01a      	beq.n	80069ac <UART_SetConfig+0x268>
 8006976:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800697a:	d81b      	bhi.n	80069b4 <UART_SetConfig+0x270>
 800697c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006980:	d00c      	beq.n	800699c <UART_SetConfig+0x258>
 8006982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006986:	d815      	bhi.n	80069b4 <UART_SetConfig+0x270>
 8006988:	2b00      	cmp	r3, #0
 800698a:	d003      	beq.n	8006994 <UART_SetConfig+0x250>
 800698c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006990:	d008      	beq.n	80069a4 <UART_SetConfig+0x260>
 8006992:	e00f      	b.n	80069b4 <UART_SetConfig+0x270>
 8006994:	2300      	movs	r3, #0
 8006996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800699a:	e052      	b.n	8006a42 <UART_SetConfig+0x2fe>
 800699c:	2302      	movs	r3, #2
 800699e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069a2:	e04e      	b.n	8006a42 <UART_SetConfig+0x2fe>
 80069a4:	2304      	movs	r3, #4
 80069a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069aa:	e04a      	b.n	8006a42 <UART_SetConfig+0x2fe>
 80069ac:	2308      	movs	r3, #8
 80069ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069b2:	e046      	b.n	8006a42 <UART_SetConfig+0x2fe>
 80069b4:	2310      	movs	r3, #16
 80069b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069ba:	e042      	b.n	8006a42 <UART_SetConfig+0x2fe>
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a17      	ldr	r2, [pc, #92]	; (8006a20 <UART_SetConfig+0x2dc>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d13a      	bne.n	8006a3c <UART_SetConfig+0x2f8>
 80069c6:	4b18      	ldr	r3, [pc, #96]	; (8006a28 <UART_SetConfig+0x2e4>)
 80069c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80069d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069d4:	d01a      	beq.n	8006a0c <UART_SetConfig+0x2c8>
 80069d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069da:	d81b      	bhi.n	8006a14 <UART_SetConfig+0x2d0>
 80069dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069e0:	d00c      	beq.n	80069fc <UART_SetConfig+0x2b8>
 80069e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069e6:	d815      	bhi.n	8006a14 <UART_SetConfig+0x2d0>
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d003      	beq.n	80069f4 <UART_SetConfig+0x2b0>
 80069ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069f0:	d008      	beq.n	8006a04 <UART_SetConfig+0x2c0>
 80069f2:	e00f      	b.n	8006a14 <UART_SetConfig+0x2d0>
 80069f4:	2300      	movs	r3, #0
 80069f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069fa:	e022      	b.n	8006a42 <UART_SetConfig+0x2fe>
 80069fc:	2302      	movs	r3, #2
 80069fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a02:	e01e      	b.n	8006a42 <UART_SetConfig+0x2fe>
 8006a04:	2304      	movs	r3, #4
 8006a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a0a:	e01a      	b.n	8006a42 <UART_SetConfig+0x2fe>
 8006a0c:	2308      	movs	r3, #8
 8006a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a12:	e016      	b.n	8006a42 <UART_SetConfig+0x2fe>
 8006a14:	2310      	movs	r3, #16
 8006a16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a1a:	e012      	b.n	8006a42 <UART_SetConfig+0x2fe>
 8006a1c:	cfff69f3 	.word	0xcfff69f3
 8006a20:	40008000 	.word	0x40008000
 8006a24:	40013800 	.word	0x40013800
 8006a28:	40021000 	.word	0x40021000
 8006a2c:	40004400 	.word	0x40004400
 8006a30:	40004800 	.word	0x40004800
 8006a34:	40004c00 	.word	0x40004c00
 8006a38:	40005000 	.word	0x40005000
 8006a3c:	2310      	movs	r3, #16
 8006a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4aae      	ldr	r2, [pc, #696]	; (8006d00 <UART_SetConfig+0x5bc>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	f040 8097 	bne.w	8006b7c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a52:	2b08      	cmp	r3, #8
 8006a54:	d823      	bhi.n	8006a9e <UART_SetConfig+0x35a>
 8006a56:	a201      	add	r2, pc, #4	; (adr r2, 8006a5c <UART_SetConfig+0x318>)
 8006a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5c:	08006a81 	.word	0x08006a81
 8006a60:	08006a9f 	.word	0x08006a9f
 8006a64:	08006a89 	.word	0x08006a89
 8006a68:	08006a9f 	.word	0x08006a9f
 8006a6c:	08006a8f 	.word	0x08006a8f
 8006a70:	08006a9f 	.word	0x08006a9f
 8006a74:	08006a9f 	.word	0x08006a9f
 8006a78:	08006a9f 	.word	0x08006a9f
 8006a7c:	08006a97 	.word	0x08006a97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a80:	f7fd f8a6 	bl	8003bd0 <HAL_RCC_GetPCLK1Freq>
 8006a84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a86:	e010      	b.n	8006aaa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a88:	4b9e      	ldr	r3, [pc, #632]	; (8006d04 <UART_SetConfig+0x5c0>)
 8006a8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a8c:	e00d      	b.n	8006aaa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a8e:	f7fd f831 	bl	8003af4 <HAL_RCC_GetSysClockFreq>
 8006a92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a94:	e009      	b.n	8006aaa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a9c:	e005      	b.n	8006aaa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006aa8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f000 8130 	beq.w	8006d12 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab6:	4a94      	ldr	r2, [pc, #592]	; (8006d08 <UART_SetConfig+0x5c4>)
 8006ab8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006abc:	461a      	mov	r2, r3
 8006abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ac4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	685a      	ldr	r2, [r3, #4]
 8006aca:	4613      	mov	r3, r2
 8006acc:	005b      	lsls	r3, r3, #1
 8006ace:	4413      	add	r3, r2
 8006ad0:	69ba      	ldr	r2, [r7, #24]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d305      	bcc.n	8006ae2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006adc:	69ba      	ldr	r2, [r7, #24]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d903      	bls.n	8006aea <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006ae8:	e113      	b.n	8006d12 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aec:	2200      	movs	r2, #0
 8006aee:	60bb      	str	r3, [r7, #8]
 8006af0:	60fa      	str	r2, [r7, #12]
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af6:	4a84      	ldr	r2, [pc, #528]	; (8006d08 <UART_SetConfig+0x5c4>)
 8006af8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	2200      	movs	r2, #0
 8006b00:	603b      	str	r3, [r7, #0]
 8006b02:	607a      	str	r2, [r7, #4]
 8006b04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b08:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b0c:	f7f9 fbf0 	bl	80002f0 <__aeabi_uldivmod>
 8006b10:	4602      	mov	r2, r0
 8006b12:	460b      	mov	r3, r1
 8006b14:	4610      	mov	r0, r2
 8006b16:	4619      	mov	r1, r3
 8006b18:	f04f 0200 	mov.w	r2, #0
 8006b1c:	f04f 0300 	mov.w	r3, #0
 8006b20:	020b      	lsls	r3, r1, #8
 8006b22:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006b26:	0202      	lsls	r2, r0, #8
 8006b28:	6979      	ldr	r1, [r7, #20]
 8006b2a:	6849      	ldr	r1, [r1, #4]
 8006b2c:	0849      	lsrs	r1, r1, #1
 8006b2e:	2000      	movs	r0, #0
 8006b30:	460c      	mov	r4, r1
 8006b32:	4605      	mov	r5, r0
 8006b34:	eb12 0804 	adds.w	r8, r2, r4
 8006b38:	eb43 0905 	adc.w	r9, r3, r5
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	469a      	mov	sl, r3
 8006b44:	4693      	mov	fp, r2
 8006b46:	4652      	mov	r2, sl
 8006b48:	465b      	mov	r3, fp
 8006b4a:	4640      	mov	r0, r8
 8006b4c:	4649      	mov	r1, r9
 8006b4e:	f7f9 fbcf 	bl	80002f0 <__aeabi_uldivmod>
 8006b52:	4602      	mov	r2, r0
 8006b54:	460b      	mov	r3, r1
 8006b56:	4613      	mov	r3, r2
 8006b58:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b5a:	6a3b      	ldr	r3, [r7, #32]
 8006b5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b60:	d308      	bcc.n	8006b74 <UART_SetConfig+0x430>
 8006b62:	6a3b      	ldr	r3, [r7, #32]
 8006b64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b68:	d204      	bcs.n	8006b74 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	6a3a      	ldr	r2, [r7, #32]
 8006b70:	60da      	str	r2, [r3, #12]
 8006b72:	e0ce      	b.n	8006d12 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006b7a:	e0ca      	b.n	8006d12 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	69db      	ldr	r3, [r3, #28]
 8006b80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b84:	d166      	bne.n	8006c54 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006b86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006b8a:	2b08      	cmp	r3, #8
 8006b8c:	d827      	bhi.n	8006bde <UART_SetConfig+0x49a>
 8006b8e:	a201      	add	r2, pc, #4	; (adr r2, 8006b94 <UART_SetConfig+0x450>)
 8006b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b94:	08006bb9 	.word	0x08006bb9
 8006b98:	08006bc1 	.word	0x08006bc1
 8006b9c:	08006bc9 	.word	0x08006bc9
 8006ba0:	08006bdf 	.word	0x08006bdf
 8006ba4:	08006bcf 	.word	0x08006bcf
 8006ba8:	08006bdf 	.word	0x08006bdf
 8006bac:	08006bdf 	.word	0x08006bdf
 8006bb0:	08006bdf 	.word	0x08006bdf
 8006bb4:	08006bd7 	.word	0x08006bd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bb8:	f7fd f80a 	bl	8003bd0 <HAL_RCC_GetPCLK1Freq>
 8006bbc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006bbe:	e014      	b.n	8006bea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bc0:	f7fd f81c 	bl	8003bfc <HAL_RCC_GetPCLK2Freq>
 8006bc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006bc6:	e010      	b.n	8006bea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bc8:	4b4e      	ldr	r3, [pc, #312]	; (8006d04 <UART_SetConfig+0x5c0>)
 8006bca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006bcc:	e00d      	b.n	8006bea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bce:	f7fc ff91 	bl	8003af4 <HAL_RCC_GetSysClockFreq>
 8006bd2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006bd4:	e009      	b.n	8006bea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006bdc:	e005      	b.n	8006bea <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006bde:	2300      	movs	r3, #0
 8006be0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006be8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f000 8090 	beq.w	8006d12 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf6:	4a44      	ldr	r2, [pc, #272]	; (8006d08 <UART_SetConfig+0x5c4>)
 8006bf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c00:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c04:	005a      	lsls	r2, r3, #1
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	085b      	lsrs	r3, r3, #1
 8006c0c:	441a      	add	r2, r3
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c16:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c18:	6a3b      	ldr	r3, [r7, #32]
 8006c1a:	2b0f      	cmp	r3, #15
 8006c1c:	d916      	bls.n	8006c4c <UART_SetConfig+0x508>
 8006c1e:	6a3b      	ldr	r3, [r7, #32]
 8006c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c24:	d212      	bcs.n	8006c4c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c26:	6a3b      	ldr	r3, [r7, #32]
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	f023 030f 	bic.w	r3, r3, #15
 8006c2e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c30:	6a3b      	ldr	r3, [r7, #32]
 8006c32:	085b      	lsrs	r3, r3, #1
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	f003 0307 	and.w	r3, r3, #7
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	8bfb      	ldrh	r3, [r7, #30]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	8bfa      	ldrh	r2, [r7, #30]
 8006c48:	60da      	str	r2, [r3, #12]
 8006c4a:	e062      	b.n	8006d12 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006c52:	e05e      	b.n	8006d12 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c54:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006c58:	2b08      	cmp	r3, #8
 8006c5a:	d828      	bhi.n	8006cae <UART_SetConfig+0x56a>
 8006c5c:	a201      	add	r2, pc, #4	; (adr r2, 8006c64 <UART_SetConfig+0x520>)
 8006c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c62:	bf00      	nop
 8006c64:	08006c89 	.word	0x08006c89
 8006c68:	08006c91 	.word	0x08006c91
 8006c6c:	08006c99 	.word	0x08006c99
 8006c70:	08006caf 	.word	0x08006caf
 8006c74:	08006c9f 	.word	0x08006c9f
 8006c78:	08006caf 	.word	0x08006caf
 8006c7c:	08006caf 	.word	0x08006caf
 8006c80:	08006caf 	.word	0x08006caf
 8006c84:	08006ca7 	.word	0x08006ca7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c88:	f7fc ffa2 	bl	8003bd0 <HAL_RCC_GetPCLK1Freq>
 8006c8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c8e:	e014      	b.n	8006cba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c90:	f7fc ffb4 	bl	8003bfc <HAL_RCC_GetPCLK2Freq>
 8006c94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c96:	e010      	b.n	8006cba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c98:	4b1a      	ldr	r3, [pc, #104]	; (8006d04 <UART_SetConfig+0x5c0>)
 8006c9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c9c:	e00d      	b.n	8006cba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c9e:	f7fc ff29 	bl	8003af4 <HAL_RCC_GetSysClockFreq>
 8006ca2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ca4:	e009      	b.n	8006cba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006caa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006cac:	e005      	b.n	8006cba <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006cb8:	bf00      	nop
    }

    if (pclk != 0U)
 8006cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d028      	beq.n	8006d12 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc4:	4a10      	ldr	r2, [pc, #64]	; (8006d08 <UART_SetConfig+0x5c4>)
 8006cc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cca:	461a      	mov	r2, r3
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cce:	fbb3 f2f2 	udiv	r2, r3, r2
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	085b      	lsrs	r3, r3, #1
 8006cd8:	441a      	add	r2, r3
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ce2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ce4:	6a3b      	ldr	r3, [r7, #32]
 8006ce6:	2b0f      	cmp	r3, #15
 8006ce8:	d910      	bls.n	8006d0c <UART_SetConfig+0x5c8>
 8006cea:	6a3b      	ldr	r3, [r7, #32]
 8006cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cf0:	d20c      	bcs.n	8006d0c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006cf2:	6a3b      	ldr	r3, [r7, #32]
 8006cf4:	b29a      	uxth	r2, r3
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	60da      	str	r2, [r3, #12]
 8006cfc:	e009      	b.n	8006d12 <UART_SetConfig+0x5ce>
 8006cfe:	bf00      	nop
 8006d00:	40008000 	.word	0x40008000
 8006d04:	00f42400 	.word	0x00f42400
 8006d08:	080089e0 	.word	0x080089e0
      }
      else
      {
        ret = HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	2201      	movs	r2, #1
 8006d16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	2200      	movs	r2, #0
 8006d26:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006d2e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3730      	adds	r7, #48	; 0x30
 8006d36:	46bd      	mov	sp, r7
 8006d38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006d3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d48:	f003 0301 	and.w	r3, r3, #1
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00a      	beq.n	8006d66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	430a      	orrs	r2, r1
 8006d64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d6a:	f003 0302 	and.w	r3, r3, #2
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00a      	beq.n	8006d88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	430a      	orrs	r2, r1
 8006d86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d8c:	f003 0304 	and.w	r3, r3, #4
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00a      	beq.n	8006daa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	430a      	orrs	r2, r1
 8006da8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dae:	f003 0308 	and.w	r3, r3, #8
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00a      	beq.n	8006dcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd0:	f003 0310 	and.w	r3, r3, #16
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00a      	beq.n	8006dee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	430a      	orrs	r2, r1
 8006dec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df2:	f003 0320 	and.w	r3, r3, #32
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00a      	beq.n	8006e10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d01a      	beq.n	8006e52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e3a:	d10a      	bne.n	8006e52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	430a      	orrs	r2, r1
 8006e50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00a      	beq.n	8006e74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	430a      	orrs	r2, r1
 8006e72:	605a      	str	r2, [r3, #4]
  }
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af02      	add	r7, sp, #8
 8006e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e90:	f7fa fcb4 	bl	80017fc <HAL_GetTick>
 8006e94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0308 	and.w	r3, r3, #8
 8006ea0:	2b08      	cmp	r3, #8
 8006ea2:	d10e      	bne.n	8006ec2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ea4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ea8:	9300      	str	r3, [sp, #0]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f82f 	bl	8006f16 <UART_WaitOnFlagUntilTimeout>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e025      	b.n	8006f0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0304 	and.w	r3, r3, #4
 8006ecc:	2b04      	cmp	r3, #4
 8006ece:	d10e      	bne.n	8006eee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ed0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 f819 	bl	8006f16 <UART_WaitOnFlagUntilTimeout>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d001      	beq.n	8006eee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e00f      	b.n	8006f0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2220      	movs	r2, #32
 8006ef2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2220      	movs	r2, #32
 8006efa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3710      	adds	r7, #16
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b09c      	sub	sp, #112	; 0x70
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	60f8      	str	r0, [r7, #12]
 8006f1e:	60b9      	str	r1, [r7, #8]
 8006f20:	603b      	str	r3, [r7, #0]
 8006f22:	4613      	mov	r3, r2
 8006f24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f26:	e0a9      	b.n	800707c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f2e:	f000 80a5 	beq.w	800707c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f32:	f7fa fc63 	bl	80017fc <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d302      	bcc.n	8006f48 <UART_WaitOnFlagUntilTimeout+0x32>
 8006f42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d140      	bne.n	8006fca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f50:	e853 3f00 	ldrex	r3, [r3]
 8006f54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f5c:	667b      	str	r3, [r7, #100]	; 0x64
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	461a      	mov	r2, r3
 8006f64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f68:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f6e:	e841 2300 	strex	r3, r2, [r1]
 8006f72:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006f74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1e6      	bne.n	8006f48 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	3308      	adds	r3, #8
 8006f80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f84:	e853 3f00 	ldrex	r3, [r3]
 8006f88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8c:	f023 0301 	bic.w	r3, r3, #1
 8006f90:	663b      	str	r3, [r7, #96]	; 0x60
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	3308      	adds	r3, #8
 8006f98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f9a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006f9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006fa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fa2:	e841 2300 	strex	r3, r2, [r1]
 8006fa6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1e5      	bne.n	8006f7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2220      	movs	r2, #32
 8006fb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2220      	movs	r2, #32
 8006fba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	e069      	b.n	800709e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 0304 	and.w	r3, r3, #4
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d051      	beq.n	800707c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	69db      	ldr	r3, [r3, #28]
 8006fde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fe2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fe6:	d149      	bne.n	800707c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ff0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffa:	e853 3f00 	ldrex	r3, [r3]
 8006ffe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007002:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007006:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	461a      	mov	r2, r3
 800700e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007010:	637b      	str	r3, [r7, #52]	; 0x34
 8007012:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007014:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007016:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007018:	e841 2300 	strex	r3, r2, [r1]
 800701c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800701e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1e6      	bne.n	8006ff2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	3308      	adds	r3, #8
 800702a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	e853 3f00 	ldrex	r3, [r3]
 8007032:	613b      	str	r3, [r7, #16]
   return(result);
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	f023 0301 	bic.w	r3, r3, #1
 800703a:	66bb      	str	r3, [r7, #104]	; 0x68
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	3308      	adds	r3, #8
 8007042:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007044:	623a      	str	r2, [r7, #32]
 8007046:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007048:	69f9      	ldr	r1, [r7, #28]
 800704a:	6a3a      	ldr	r2, [r7, #32]
 800704c:	e841 2300 	strex	r3, r2, [r1]
 8007050:	61bb      	str	r3, [r7, #24]
   return(result);
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d1e5      	bne.n	8007024 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2220      	movs	r2, #32
 800705c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2220      	movs	r2, #32
 8007064:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2220      	movs	r2, #32
 800706c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	e010      	b.n	800709e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	69da      	ldr	r2, [r3, #28]
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	4013      	ands	r3, r2
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	429a      	cmp	r2, r3
 800708a:	bf0c      	ite	eq
 800708c:	2301      	moveq	r3, #1
 800708e:	2300      	movne	r3, #0
 8007090:	b2db      	uxtb	r3, r3
 8007092:	461a      	mov	r2, r3
 8007094:	79fb      	ldrb	r3, [r7, #7]
 8007096:	429a      	cmp	r2, r3
 8007098:	f43f af46 	beq.w	8006f28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3770      	adds	r7, #112	; 0x70
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
	...

080070a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b0a3      	sub	sp, #140	; 0x8c
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	4613      	mov	r3, r2
 80070b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	88fa      	ldrh	r2, [r7, #6]
 80070c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	88fa      	ldrh	r2, [r7, #6]
 80070c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2200      	movs	r2, #0
 80070d0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070da:	d10e      	bne.n	80070fa <UART_Start_Receive_IT+0x52>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d105      	bne.n	80070f0 <UART_Start_Receive_IT+0x48>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80070ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80070ee:	e02d      	b.n	800714c <UART_Start_Receive_IT+0xa4>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	22ff      	movs	r2, #255	; 0xff
 80070f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80070f8:	e028      	b.n	800714c <UART_Start_Receive_IT+0xa4>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10d      	bne.n	800711e <UART_Start_Receive_IT+0x76>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d104      	bne.n	8007114 <UART_Start_Receive_IT+0x6c>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	22ff      	movs	r2, #255	; 0xff
 800710e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007112:	e01b      	b.n	800714c <UART_Start_Receive_IT+0xa4>
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	227f      	movs	r2, #127	; 0x7f
 8007118:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800711c:	e016      	b.n	800714c <UART_Start_Receive_IT+0xa4>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007126:	d10d      	bne.n	8007144 <UART_Start_Receive_IT+0x9c>
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d104      	bne.n	800713a <UART_Start_Receive_IT+0x92>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	227f      	movs	r2, #127	; 0x7f
 8007134:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007138:	e008      	b.n	800714c <UART_Start_Receive_IT+0xa4>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	223f      	movs	r2, #63	; 0x3f
 800713e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007142:	e003      	b.n	800714c <UART_Start_Receive_IT+0xa4>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2222      	movs	r2, #34	; 0x22
 8007158:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	3308      	adds	r3, #8
 8007162:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007164:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007166:	e853 3f00 	ldrex	r3, [r3]
 800716a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800716c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800716e:	f043 0301 	orr.w	r3, r3, #1
 8007172:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	3308      	adds	r3, #8
 800717c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007180:	673a      	str	r2, [r7, #112]	; 0x70
 8007182:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007184:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007186:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007188:	e841 2300 	strex	r3, r2, [r1]
 800718c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800718e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007190:	2b00      	cmp	r3, #0
 8007192:	d1e3      	bne.n	800715c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007198:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800719c:	d153      	bne.n	8007246 <UART_Start_Receive_IT+0x19e>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80071a4:	88fa      	ldrh	r2, [r7, #6]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d34d      	bcc.n	8007246 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071b2:	d107      	bne.n	80071c4 <UART_Start_Receive_IT+0x11c>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d103      	bne.n	80071c4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	4a4b      	ldr	r2, [pc, #300]	; (80072ec <UART_Start_Receive_IT+0x244>)
 80071c0:	671a      	str	r2, [r3, #112]	; 0x70
 80071c2:	e002      	b.n	80071ca <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	4a4a      	ldr	r2, [pc, #296]	; (80072f0 <UART_Start_Receive_IT+0x248>)
 80071c8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d01a      	beq.n	8007210 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071e2:	e853 3f00 	ldrex	r3, [r3]
 80071e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80071e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	461a      	mov	r2, r3
 80071f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80071fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071fe:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007200:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007202:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007204:	e841 2300 	strex	r3, r2, [r1]
 8007208:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800720a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1e4      	bne.n	80071da <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	3308      	adds	r3, #8
 8007216:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800721a:	e853 3f00 	ldrex	r3, [r3]
 800721e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007226:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	3308      	adds	r3, #8
 800722e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007230:	64ba      	str	r2, [r7, #72]	; 0x48
 8007232:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007234:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007236:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007238:	e841 2300 	strex	r3, r2, [r1]
 800723c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800723e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1e5      	bne.n	8007210 <UART_Start_Receive_IT+0x168>
 8007244:	e04a      	b.n	80072dc <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800724e:	d107      	bne.n	8007260 <UART_Start_Receive_IT+0x1b8>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d103      	bne.n	8007260 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	4a26      	ldr	r2, [pc, #152]	; (80072f4 <UART_Start_Receive_IT+0x24c>)
 800725c:	671a      	str	r2, [r3, #112]	; 0x70
 800725e:	e002      	b.n	8007266 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	4a25      	ldr	r2, [pc, #148]	; (80072f8 <UART_Start_Receive_IT+0x250>)
 8007264:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2200      	movs	r2, #0
 800726a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d019      	beq.n	80072aa <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727e:	e853 3f00 	ldrex	r3, [r3]
 8007282:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007286:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800728a:	677b      	str	r3, [r7, #116]	; 0x74
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	461a      	mov	r2, r3
 8007292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007294:	637b      	str	r3, [r7, #52]	; 0x34
 8007296:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007298:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800729a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800729c:	e841 2300 	strex	r3, r2, [r1]
 80072a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80072a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1e6      	bne.n	8007276 <UART_Start_Receive_IT+0x1ce>
 80072a8:	e018      	b.n	80072dc <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	e853 3f00 	ldrex	r3, [r3]
 80072b6:	613b      	str	r3, [r7, #16]
   return(result);
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	f043 0320 	orr.w	r3, r3, #32
 80072be:	67bb      	str	r3, [r7, #120]	; 0x78
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	461a      	mov	r2, r3
 80072c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072c8:	623b      	str	r3, [r7, #32]
 80072ca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072cc:	69f9      	ldr	r1, [r7, #28]
 80072ce:	6a3a      	ldr	r2, [r7, #32]
 80072d0:	e841 2300 	strex	r3, r2, [r1]
 80072d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1e6      	bne.n	80072aa <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	378c      	adds	r7, #140	; 0x8c
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	08007a05 	.word	0x08007a05
 80072f0:	0800770d 	.word	0x0800770d
 80072f4:	080075ab 	.word	0x080075ab
 80072f8:	0800744b 	.word	0x0800744b

080072fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b095      	sub	sp, #84	; 0x54
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800730c:	e853 3f00 	ldrex	r3, [r3]
 8007310:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007314:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007318:	64fb      	str	r3, [r7, #76]	; 0x4c
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	461a      	mov	r2, r3
 8007320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007322:	643b      	str	r3, [r7, #64]	; 0x40
 8007324:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007326:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007328:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800732a:	e841 2300 	strex	r3, r2, [r1]
 800732e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1e6      	bne.n	8007304 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	3308      	adds	r3, #8
 800733c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733e:	6a3b      	ldr	r3, [r7, #32]
 8007340:	e853 3f00 	ldrex	r3, [r3]
 8007344:	61fb      	str	r3, [r7, #28]
   return(result);
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800734c:	f023 0301 	bic.w	r3, r3, #1
 8007350:	64bb      	str	r3, [r7, #72]	; 0x48
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	3308      	adds	r3, #8
 8007358:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800735a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800735c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007360:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007362:	e841 2300 	strex	r3, r2, [r1]
 8007366:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1e3      	bne.n	8007336 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007372:	2b01      	cmp	r3, #1
 8007374:	d118      	bne.n	80073a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	e853 3f00 	ldrex	r3, [r3]
 8007382:	60bb      	str	r3, [r7, #8]
   return(result);
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	f023 0310 	bic.w	r3, r3, #16
 800738a:	647b      	str	r3, [r7, #68]	; 0x44
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	461a      	mov	r2, r3
 8007392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007394:	61bb      	str	r3, [r7, #24]
 8007396:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007398:	6979      	ldr	r1, [r7, #20]
 800739a:	69ba      	ldr	r2, [r7, #24]
 800739c:	e841 2300 	strex	r3, r2, [r1]
 80073a0:	613b      	str	r3, [r7, #16]
   return(result);
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1e6      	bne.n	8007376 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2220      	movs	r2, #32
 80073ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	671a      	str	r2, [r3, #112]	; 0x70
}
 80073bc:	bf00      	nop
 80073be:	3754      	adds	r7, #84	; 0x54
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f7ff f996 	bl	8006718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073ec:	bf00      	nop
 80073ee:	3710      	adds	r7, #16
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b088      	sub	sp, #32
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	e853 3f00 	ldrex	r3, [r3]
 8007408:	60bb      	str	r3, [r7, #8]
   return(result);
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007410:	61fb      	str	r3, [r7, #28]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	461a      	mov	r2, r3
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	61bb      	str	r3, [r7, #24]
 800741c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741e:	6979      	ldr	r1, [r7, #20]
 8007420:	69ba      	ldr	r2, [r7, #24]
 8007422:	e841 2300 	strex	r3, r2, [r1]
 8007426:	613b      	str	r3, [r7, #16]
   return(result);
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1e6      	bne.n	80073fc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2220      	movs	r2, #32
 8007432:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f7ff f961 	bl	8006704 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007442:	bf00      	nop
 8007444:	3720      	adds	r7, #32
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b096      	sub	sp, #88	; 0x58
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007458:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007462:	2b22      	cmp	r3, #34	; 0x22
 8007464:	f040 8095 	bne.w	8007592 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007472:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007476:	b2d9      	uxtb	r1, r3
 8007478:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800747c:	b2da      	uxtb	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007482:	400a      	ands	r2, r1
 8007484:	b2d2      	uxtb	r2, r2
 8007486:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800748c:	1c5a      	adds	r2, r3, #1
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007498:	b29b      	uxth	r3, r3
 800749a:	3b01      	subs	r3, #1
 800749c:	b29a      	uxth	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d178      	bne.n	80075a2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b8:	e853 3f00 	ldrex	r3, [r3]
 80074bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074c4:	653b      	str	r3, [r7, #80]	; 0x50
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	461a      	mov	r2, r3
 80074cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074ce:	647b      	str	r3, [r7, #68]	; 0x44
 80074d0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074d6:	e841 2300 	strex	r3, r2, [r1]
 80074da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d1e6      	bne.n	80074b0 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	3308      	adds	r3, #8
 80074e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ec:	e853 3f00 	ldrex	r3, [r3]
 80074f0:	623b      	str	r3, [r7, #32]
   return(result);
 80074f2:	6a3b      	ldr	r3, [r7, #32]
 80074f4:	f023 0301 	bic.w	r3, r3, #1
 80074f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	3308      	adds	r3, #8
 8007500:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007502:	633a      	str	r2, [r7, #48]	; 0x30
 8007504:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007506:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800750a:	e841 2300 	strex	r3, r2, [r1]
 800750e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1e5      	bne.n	80074e2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2220      	movs	r2, #32
 800751a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007528:	2b01      	cmp	r3, #1
 800752a:	d12e      	bne.n	800758a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	e853 3f00 	ldrex	r3, [r3]
 800753e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f023 0310 	bic.w	r3, r3, #16
 8007546:	64bb      	str	r3, [r7, #72]	; 0x48
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	461a      	mov	r2, r3
 800754e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007550:	61fb      	str	r3, [r7, #28]
 8007552:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007554:	69b9      	ldr	r1, [r7, #24]
 8007556:	69fa      	ldr	r2, [r7, #28]
 8007558:	e841 2300 	strex	r3, r2, [r1]
 800755c:	617b      	str	r3, [r7, #20]
   return(result);
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d1e6      	bne.n	8007532 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	69db      	ldr	r3, [r3, #28]
 800756a:	f003 0310 	and.w	r3, r3, #16
 800756e:	2b10      	cmp	r3, #16
 8007570:	d103      	bne.n	800757a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2210      	movs	r2, #16
 8007578:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007580:	4619      	mov	r1, r3
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f7ff f8d2 	bl	800672c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007588:	e00b      	b.n	80075a2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f7f9 fb4a 	bl	8000c24 <HAL_UART_RxCpltCallback>
}
 8007590:	e007      	b.n	80075a2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	699a      	ldr	r2, [r3, #24]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f042 0208 	orr.w	r2, r2, #8
 80075a0:	619a      	str	r2, [r3, #24]
}
 80075a2:	bf00      	nop
 80075a4:	3758      	adds	r7, #88	; 0x58
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b096      	sub	sp, #88	; 0x58
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80075b8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075c2:	2b22      	cmp	r3, #34	; 0x22
 80075c4:	f040 8095 	bne.w	80076f2 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ce:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075d6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80075d8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80075dc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80075e0:	4013      	ands	r3, r2
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075e6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ec:	1c9a      	adds	r2, r3, #2
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	3b01      	subs	r3, #1
 80075fc:	b29a      	uxth	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800760a:	b29b      	uxth	r3, r3
 800760c:	2b00      	cmp	r3, #0
 800760e:	d178      	bne.n	8007702 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007618:	e853 3f00 	ldrex	r3, [r3]
 800761c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800761e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007620:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007624:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	461a      	mov	r2, r3
 800762c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800762e:	643b      	str	r3, [r7, #64]	; 0x40
 8007630:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007632:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007634:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007636:	e841 2300 	strex	r3, r2, [r1]
 800763a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800763c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1e6      	bne.n	8007610 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	3308      	adds	r3, #8
 8007648:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764a:	6a3b      	ldr	r3, [r7, #32]
 800764c:	e853 3f00 	ldrex	r3, [r3]
 8007650:	61fb      	str	r3, [r7, #28]
   return(result);
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	f023 0301 	bic.w	r3, r3, #1
 8007658:	64bb      	str	r3, [r7, #72]	; 0x48
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	3308      	adds	r3, #8
 8007660:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007662:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007664:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007666:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800766a:	e841 2300 	strex	r3, r2, [r1]
 800766e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1e5      	bne.n	8007642 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2220      	movs	r2, #32
 800767a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007688:	2b01      	cmp	r3, #1
 800768a:	d12e      	bne.n	80076ea <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	e853 3f00 	ldrex	r3, [r3]
 800769e:	60bb      	str	r3, [r7, #8]
   return(result);
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	f023 0310 	bic.w	r3, r3, #16
 80076a6:	647b      	str	r3, [r7, #68]	; 0x44
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	461a      	mov	r2, r3
 80076ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076b0:	61bb      	str	r3, [r7, #24]
 80076b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b4:	6979      	ldr	r1, [r7, #20]
 80076b6:	69ba      	ldr	r2, [r7, #24]
 80076b8:	e841 2300 	strex	r3, r2, [r1]
 80076bc:	613b      	str	r3, [r7, #16]
   return(result);
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d1e6      	bne.n	8007692 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	69db      	ldr	r3, [r3, #28]
 80076ca:	f003 0310 	and.w	r3, r3, #16
 80076ce:	2b10      	cmp	r3, #16
 80076d0:	d103      	bne.n	80076da <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2210      	movs	r2, #16
 80076d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80076e0:	4619      	mov	r1, r3
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f7ff f822 	bl	800672c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076e8:	e00b      	b.n	8007702 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f7f9 fa9a 	bl	8000c24 <HAL_UART_RxCpltCallback>
}
 80076f0:	e007      	b.n	8007702 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	699a      	ldr	r2, [r3, #24]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f042 0208 	orr.w	r2, r2, #8
 8007700:	619a      	str	r2, [r3, #24]
}
 8007702:	bf00      	nop
 8007704:	3758      	adds	r7, #88	; 0x58
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
	...

0800770c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b0a6      	sub	sp, #152	; 0x98
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800771a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	69db      	ldr	r3, [r3, #28]
 8007724:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007742:	2b22      	cmp	r3, #34	; 0x22
 8007744:	f040 814f 	bne.w	80079e6 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800774e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007752:	e0f6      	b.n	8007942 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800775e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007762:	b2d9      	uxtb	r1, r3
 8007764:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8007768:	b2da      	uxtb	r2, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800776e:	400a      	ands	r2, r1
 8007770:	b2d2      	uxtb	r2, r2
 8007772:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007778:	1c5a      	adds	r2, r3, #1
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007784:	b29b      	uxth	r3, r3
 8007786:	3b01      	subs	r3, #1
 8007788:	b29a      	uxth	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	69db      	ldr	r3, [r3, #28]
 8007796:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800779a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800779e:	f003 0307 	and.w	r3, r3, #7
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d053      	beq.n	800784e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80077a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80077aa:	f003 0301 	and.w	r3, r3, #1
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d011      	beq.n	80077d6 <UART_RxISR_8BIT_FIFOEN+0xca>
 80077b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00b      	beq.n	80077d6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2201      	movs	r2, #1
 80077c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077cc:	f043 0201 	orr.w	r2, r3, #1
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80077da:	f003 0302 	and.w	r3, r3, #2
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d011      	beq.n	8007806 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80077e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80077e6:	f003 0301 	and.w	r3, r3, #1
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00b      	beq.n	8007806 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2202      	movs	r2, #2
 80077f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077fc:	f043 0204 	orr.w	r2, r3, #4
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007806:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800780a:	f003 0304 	and.w	r3, r3, #4
 800780e:	2b00      	cmp	r3, #0
 8007810:	d011      	beq.n	8007836 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007812:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007816:	f003 0301 	and.w	r3, r3, #1
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00b      	beq.n	8007836 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2204      	movs	r2, #4
 8007824:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800782c:	f043 0202 	orr.w	r2, r3, #2
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800783c:	2b00      	cmp	r3, #0
 800783e:	d006      	beq.n	800784e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f7fe ff69 	bl	8006718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007854:	b29b      	uxth	r3, r3
 8007856:	2b00      	cmp	r3, #0
 8007858:	d173      	bne.n	8007942 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007860:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007862:	e853 3f00 	ldrex	r3, [r3]
 8007866:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007868:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800786a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800786e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	461a      	mov	r2, r3
 8007878:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800787c:	66bb      	str	r3, [r7, #104]	; 0x68
 800787e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007880:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007882:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007884:	e841 2300 	strex	r3, r2, [r1]
 8007888:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800788a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1e4      	bne.n	800785a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	3308      	adds	r3, #8
 8007896:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007898:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800789a:	e853 3f00 	ldrex	r3, [r3]
 800789e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80078a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078a6:	f023 0301 	bic.w	r3, r3, #1
 80078aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	3308      	adds	r3, #8
 80078b2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80078b4:	657a      	str	r2, [r7, #84]	; 0x54
 80078b6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80078ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80078bc:	e841 2300 	strex	r3, r2, [r1]
 80078c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80078c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d1e3      	bne.n	8007890 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2220      	movs	r2, #32
 80078cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d12e      	bne.n	800793c <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ec:	e853 3f00 	ldrex	r3, [r3]
 80078f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80078f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f4:	f023 0310 	bic.w	r3, r3, #16
 80078f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	461a      	mov	r2, r3
 8007900:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007902:	643b      	str	r3, [r7, #64]	; 0x40
 8007904:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007906:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007908:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800790a:	e841 2300 	strex	r3, r2, [r1]
 800790e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1e6      	bne.n	80078e4 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	69db      	ldr	r3, [r3, #28]
 800791c:	f003 0310 	and.w	r3, r3, #16
 8007920:	2b10      	cmp	r3, #16
 8007922:	d103      	bne.n	800792c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2210      	movs	r2, #16
 800792a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007932:	4619      	mov	r1, r3
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f7fe fef9 	bl	800672c <HAL_UARTEx_RxEventCallback>
 800793a:	e002      	b.n	8007942 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f7f9 f971 	bl	8000c24 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007942:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007946:	2b00      	cmp	r3, #0
 8007948:	d006      	beq.n	8007958 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800794a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800794e:	f003 0320 	and.w	r3, r3, #32
 8007952:	2b00      	cmp	r3, #0
 8007954:	f47f aefe 	bne.w	8007754 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800795e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007962:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8007966:	2b00      	cmp	r3, #0
 8007968:	d045      	beq.n	80079f6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007970:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007974:	429a      	cmp	r2, r3
 8007976:	d23e      	bcs.n	80079f6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	3308      	adds	r3, #8
 800797e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007980:	6a3b      	ldr	r3, [r7, #32]
 8007982:	e853 3f00 	ldrex	r3, [r3]
 8007986:	61fb      	str	r3, [r7, #28]
   return(result);
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800798e:	673b      	str	r3, [r7, #112]	; 0x70
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	3308      	adds	r3, #8
 8007996:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007998:	62fa      	str	r2, [r7, #44]	; 0x2c
 800799a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800799e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079a0:	e841 2300 	strex	r3, r2, [r1]
 80079a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1e5      	bne.n	8007978 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a14      	ldr	r2, [pc, #80]	; (8007a00 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80079b0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	e853 3f00 	ldrex	r3, [r3]
 80079be:	60bb      	str	r3, [r7, #8]
   return(result);
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	f043 0320 	orr.w	r3, r3, #32
 80079c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	461a      	mov	r2, r3
 80079ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079d0:	61bb      	str	r3, [r7, #24]
 80079d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d4:	6979      	ldr	r1, [r7, #20]
 80079d6:	69ba      	ldr	r2, [r7, #24]
 80079d8:	e841 2300 	strex	r3, r2, [r1]
 80079dc:	613b      	str	r3, [r7, #16]
   return(result);
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1e6      	bne.n	80079b2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80079e4:	e007      	b.n	80079f6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	699a      	ldr	r2, [r3, #24]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f042 0208 	orr.w	r2, r2, #8
 80079f4:	619a      	str	r2, [r3, #24]
}
 80079f6:	bf00      	nop
 80079f8:	3798      	adds	r7, #152	; 0x98
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	0800744b 	.word	0x0800744b

08007a04 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b0a8      	sub	sp, #160	; 0xa0
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007a12:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	69db      	ldr	r3, [r3, #28]
 8007a1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a3a:	2b22      	cmp	r3, #34	; 0x22
 8007a3c:	f040 8153 	bne.w	8007ce6 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007a46:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007a4a:	e0fa      	b.n	8007c42 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a52:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8007a5e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8007a62:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007a66:	4013      	ands	r3, r2
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a6e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a74:	1c9a      	adds	r2, r3, #2
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	3b01      	subs	r3, #1
 8007a84:	b29a      	uxth	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	69db      	ldr	r3, [r3, #28]
 8007a92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007a96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a9a:	f003 0307 	and.w	r3, r3, #7
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d053      	beq.n	8007b4a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007aa2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007aa6:	f003 0301 	and.w	r3, r3, #1
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d011      	beq.n	8007ad2 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007aae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00b      	beq.n	8007ad2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ac8:	f043 0201 	orr.w	r2, r3, #1
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ad2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ad6:	f003 0302 	and.w	r3, r3, #2
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d011      	beq.n	8007b02 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007ade:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ae2:	f003 0301 	and.w	r3, r3, #1
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00b      	beq.n	8007b02 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2202      	movs	r2, #2
 8007af0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007af8:	f043 0204 	orr.w	r2, r3, #4
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b06:	f003 0304 	and.w	r3, r3, #4
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d011      	beq.n	8007b32 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007b0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007b12:	f003 0301 	and.w	r3, r3, #1
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00b      	beq.n	8007b32 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2204      	movs	r2, #4
 8007b20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b28:	f043 0202 	orr.w	r2, r3, #2
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d006      	beq.n	8007b4a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f7fe fdeb 	bl	8006718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d175      	bne.n	8007c42 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b5e:	e853 3f00 	ldrex	r3, [r3]
 8007b62:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	461a      	mov	r2, r3
 8007b74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b7a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b7c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b7e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007b80:	e841 2300 	strex	r3, r2, [r1]
 8007b84:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007b86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d1e4      	bne.n	8007b56 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	3308      	adds	r3, #8
 8007b92:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b96:	e853 3f00 	ldrex	r3, [r3]
 8007b9a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ba2:	f023 0301 	bic.w	r3, r3, #1
 8007ba6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	3308      	adds	r3, #8
 8007bb0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007bb4:	65ba      	str	r2, [r7, #88]	; 0x58
 8007bb6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007bba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007bbc:	e841 2300 	strex	r3, r2, [r1]
 8007bc0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007bc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d1e1      	bne.n	8007b8c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2220      	movs	r2, #32
 8007bcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d12e      	bne.n	8007c3c <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bec:	e853 3f00 	ldrex	r3, [r3]
 8007bf0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bf4:	f023 0310 	bic.w	r3, r3, #16
 8007bf8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	461a      	mov	r2, r3
 8007c00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c02:	647b      	str	r3, [r7, #68]	; 0x44
 8007c04:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c0a:	e841 2300 	strex	r3, r2, [r1]
 8007c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1e6      	bne.n	8007be4 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	69db      	ldr	r3, [r3, #28]
 8007c1c:	f003 0310 	and.w	r3, r3, #16
 8007c20:	2b10      	cmp	r3, #16
 8007c22:	d103      	bne.n	8007c2c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2210      	movs	r2, #16
 8007c2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c32:	4619      	mov	r1, r3
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f7fe fd79 	bl	800672c <HAL_UARTEx_RxEventCallback>
 8007c3a:	e002      	b.n	8007c42 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f7f8 fff1 	bl	8000c24 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007c42:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d006      	beq.n	8007c58 <UART_RxISR_16BIT_FIFOEN+0x254>
 8007c4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c4e:	f003 0320 	and.w	r3, r3, #32
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f47f aefa 	bne.w	8007a4c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c5e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007c62:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d045      	beq.n	8007cf6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007c70:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d23e      	bcs.n	8007cf6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	3308      	adds	r3, #8
 8007c7e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c82:	e853 3f00 	ldrex	r3, [r3]
 8007c86:	623b      	str	r3, [r7, #32]
   return(result);
 8007c88:	6a3b      	ldr	r3, [r7, #32]
 8007c8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c8e:	677b      	str	r3, [r7, #116]	; 0x74
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	3308      	adds	r3, #8
 8007c96:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007c98:	633a      	str	r2, [r7, #48]	; 0x30
 8007c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ca0:	e841 2300 	strex	r3, r2, [r1]
 8007ca4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d1e5      	bne.n	8007c78 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	4a14      	ldr	r2, [pc, #80]	; (8007d00 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8007cb0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	e853 3f00 	ldrex	r3, [r3]
 8007cbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f043 0320 	orr.w	r3, r3, #32
 8007cc6:	673b      	str	r3, [r7, #112]	; 0x70
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	461a      	mov	r2, r3
 8007cce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cd0:	61fb      	str	r3, [r7, #28]
 8007cd2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd4:	69b9      	ldr	r1, [r7, #24]
 8007cd6:	69fa      	ldr	r2, [r7, #28]
 8007cd8:	e841 2300 	strex	r3, r2, [r1]
 8007cdc:	617b      	str	r3, [r7, #20]
   return(result);
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d1e6      	bne.n	8007cb2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ce4:	e007      	b.n	8007cf6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	699a      	ldr	r2, [r3, #24]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f042 0208 	orr.w	r2, r2, #8
 8007cf4:	619a      	str	r2, [r3, #24]
}
 8007cf6:	bf00      	nop
 8007cf8:	37a0      	adds	r7, #160	; 0xa0
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	080075ab 	.word	0x080075ab

08007d04 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007d0c:	bf00      	nop
 8007d0e:	370c      	adds	r7, #12
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007d20:	bf00      	nop
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007d34:	bf00      	nop
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d101      	bne.n	8007d56 <HAL_UARTEx_DisableFifoMode+0x16>
 8007d52:	2302      	movs	r3, #2
 8007d54:	e027      	b.n	8007da6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2224      	movs	r2, #36	; 0x24
 8007d62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f022 0201 	bic.w	r2, r2, #1
 8007d7c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007d84:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	68fa      	ldr	r2, [r7, #12]
 8007d92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2220      	movs	r2, #32
 8007d98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3714      	adds	r7, #20
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b084      	sub	sp, #16
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
 8007dba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d101      	bne.n	8007dca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007dc6:	2302      	movs	r3, #2
 8007dc8:	e02d      	b.n	8007e26 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2224      	movs	r2, #36	; 0x24
 8007dd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f022 0201 	bic.w	r2, r2, #1
 8007df0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	683a      	ldr	r2, [r7, #0]
 8007e02:	430a      	orrs	r2, r1
 8007e04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 f850 	bl	8007eac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2220      	movs	r2, #32
 8007e18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b084      	sub	sp, #16
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
 8007e36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d101      	bne.n	8007e46 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007e42:	2302      	movs	r3, #2
 8007e44:	e02d      	b.n	8007ea2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2224      	movs	r2, #36	; 0x24
 8007e52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f022 0201 	bic.w	r2, r2, #1
 8007e6c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	683a      	ldr	r2, [r7, #0]
 8007e7e:	430a      	orrs	r2, r1
 8007e80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f812 	bl	8007eac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2220      	movs	r2, #32
 8007e94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
	...

08007eac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b085      	sub	sp, #20
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d108      	bne.n	8007ece <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007ecc:	e031      	b.n	8007f32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007ece:	2308      	movs	r3, #8
 8007ed0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007ed2:	2308      	movs	r3, #8
 8007ed4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	0e5b      	lsrs	r3, r3, #25
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	f003 0307 	and.w	r3, r3, #7
 8007ee4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	0f5b      	lsrs	r3, r3, #29
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	f003 0307 	and.w	r3, r3, #7
 8007ef4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ef6:	7bbb      	ldrb	r3, [r7, #14]
 8007ef8:	7b3a      	ldrb	r2, [r7, #12]
 8007efa:	4911      	ldr	r1, [pc, #68]	; (8007f40 <UARTEx_SetNbDataToProcess+0x94>)
 8007efc:	5c8a      	ldrb	r2, [r1, r2]
 8007efe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007f02:	7b3a      	ldrb	r2, [r7, #12]
 8007f04:	490f      	ldr	r1, [pc, #60]	; (8007f44 <UARTEx_SetNbDataToProcess+0x98>)
 8007f06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f08:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f0c:	b29a      	uxth	r2, r3
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f14:	7bfb      	ldrb	r3, [r7, #15]
 8007f16:	7b7a      	ldrb	r2, [r7, #13]
 8007f18:	4909      	ldr	r1, [pc, #36]	; (8007f40 <UARTEx_SetNbDataToProcess+0x94>)
 8007f1a:	5c8a      	ldrb	r2, [r1, r2]
 8007f1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007f20:	7b7a      	ldrb	r2, [r7, #13]
 8007f22:	4908      	ldr	r1, [pc, #32]	; (8007f44 <UARTEx_SetNbDataToProcess+0x98>)
 8007f24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f26:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007f32:	bf00      	nop
 8007f34:	3714      	adds	r7, #20
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop
 8007f40:	080089f8 	.word	0x080089f8
 8007f44:	08008a00 	.word	0x08008a00

08007f48 <sniprintf>:
 8007f48:	b40c      	push	{r2, r3}
 8007f4a:	b530      	push	{r4, r5, lr}
 8007f4c:	4b17      	ldr	r3, [pc, #92]	; (8007fac <sniprintf+0x64>)
 8007f4e:	1e0c      	subs	r4, r1, #0
 8007f50:	681d      	ldr	r5, [r3, #0]
 8007f52:	b09d      	sub	sp, #116	; 0x74
 8007f54:	da08      	bge.n	8007f68 <sniprintf+0x20>
 8007f56:	238b      	movs	r3, #139	; 0x8b
 8007f58:	602b      	str	r3, [r5, #0]
 8007f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f5e:	b01d      	add	sp, #116	; 0x74
 8007f60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f64:	b002      	add	sp, #8
 8007f66:	4770      	bx	lr
 8007f68:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007f6c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007f70:	bf14      	ite	ne
 8007f72:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007f76:	4623      	moveq	r3, r4
 8007f78:	9304      	str	r3, [sp, #16]
 8007f7a:	9307      	str	r3, [sp, #28]
 8007f7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007f80:	9002      	str	r0, [sp, #8]
 8007f82:	9006      	str	r0, [sp, #24]
 8007f84:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007f88:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007f8a:	ab21      	add	r3, sp, #132	; 0x84
 8007f8c:	a902      	add	r1, sp, #8
 8007f8e:	4628      	mov	r0, r5
 8007f90:	9301      	str	r3, [sp, #4]
 8007f92:	f000 f993 	bl	80082bc <_svfiprintf_r>
 8007f96:	1c43      	adds	r3, r0, #1
 8007f98:	bfbc      	itt	lt
 8007f9a:	238b      	movlt	r3, #139	; 0x8b
 8007f9c:	602b      	strlt	r3, [r5, #0]
 8007f9e:	2c00      	cmp	r4, #0
 8007fa0:	d0dd      	beq.n	8007f5e <sniprintf+0x16>
 8007fa2:	9b02      	ldr	r3, [sp, #8]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	701a      	strb	r2, [r3, #0]
 8007fa8:	e7d9      	b.n	8007f5e <sniprintf+0x16>
 8007faa:	bf00      	nop
 8007fac:	200000d0 	.word	0x200000d0

08007fb0 <memset>:
 8007fb0:	4402      	add	r2, r0
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d100      	bne.n	8007fba <memset+0xa>
 8007fb8:	4770      	bx	lr
 8007fba:	f803 1b01 	strb.w	r1, [r3], #1
 8007fbe:	e7f9      	b.n	8007fb4 <memset+0x4>

08007fc0 <__errno>:
 8007fc0:	4b01      	ldr	r3, [pc, #4]	; (8007fc8 <__errno+0x8>)
 8007fc2:	6818      	ldr	r0, [r3, #0]
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop
 8007fc8:	200000d0 	.word	0x200000d0

08007fcc <__libc_init_array>:
 8007fcc:	b570      	push	{r4, r5, r6, lr}
 8007fce:	4d0d      	ldr	r5, [pc, #52]	; (8008004 <__libc_init_array+0x38>)
 8007fd0:	4c0d      	ldr	r4, [pc, #52]	; (8008008 <__libc_init_array+0x3c>)
 8007fd2:	1b64      	subs	r4, r4, r5
 8007fd4:	10a4      	asrs	r4, r4, #2
 8007fd6:	2600      	movs	r6, #0
 8007fd8:	42a6      	cmp	r6, r4
 8007fda:	d109      	bne.n	8007ff0 <__libc_init_array+0x24>
 8007fdc:	4d0b      	ldr	r5, [pc, #44]	; (800800c <__libc_init_array+0x40>)
 8007fde:	4c0c      	ldr	r4, [pc, #48]	; (8008010 <__libc_init_array+0x44>)
 8007fe0:	f000 fc6a 	bl	80088b8 <_init>
 8007fe4:	1b64      	subs	r4, r4, r5
 8007fe6:	10a4      	asrs	r4, r4, #2
 8007fe8:	2600      	movs	r6, #0
 8007fea:	42a6      	cmp	r6, r4
 8007fec:	d105      	bne.n	8007ffa <__libc_init_array+0x2e>
 8007fee:	bd70      	pop	{r4, r5, r6, pc}
 8007ff0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ff4:	4798      	blx	r3
 8007ff6:	3601      	adds	r6, #1
 8007ff8:	e7ee      	b.n	8007fd8 <__libc_init_array+0xc>
 8007ffa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ffe:	4798      	blx	r3
 8008000:	3601      	adds	r6, #1
 8008002:	e7f2      	b.n	8007fea <__libc_init_array+0x1e>
 8008004:	08008a44 	.word	0x08008a44
 8008008:	08008a44 	.word	0x08008a44
 800800c:	08008a44 	.word	0x08008a44
 8008010:	08008a48 	.word	0x08008a48

08008014 <__retarget_lock_acquire_recursive>:
 8008014:	4770      	bx	lr

08008016 <__retarget_lock_release_recursive>:
 8008016:	4770      	bx	lr

08008018 <_free_r>:
 8008018:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800801a:	2900      	cmp	r1, #0
 800801c:	d044      	beq.n	80080a8 <_free_r+0x90>
 800801e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008022:	9001      	str	r0, [sp, #4]
 8008024:	2b00      	cmp	r3, #0
 8008026:	f1a1 0404 	sub.w	r4, r1, #4
 800802a:	bfb8      	it	lt
 800802c:	18e4      	addlt	r4, r4, r3
 800802e:	f000 f8df 	bl	80081f0 <__malloc_lock>
 8008032:	4a1e      	ldr	r2, [pc, #120]	; (80080ac <_free_r+0x94>)
 8008034:	9801      	ldr	r0, [sp, #4]
 8008036:	6813      	ldr	r3, [r2, #0]
 8008038:	b933      	cbnz	r3, 8008048 <_free_r+0x30>
 800803a:	6063      	str	r3, [r4, #4]
 800803c:	6014      	str	r4, [r2, #0]
 800803e:	b003      	add	sp, #12
 8008040:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008044:	f000 b8da 	b.w	80081fc <__malloc_unlock>
 8008048:	42a3      	cmp	r3, r4
 800804a:	d908      	bls.n	800805e <_free_r+0x46>
 800804c:	6825      	ldr	r5, [r4, #0]
 800804e:	1961      	adds	r1, r4, r5
 8008050:	428b      	cmp	r3, r1
 8008052:	bf01      	itttt	eq
 8008054:	6819      	ldreq	r1, [r3, #0]
 8008056:	685b      	ldreq	r3, [r3, #4]
 8008058:	1949      	addeq	r1, r1, r5
 800805a:	6021      	streq	r1, [r4, #0]
 800805c:	e7ed      	b.n	800803a <_free_r+0x22>
 800805e:	461a      	mov	r2, r3
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	b10b      	cbz	r3, 8008068 <_free_r+0x50>
 8008064:	42a3      	cmp	r3, r4
 8008066:	d9fa      	bls.n	800805e <_free_r+0x46>
 8008068:	6811      	ldr	r1, [r2, #0]
 800806a:	1855      	adds	r5, r2, r1
 800806c:	42a5      	cmp	r5, r4
 800806e:	d10b      	bne.n	8008088 <_free_r+0x70>
 8008070:	6824      	ldr	r4, [r4, #0]
 8008072:	4421      	add	r1, r4
 8008074:	1854      	adds	r4, r2, r1
 8008076:	42a3      	cmp	r3, r4
 8008078:	6011      	str	r1, [r2, #0]
 800807a:	d1e0      	bne.n	800803e <_free_r+0x26>
 800807c:	681c      	ldr	r4, [r3, #0]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	6053      	str	r3, [r2, #4]
 8008082:	440c      	add	r4, r1
 8008084:	6014      	str	r4, [r2, #0]
 8008086:	e7da      	b.n	800803e <_free_r+0x26>
 8008088:	d902      	bls.n	8008090 <_free_r+0x78>
 800808a:	230c      	movs	r3, #12
 800808c:	6003      	str	r3, [r0, #0]
 800808e:	e7d6      	b.n	800803e <_free_r+0x26>
 8008090:	6825      	ldr	r5, [r4, #0]
 8008092:	1961      	adds	r1, r4, r5
 8008094:	428b      	cmp	r3, r1
 8008096:	bf04      	itt	eq
 8008098:	6819      	ldreq	r1, [r3, #0]
 800809a:	685b      	ldreq	r3, [r3, #4]
 800809c:	6063      	str	r3, [r4, #4]
 800809e:	bf04      	itt	eq
 80080a0:	1949      	addeq	r1, r1, r5
 80080a2:	6021      	streq	r1, [r4, #0]
 80080a4:	6054      	str	r4, [r2, #4]
 80080a6:	e7ca      	b.n	800803e <_free_r+0x26>
 80080a8:	b003      	add	sp, #12
 80080aa:	bd30      	pop	{r4, r5, pc}
 80080ac:	20000540 	.word	0x20000540

080080b0 <sbrk_aligned>:
 80080b0:	b570      	push	{r4, r5, r6, lr}
 80080b2:	4e0e      	ldr	r6, [pc, #56]	; (80080ec <sbrk_aligned+0x3c>)
 80080b4:	460c      	mov	r4, r1
 80080b6:	6831      	ldr	r1, [r6, #0]
 80080b8:	4605      	mov	r5, r0
 80080ba:	b911      	cbnz	r1, 80080c2 <sbrk_aligned+0x12>
 80080bc:	f000 fba6 	bl	800880c <_sbrk_r>
 80080c0:	6030      	str	r0, [r6, #0]
 80080c2:	4621      	mov	r1, r4
 80080c4:	4628      	mov	r0, r5
 80080c6:	f000 fba1 	bl	800880c <_sbrk_r>
 80080ca:	1c43      	adds	r3, r0, #1
 80080cc:	d00a      	beq.n	80080e4 <sbrk_aligned+0x34>
 80080ce:	1cc4      	adds	r4, r0, #3
 80080d0:	f024 0403 	bic.w	r4, r4, #3
 80080d4:	42a0      	cmp	r0, r4
 80080d6:	d007      	beq.n	80080e8 <sbrk_aligned+0x38>
 80080d8:	1a21      	subs	r1, r4, r0
 80080da:	4628      	mov	r0, r5
 80080dc:	f000 fb96 	bl	800880c <_sbrk_r>
 80080e0:	3001      	adds	r0, #1
 80080e2:	d101      	bne.n	80080e8 <sbrk_aligned+0x38>
 80080e4:	f04f 34ff 	mov.w	r4, #4294967295
 80080e8:	4620      	mov	r0, r4
 80080ea:	bd70      	pop	{r4, r5, r6, pc}
 80080ec:	20000544 	.word	0x20000544

080080f0 <_malloc_r>:
 80080f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080f4:	1ccd      	adds	r5, r1, #3
 80080f6:	f025 0503 	bic.w	r5, r5, #3
 80080fa:	3508      	adds	r5, #8
 80080fc:	2d0c      	cmp	r5, #12
 80080fe:	bf38      	it	cc
 8008100:	250c      	movcc	r5, #12
 8008102:	2d00      	cmp	r5, #0
 8008104:	4607      	mov	r7, r0
 8008106:	db01      	blt.n	800810c <_malloc_r+0x1c>
 8008108:	42a9      	cmp	r1, r5
 800810a:	d905      	bls.n	8008118 <_malloc_r+0x28>
 800810c:	230c      	movs	r3, #12
 800810e:	603b      	str	r3, [r7, #0]
 8008110:	2600      	movs	r6, #0
 8008112:	4630      	mov	r0, r6
 8008114:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008118:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80081ec <_malloc_r+0xfc>
 800811c:	f000 f868 	bl	80081f0 <__malloc_lock>
 8008120:	f8d8 3000 	ldr.w	r3, [r8]
 8008124:	461c      	mov	r4, r3
 8008126:	bb5c      	cbnz	r4, 8008180 <_malloc_r+0x90>
 8008128:	4629      	mov	r1, r5
 800812a:	4638      	mov	r0, r7
 800812c:	f7ff ffc0 	bl	80080b0 <sbrk_aligned>
 8008130:	1c43      	adds	r3, r0, #1
 8008132:	4604      	mov	r4, r0
 8008134:	d155      	bne.n	80081e2 <_malloc_r+0xf2>
 8008136:	f8d8 4000 	ldr.w	r4, [r8]
 800813a:	4626      	mov	r6, r4
 800813c:	2e00      	cmp	r6, #0
 800813e:	d145      	bne.n	80081cc <_malloc_r+0xdc>
 8008140:	2c00      	cmp	r4, #0
 8008142:	d048      	beq.n	80081d6 <_malloc_r+0xe6>
 8008144:	6823      	ldr	r3, [r4, #0]
 8008146:	4631      	mov	r1, r6
 8008148:	4638      	mov	r0, r7
 800814a:	eb04 0903 	add.w	r9, r4, r3
 800814e:	f000 fb5d 	bl	800880c <_sbrk_r>
 8008152:	4581      	cmp	r9, r0
 8008154:	d13f      	bne.n	80081d6 <_malloc_r+0xe6>
 8008156:	6821      	ldr	r1, [r4, #0]
 8008158:	1a6d      	subs	r5, r5, r1
 800815a:	4629      	mov	r1, r5
 800815c:	4638      	mov	r0, r7
 800815e:	f7ff ffa7 	bl	80080b0 <sbrk_aligned>
 8008162:	3001      	adds	r0, #1
 8008164:	d037      	beq.n	80081d6 <_malloc_r+0xe6>
 8008166:	6823      	ldr	r3, [r4, #0]
 8008168:	442b      	add	r3, r5
 800816a:	6023      	str	r3, [r4, #0]
 800816c:	f8d8 3000 	ldr.w	r3, [r8]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d038      	beq.n	80081e6 <_malloc_r+0xf6>
 8008174:	685a      	ldr	r2, [r3, #4]
 8008176:	42a2      	cmp	r2, r4
 8008178:	d12b      	bne.n	80081d2 <_malloc_r+0xe2>
 800817a:	2200      	movs	r2, #0
 800817c:	605a      	str	r2, [r3, #4]
 800817e:	e00f      	b.n	80081a0 <_malloc_r+0xb0>
 8008180:	6822      	ldr	r2, [r4, #0]
 8008182:	1b52      	subs	r2, r2, r5
 8008184:	d41f      	bmi.n	80081c6 <_malloc_r+0xd6>
 8008186:	2a0b      	cmp	r2, #11
 8008188:	d917      	bls.n	80081ba <_malloc_r+0xca>
 800818a:	1961      	adds	r1, r4, r5
 800818c:	42a3      	cmp	r3, r4
 800818e:	6025      	str	r5, [r4, #0]
 8008190:	bf18      	it	ne
 8008192:	6059      	strne	r1, [r3, #4]
 8008194:	6863      	ldr	r3, [r4, #4]
 8008196:	bf08      	it	eq
 8008198:	f8c8 1000 	streq.w	r1, [r8]
 800819c:	5162      	str	r2, [r4, r5]
 800819e:	604b      	str	r3, [r1, #4]
 80081a0:	4638      	mov	r0, r7
 80081a2:	f104 060b 	add.w	r6, r4, #11
 80081a6:	f000 f829 	bl	80081fc <__malloc_unlock>
 80081aa:	f026 0607 	bic.w	r6, r6, #7
 80081ae:	1d23      	adds	r3, r4, #4
 80081b0:	1af2      	subs	r2, r6, r3
 80081b2:	d0ae      	beq.n	8008112 <_malloc_r+0x22>
 80081b4:	1b9b      	subs	r3, r3, r6
 80081b6:	50a3      	str	r3, [r4, r2]
 80081b8:	e7ab      	b.n	8008112 <_malloc_r+0x22>
 80081ba:	42a3      	cmp	r3, r4
 80081bc:	6862      	ldr	r2, [r4, #4]
 80081be:	d1dd      	bne.n	800817c <_malloc_r+0x8c>
 80081c0:	f8c8 2000 	str.w	r2, [r8]
 80081c4:	e7ec      	b.n	80081a0 <_malloc_r+0xb0>
 80081c6:	4623      	mov	r3, r4
 80081c8:	6864      	ldr	r4, [r4, #4]
 80081ca:	e7ac      	b.n	8008126 <_malloc_r+0x36>
 80081cc:	4634      	mov	r4, r6
 80081ce:	6876      	ldr	r6, [r6, #4]
 80081d0:	e7b4      	b.n	800813c <_malloc_r+0x4c>
 80081d2:	4613      	mov	r3, r2
 80081d4:	e7cc      	b.n	8008170 <_malloc_r+0x80>
 80081d6:	230c      	movs	r3, #12
 80081d8:	603b      	str	r3, [r7, #0]
 80081da:	4638      	mov	r0, r7
 80081dc:	f000 f80e 	bl	80081fc <__malloc_unlock>
 80081e0:	e797      	b.n	8008112 <_malloc_r+0x22>
 80081e2:	6025      	str	r5, [r4, #0]
 80081e4:	e7dc      	b.n	80081a0 <_malloc_r+0xb0>
 80081e6:	605b      	str	r3, [r3, #4]
 80081e8:	deff      	udf	#255	; 0xff
 80081ea:	bf00      	nop
 80081ec:	20000540 	.word	0x20000540

080081f0 <__malloc_lock>:
 80081f0:	4801      	ldr	r0, [pc, #4]	; (80081f8 <__malloc_lock+0x8>)
 80081f2:	f7ff bf0f 	b.w	8008014 <__retarget_lock_acquire_recursive>
 80081f6:	bf00      	nop
 80081f8:	2000053c 	.word	0x2000053c

080081fc <__malloc_unlock>:
 80081fc:	4801      	ldr	r0, [pc, #4]	; (8008204 <__malloc_unlock+0x8>)
 80081fe:	f7ff bf0a 	b.w	8008016 <__retarget_lock_release_recursive>
 8008202:	bf00      	nop
 8008204:	2000053c 	.word	0x2000053c

08008208 <__ssputs_r>:
 8008208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800820c:	688e      	ldr	r6, [r1, #8]
 800820e:	461f      	mov	r7, r3
 8008210:	42be      	cmp	r6, r7
 8008212:	680b      	ldr	r3, [r1, #0]
 8008214:	4682      	mov	sl, r0
 8008216:	460c      	mov	r4, r1
 8008218:	4690      	mov	r8, r2
 800821a:	d82c      	bhi.n	8008276 <__ssputs_r+0x6e>
 800821c:	898a      	ldrh	r2, [r1, #12]
 800821e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008222:	d026      	beq.n	8008272 <__ssputs_r+0x6a>
 8008224:	6965      	ldr	r5, [r4, #20]
 8008226:	6909      	ldr	r1, [r1, #16]
 8008228:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800822c:	eba3 0901 	sub.w	r9, r3, r1
 8008230:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008234:	1c7b      	adds	r3, r7, #1
 8008236:	444b      	add	r3, r9
 8008238:	106d      	asrs	r5, r5, #1
 800823a:	429d      	cmp	r5, r3
 800823c:	bf38      	it	cc
 800823e:	461d      	movcc	r5, r3
 8008240:	0553      	lsls	r3, r2, #21
 8008242:	d527      	bpl.n	8008294 <__ssputs_r+0x8c>
 8008244:	4629      	mov	r1, r5
 8008246:	f7ff ff53 	bl	80080f0 <_malloc_r>
 800824a:	4606      	mov	r6, r0
 800824c:	b360      	cbz	r0, 80082a8 <__ssputs_r+0xa0>
 800824e:	6921      	ldr	r1, [r4, #16]
 8008250:	464a      	mov	r2, r9
 8008252:	f000 faeb 	bl	800882c <memcpy>
 8008256:	89a3      	ldrh	r3, [r4, #12]
 8008258:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800825c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008260:	81a3      	strh	r3, [r4, #12]
 8008262:	6126      	str	r6, [r4, #16]
 8008264:	6165      	str	r5, [r4, #20]
 8008266:	444e      	add	r6, r9
 8008268:	eba5 0509 	sub.w	r5, r5, r9
 800826c:	6026      	str	r6, [r4, #0]
 800826e:	60a5      	str	r5, [r4, #8]
 8008270:	463e      	mov	r6, r7
 8008272:	42be      	cmp	r6, r7
 8008274:	d900      	bls.n	8008278 <__ssputs_r+0x70>
 8008276:	463e      	mov	r6, r7
 8008278:	6820      	ldr	r0, [r4, #0]
 800827a:	4632      	mov	r2, r6
 800827c:	4641      	mov	r1, r8
 800827e:	f000 faab 	bl	80087d8 <memmove>
 8008282:	68a3      	ldr	r3, [r4, #8]
 8008284:	1b9b      	subs	r3, r3, r6
 8008286:	60a3      	str	r3, [r4, #8]
 8008288:	6823      	ldr	r3, [r4, #0]
 800828a:	4433      	add	r3, r6
 800828c:	6023      	str	r3, [r4, #0]
 800828e:	2000      	movs	r0, #0
 8008290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008294:	462a      	mov	r2, r5
 8008296:	f000 fad7 	bl	8008848 <_realloc_r>
 800829a:	4606      	mov	r6, r0
 800829c:	2800      	cmp	r0, #0
 800829e:	d1e0      	bne.n	8008262 <__ssputs_r+0x5a>
 80082a0:	6921      	ldr	r1, [r4, #16]
 80082a2:	4650      	mov	r0, sl
 80082a4:	f7ff feb8 	bl	8008018 <_free_r>
 80082a8:	230c      	movs	r3, #12
 80082aa:	f8ca 3000 	str.w	r3, [sl]
 80082ae:	89a3      	ldrh	r3, [r4, #12]
 80082b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082b4:	81a3      	strh	r3, [r4, #12]
 80082b6:	f04f 30ff 	mov.w	r0, #4294967295
 80082ba:	e7e9      	b.n	8008290 <__ssputs_r+0x88>

080082bc <_svfiprintf_r>:
 80082bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c0:	4698      	mov	r8, r3
 80082c2:	898b      	ldrh	r3, [r1, #12]
 80082c4:	061b      	lsls	r3, r3, #24
 80082c6:	b09d      	sub	sp, #116	; 0x74
 80082c8:	4607      	mov	r7, r0
 80082ca:	460d      	mov	r5, r1
 80082cc:	4614      	mov	r4, r2
 80082ce:	d50e      	bpl.n	80082ee <_svfiprintf_r+0x32>
 80082d0:	690b      	ldr	r3, [r1, #16]
 80082d2:	b963      	cbnz	r3, 80082ee <_svfiprintf_r+0x32>
 80082d4:	2140      	movs	r1, #64	; 0x40
 80082d6:	f7ff ff0b 	bl	80080f0 <_malloc_r>
 80082da:	6028      	str	r0, [r5, #0]
 80082dc:	6128      	str	r0, [r5, #16]
 80082de:	b920      	cbnz	r0, 80082ea <_svfiprintf_r+0x2e>
 80082e0:	230c      	movs	r3, #12
 80082e2:	603b      	str	r3, [r7, #0]
 80082e4:	f04f 30ff 	mov.w	r0, #4294967295
 80082e8:	e0d0      	b.n	800848c <_svfiprintf_r+0x1d0>
 80082ea:	2340      	movs	r3, #64	; 0x40
 80082ec:	616b      	str	r3, [r5, #20]
 80082ee:	2300      	movs	r3, #0
 80082f0:	9309      	str	r3, [sp, #36]	; 0x24
 80082f2:	2320      	movs	r3, #32
 80082f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80082fc:	2330      	movs	r3, #48	; 0x30
 80082fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80084a4 <_svfiprintf_r+0x1e8>
 8008302:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008306:	f04f 0901 	mov.w	r9, #1
 800830a:	4623      	mov	r3, r4
 800830c:	469a      	mov	sl, r3
 800830e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008312:	b10a      	cbz	r2, 8008318 <_svfiprintf_r+0x5c>
 8008314:	2a25      	cmp	r2, #37	; 0x25
 8008316:	d1f9      	bne.n	800830c <_svfiprintf_r+0x50>
 8008318:	ebba 0b04 	subs.w	fp, sl, r4
 800831c:	d00b      	beq.n	8008336 <_svfiprintf_r+0x7a>
 800831e:	465b      	mov	r3, fp
 8008320:	4622      	mov	r2, r4
 8008322:	4629      	mov	r1, r5
 8008324:	4638      	mov	r0, r7
 8008326:	f7ff ff6f 	bl	8008208 <__ssputs_r>
 800832a:	3001      	adds	r0, #1
 800832c:	f000 80a9 	beq.w	8008482 <_svfiprintf_r+0x1c6>
 8008330:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008332:	445a      	add	r2, fp
 8008334:	9209      	str	r2, [sp, #36]	; 0x24
 8008336:	f89a 3000 	ldrb.w	r3, [sl]
 800833a:	2b00      	cmp	r3, #0
 800833c:	f000 80a1 	beq.w	8008482 <_svfiprintf_r+0x1c6>
 8008340:	2300      	movs	r3, #0
 8008342:	f04f 32ff 	mov.w	r2, #4294967295
 8008346:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800834a:	f10a 0a01 	add.w	sl, sl, #1
 800834e:	9304      	str	r3, [sp, #16]
 8008350:	9307      	str	r3, [sp, #28]
 8008352:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008356:	931a      	str	r3, [sp, #104]	; 0x68
 8008358:	4654      	mov	r4, sl
 800835a:	2205      	movs	r2, #5
 800835c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008360:	4850      	ldr	r0, [pc, #320]	; (80084a4 <_svfiprintf_r+0x1e8>)
 8008362:	f7f7 ff75 	bl	8000250 <memchr>
 8008366:	9a04      	ldr	r2, [sp, #16]
 8008368:	b9d8      	cbnz	r0, 80083a2 <_svfiprintf_r+0xe6>
 800836a:	06d0      	lsls	r0, r2, #27
 800836c:	bf44      	itt	mi
 800836e:	2320      	movmi	r3, #32
 8008370:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008374:	0711      	lsls	r1, r2, #28
 8008376:	bf44      	itt	mi
 8008378:	232b      	movmi	r3, #43	; 0x2b
 800837a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800837e:	f89a 3000 	ldrb.w	r3, [sl]
 8008382:	2b2a      	cmp	r3, #42	; 0x2a
 8008384:	d015      	beq.n	80083b2 <_svfiprintf_r+0xf6>
 8008386:	9a07      	ldr	r2, [sp, #28]
 8008388:	4654      	mov	r4, sl
 800838a:	2000      	movs	r0, #0
 800838c:	f04f 0c0a 	mov.w	ip, #10
 8008390:	4621      	mov	r1, r4
 8008392:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008396:	3b30      	subs	r3, #48	; 0x30
 8008398:	2b09      	cmp	r3, #9
 800839a:	d94d      	bls.n	8008438 <_svfiprintf_r+0x17c>
 800839c:	b1b0      	cbz	r0, 80083cc <_svfiprintf_r+0x110>
 800839e:	9207      	str	r2, [sp, #28]
 80083a0:	e014      	b.n	80083cc <_svfiprintf_r+0x110>
 80083a2:	eba0 0308 	sub.w	r3, r0, r8
 80083a6:	fa09 f303 	lsl.w	r3, r9, r3
 80083aa:	4313      	orrs	r3, r2
 80083ac:	9304      	str	r3, [sp, #16]
 80083ae:	46a2      	mov	sl, r4
 80083b0:	e7d2      	b.n	8008358 <_svfiprintf_r+0x9c>
 80083b2:	9b03      	ldr	r3, [sp, #12]
 80083b4:	1d19      	adds	r1, r3, #4
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	9103      	str	r1, [sp, #12]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	bfbb      	ittet	lt
 80083be:	425b      	neglt	r3, r3
 80083c0:	f042 0202 	orrlt.w	r2, r2, #2
 80083c4:	9307      	strge	r3, [sp, #28]
 80083c6:	9307      	strlt	r3, [sp, #28]
 80083c8:	bfb8      	it	lt
 80083ca:	9204      	strlt	r2, [sp, #16]
 80083cc:	7823      	ldrb	r3, [r4, #0]
 80083ce:	2b2e      	cmp	r3, #46	; 0x2e
 80083d0:	d10c      	bne.n	80083ec <_svfiprintf_r+0x130>
 80083d2:	7863      	ldrb	r3, [r4, #1]
 80083d4:	2b2a      	cmp	r3, #42	; 0x2a
 80083d6:	d134      	bne.n	8008442 <_svfiprintf_r+0x186>
 80083d8:	9b03      	ldr	r3, [sp, #12]
 80083da:	1d1a      	adds	r2, r3, #4
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	9203      	str	r2, [sp, #12]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	bfb8      	it	lt
 80083e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80083e8:	3402      	adds	r4, #2
 80083ea:	9305      	str	r3, [sp, #20]
 80083ec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80084b4 <_svfiprintf_r+0x1f8>
 80083f0:	7821      	ldrb	r1, [r4, #0]
 80083f2:	2203      	movs	r2, #3
 80083f4:	4650      	mov	r0, sl
 80083f6:	f7f7 ff2b 	bl	8000250 <memchr>
 80083fa:	b138      	cbz	r0, 800840c <_svfiprintf_r+0x150>
 80083fc:	9b04      	ldr	r3, [sp, #16]
 80083fe:	eba0 000a 	sub.w	r0, r0, sl
 8008402:	2240      	movs	r2, #64	; 0x40
 8008404:	4082      	lsls	r2, r0
 8008406:	4313      	orrs	r3, r2
 8008408:	3401      	adds	r4, #1
 800840a:	9304      	str	r3, [sp, #16]
 800840c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008410:	4825      	ldr	r0, [pc, #148]	; (80084a8 <_svfiprintf_r+0x1ec>)
 8008412:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008416:	2206      	movs	r2, #6
 8008418:	f7f7 ff1a 	bl	8000250 <memchr>
 800841c:	2800      	cmp	r0, #0
 800841e:	d038      	beq.n	8008492 <_svfiprintf_r+0x1d6>
 8008420:	4b22      	ldr	r3, [pc, #136]	; (80084ac <_svfiprintf_r+0x1f0>)
 8008422:	bb1b      	cbnz	r3, 800846c <_svfiprintf_r+0x1b0>
 8008424:	9b03      	ldr	r3, [sp, #12]
 8008426:	3307      	adds	r3, #7
 8008428:	f023 0307 	bic.w	r3, r3, #7
 800842c:	3308      	adds	r3, #8
 800842e:	9303      	str	r3, [sp, #12]
 8008430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008432:	4433      	add	r3, r6
 8008434:	9309      	str	r3, [sp, #36]	; 0x24
 8008436:	e768      	b.n	800830a <_svfiprintf_r+0x4e>
 8008438:	fb0c 3202 	mla	r2, ip, r2, r3
 800843c:	460c      	mov	r4, r1
 800843e:	2001      	movs	r0, #1
 8008440:	e7a6      	b.n	8008390 <_svfiprintf_r+0xd4>
 8008442:	2300      	movs	r3, #0
 8008444:	3401      	adds	r4, #1
 8008446:	9305      	str	r3, [sp, #20]
 8008448:	4619      	mov	r1, r3
 800844a:	f04f 0c0a 	mov.w	ip, #10
 800844e:	4620      	mov	r0, r4
 8008450:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008454:	3a30      	subs	r2, #48	; 0x30
 8008456:	2a09      	cmp	r2, #9
 8008458:	d903      	bls.n	8008462 <_svfiprintf_r+0x1a6>
 800845a:	2b00      	cmp	r3, #0
 800845c:	d0c6      	beq.n	80083ec <_svfiprintf_r+0x130>
 800845e:	9105      	str	r1, [sp, #20]
 8008460:	e7c4      	b.n	80083ec <_svfiprintf_r+0x130>
 8008462:	fb0c 2101 	mla	r1, ip, r1, r2
 8008466:	4604      	mov	r4, r0
 8008468:	2301      	movs	r3, #1
 800846a:	e7f0      	b.n	800844e <_svfiprintf_r+0x192>
 800846c:	ab03      	add	r3, sp, #12
 800846e:	9300      	str	r3, [sp, #0]
 8008470:	462a      	mov	r2, r5
 8008472:	4b0f      	ldr	r3, [pc, #60]	; (80084b0 <_svfiprintf_r+0x1f4>)
 8008474:	a904      	add	r1, sp, #16
 8008476:	4638      	mov	r0, r7
 8008478:	f3af 8000 	nop.w
 800847c:	1c42      	adds	r2, r0, #1
 800847e:	4606      	mov	r6, r0
 8008480:	d1d6      	bne.n	8008430 <_svfiprintf_r+0x174>
 8008482:	89ab      	ldrh	r3, [r5, #12]
 8008484:	065b      	lsls	r3, r3, #25
 8008486:	f53f af2d 	bmi.w	80082e4 <_svfiprintf_r+0x28>
 800848a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800848c:	b01d      	add	sp, #116	; 0x74
 800848e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008492:	ab03      	add	r3, sp, #12
 8008494:	9300      	str	r3, [sp, #0]
 8008496:	462a      	mov	r2, r5
 8008498:	4b05      	ldr	r3, [pc, #20]	; (80084b0 <_svfiprintf_r+0x1f4>)
 800849a:	a904      	add	r1, sp, #16
 800849c:	4638      	mov	r0, r7
 800849e:	f000 f879 	bl	8008594 <_printf_i>
 80084a2:	e7eb      	b.n	800847c <_svfiprintf_r+0x1c0>
 80084a4:	08008a08 	.word	0x08008a08
 80084a8:	08008a12 	.word	0x08008a12
 80084ac:	00000000 	.word	0x00000000
 80084b0:	08008209 	.word	0x08008209
 80084b4:	08008a0e 	.word	0x08008a0e

080084b8 <_printf_common>:
 80084b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084bc:	4616      	mov	r6, r2
 80084be:	4699      	mov	r9, r3
 80084c0:	688a      	ldr	r2, [r1, #8]
 80084c2:	690b      	ldr	r3, [r1, #16]
 80084c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80084c8:	4293      	cmp	r3, r2
 80084ca:	bfb8      	it	lt
 80084cc:	4613      	movlt	r3, r2
 80084ce:	6033      	str	r3, [r6, #0]
 80084d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80084d4:	4607      	mov	r7, r0
 80084d6:	460c      	mov	r4, r1
 80084d8:	b10a      	cbz	r2, 80084de <_printf_common+0x26>
 80084da:	3301      	adds	r3, #1
 80084dc:	6033      	str	r3, [r6, #0]
 80084de:	6823      	ldr	r3, [r4, #0]
 80084e0:	0699      	lsls	r1, r3, #26
 80084e2:	bf42      	ittt	mi
 80084e4:	6833      	ldrmi	r3, [r6, #0]
 80084e6:	3302      	addmi	r3, #2
 80084e8:	6033      	strmi	r3, [r6, #0]
 80084ea:	6825      	ldr	r5, [r4, #0]
 80084ec:	f015 0506 	ands.w	r5, r5, #6
 80084f0:	d106      	bne.n	8008500 <_printf_common+0x48>
 80084f2:	f104 0a19 	add.w	sl, r4, #25
 80084f6:	68e3      	ldr	r3, [r4, #12]
 80084f8:	6832      	ldr	r2, [r6, #0]
 80084fa:	1a9b      	subs	r3, r3, r2
 80084fc:	42ab      	cmp	r3, r5
 80084fe:	dc26      	bgt.n	800854e <_printf_common+0x96>
 8008500:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008504:	1e13      	subs	r3, r2, #0
 8008506:	6822      	ldr	r2, [r4, #0]
 8008508:	bf18      	it	ne
 800850a:	2301      	movne	r3, #1
 800850c:	0692      	lsls	r2, r2, #26
 800850e:	d42b      	bmi.n	8008568 <_printf_common+0xb0>
 8008510:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008514:	4649      	mov	r1, r9
 8008516:	4638      	mov	r0, r7
 8008518:	47c0      	blx	r8
 800851a:	3001      	adds	r0, #1
 800851c:	d01e      	beq.n	800855c <_printf_common+0xa4>
 800851e:	6823      	ldr	r3, [r4, #0]
 8008520:	6922      	ldr	r2, [r4, #16]
 8008522:	f003 0306 	and.w	r3, r3, #6
 8008526:	2b04      	cmp	r3, #4
 8008528:	bf02      	ittt	eq
 800852a:	68e5      	ldreq	r5, [r4, #12]
 800852c:	6833      	ldreq	r3, [r6, #0]
 800852e:	1aed      	subeq	r5, r5, r3
 8008530:	68a3      	ldr	r3, [r4, #8]
 8008532:	bf0c      	ite	eq
 8008534:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008538:	2500      	movne	r5, #0
 800853a:	4293      	cmp	r3, r2
 800853c:	bfc4      	itt	gt
 800853e:	1a9b      	subgt	r3, r3, r2
 8008540:	18ed      	addgt	r5, r5, r3
 8008542:	2600      	movs	r6, #0
 8008544:	341a      	adds	r4, #26
 8008546:	42b5      	cmp	r5, r6
 8008548:	d11a      	bne.n	8008580 <_printf_common+0xc8>
 800854a:	2000      	movs	r0, #0
 800854c:	e008      	b.n	8008560 <_printf_common+0xa8>
 800854e:	2301      	movs	r3, #1
 8008550:	4652      	mov	r2, sl
 8008552:	4649      	mov	r1, r9
 8008554:	4638      	mov	r0, r7
 8008556:	47c0      	blx	r8
 8008558:	3001      	adds	r0, #1
 800855a:	d103      	bne.n	8008564 <_printf_common+0xac>
 800855c:	f04f 30ff 	mov.w	r0, #4294967295
 8008560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008564:	3501      	adds	r5, #1
 8008566:	e7c6      	b.n	80084f6 <_printf_common+0x3e>
 8008568:	18e1      	adds	r1, r4, r3
 800856a:	1c5a      	adds	r2, r3, #1
 800856c:	2030      	movs	r0, #48	; 0x30
 800856e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008572:	4422      	add	r2, r4
 8008574:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008578:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800857c:	3302      	adds	r3, #2
 800857e:	e7c7      	b.n	8008510 <_printf_common+0x58>
 8008580:	2301      	movs	r3, #1
 8008582:	4622      	mov	r2, r4
 8008584:	4649      	mov	r1, r9
 8008586:	4638      	mov	r0, r7
 8008588:	47c0      	blx	r8
 800858a:	3001      	adds	r0, #1
 800858c:	d0e6      	beq.n	800855c <_printf_common+0xa4>
 800858e:	3601      	adds	r6, #1
 8008590:	e7d9      	b.n	8008546 <_printf_common+0x8e>
	...

08008594 <_printf_i>:
 8008594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008598:	7e0f      	ldrb	r7, [r1, #24]
 800859a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800859c:	2f78      	cmp	r7, #120	; 0x78
 800859e:	4691      	mov	r9, r2
 80085a0:	4680      	mov	r8, r0
 80085a2:	460c      	mov	r4, r1
 80085a4:	469a      	mov	sl, r3
 80085a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80085aa:	d807      	bhi.n	80085bc <_printf_i+0x28>
 80085ac:	2f62      	cmp	r7, #98	; 0x62
 80085ae:	d80a      	bhi.n	80085c6 <_printf_i+0x32>
 80085b0:	2f00      	cmp	r7, #0
 80085b2:	f000 80d4 	beq.w	800875e <_printf_i+0x1ca>
 80085b6:	2f58      	cmp	r7, #88	; 0x58
 80085b8:	f000 80c0 	beq.w	800873c <_printf_i+0x1a8>
 80085bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80085c4:	e03a      	b.n	800863c <_printf_i+0xa8>
 80085c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80085ca:	2b15      	cmp	r3, #21
 80085cc:	d8f6      	bhi.n	80085bc <_printf_i+0x28>
 80085ce:	a101      	add	r1, pc, #4	; (adr r1, 80085d4 <_printf_i+0x40>)
 80085d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085d4:	0800862d 	.word	0x0800862d
 80085d8:	08008641 	.word	0x08008641
 80085dc:	080085bd 	.word	0x080085bd
 80085e0:	080085bd 	.word	0x080085bd
 80085e4:	080085bd 	.word	0x080085bd
 80085e8:	080085bd 	.word	0x080085bd
 80085ec:	08008641 	.word	0x08008641
 80085f0:	080085bd 	.word	0x080085bd
 80085f4:	080085bd 	.word	0x080085bd
 80085f8:	080085bd 	.word	0x080085bd
 80085fc:	080085bd 	.word	0x080085bd
 8008600:	08008745 	.word	0x08008745
 8008604:	0800866d 	.word	0x0800866d
 8008608:	080086ff 	.word	0x080086ff
 800860c:	080085bd 	.word	0x080085bd
 8008610:	080085bd 	.word	0x080085bd
 8008614:	08008767 	.word	0x08008767
 8008618:	080085bd 	.word	0x080085bd
 800861c:	0800866d 	.word	0x0800866d
 8008620:	080085bd 	.word	0x080085bd
 8008624:	080085bd 	.word	0x080085bd
 8008628:	08008707 	.word	0x08008707
 800862c:	682b      	ldr	r3, [r5, #0]
 800862e:	1d1a      	adds	r2, r3, #4
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	602a      	str	r2, [r5, #0]
 8008634:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008638:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800863c:	2301      	movs	r3, #1
 800863e:	e09f      	b.n	8008780 <_printf_i+0x1ec>
 8008640:	6820      	ldr	r0, [r4, #0]
 8008642:	682b      	ldr	r3, [r5, #0]
 8008644:	0607      	lsls	r7, r0, #24
 8008646:	f103 0104 	add.w	r1, r3, #4
 800864a:	6029      	str	r1, [r5, #0]
 800864c:	d501      	bpl.n	8008652 <_printf_i+0xbe>
 800864e:	681e      	ldr	r6, [r3, #0]
 8008650:	e003      	b.n	800865a <_printf_i+0xc6>
 8008652:	0646      	lsls	r6, r0, #25
 8008654:	d5fb      	bpl.n	800864e <_printf_i+0xba>
 8008656:	f9b3 6000 	ldrsh.w	r6, [r3]
 800865a:	2e00      	cmp	r6, #0
 800865c:	da03      	bge.n	8008666 <_printf_i+0xd2>
 800865e:	232d      	movs	r3, #45	; 0x2d
 8008660:	4276      	negs	r6, r6
 8008662:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008666:	485a      	ldr	r0, [pc, #360]	; (80087d0 <_printf_i+0x23c>)
 8008668:	230a      	movs	r3, #10
 800866a:	e012      	b.n	8008692 <_printf_i+0xfe>
 800866c:	682b      	ldr	r3, [r5, #0]
 800866e:	6820      	ldr	r0, [r4, #0]
 8008670:	1d19      	adds	r1, r3, #4
 8008672:	6029      	str	r1, [r5, #0]
 8008674:	0605      	lsls	r5, r0, #24
 8008676:	d501      	bpl.n	800867c <_printf_i+0xe8>
 8008678:	681e      	ldr	r6, [r3, #0]
 800867a:	e002      	b.n	8008682 <_printf_i+0xee>
 800867c:	0641      	lsls	r1, r0, #25
 800867e:	d5fb      	bpl.n	8008678 <_printf_i+0xe4>
 8008680:	881e      	ldrh	r6, [r3, #0]
 8008682:	4853      	ldr	r0, [pc, #332]	; (80087d0 <_printf_i+0x23c>)
 8008684:	2f6f      	cmp	r7, #111	; 0x6f
 8008686:	bf0c      	ite	eq
 8008688:	2308      	moveq	r3, #8
 800868a:	230a      	movne	r3, #10
 800868c:	2100      	movs	r1, #0
 800868e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008692:	6865      	ldr	r5, [r4, #4]
 8008694:	60a5      	str	r5, [r4, #8]
 8008696:	2d00      	cmp	r5, #0
 8008698:	bfa2      	ittt	ge
 800869a:	6821      	ldrge	r1, [r4, #0]
 800869c:	f021 0104 	bicge.w	r1, r1, #4
 80086a0:	6021      	strge	r1, [r4, #0]
 80086a2:	b90e      	cbnz	r6, 80086a8 <_printf_i+0x114>
 80086a4:	2d00      	cmp	r5, #0
 80086a6:	d04b      	beq.n	8008740 <_printf_i+0x1ac>
 80086a8:	4615      	mov	r5, r2
 80086aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80086ae:	fb03 6711 	mls	r7, r3, r1, r6
 80086b2:	5dc7      	ldrb	r7, [r0, r7]
 80086b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80086b8:	4637      	mov	r7, r6
 80086ba:	42bb      	cmp	r3, r7
 80086bc:	460e      	mov	r6, r1
 80086be:	d9f4      	bls.n	80086aa <_printf_i+0x116>
 80086c0:	2b08      	cmp	r3, #8
 80086c2:	d10b      	bne.n	80086dc <_printf_i+0x148>
 80086c4:	6823      	ldr	r3, [r4, #0]
 80086c6:	07de      	lsls	r6, r3, #31
 80086c8:	d508      	bpl.n	80086dc <_printf_i+0x148>
 80086ca:	6923      	ldr	r3, [r4, #16]
 80086cc:	6861      	ldr	r1, [r4, #4]
 80086ce:	4299      	cmp	r1, r3
 80086d0:	bfde      	ittt	le
 80086d2:	2330      	movle	r3, #48	; 0x30
 80086d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80086d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80086dc:	1b52      	subs	r2, r2, r5
 80086de:	6122      	str	r2, [r4, #16]
 80086e0:	f8cd a000 	str.w	sl, [sp]
 80086e4:	464b      	mov	r3, r9
 80086e6:	aa03      	add	r2, sp, #12
 80086e8:	4621      	mov	r1, r4
 80086ea:	4640      	mov	r0, r8
 80086ec:	f7ff fee4 	bl	80084b8 <_printf_common>
 80086f0:	3001      	adds	r0, #1
 80086f2:	d14a      	bne.n	800878a <_printf_i+0x1f6>
 80086f4:	f04f 30ff 	mov.w	r0, #4294967295
 80086f8:	b004      	add	sp, #16
 80086fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086fe:	6823      	ldr	r3, [r4, #0]
 8008700:	f043 0320 	orr.w	r3, r3, #32
 8008704:	6023      	str	r3, [r4, #0]
 8008706:	4833      	ldr	r0, [pc, #204]	; (80087d4 <_printf_i+0x240>)
 8008708:	2778      	movs	r7, #120	; 0x78
 800870a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800870e:	6823      	ldr	r3, [r4, #0]
 8008710:	6829      	ldr	r1, [r5, #0]
 8008712:	061f      	lsls	r7, r3, #24
 8008714:	f851 6b04 	ldr.w	r6, [r1], #4
 8008718:	d402      	bmi.n	8008720 <_printf_i+0x18c>
 800871a:	065f      	lsls	r7, r3, #25
 800871c:	bf48      	it	mi
 800871e:	b2b6      	uxthmi	r6, r6
 8008720:	07df      	lsls	r7, r3, #31
 8008722:	bf48      	it	mi
 8008724:	f043 0320 	orrmi.w	r3, r3, #32
 8008728:	6029      	str	r1, [r5, #0]
 800872a:	bf48      	it	mi
 800872c:	6023      	strmi	r3, [r4, #0]
 800872e:	b91e      	cbnz	r6, 8008738 <_printf_i+0x1a4>
 8008730:	6823      	ldr	r3, [r4, #0]
 8008732:	f023 0320 	bic.w	r3, r3, #32
 8008736:	6023      	str	r3, [r4, #0]
 8008738:	2310      	movs	r3, #16
 800873a:	e7a7      	b.n	800868c <_printf_i+0xf8>
 800873c:	4824      	ldr	r0, [pc, #144]	; (80087d0 <_printf_i+0x23c>)
 800873e:	e7e4      	b.n	800870a <_printf_i+0x176>
 8008740:	4615      	mov	r5, r2
 8008742:	e7bd      	b.n	80086c0 <_printf_i+0x12c>
 8008744:	682b      	ldr	r3, [r5, #0]
 8008746:	6826      	ldr	r6, [r4, #0]
 8008748:	6961      	ldr	r1, [r4, #20]
 800874a:	1d18      	adds	r0, r3, #4
 800874c:	6028      	str	r0, [r5, #0]
 800874e:	0635      	lsls	r5, r6, #24
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	d501      	bpl.n	8008758 <_printf_i+0x1c4>
 8008754:	6019      	str	r1, [r3, #0]
 8008756:	e002      	b.n	800875e <_printf_i+0x1ca>
 8008758:	0670      	lsls	r0, r6, #25
 800875a:	d5fb      	bpl.n	8008754 <_printf_i+0x1c0>
 800875c:	8019      	strh	r1, [r3, #0]
 800875e:	2300      	movs	r3, #0
 8008760:	6123      	str	r3, [r4, #16]
 8008762:	4615      	mov	r5, r2
 8008764:	e7bc      	b.n	80086e0 <_printf_i+0x14c>
 8008766:	682b      	ldr	r3, [r5, #0]
 8008768:	1d1a      	adds	r2, r3, #4
 800876a:	602a      	str	r2, [r5, #0]
 800876c:	681d      	ldr	r5, [r3, #0]
 800876e:	6862      	ldr	r2, [r4, #4]
 8008770:	2100      	movs	r1, #0
 8008772:	4628      	mov	r0, r5
 8008774:	f7f7 fd6c 	bl	8000250 <memchr>
 8008778:	b108      	cbz	r0, 800877e <_printf_i+0x1ea>
 800877a:	1b40      	subs	r0, r0, r5
 800877c:	6060      	str	r0, [r4, #4]
 800877e:	6863      	ldr	r3, [r4, #4]
 8008780:	6123      	str	r3, [r4, #16]
 8008782:	2300      	movs	r3, #0
 8008784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008788:	e7aa      	b.n	80086e0 <_printf_i+0x14c>
 800878a:	6923      	ldr	r3, [r4, #16]
 800878c:	462a      	mov	r2, r5
 800878e:	4649      	mov	r1, r9
 8008790:	4640      	mov	r0, r8
 8008792:	47d0      	blx	sl
 8008794:	3001      	adds	r0, #1
 8008796:	d0ad      	beq.n	80086f4 <_printf_i+0x160>
 8008798:	6823      	ldr	r3, [r4, #0]
 800879a:	079b      	lsls	r3, r3, #30
 800879c:	d413      	bmi.n	80087c6 <_printf_i+0x232>
 800879e:	68e0      	ldr	r0, [r4, #12]
 80087a0:	9b03      	ldr	r3, [sp, #12]
 80087a2:	4298      	cmp	r0, r3
 80087a4:	bfb8      	it	lt
 80087a6:	4618      	movlt	r0, r3
 80087a8:	e7a6      	b.n	80086f8 <_printf_i+0x164>
 80087aa:	2301      	movs	r3, #1
 80087ac:	4632      	mov	r2, r6
 80087ae:	4649      	mov	r1, r9
 80087b0:	4640      	mov	r0, r8
 80087b2:	47d0      	blx	sl
 80087b4:	3001      	adds	r0, #1
 80087b6:	d09d      	beq.n	80086f4 <_printf_i+0x160>
 80087b8:	3501      	adds	r5, #1
 80087ba:	68e3      	ldr	r3, [r4, #12]
 80087bc:	9903      	ldr	r1, [sp, #12]
 80087be:	1a5b      	subs	r3, r3, r1
 80087c0:	42ab      	cmp	r3, r5
 80087c2:	dcf2      	bgt.n	80087aa <_printf_i+0x216>
 80087c4:	e7eb      	b.n	800879e <_printf_i+0x20a>
 80087c6:	2500      	movs	r5, #0
 80087c8:	f104 0619 	add.w	r6, r4, #25
 80087cc:	e7f5      	b.n	80087ba <_printf_i+0x226>
 80087ce:	bf00      	nop
 80087d0:	08008a19 	.word	0x08008a19
 80087d4:	08008a2a 	.word	0x08008a2a

080087d8 <memmove>:
 80087d8:	4288      	cmp	r0, r1
 80087da:	b510      	push	{r4, lr}
 80087dc:	eb01 0402 	add.w	r4, r1, r2
 80087e0:	d902      	bls.n	80087e8 <memmove+0x10>
 80087e2:	4284      	cmp	r4, r0
 80087e4:	4623      	mov	r3, r4
 80087e6:	d807      	bhi.n	80087f8 <memmove+0x20>
 80087e8:	1e43      	subs	r3, r0, #1
 80087ea:	42a1      	cmp	r1, r4
 80087ec:	d008      	beq.n	8008800 <memmove+0x28>
 80087ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80087f6:	e7f8      	b.n	80087ea <memmove+0x12>
 80087f8:	4402      	add	r2, r0
 80087fa:	4601      	mov	r1, r0
 80087fc:	428a      	cmp	r2, r1
 80087fe:	d100      	bne.n	8008802 <memmove+0x2a>
 8008800:	bd10      	pop	{r4, pc}
 8008802:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008806:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800880a:	e7f7      	b.n	80087fc <memmove+0x24>

0800880c <_sbrk_r>:
 800880c:	b538      	push	{r3, r4, r5, lr}
 800880e:	4d06      	ldr	r5, [pc, #24]	; (8008828 <_sbrk_r+0x1c>)
 8008810:	2300      	movs	r3, #0
 8008812:	4604      	mov	r4, r0
 8008814:	4608      	mov	r0, r1
 8008816:	602b      	str	r3, [r5, #0]
 8008818:	f7f8 fbf6 	bl	8001008 <_sbrk>
 800881c:	1c43      	adds	r3, r0, #1
 800881e:	d102      	bne.n	8008826 <_sbrk_r+0x1a>
 8008820:	682b      	ldr	r3, [r5, #0]
 8008822:	b103      	cbz	r3, 8008826 <_sbrk_r+0x1a>
 8008824:	6023      	str	r3, [r4, #0]
 8008826:	bd38      	pop	{r3, r4, r5, pc}
 8008828:	20000538 	.word	0x20000538

0800882c <memcpy>:
 800882c:	440a      	add	r2, r1
 800882e:	4291      	cmp	r1, r2
 8008830:	f100 33ff 	add.w	r3, r0, #4294967295
 8008834:	d100      	bne.n	8008838 <memcpy+0xc>
 8008836:	4770      	bx	lr
 8008838:	b510      	push	{r4, lr}
 800883a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800883e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008842:	4291      	cmp	r1, r2
 8008844:	d1f9      	bne.n	800883a <memcpy+0xe>
 8008846:	bd10      	pop	{r4, pc}

08008848 <_realloc_r>:
 8008848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800884c:	4680      	mov	r8, r0
 800884e:	4614      	mov	r4, r2
 8008850:	460e      	mov	r6, r1
 8008852:	b921      	cbnz	r1, 800885e <_realloc_r+0x16>
 8008854:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008858:	4611      	mov	r1, r2
 800885a:	f7ff bc49 	b.w	80080f0 <_malloc_r>
 800885e:	b92a      	cbnz	r2, 800886c <_realloc_r+0x24>
 8008860:	f7ff fbda 	bl	8008018 <_free_r>
 8008864:	4625      	mov	r5, r4
 8008866:	4628      	mov	r0, r5
 8008868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800886c:	f000 f81b 	bl	80088a6 <_malloc_usable_size_r>
 8008870:	4284      	cmp	r4, r0
 8008872:	4607      	mov	r7, r0
 8008874:	d802      	bhi.n	800887c <_realloc_r+0x34>
 8008876:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800887a:	d812      	bhi.n	80088a2 <_realloc_r+0x5a>
 800887c:	4621      	mov	r1, r4
 800887e:	4640      	mov	r0, r8
 8008880:	f7ff fc36 	bl	80080f0 <_malloc_r>
 8008884:	4605      	mov	r5, r0
 8008886:	2800      	cmp	r0, #0
 8008888:	d0ed      	beq.n	8008866 <_realloc_r+0x1e>
 800888a:	42bc      	cmp	r4, r7
 800888c:	4622      	mov	r2, r4
 800888e:	4631      	mov	r1, r6
 8008890:	bf28      	it	cs
 8008892:	463a      	movcs	r2, r7
 8008894:	f7ff ffca 	bl	800882c <memcpy>
 8008898:	4631      	mov	r1, r6
 800889a:	4640      	mov	r0, r8
 800889c:	f7ff fbbc 	bl	8008018 <_free_r>
 80088a0:	e7e1      	b.n	8008866 <_realloc_r+0x1e>
 80088a2:	4635      	mov	r5, r6
 80088a4:	e7df      	b.n	8008866 <_realloc_r+0x1e>

080088a6 <_malloc_usable_size_r>:
 80088a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088aa:	1f18      	subs	r0, r3, #4
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	bfbc      	itt	lt
 80088b0:	580b      	ldrlt	r3, [r1, r0]
 80088b2:	18c0      	addlt	r0, r0, r3
 80088b4:	4770      	bx	lr
	...

080088b8 <_init>:
 80088b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ba:	bf00      	nop
 80088bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088be:	bc08      	pop	{r3}
 80088c0:	469e      	mov	lr, r3
 80088c2:	4770      	bx	lr

080088c4 <_fini>:
 80088c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088c6:	bf00      	nop
 80088c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ca:	bc08      	pop	{r3}
 80088cc:	469e      	mov	lr, r3
 80088ce:	4770      	bx	lr
