
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072ac  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08007484  08007484  00017484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007514  08007514  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007514  08007514  00017514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800751c  0800751c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800751c  0800751c  0001751c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007520  08007520  00017520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007524  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  2000000c  08007530  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08007530  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019a22  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003365  00000000  00000000  00039aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001520  00000000  00000000  0003ce08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001063  00000000  00000000  0003e328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000290cc  00000000  00000000  0003f38b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a437  00000000  00000000  00068457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00111d31  00000000  00000000  0008288e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000059e8  00000000  00000000  001945c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  00199fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800746c 	.word	0x0800746c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	0800746c 	.word	0x0800746c

08000218 <strcmp>:
 8000218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000220:	2a01      	cmp	r2, #1
 8000222:	bf28      	it	cs
 8000224:	429a      	cmpcs	r2, r3
 8000226:	d0f7      	beq.n	8000218 <strcmp>
 8000228:	1ad0      	subs	r0, r2, r3
 800022a:	4770      	bx	lr

0800022c <__aeabi_uldivmod>:
 800022c:	b953      	cbnz	r3, 8000244 <__aeabi_uldivmod+0x18>
 800022e:	b94a      	cbnz	r2, 8000244 <__aeabi_uldivmod+0x18>
 8000230:	2900      	cmp	r1, #0
 8000232:	bf08      	it	eq
 8000234:	2800      	cmpeq	r0, #0
 8000236:	bf1c      	itt	ne
 8000238:	f04f 31ff 	movne.w	r1, #4294967295
 800023c:	f04f 30ff 	movne.w	r0, #4294967295
 8000240:	f000 b970 	b.w	8000524 <__aeabi_idiv0>
 8000244:	f1ad 0c08 	sub.w	ip, sp, #8
 8000248:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000254:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000258:	b004      	add	sp, #16
 800025a:	4770      	bx	lr

0800025c <__udivmoddi4>:
 800025c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000260:	9e08      	ldr	r6, [sp, #32]
 8000262:	460d      	mov	r5, r1
 8000264:	4604      	mov	r4, r0
 8000266:	460f      	mov	r7, r1
 8000268:	2b00      	cmp	r3, #0
 800026a:	d14a      	bne.n	8000302 <__udivmoddi4+0xa6>
 800026c:	428a      	cmp	r2, r1
 800026e:	4694      	mov	ip, r2
 8000270:	d965      	bls.n	800033e <__udivmoddi4+0xe2>
 8000272:	fab2 f382 	clz	r3, r2
 8000276:	b143      	cbz	r3, 800028a <__udivmoddi4+0x2e>
 8000278:	fa02 fc03 	lsl.w	ip, r2, r3
 800027c:	f1c3 0220 	rsb	r2, r3, #32
 8000280:	409f      	lsls	r7, r3
 8000282:	fa20 f202 	lsr.w	r2, r0, r2
 8000286:	4317      	orrs	r7, r2
 8000288:	409c      	lsls	r4, r3
 800028a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800028e:	fa1f f58c 	uxth.w	r5, ip
 8000292:	fbb7 f1fe 	udiv	r1, r7, lr
 8000296:	0c22      	lsrs	r2, r4, #16
 8000298:	fb0e 7711 	mls	r7, lr, r1, r7
 800029c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002a0:	fb01 f005 	mul.w	r0, r1, r5
 80002a4:	4290      	cmp	r0, r2
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x62>
 80002a8:	eb1c 0202 	adds.w	r2, ip, r2
 80002ac:	f101 37ff 	add.w	r7, r1, #4294967295
 80002b0:	f080 811c 	bcs.w	80004ec <__udivmoddi4+0x290>
 80002b4:	4290      	cmp	r0, r2
 80002b6:	f240 8119 	bls.w	80004ec <__udivmoddi4+0x290>
 80002ba:	3902      	subs	r1, #2
 80002bc:	4462      	add	r2, ip
 80002be:	1a12      	subs	r2, r2, r0
 80002c0:	b2a4      	uxth	r4, r4
 80002c2:	fbb2 f0fe 	udiv	r0, r2, lr
 80002c6:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ce:	fb00 f505 	mul.w	r5, r0, r5
 80002d2:	42a5      	cmp	r5, r4
 80002d4:	d90a      	bls.n	80002ec <__udivmoddi4+0x90>
 80002d6:	eb1c 0404 	adds.w	r4, ip, r4
 80002da:	f100 32ff 	add.w	r2, r0, #4294967295
 80002de:	f080 8107 	bcs.w	80004f0 <__udivmoddi4+0x294>
 80002e2:	42a5      	cmp	r5, r4
 80002e4:	f240 8104 	bls.w	80004f0 <__udivmoddi4+0x294>
 80002e8:	4464      	add	r4, ip
 80002ea:	3802      	subs	r0, #2
 80002ec:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f0:	1b64      	subs	r4, r4, r5
 80002f2:	2100      	movs	r1, #0
 80002f4:	b11e      	cbz	r6, 80002fe <__udivmoddi4+0xa2>
 80002f6:	40dc      	lsrs	r4, r3
 80002f8:	2300      	movs	r3, #0
 80002fa:	e9c6 4300 	strd	r4, r3, [r6]
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	428b      	cmp	r3, r1
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0xbc>
 8000306:	2e00      	cmp	r6, #0
 8000308:	f000 80ed 	beq.w	80004e6 <__udivmoddi4+0x28a>
 800030c:	2100      	movs	r1, #0
 800030e:	e9c6 0500 	strd	r0, r5, [r6]
 8000312:	4608      	mov	r0, r1
 8000314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000318:	fab3 f183 	clz	r1, r3
 800031c:	2900      	cmp	r1, #0
 800031e:	d149      	bne.n	80003b4 <__udivmoddi4+0x158>
 8000320:	42ab      	cmp	r3, r5
 8000322:	d302      	bcc.n	800032a <__udivmoddi4+0xce>
 8000324:	4282      	cmp	r2, r0
 8000326:	f200 80f8 	bhi.w	800051a <__udivmoddi4+0x2be>
 800032a:	1a84      	subs	r4, r0, r2
 800032c:	eb65 0203 	sbc.w	r2, r5, r3
 8000330:	2001      	movs	r0, #1
 8000332:	4617      	mov	r7, r2
 8000334:	2e00      	cmp	r6, #0
 8000336:	d0e2      	beq.n	80002fe <__udivmoddi4+0xa2>
 8000338:	e9c6 4700 	strd	r4, r7, [r6]
 800033c:	e7df      	b.n	80002fe <__udivmoddi4+0xa2>
 800033e:	b902      	cbnz	r2, 8000342 <__udivmoddi4+0xe6>
 8000340:	deff      	udf	#255	; 0xff
 8000342:	fab2 f382 	clz	r3, r2
 8000346:	2b00      	cmp	r3, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x210>
 800034c:	1a8a      	subs	r2, r1, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f fe8c 	uxth.w	lr, ip
 8000356:	2101      	movs	r1, #1
 8000358:	fbb2 f5f7 	udiv	r5, r2, r7
 800035c:	fb07 2015 	mls	r0, r7, r5, r2
 8000360:	0c22      	lsrs	r2, r4, #16
 8000362:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000366:	fb0e f005 	mul.w	r0, lr, r5
 800036a:	4290      	cmp	r0, r2
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x124>
 800036e:	eb1c 0202 	adds.w	r2, ip, r2
 8000372:	f105 38ff 	add.w	r8, r5, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x122>
 8000378:	4290      	cmp	r0, r2
 800037a:	f200 80cb 	bhi.w	8000514 <__udivmoddi4+0x2b8>
 800037e:	4645      	mov	r5, r8
 8000380:	1a12      	subs	r2, r2, r0
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb2 f0f7 	udiv	r0, r2, r7
 8000388:	fb07 2210 	mls	r2, r7, r0, r2
 800038c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000390:	fb0e fe00 	mul.w	lr, lr, r0
 8000394:	45a6      	cmp	lr, r4
 8000396:	d908      	bls.n	80003aa <__udivmoddi4+0x14e>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a0:	d202      	bcs.n	80003a8 <__udivmoddi4+0x14c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f200 80bb 	bhi.w	800051e <__udivmoddi4+0x2c2>
 80003a8:	4610      	mov	r0, r2
 80003aa:	eba4 040e 	sub.w	r4, r4, lr
 80003ae:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003b2:	e79f      	b.n	80002f4 <__udivmoddi4+0x98>
 80003b4:	f1c1 0720 	rsb	r7, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 fc07 	lsr.w	ip, r2, r7
 80003be:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c2:	fa05 f401 	lsl.w	r4, r5, r1
 80003c6:	fa20 f307 	lsr.w	r3, r0, r7
 80003ca:	40fd      	lsrs	r5, r7
 80003cc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d0:	4323      	orrs	r3, r4
 80003d2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	fb09 5518 	mls	r5, r9, r8, r5
 80003de:	0c1c      	lsrs	r4, r3, #16
 80003e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003e4:	fb08 f50e 	mul.w	r5, r8, lr
 80003e8:	42a5      	cmp	r5, r4
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	fa00 f001 	lsl.w	r0, r0, r1
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x1b0>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003fc:	f080 8088 	bcs.w	8000510 <__udivmoddi4+0x2b4>
 8000400:	42a5      	cmp	r5, r4
 8000402:	f240 8085 	bls.w	8000510 <__udivmoddi4+0x2b4>
 8000406:	f1a8 0802 	sub.w	r8, r8, #2
 800040a:	4464      	add	r4, ip
 800040c:	1b64      	subs	r4, r4, r5
 800040e:	b29d      	uxth	r5, r3
 8000410:	fbb4 f3f9 	udiv	r3, r4, r9
 8000414:	fb09 4413 	mls	r4, r9, r3, r4
 8000418:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800041c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1da>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f103 35ff 	add.w	r5, r3, #4294967295
 800042c:	d26c      	bcs.n	8000508 <__udivmoddi4+0x2ac>
 800042e:	45a6      	cmp	lr, r4
 8000430:	d96a      	bls.n	8000508 <__udivmoddi4+0x2ac>
 8000432:	3b02      	subs	r3, #2
 8000434:	4464      	add	r4, ip
 8000436:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800043a:	fba3 9502 	umull	r9, r5, r3, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	42ac      	cmp	r4, r5
 8000444:	46c8      	mov	r8, r9
 8000446:	46ae      	mov	lr, r5
 8000448:	d356      	bcc.n	80004f8 <__udivmoddi4+0x29c>
 800044a:	d053      	beq.n	80004f4 <__udivmoddi4+0x298>
 800044c:	b156      	cbz	r6, 8000464 <__udivmoddi4+0x208>
 800044e:	ebb0 0208 	subs.w	r2, r0, r8
 8000452:	eb64 040e 	sbc.w	r4, r4, lr
 8000456:	fa04 f707 	lsl.w	r7, r4, r7
 800045a:	40ca      	lsrs	r2, r1
 800045c:	40cc      	lsrs	r4, r1
 800045e:	4317      	orrs	r7, r2
 8000460:	e9c6 7400 	strd	r7, r4, [r6]
 8000464:	4618      	mov	r0, r3
 8000466:	2100      	movs	r1, #0
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	f1c3 0120 	rsb	r1, r3, #32
 8000470:	fa02 fc03 	lsl.w	ip, r2, r3
 8000474:	fa20 f201 	lsr.w	r2, r0, r1
 8000478:	fa25 f101 	lsr.w	r1, r5, r1
 800047c:	409d      	lsls	r5, r3
 800047e:	432a      	orrs	r2, r5
 8000480:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000484:	fa1f fe8c 	uxth.w	lr, ip
 8000488:	fbb1 f0f7 	udiv	r0, r1, r7
 800048c:	fb07 1510 	mls	r5, r7, r0, r1
 8000490:	0c11      	lsrs	r1, r2, #16
 8000492:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000496:	fb00 f50e 	mul.w	r5, r0, lr
 800049a:	428d      	cmp	r5, r1
 800049c:	fa04 f403 	lsl.w	r4, r4, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x258>
 80004a2:	eb1c 0101 	adds.w	r1, ip, r1
 80004a6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004aa:	d22f      	bcs.n	800050c <__udivmoddi4+0x2b0>
 80004ac:	428d      	cmp	r5, r1
 80004ae:	d92d      	bls.n	800050c <__udivmoddi4+0x2b0>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4461      	add	r1, ip
 80004b4:	1b49      	subs	r1, r1, r5
 80004b6:	b292      	uxth	r2, r2
 80004b8:	fbb1 f5f7 	udiv	r5, r1, r7
 80004bc:	fb07 1115 	mls	r1, r7, r5, r1
 80004c0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c4:	fb05 f10e 	mul.w	r1, r5, lr
 80004c8:	4291      	cmp	r1, r2
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x282>
 80004cc:	eb1c 0202 	adds.w	r2, ip, r2
 80004d0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004d4:	d216      	bcs.n	8000504 <__udivmoddi4+0x2a8>
 80004d6:	4291      	cmp	r1, r2
 80004d8:	d914      	bls.n	8000504 <__udivmoddi4+0x2a8>
 80004da:	3d02      	subs	r5, #2
 80004dc:	4462      	add	r2, ip
 80004de:	1a52      	subs	r2, r2, r1
 80004e0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004e4:	e738      	b.n	8000358 <__udivmoddi4+0xfc>
 80004e6:	4631      	mov	r1, r6
 80004e8:	4630      	mov	r0, r6
 80004ea:	e708      	b.n	80002fe <__udivmoddi4+0xa2>
 80004ec:	4639      	mov	r1, r7
 80004ee:	e6e6      	b.n	80002be <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e6fb      	b.n	80002ec <__udivmoddi4+0x90>
 80004f4:	4548      	cmp	r0, r9
 80004f6:	d2a9      	bcs.n	800044c <__udivmoddi4+0x1f0>
 80004f8:	ebb9 0802 	subs.w	r8, r9, r2
 80004fc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000500:	3b01      	subs	r3, #1
 8000502:	e7a3      	b.n	800044c <__udivmoddi4+0x1f0>
 8000504:	4645      	mov	r5, r8
 8000506:	e7ea      	b.n	80004de <__udivmoddi4+0x282>
 8000508:	462b      	mov	r3, r5
 800050a:	e794      	b.n	8000436 <__udivmoddi4+0x1da>
 800050c:	4640      	mov	r0, r8
 800050e:	e7d1      	b.n	80004b4 <__udivmoddi4+0x258>
 8000510:	46d0      	mov	r8, sl
 8000512:	e77b      	b.n	800040c <__udivmoddi4+0x1b0>
 8000514:	3d02      	subs	r5, #2
 8000516:	4462      	add	r2, ip
 8000518:	e732      	b.n	8000380 <__udivmoddi4+0x124>
 800051a:	4608      	mov	r0, r1
 800051c:	e70a      	b.n	8000334 <__udivmoddi4+0xd8>
 800051e:	4464      	add	r4, ip
 8000520:	3802      	subs	r0, #2
 8000522:	e742      	b.n	80003aa <__udivmoddi4+0x14e>

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b08c      	sub	sp, #48	; 0x30
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800052e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	2220      	movs	r2, #32
 800053e:	2100      	movs	r1, #0
 8000540:	4618      	mov	r0, r3
 8000542:	f006 ff67 	bl	8007414 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000546:	4b32      	ldr	r3, [pc, #200]	; (8000610 <MX_ADC1_Init+0xe8>)
 8000548:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800054c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800054e:	4b30      	ldr	r3, [pc, #192]	; (8000610 <MX_ADC1_Init+0xe8>)
 8000550:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000554:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000556:	4b2e      	ldr	r3, [pc, #184]	; (8000610 <MX_ADC1_Init+0xe8>)
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800055c:	4b2c      	ldr	r3, [pc, #176]	; (8000610 <MX_ADC1_Init+0xe8>)
 800055e:	2200      	movs	r2, #0
 8000560:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000562:	4b2b      	ldr	r3, [pc, #172]	; (8000610 <MX_ADC1_Init+0xe8>)
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000568:	4b29      	ldr	r3, [pc, #164]	; (8000610 <MX_ADC1_Init+0xe8>)
 800056a:	2200      	movs	r2, #0
 800056c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800056e:	4b28      	ldr	r3, [pc, #160]	; (8000610 <MX_ADC1_Init+0xe8>)
 8000570:	2204      	movs	r2, #4
 8000572:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000574:	4b26      	ldr	r3, [pc, #152]	; (8000610 <MX_ADC1_Init+0xe8>)
 8000576:	2200      	movs	r2, #0
 8000578:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800057a:	4b25      	ldr	r3, [pc, #148]	; (8000610 <MX_ADC1_Init+0xe8>)
 800057c:	2200      	movs	r2, #0
 800057e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000580:	4b23      	ldr	r3, [pc, #140]	; (8000610 <MX_ADC1_Init+0xe8>)
 8000582:	2201      	movs	r2, #1
 8000584:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000586:	4b22      	ldr	r3, [pc, #136]	; (8000610 <MX_ADC1_Init+0xe8>)
 8000588:	2200      	movs	r2, #0
 800058a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800058e:	4b20      	ldr	r3, [pc, #128]	; (8000610 <MX_ADC1_Init+0xe8>)
 8000590:	2200      	movs	r2, #0
 8000592:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000594:	4b1e      	ldr	r3, [pc, #120]	; (8000610 <MX_ADC1_Init+0xe8>)
 8000596:	2200      	movs	r2, #0
 8000598:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800059a:	4b1d      	ldr	r3, [pc, #116]	; (8000610 <MX_ADC1_Init+0xe8>)
 800059c:	2200      	movs	r2, #0
 800059e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005a2:	4b1b      	ldr	r3, [pc, #108]	; (8000610 <MX_ADC1_Init+0xe8>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80005a8:	4b19      	ldr	r3, [pc, #100]	; (8000610 <MX_ADC1_Init+0xe8>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005b0:	4817      	ldr	r0, [pc, #92]	; (8000610 <MX_ADC1_Init+0xe8>)
 80005b2:	f001 f953 	bl	800185c <HAL_ADC_Init>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80005bc:	f000 fae4 	bl	8000b88 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005c0:	2300      	movs	r3, #0
 80005c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005c8:	4619      	mov	r1, r3
 80005ca:	4811      	ldr	r0, [pc, #68]	; (8000610 <MX_ADC1_Init+0xe8>)
 80005cc:	f001 ff6e 	bl	80024ac <HAL_ADCEx_MultiModeConfigChannel>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80005d6:	f000 fad7 	bl	8000b88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005da:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <MX_ADC1_Init+0xec>)
 80005dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005de:	2306      	movs	r3, #6
 80005e0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005e6:	237f      	movs	r3, #127	; 0x7f
 80005e8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005ea:	2304      	movs	r3, #4
 80005ec:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	4619      	mov	r1, r3
 80005f6:	4806      	ldr	r0, [pc, #24]	; (8000610 <MX_ADC1_Init+0xe8>)
 80005f8:	f001 faf2 	bl	8001be0 <HAL_ADC_ConfigChannel>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000602:	f000 fac1 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000606:	bf00      	nop
 8000608:	3730      	adds	r7, #48	; 0x30
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000028 	.word	0x20000028
 8000614:	21800100 	.word	0x21800100

08000618 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800061e:	463b      	mov	r3, r7
 8000620:	2220      	movs	r2, #32
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f006 fef5 	bl	8007414 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <MX_ADC2_Init+0xc0>)
 800062c:	4a2b      	ldr	r2, [pc, #172]	; (80006dc <MX_ADC2_Init+0xc4>)
 800062e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000630:	4b29      	ldr	r3, [pc, #164]	; (80006d8 <MX_ADC2_Init+0xc0>)
 8000632:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000636:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000638:	4b27      	ldr	r3, [pc, #156]	; (80006d8 <MX_ADC2_Init+0xc0>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800063e:	4b26      	ldr	r3, [pc, #152]	; (80006d8 <MX_ADC2_Init+0xc0>)
 8000640:	2200      	movs	r2, #0
 8000642:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000644:	4b24      	ldr	r3, [pc, #144]	; (80006d8 <MX_ADC2_Init+0xc0>)
 8000646:	2200      	movs	r2, #0
 8000648:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <MX_ADC2_Init+0xc0>)
 800064c:	2200      	movs	r2, #0
 800064e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <MX_ADC2_Init+0xc0>)
 8000652:	2204      	movs	r2, #4
 8000654:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <MX_ADC2_Init+0xc0>)
 8000658:	2200      	movs	r2, #0
 800065a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <MX_ADC2_Init+0xc0>)
 800065e:	2200      	movs	r2, #0
 8000660:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <MX_ADC2_Init+0xc0>)
 8000664:	2201      	movs	r2, #1
 8000666:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <MX_ADC2_Init+0xc0>)
 800066a:	2200      	movs	r2, #0
 800066c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000670:	4b19      	ldr	r3, [pc, #100]	; (80006d8 <MX_ADC2_Init+0xc0>)
 8000672:	2200      	movs	r2, #0
 8000674:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000676:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <MX_ADC2_Init+0xc0>)
 8000678:	2200      	movs	r2, #0
 800067a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800067c:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <MX_ADC2_Init+0xc0>)
 800067e:	2200      	movs	r2, #0
 8000680:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000684:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <MX_ADC2_Init+0xc0>)
 8000686:	2200      	movs	r2, #0
 8000688:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800068a:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <MX_ADC2_Init+0xc0>)
 800068c:	2200      	movs	r2, #0
 800068e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000692:	4811      	ldr	r0, [pc, #68]	; (80006d8 <MX_ADC2_Init+0xc0>)
 8000694:	f001 f8e2 	bl	800185c <HAL_ADC_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800069e:	f000 fa73 	bl	8000b88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006a2:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <MX_ADC2_Init+0xc8>)
 80006a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a6:	2306      	movs	r3, #6
 80006a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ae:	237f      	movs	r3, #127	; 0x7f
 80006b0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006b2:	2304      	movs	r3, #4
 80006b4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006ba:	463b      	mov	r3, r7
 80006bc:	4619      	mov	r1, r3
 80006be:	4806      	ldr	r0, [pc, #24]	; (80006d8 <MX_ADC2_Init+0xc0>)
 80006c0:	f001 fa8e 	bl	8001be0 <HAL_ADC_ConfigChannel>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80006ca:	f000 fa5d 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	3720      	adds	r7, #32
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000094 	.word	0x20000094
 80006dc:	50000100 	.word	0x50000100
 80006e0:	19200040 	.word	0x19200040

080006e4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b0a4      	sub	sp, #144	; 0x90
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000700:	2254      	movs	r2, #84	; 0x54
 8000702:	2100      	movs	r1, #0
 8000704:	4618      	mov	r0, r3
 8000706:	f006 fe85 	bl	8007414 <memset>
  if(adcHandle->Instance==ADC1)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000712:	d174      	bne.n	80007fe <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000714:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000718:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800071a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800071e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000720:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000724:	4618      	mov	r0, r3
 8000726:	f003 f941 	bl	80039ac <HAL_RCCEx_PeriphCLKConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000730:	f000 fa2a 	bl	8000b88 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000734:	4b63      	ldr	r3, [pc, #396]	; (80008c4 <HAL_ADC_MspInit+0x1e0>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	3301      	adds	r3, #1
 800073a:	4a62      	ldr	r2, [pc, #392]	; (80008c4 <HAL_ADC_MspInit+0x1e0>)
 800073c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800073e:	4b61      	ldr	r3, [pc, #388]	; (80008c4 <HAL_ADC_MspInit+0x1e0>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d10b      	bne.n	800075e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000746:	4b60      	ldr	r3, [pc, #384]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	4a5f      	ldr	r2, [pc, #380]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 800074c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000752:	4b5d      	ldr	r3, [pc, #372]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800075a:	627b      	str	r3, [r7, #36]	; 0x24
 800075c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	4b5a      	ldr	r3, [pc, #360]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	4a59      	ldr	r2, [pc, #356]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076a:	4b57      	ldr	r3, [pc, #348]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	623b      	str	r3, [r7, #32]
 8000774:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b54      	ldr	r3, [pc, #336]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	4a53      	ldr	r2, [pc, #332]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000782:	4b51      	ldr	r3, [pc, #324]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	61fb      	str	r3, [r7, #28]
 800078c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b4e      	ldr	r3, [pc, #312]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	4a4d      	ldr	r2, [pc, #308]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079a:	4b4b      	ldr	r3, [pc, #300]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	61bb      	str	r3, [r7, #24]
 80007a4:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 80007a6:	2304      	movs	r3, #4
 80007a8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007aa:	2303      	movs	r3, #3
 80007ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 80007b6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007ba:	4619      	mov	r1, r3
 80007bc:	4843      	ldr	r0, [pc, #268]	; (80008cc <HAL_ADC_MspInit+0x1e8>)
 80007be:	f002 f91d 	bl	80029fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 80007c2:	2302      	movs	r3, #2
 80007c4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c6:	2303      	movs	r3, #3
 80007c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 80007d2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007d6:	4619      	mov	r1, r3
 80007d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007dc:	f002 f90e 	bl	80029fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007e0:	2303      	movs	r3, #3
 80007e2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007e4:	2303      	movs	r3, #3
 80007e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007f4:	4619      	mov	r1, r3
 80007f6:	4836      	ldr	r0, [pc, #216]	; (80008d0 <HAL_ADC_MspInit+0x1ec>)
 80007f8:	f002 f900 	bl	80029fc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80007fc:	e05e      	b.n	80008bc <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a34      	ldr	r2, [pc, #208]	; (80008d4 <HAL_ADC_MspInit+0x1f0>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d159      	bne.n	80008bc <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000808:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800080c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800080e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000812:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000814:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000818:	4618      	mov	r0, r3
 800081a:	f003 f8c7 	bl	80039ac <HAL_RCCEx_PeriphCLKConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <HAL_ADC_MspInit+0x144>
      Error_Handler();
 8000824:	f000 f9b0 	bl	8000b88 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000828:	4b26      	ldr	r3, [pc, #152]	; (80008c4 <HAL_ADC_MspInit+0x1e0>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	3301      	adds	r3, #1
 800082e:	4a25      	ldr	r2, [pc, #148]	; (80008c4 <HAL_ADC_MspInit+0x1e0>)
 8000830:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000832:	4b24      	ldr	r3, [pc, #144]	; (80008c4 <HAL_ADC_MspInit+0x1e0>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d10b      	bne.n	8000852 <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800083a:	4b23      	ldr	r3, [pc, #140]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	4a22      	ldr	r2, [pc, #136]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 8000840:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000846:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800084e:	617b      	str	r3, [r7, #20]
 8000850:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000852:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	4a1c      	ldr	r2, [pc, #112]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 8000858:	f043 0304 	orr.w	r3, r3, #4
 800085c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085e:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	f003 0304 	and.w	r3, r3, #4
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	4a16      	ldr	r2, [pc, #88]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 8000882:	230b      	movs	r3, #11
 8000884:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000886:	2303      	movs	r3, #3
 8000888:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000892:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000896:	4619      	mov	r1, r3
 8000898:	480c      	ldr	r0, [pc, #48]	; (80008cc <HAL_ADC_MspInit+0x1e8>)
 800089a:	f002 f8af 	bl	80029fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 800089e:	2301      	movs	r3, #1
 80008a0:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008a2:	2303      	movs	r3, #3
 80008a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80008b2:	4619      	mov	r1, r3
 80008b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b8:	f002 f8a0 	bl	80029fc <HAL_GPIO_Init>
}
 80008bc:	bf00      	nop
 80008be:	3790      	adds	r7, #144	; 0x90
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000100 	.word	0x20000100
 80008c8:	40021000 	.word	0x40021000
 80008cc:	48000800 	.word	0x48000800
 80008d0:	48000400 	.word	0x48000400
 80008d4:	50000100 	.word	0x50000100

080008d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	; 0x28
 80008dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
 80008ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ee:	4b3f      	ldr	r3, [pc, #252]	; (80009ec <MX_GPIO_Init+0x114>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	4a3e      	ldr	r2, [pc, #248]	; (80009ec <MX_GPIO_Init+0x114>)
 80008f4:	f043 0304 	orr.w	r3, r3, #4
 80008f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fa:	4b3c      	ldr	r3, [pc, #240]	; (80009ec <MX_GPIO_Init+0x114>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	f003 0304 	and.w	r3, r3, #4
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000906:	4b39      	ldr	r3, [pc, #228]	; (80009ec <MX_GPIO_Init+0x114>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	4a38      	ldr	r2, [pc, #224]	; (80009ec <MX_GPIO_Init+0x114>)
 800090c:	f043 0320 	orr.w	r3, r3, #32
 8000910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000912:	4b36      	ldr	r3, [pc, #216]	; (80009ec <MX_GPIO_Init+0x114>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	f003 0320 	and.w	r3, r3, #32
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	4b33      	ldr	r3, [pc, #204]	; (80009ec <MX_GPIO_Init+0x114>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	4a32      	ldr	r2, [pc, #200]	; (80009ec <MX_GPIO_Init+0x114>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092a:	4b30      	ldr	r3, [pc, #192]	; (80009ec <MX_GPIO_Init+0x114>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	4b2d      	ldr	r3, [pc, #180]	; (80009ec <MX_GPIO_Init+0x114>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	4a2c      	ldr	r2, [pc, #176]	; (80009ec <MX_GPIO_Init+0x114>)
 800093c:	f043 0302 	orr.w	r3, r3, #2
 8000940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000942:	4b2a      	ldr	r3, [pc, #168]	; (80009ec <MX_GPIO_Init+0x114>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800094e:	4b27      	ldr	r3, [pc, #156]	; (80009ec <MX_GPIO_Init+0x114>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	4a26      	ldr	r2, [pc, #152]	; (80009ec <MX_GPIO_Init+0x114>)
 8000954:	f043 0308 	orr.w	r3, r3, #8
 8000958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095a:	4b24      	ldr	r3, [pc, #144]	; (80009ec <MX_GPIO_Init+0x114>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	f003 0308 	and.w	r3, r3, #8
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2120      	movs	r1, #32
 800096a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096e:	f002 f9c7 	bl	8002d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	2104      	movs	r1, #4
 8000976:	481e      	ldr	r0, [pc, #120]	; (80009f0 <MX_GPIO_Init+0x118>)
 8000978:	f002 f9c2 	bl	8002d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 800097c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000982:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4619      	mov	r1, r3
 8000992:	4818      	ldr	r0, [pc, #96]	; (80009f4 <MX_GPIO_Init+0x11c>)
 8000994:	f002 f832 	bl	80029fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000998:	2320      	movs	r3, #32
 800099a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	2301      	movs	r3, #1
 800099e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4619      	mov	r1, r3
 80009ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b2:	f002 f823 	bl	80029fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 80009b6:	2304      	movs	r3, #4
 80009b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	4619      	mov	r1, r3
 80009cc:	4808      	ldr	r0, [pc, #32]	; (80009f0 <MX_GPIO_Init+0x118>)
 80009ce:	f002 f815 	bl	80029fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2100      	movs	r1, #0
 80009d6:	2028      	movs	r0, #40	; 0x28
 80009d8:	f001 ff28 	bl	800282c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009dc:	2028      	movs	r0, #40	; 0x28
 80009de:	f001 ff3f 	bl	8002860 <HAL_NVIC_EnableIRQ>

}
 80009e2:	bf00      	nop
 80009e4:	3728      	adds	r7, #40	; 0x28
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40021000 	.word	0x40021000
 80009f0:	48000c00 	.word	0x48000c00
 80009f4:	48000800 	.word	0x48000800

080009f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009fc:	f000 fd1d 	bl	800143a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a00:	f000 f84a 	bl	8000a98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a04:	f7ff ff68 	bl	80008d8 <MX_GPIO_Init>
  MX_ADC2_Init();
 8000a08:	f7ff fe06 	bl	8000618 <MX_ADC2_Init>
  MX_ADC1_Init();
 8000a0c:	f7ff fd8c 	bl	8000528 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000a10:	f000 f9d0 	bl	8000db4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000a14:	f000 fa7a 	bl	8000f0c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000a18:	f000 fbae 	bl	8001178 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000a1c:	f000 fbf8 	bl	8001210 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, uartRxBuffer, 1);
 8000a20:	2201      	movs	r2, #1
 8000a22:	4917      	ldr	r1, [pc, #92]	; (8000a80 <main+0x88>)
 8000a24:	4817      	ldr	r0, [pc, #92]	; (8000a84 <main+0x8c>)
 8000a26:	f004 fd65 	bl	80054f4 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(it_uart2){
 8000a2a:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <main+0x90>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d0fb      	beq.n	8000a2a <main+0x32>
		  if(uartRxBuffer[0]==ENTER){
 8000a32:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <main+0x88>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b0d      	cmp	r3, #13
 8000a38:	d112      	bne.n	8000a60 <main+0x68>
			  HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);
 8000a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3e:	2202      	movs	r2, #2
 8000a40:	4912      	ldr	r1, [pc, #72]	; (8000a8c <main+0x94>)
 8000a42:	4810      	ldr	r0, [pc, #64]	; (8000a84 <main+0x8c>)
 8000a44:	f004 fcc0 	bl	80053c8 <HAL_UART_Transmit>
			  processCommand(command); // Traitez la commande
 8000a48:	4811      	ldr	r0, [pc, #68]	; (8000a90 <main+0x98>)
 8000a4a:	f000 f8a3 	bl	8000b94 <processCommand>
			  memset(command, 0, sizeof(command)); // Réinitialisez le tableau
 8000a4e:	2220      	movs	r2, #32
 8000a50:	2100      	movs	r1, #0
 8000a52:	480f      	ldr	r0, [pc, #60]	; (8000a90 <main+0x98>)
 8000a54:	f006 fcde 	bl	8007414 <memset>
			  idx=0;
 8000a58:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <main+0x9c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	701a      	strb	r2, [r3, #0]
 8000a5e:	e00a      	b.n	8000a76 <main+0x7e>
		  }
		  else{
			  command[idx++]=uartRxBuffer[0];
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <main+0x9c>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	1c5a      	adds	r2, r3, #1
 8000a66:	b2d1      	uxtb	r1, r2
 8000a68:	4a0a      	ldr	r2, [pc, #40]	; (8000a94 <main+0x9c>)
 8000a6a:	7011      	strb	r1, [r2, #0]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <main+0x88>)
 8000a70:	7819      	ldrb	r1, [r3, #0]
 8000a72:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <main+0x98>)
 8000a74:	5499      	strb	r1, [r3, r2]
		  }
		  it_uart2 = 0;
 8000a76:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <main+0x90>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
	  if(it_uart2){
 8000a7c:	e7d5      	b.n	8000a2a <main+0x32>
 8000a7e:	bf00      	nop
 8000a80:	20000104 	.word	0x20000104
 8000a84:	20000210 	.word	0x20000210
 8000a88:	20000105 	.word	0x20000105
 8000a8c:	08007484 	.word	0x08007484
 8000a90:	20000108 	.word	0x20000108
 8000a94:	20000128 	.word	0x20000128

08000a98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b094      	sub	sp, #80	; 0x50
 8000a9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a9e:	f107 0318 	add.w	r3, r7, #24
 8000aa2:	2238      	movs	r2, #56	; 0x38
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f006 fcb4 	bl	8007414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000aba:	2000      	movs	r0, #0
 8000abc:	f002 f95c 	bl	8002d78 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ac4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ac8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aca:	2302      	movs	r3, #2
 8000acc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000ad2:	2306      	movs	r3, #6
 8000ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000ad6:	2355      	movs	r3, #85	; 0x55
 8000ad8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ada:	2302      	movs	r3, #2
 8000adc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae6:	f107 0318 	add.w	r3, r7, #24
 8000aea:	4618      	mov	r0, r3
 8000aec:	f002 f9f8 	bl	8002ee0 <HAL_RCC_OscConfig>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000af6:	f000 f847 	bl	8000b88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afa:	230f      	movs	r3, #15
 8000afc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000afe:	2303      	movs	r3, #3
 8000b00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2104      	movs	r1, #4
 8000b12:	4618      	mov	r0, r3
 8000b14:	f002 fcfc 	bl	8003510 <HAL_RCC_ClockConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000b1e:	f000 f833 	bl	8000b88 <Error_Handler>
  }
}
 8000b22:	bf00      	nop
 8000b24:	3750      	adds	r7, #80	; 0x50
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, uartRxBuffer, 1, 100);
 8000b34:	2364      	movs	r3, #100	; 0x64
 8000b36:	2201      	movs	r2, #1
 8000b38:	4907      	ldr	r1, [pc, #28]	; (8000b58 <HAL_UART_RxCpltCallback+0x2c>)
 8000b3a:	4808      	ldr	r0, [pc, #32]	; (8000b5c <HAL_UART_RxCpltCallback+0x30>)
 8000b3c:	f004 fc44 	bl	80053c8 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, 1);
 8000b40:	2201      	movs	r2, #1
 8000b42:	4905      	ldr	r1, [pc, #20]	; (8000b58 <HAL_UART_RxCpltCallback+0x2c>)
 8000b44:	4805      	ldr	r0, [pc, #20]	; (8000b5c <HAL_UART_RxCpltCallback+0x30>)
 8000b46:	f004 fcd5 	bl	80054f4 <HAL_UART_Receive_IT>
	it_uart2 = 1;
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <HAL_UART_RxCpltCallback+0x34>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	701a      	strb	r2, [r3, #0]
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000104 	.word	0x20000104
 8000b5c:	20000210 	.word	0x20000210
 8000b60:	20000105 	.word	0x20000105

08000b64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d101      	bne.n	8000b7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b76:	f000 fc79 	bl	800146c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40001000 	.word	0x40001000

08000b88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b8c:	b672      	cpsid	i
}
 8000b8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <Error_Handler+0x8>
	...

08000b94 <processCommand>:
#include "tim.h"
#include "usart.h"
#include "gpio.h"
#include "string.h"

void processCommand(char* command) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  if (strcmp(command, "help") == 0) {
 8000b9c:	490c      	ldr	r1, [pc, #48]	; (8000bd0 <processCommand+0x3c>)
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f7ff fb3a 	bl	8000218 <strcmp>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d10d      	bne.n	8000bc6 <processCommand+0x32>
    // Affiche le message d'aide
    HAL_UART_Transmit(&huart2, "Commandes disponibles :\r\n", strlen("Commandes disponibles :\r\n"), HAL_MAX_DELAY);
 8000baa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bae:	2219      	movs	r2, #25
 8000bb0:	4908      	ldr	r1, [pc, #32]	; (8000bd4 <processCommand+0x40>)
 8000bb2:	4809      	ldr	r0, [pc, #36]	; (8000bd8 <processCommand+0x44>)
 8000bb4:	f004 fc08 	bl	80053c8 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, " - help : Affiche ce message d'aide\r\n", strlen(" - help : Affiche ce message d'aide\r\n"), HAL_MAX_DELAY);
 8000bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bbc:	2225      	movs	r2, #37	; 0x25
 8000bbe:	4907      	ldr	r1, [pc, #28]	; (8000bdc <processCommand+0x48>)
 8000bc0:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <processCommand+0x44>)
 8000bc2:	f004 fc01 	bl	80053c8 <HAL_UART_Transmit>
    // Ajoutez d'autres commandes et leurs descriptions ici
  }
  // Ajoutez d'autres conditions pour d'autres commandes si nécessaire
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	08007488 	.word	0x08007488
 8000bd4:	08007490 	.word	0x08007490
 8000bd8:	20000210 	.word	0x20000210
 8000bdc:	080074ac 	.word	0x080074ac

08000be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be6:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <HAL_MspInit+0x44>)
 8000be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bea:	4a0e      	ldr	r2, [pc, #56]	; (8000c24 <HAL_MspInit+0x44>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6613      	str	r3, [r2, #96]	; 0x60
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <HAL_MspInit+0x44>)
 8000bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <HAL_MspInit+0x44>)
 8000c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c02:	4a08      	ldr	r2, [pc, #32]	; (8000c24 <HAL_MspInit+0x44>)
 8000c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c08:	6593      	str	r3, [r2, #88]	; 0x58
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_MspInit+0x44>)
 8000c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c16:	f002 f953 	bl	8002ec0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40021000 	.word	0x40021000

08000c28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08c      	sub	sp, #48	; 0x30
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c38:	4b2c      	ldr	r3, [pc, #176]	; (8000cec <HAL_InitTick+0xc4>)
 8000c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c3c:	4a2b      	ldr	r2, [pc, #172]	; (8000cec <HAL_InitTick+0xc4>)
 8000c3e:	f043 0310 	orr.w	r3, r3, #16
 8000c42:	6593      	str	r3, [r2, #88]	; 0x58
 8000c44:	4b29      	ldr	r3, [pc, #164]	; (8000cec <HAL_InitTick+0xc4>)
 8000c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c48:	f003 0310 	and.w	r3, r3, #16
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c50:	f107 020c 	add.w	r2, r7, #12
 8000c54:	f107 0310 	add.w	r3, r7, #16
 8000c58:	4611      	mov	r1, r2
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f002 fe2e 	bl	80038bc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c60:	f002 fe00 	bl	8003864 <HAL_RCC_GetPCLK1Freq>
 8000c64:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c68:	4a21      	ldr	r2, [pc, #132]	; (8000cf0 <HAL_InitTick+0xc8>)
 8000c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c6e:	0c9b      	lsrs	r3, r3, #18
 8000c70:	3b01      	subs	r3, #1
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c74:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <HAL_InitTick+0xcc>)
 8000c76:	4a20      	ldr	r2, [pc, #128]	; (8000cf8 <HAL_InitTick+0xd0>)
 8000c78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c7a:	4b1e      	ldr	r3, [pc, #120]	; (8000cf4 <HAL_InitTick+0xcc>)
 8000c7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c80:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c82:	4a1c      	ldr	r2, [pc, #112]	; (8000cf4 <HAL_InitTick+0xcc>)
 8000c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c86:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c88:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <HAL_InitTick+0xcc>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8e:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <HAL_InitTick+0xcc>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000c94:	4817      	ldr	r0, [pc, #92]	; (8000cf4 <HAL_InitTick+0xcc>)
 8000c96:	f003 f8d7 	bl	8003e48 <HAL_TIM_Base_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000ca0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d11b      	bne.n	8000ce0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ca8:	4812      	ldr	r0, [pc, #72]	; (8000cf4 <HAL_InitTick+0xcc>)
 8000caa:	f003 f92f 	bl	8003f0c <HAL_TIM_Base_Start_IT>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000cb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d111      	bne.n	8000ce0 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cbc:	2036      	movs	r0, #54	; 0x36
 8000cbe:	f001 fdcf 	bl	8002860 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2b0f      	cmp	r3, #15
 8000cc6:	d808      	bhi.n	8000cda <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	6879      	ldr	r1, [r7, #4]
 8000ccc:	2036      	movs	r0, #54	; 0x36
 8000cce:	f001 fdad 	bl	800282c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <HAL_InitTick+0xd4>)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6013      	str	r3, [r2, #0]
 8000cd8:	e002      	b.n	8000ce0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ce0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3730      	adds	r7, #48	; 0x30
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	431bde83 	.word	0x431bde83
 8000cf4:	2000012c 	.word	0x2000012c
 8000cf8:	40001000 	.word	0x40001000
 8000cfc:	20000004 	.word	0x20000004

08000d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <NMI_Handler+0x4>

08000d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <HardFault_Handler+0x4>

08000d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <MemManage_Handler+0x4>

08000d12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <BusFault_Handler+0x4>

08000d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <UsageFault_Handler+0x4>

08000d1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
	...

08000d58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d5c:	4802      	ldr	r0, [pc, #8]	; (8000d68 <USART2_IRQHandler+0x10>)
 8000d5e:	f004 fc1f 	bl	80055a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000210 	.word	0x20000210

08000d6c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8000d70:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d74:	f001 ffdc 	bl	8002d30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d80:	4802      	ldr	r0, [pc, #8]	; (8000d8c <TIM6_DAC_IRQHandler+0x10>)
 8000d82:	f003 f992 	bl	80040aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	2000012c 	.word	0x2000012c

08000d90 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <SystemInit+0x20>)
 8000d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9a:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <SystemInit+0x20>)
 8000d9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b098      	sub	sp, #96	; 0x60
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dc6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
 8000dd4:	611a      	str	r2, [r3, #16]
 8000dd6:	615a      	str	r2, [r3, #20]
 8000dd8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	2234      	movs	r2, #52	; 0x34
 8000dde:	2100      	movs	r1, #0
 8000de0:	4618      	mov	r0, r3
 8000de2:	f006 fb17 	bl	8007414 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000de6:	4b47      	ldr	r3, [pc, #284]	; (8000f04 <MX_TIM1_Init+0x150>)
 8000de8:	4a47      	ldr	r2, [pc, #284]	; (8000f08 <MX_TIM1_Init+0x154>)
 8000dea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000dec:	4b45      	ldr	r3, [pc, #276]	; (8000f04 <MX_TIM1_Init+0x150>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df2:	4b44      	ldr	r3, [pc, #272]	; (8000f04 <MX_TIM1_Init+0x150>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000df8:	4b42      	ldr	r3, [pc, #264]	; (8000f04 <MX_TIM1_Init+0x150>)
 8000dfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dfe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e00:	4b40      	ldr	r3, [pc, #256]	; (8000f04 <MX_TIM1_Init+0x150>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e06:	4b3f      	ldr	r3, [pc, #252]	; (8000f04 <MX_TIM1_Init+0x150>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e0c:	4b3d      	ldr	r3, [pc, #244]	; (8000f04 <MX_TIM1_Init+0x150>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e12:	483c      	ldr	r0, [pc, #240]	; (8000f04 <MX_TIM1_Init+0x150>)
 8000e14:	f003 f8f2 	bl	8003ffc <HAL_TIM_PWM_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000e1e:	f7ff feb3 	bl	8000b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e22:	2300      	movs	r3, #0
 8000e24:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e26:	2300      	movs	r3, #0
 8000e28:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e2e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e32:	4619      	mov	r1, r3
 8000e34:	4833      	ldr	r0, [pc, #204]	; (8000f04 <MX_TIM1_Init+0x150>)
 8000e36:	f004 f8e9 	bl	800500c <HAL_TIMEx_MasterConfigSynchronization>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000e40:	f7ff fea2 	bl	8000b88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e44:	2360      	movs	r3, #96	; 0x60
 8000e46:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e50:	2300      	movs	r3, #0
 8000e52:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e64:	2200      	movs	r2, #0
 8000e66:	4619      	mov	r1, r3
 8000e68:	4826      	ldr	r0, [pc, #152]	; (8000f04 <MX_TIM1_Init+0x150>)
 8000e6a:	f003 fa9d 	bl	80043a8 <HAL_TIM_PWM_ConfigChannel>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000e74:	f7ff fe88 	bl	8000b88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e7c:	2204      	movs	r2, #4
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4820      	ldr	r0, [pc, #128]	; (8000f04 <MX_TIM1_Init+0x150>)
 8000e82:	f003 fa91 	bl	80043a8 <HAL_TIM_PWM_ConfigChannel>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000e8c:	f7ff fe7c 	bl	8000b88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e90:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e94:	2208      	movs	r2, #8
 8000e96:	4619      	mov	r1, r3
 8000e98:	481a      	ldr	r0, [pc, #104]	; (8000f04 <MX_TIM1_Init+0x150>)
 8000e9a:	f003 fa85 	bl	80043a8 <HAL_TIM_PWM_ConfigChannel>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000ea4:	f7ff fe70 	bl	8000b88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ebc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ec0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ece:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4807      	ldr	r0, [pc, #28]	; (8000f04 <MX_TIM1_Init+0x150>)
 8000ee6:	f004 f927 	bl	8005138 <HAL_TIMEx_ConfigBreakDeadTime>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000ef0:	f7ff fe4a 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ef4:	4803      	ldr	r0, [pc, #12]	; (8000f04 <MX_TIM1_Init+0x150>)
 8000ef6:	f000 f8d7 	bl	80010a8 <HAL_TIM_MspPostInit>

}
 8000efa:	bf00      	nop
 8000efc:	3760      	adds	r7, #96	; 0x60
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000178 	.word	0x20000178
 8000f08:	40012c00 	.word	0x40012c00

08000f0c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000f12:	f107 0310 	add.w	r3, r7, #16
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f2a:	4b1c      	ldr	r3, [pc, #112]	; (8000f9c <MX_TIM3_Init+0x90>)
 8000f2c:	4a1c      	ldr	r2, [pc, #112]	; (8000fa0 <MX_TIM3_Init+0x94>)
 8000f2e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f30:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <MX_TIM3_Init+0x90>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f36:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <MX_TIM3_Init+0x90>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f3c:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <MX_TIM3_Init+0x90>)
 8000f3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f42:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f44:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <MX_TIM3_Init+0x90>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4a:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <MX_TIM3_Init+0x90>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f50:	2300      	movs	r3, #0
 8000f52:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8000f60:	f107 0310 	add.w	r3, r7, #16
 8000f64:	4619      	mov	r1, r3
 8000f66:	480d      	ldr	r0, [pc, #52]	; (8000f9c <MX_TIM3_Init+0x90>)
 8000f68:	f003 ffa0 	bl	8004eac <HAL_TIMEx_HallSensor_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000f72:	f7ff fe09 	bl	8000b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000f76:	2350      	movs	r3, #80	; 0x50
 8000f78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	4619      	mov	r1, r3
 8000f82:	4806      	ldr	r0, [pc, #24]	; (8000f9c <MX_TIM3_Init+0x90>)
 8000f84:	f004 f842 	bl	800500c <HAL_TIMEx_MasterConfigSynchronization>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000f8e:	f7ff fdfb 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f92:	bf00      	nop
 8000f94:	3720      	adds	r7, #32
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200001c4 	.word	0x200001c4
 8000fa0:	40000400 	.word	0x40000400

08000fa4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <HAL_TIM_PWM_MspInit+0x38>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d10b      	bne.n	8000fce <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <HAL_TIM_PWM_MspInit+0x3c>)
 8000fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fba:	4a09      	ldr	r2, [pc, #36]	; (8000fe0 <HAL_TIM_PWM_MspInit+0x3c>)
 8000fbc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fc0:	6613      	str	r3, [r2, #96]	; 0x60
 8000fc2:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <HAL_TIM_PWM_MspInit+0x3c>)
 8000fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000fce:	bf00      	nop
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40012c00 	.word	0x40012c00
 8000fe0:	40021000 	.word	0x40021000

08000fe4 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	; 0x28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a26      	ldr	r2, [pc, #152]	; (800109c <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d145      	bne.n	8001092 <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001006:	4b26      	ldr	r3, [pc, #152]	; (80010a0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100a:	4a25      	ldr	r2, [pc, #148]	; (80010a0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800100c:	f043 0302 	orr.w	r3, r3, #2
 8001010:	6593      	str	r3, [r2, #88]	; 0x58
 8001012:	4b23      	ldr	r3, [pc, #140]	; (80010a0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	4b20      	ldr	r3, [pc, #128]	; (80010a0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001022:	4a1f      	ldr	r2, [pc, #124]	; (80010a0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001036:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103a:	4a19      	ldr	r2, [pc, #100]	; (80010a0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800103c:	f043 0304 	orr.w	r3, r3, #4
 8001040:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001042:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	f003 0304 	and.w	r3, r3, #4
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800104e:	2350      	movs	r3, #80	; 0x50
 8001050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800105e:	2302      	movs	r3, #2
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	4619      	mov	r1, r3
 8001068:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106c:	f001 fcc6 	bl	80029fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001070:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001082:	2302      	movs	r3, #2
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	4619      	mov	r1, r3
 800108c:	4805      	ldr	r0, [pc, #20]	; (80010a4 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 800108e:	f001 fcb5 	bl	80029fc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001092:	bf00      	nop
 8001094:	3728      	adds	r7, #40	; 0x28
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40000400 	.word	0x40000400
 80010a0:	40021000 	.word	0x40021000
 80010a4:	48000800 	.word	0x48000800

080010a8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a29      	ldr	r2, [pc, #164]	; (800116c <HAL_TIM_MspPostInit+0xc4>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d14b      	bne.n	8001162 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ca:	4b29      	ldr	r3, [pc, #164]	; (8001170 <HAL_TIM_MspPostInit+0xc8>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ce:	4a28      	ldr	r2, [pc, #160]	; (8001170 <HAL_TIM_MspPostInit+0xc8>)
 80010d0:	f043 0302 	orr.w	r3, r3, #2
 80010d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d6:	4b26      	ldr	r3, [pc, #152]	; (8001170 <HAL_TIM_MspPostInit+0xc8>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	4b23      	ldr	r3, [pc, #140]	; (8001170 <HAL_TIM_MspPostInit+0xc8>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	4a22      	ldr	r2, [pc, #136]	; (8001170 <HAL_TIM_MspPostInit+0xc8>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ee:	4b20      	ldr	r3, [pc, #128]	; (8001170 <HAL_TIM_MspPostInit+0xc8>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 80010fa:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80010fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001100:	2302      	movs	r3, #2
 8001102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001108:	2300      	movs	r3, #0
 800110a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800110c:	2306      	movs	r3, #6
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4619      	mov	r1, r3
 8001116:	4817      	ldr	r0, [pc, #92]	; (8001174 <HAL_TIM_MspPostInit+0xcc>)
 8001118:	f001 fc70 	bl	80029fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 800111c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001120:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001122:	2302      	movs	r3, #2
 8001124:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800112e:	2304      	movs	r3, #4
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	4619      	mov	r1, r3
 8001138:	480e      	ldr	r0, [pc, #56]	; (8001174 <HAL_TIM_MspPostInit+0xcc>)
 800113a:	f001 fc5f 	bl	80029fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 800113e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114c:	2300      	movs	r3, #0
 800114e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001150:	2306      	movs	r3, #6
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4619      	mov	r1, r3
 800115a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115e:	f001 fc4d 	bl	80029fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001162:	bf00      	nop
 8001164:	3728      	adds	r7, #40	; 0x28
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40012c00 	.word	0x40012c00
 8001170:	40021000 	.word	0x40021000
 8001174:	48000400 	.word	0x48000400

08001178 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800117c:	4b22      	ldr	r3, [pc, #136]	; (8001208 <MX_USART2_UART_Init+0x90>)
 800117e:	4a23      	ldr	r2, [pc, #140]	; (800120c <MX_USART2_UART_Init+0x94>)
 8001180:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001182:	4b21      	ldr	r3, [pc, #132]	; (8001208 <MX_USART2_UART_Init+0x90>)
 8001184:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001188:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800118a:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <MX_USART2_UART_Init+0x90>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001190:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <MX_USART2_UART_Init+0x90>)
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001196:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <MX_USART2_UART_Init+0x90>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800119c:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <MX_USART2_UART_Init+0x90>)
 800119e:	220c      	movs	r2, #12
 80011a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a2:	4b19      	ldr	r3, [pc, #100]	; (8001208 <MX_USART2_UART_Init+0x90>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a8:	4b17      	ldr	r3, [pc, #92]	; (8001208 <MX_USART2_UART_Init+0x90>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ae:	4b16      	ldr	r3, [pc, #88]	; (8001208 <MX_USART2_UART_Init+0x90>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011b4:	4b14      	ldr	r3, [pc, #80]	; (8001208 <MX_USART2_UART_Init+0x90>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <MX_USART2_UART_Init+0x90>)
 80011bc:	2200      	movs	r2, #0
 80011be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011c0:	4811      	ldr	r0, [pc, #68]	; (8001208 <MX_USART2_UART_Init+0x90>)
 80011c2:	f004 f8b1 	bl	8005328 <HAL_UART_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80011cc:	f7ff fcdc 	bl	8000b88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011d0:	2100      	movs	r1, #0
 80011d2:	480d      	ldr	r0, [pc, #52]	; (8001208 <MX_USART2_UART_Init+0x90>)
 80011d4:	f006 f853 	bl	800727e <HAL_UARTEx_SetTxFifoThreshold>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80011de:	f7ff fcd3 	bl	8000b88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011e2:	2100      	movs	r1, #0
 80011e4:	4808      	ldr	r0, [pc, #32]	; (8001208 <MX_USART2_UART_Init+0x90>)
 80011e6:	f006 f888 	bl	80072fa <HAL_UARTEx_SetRxFifoThreshold>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80011f0:	f7ff fcca 	bl	8000b88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80011f4:	4804      	ldr	r0, [pc, #16]	; (8001208 <MX_USART2_UART_Init+0x90>)
 80011f6:	f006 f809 	bl	800720c <HAL_UARTEx_DisableFifoMode>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001200:	f7ff fcc2 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000210 	.word	0x20000210
 800120c:	40004400 	.word	0x40004400

08001210 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001214:	4b22      	ldr	r3, [pc, #136]	; (80012a0 <MX_USART3_UART_Init+0x90>)
 8001216:	4a23      	ldr	r2, [pc, #140]	; (80012a4 <MX_USART3_UART_Init+0x94>)
 8001218:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800121a:	4b21      	ldr	r3, [pc, #132]	; (80012a0 <MX_USART3_UART_Init+0x90>)
 800121c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001220:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001222:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <MX_USART3_UART_Init+0x90>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001228:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <MX_USART3_UART_Init+0x90>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800122e:	4b1c      	ldr	r3, [pc, #112]	; (80012a0 <MX_USART3_UART_Init+0x90>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001234:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <MX_USART3_UART_Init+0x90>)
 8001236:	220c      	movs	r2, #12
 8001238:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123a:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <MX_USART3_UART_Init+0x90>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001240:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <MX_USART3_UART_Init+0x90>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001246:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <MX_USART3_UART_Init+0x90>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800124c:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <MX_USART3_UART_Init+0x90>)
 800124e:	2200      	movs	r2, #0
 8001250:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <MX_USART3_UART_Init+0x90>)
 8001254:	2200      	movs	r2, #0
 8001256:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001258:	4811      	ldr	r0, [pc, #68]	; (80012a0 <MX_USART3_UART_Init+0x90>)
 800125a:	f004 f865 	bl	8005328 <HAL_UART_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001264:	f7ff fc90 	bl	8000b88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001268:	2100      	movs	r1, #0
 800126a:	480d      	ldr	r0, [pc, #52]	; (80012a0 <MX_USART3_UART_Init+0x90>)
 800126c:	f006 f807 	bl	800727e <HAL_UARTEx_SetTxFifoThreshold>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001276:	f7ff fc87 	bl	8000b88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800127a:	2100      	movs	r1, #0
 800127c:	4808      	ldr	r0, [pc, #32]	; (80012a0 <MX_USART3_UART_Init+0x90>)
 800127e:	f006 f83c 	bl	80072fa <HAL_UARTEx_SetRxFifoThreshold>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001288:	f7ff fc7e 	bl	8000b88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800128c:	4804      	ldr	r0, [pc, #16]	; (80012a0 <MX_USART3_UART_Init+0x90>)
 800128e:	f005 ffbd 	bl	800720c <HAL_UARTEx_DisableFifoMode>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001298:	f7ff fc76 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	200002a0 	.word	0x200002a0
 80012a4:	40004800 	.word	0x40004800

080012a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b0a0      	sub	sp, #128	; 0x80
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012c0:	f107 0318 	add.w	r3, r7, #24
 80012c4:	2254      	movs	r2, #84	; 0x54
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f006 f8a3 	bl	8007414 <memset>
  if(uartHandle->Instance==USART2)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a41      	ldr	r2, [pc, #260]	; (80013d8 <HAL_UART_MspInit+0x130>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d13f      	bne.n	8001358 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012d8:	2302      	movs	r3, #2
 80012da:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012dc:	2300      	movs	r3, #0
 80012de:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012e0:	f107 0318 	add.w	r3, r7, #24
 80012e4:	4618      	mov	r0, r3
 80012e6:	f002 fb61 	bl	80039ac <HAL_RCCEx_PeriphCLKConfig>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012f0:	f7ff fc4a 	bl	8000b88 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012f4:	4b39      	ldr	r3, [pc, #228]	; (80013dc <HAL_UART_MspInit+0x134>)
 80012f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f8:	4a38      	ldr	r2, [pc, #224]	; (80013dc <HAL_UART_MspInit+0x134>)
 80012fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001300:	4b36      	ldr	r3, [pc, #216]	; (80013dc <HAL_UART_MspInit+0x134>)
 8001302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001308:	617b      	str	r3, [r7, #20]
 800130a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130c:	4b33      	ldr	r3, [pc, #204]	; (80013dc <HAL_UART_MspInit+0x134>)
 800130e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001310:	4a32      	ldr	r2, [pc, #200]	; (80013dc <HAL_UART_MspInit+0x134>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001318:	4b30      	ldr	r3, [pc, #192]	; (80013dc <HAL_UART_MspInit+0x134>)
 800131a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001324:	230c      	movs	r3, #12
 8001326:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2300      	movs	r3, #0
 8001332:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001334:	2307      	movs	r3, #7
 8001336:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001338:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800133c:	4619      	mov	r1, r3
 800133e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001342:	f001 fb5b 	bl	80029fc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	2100      	movs	r1, #0
 800134a:	2026      	movs	r0, #38	; 0x26
 800134c:	f001 fa6e 	bl	800282c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001350:	2026      	movs	r0, #38	; 0x26
 8001352:	f001 fa85 	bl	8002860 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001356:	e03b      	b.n	80013d0 <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART3)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a20      	ldr	r2, [pc, #128]	; (80013e0 <HAL_UART_MspInit+0x138>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d136      	bne.n	80013d0 <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001362:	2304      	movs	r3, #4
 8001364:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001366:	2300      	movs	r3, #0
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800136a:	f107 0318 	add.w	r3, r7, #24
 800136e:	4618      	mov	r0, r3
 8001370:	f002 fb1c 	bl	80039ac <HAL_RCCEx_PeriphCLKConfig>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_UART_MspInit+0xd6>
      Error_Handler();
 800137a:	f7ff fc05 	bl	8000b88 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800137e:	4b17      	ldr	r3, [pc, #92]	; (80013dc <HAL_UART_MspInit+0x134>)
 8001380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001382:	4a16      	ldr	r2, [pc, #88]	; (80013dc <HAL_UART_MspInit+0x134>)
 8001384:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001388:	6593      	str	r3, [r2, #88]	; 0x58
 800138a:	4b14      	ldr	r3, [pc, #80]	; (80013dc <HAL_UART_MspInit+0x134>)
 800138c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001396:	4b11      	ldr	r3, [pc, #68]	; (80013dc <HAL_UART_MspInit+0x134>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139a:	4a10      	ldr	r2, [pc, #64]	; (80013dc <HAL_UART_MspInit+0x134>)
 800139c:	f043 0304 	orr.w	r3, r3, #4
 80013a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <HAL_UART_MspInit+0x134>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	f003 0304 	and.w	r3, r3, #4
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80013ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013b2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	2300      	movs	r3, #0
 80013be:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013c0:	2307      	movs	r3, #7
 80013c2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013c8:	4619      	mov	r1, r3
 80013ca:	4806      	ldr	r0, [pc, #24]	; (80013e4 <HAL_UART_MspInit+0x13c>)
 80013cc:	f001 fb16 	bl	80029fc <HAL_GPIO_Init>
}
 80013d0:	bf00      	nop
 80013d2:	3780      	adds	r7, #128	; 0x80
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40004400 	.word	0x40004400
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40004800 	.word	0x40004800
 80013e4:	48000800 	.word	0x48000800

080013e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013e8:	480d      	ldr	r0, [pc, #52]	; (8001420 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013ea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013ec:	480d      	ldr	r0, [pc, #52]	; (8001424 <LoopForever+0x6>)
  ldr r1, =_edata
 80013ee:	490e      	ldr	r1, [pc, #56]	; (8001428 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013f0:	4a0e      	ldr	r2, [pc, #56]	; (800142c <LoopForever+0xe>)
  movs r3, #0
 80013f2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80013f4:	e002      	b.n	80013fc <LoopCopyDataInit>

080013f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013fa:	3304      	adds	r3, #4

080013fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001400:	d3f9      	bcc.n	80013f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001402:	4a0b      	ldr	r2, [pc, #44]	; (8001430 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001404:	4c0b      	ldr	r4, [pc, #44]	; (8001434 <LoopForever+0x16>)
  movs r3, #0
 8001406:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001408:	e001      	b.n	800140e <LoopFillZerobss>

0800140a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800140a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800140c:	3204      	adds	r2, #4

0800140e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001410:	d3fb      	bcc.n	800140a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001412:	f7ff fcbd 	bl	8000d90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001416:	f006 f805 	bl	8007424 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800141a:	f7ff faed 	bl	80009f8 <main>

0800141e <LoopForever>:

LoopForever:
    b LoopForever
 800141e:	e7fe      	b.n	800141e <LoopForever>
  ldr   r0, =_estack
 8001420:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001424:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001428:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800142c:	08007524 	.word	0x08007524
  ldr r2, =_sbss
 8001430:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001434:	20000334 	.word	0x20000334

08001438 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001438:	e7fe      	b.n	8001438 <ADC1_2_IRQHandler>

0800143a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001440:	2300      	movs	r3, #0
 8001442:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001444:	2003      	movs	r0, #3
 8001446:	f001 f9e6 	bl	8002816 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800144a:	200f      	movs	r0, #15
 800144c:	f7ff fbec 	bl	8000c28 <HAL_InitTick>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d002      	beq.n	800145c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	71fb      	strb	r3, [r7, #7]
 800145a:	e001      	b.n	8001460 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800145c:	f7ff fbc0 	bl	8000be0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001460:	79fb      	ldrb	r3, [r7, #7]

}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <HAL_IncTick+0x1c>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b05      	ldr	r3, [pc, #20]	; (800148c <HAL_IncTick+0x20>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4413      	add	r3, r2
 800147a:	4a03      	ldr	r2, [pc, #12]	; (8001488 <HAL_IncTick+0x1c>)
 800147c:	6013      	str	r3, [r2, #0]
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	20000330 	.word	0x20000330
 800148c:	20000008 	.word	0x20000008

08001490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return uwTick;
 8001494:	4b03      	ldr	r3, [pc, #12]	; (80014a4 <HAL_GetTick+0x14>)
 8001496:	681b      	ldr	r3, [r3, #0]
}
 8001498:	4618      	mov	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	20000330 	.word	0x20000330

080014a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	431a      	orrs	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	609a      	str	r2, [r3, #8]
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
 80014d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	609a      	str	r2, [r3, #8]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001510:	b480      	push	{r7}
 8001512:	b087      	sub	sp, #28
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
 800151c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	3360      	adds	r3, #96	; 0x60
 8001522:	461a      	mov	r2, r3
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <LL_ADC_SetOffset+0x44>)
 8001532:	4013      	ands	r3, r2
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	430a      	orrs	r2, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001548:	bf00      	nop
 800154a:	371c      	adds	r7, #28
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	03fff000 	.word	0x03fff000

08001558 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	3360      	adds	r3, #96	; 0x60
 8001566:	461a      	mov	r2, r3
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001578:	4618      	mov	r0, r3
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001584:	b480      	push	{r7}
 8001586:	b087      	sub	sp, #28
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	3360      	adds	r3, #96	; 0x60
 8001594:	461a      	mov	r2, r3
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4413      	add	r3, r2
 800159c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	431a      	orrs	r2, r3
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80015ae:	bf00      	nop
 80015b0:	371c      	adds	r7, #28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b087      	sub	sp, #28
 80015be:	af00      	add	r7, sp, #0
 80015c0:	60f8      	str	r0, [r7, #12]
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	3360      	adds	r3, #96	; 0x60
 80015ca:	461a      	mov	r2, r3
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	431a      	orrs	r2, r3
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80015e4:	bf00      	nop
 80015e6:	371c      	adds	r7, #28
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b087      	sub	sp, #28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	3360      	adds	r3, #96	; 0x60
 8001600:	461a      	mov	r2, r3
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	431a      	orrs	r2, r3
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800161a:	bf00      	nop
 800161c:	371c      	adds	r7, #28
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	615a      	str	r2, [r3, #20]
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800164c:	b480      	push	{r7}
 800164e:	b087      	sub	sp, #28
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	3330      	adds	r3, #48	; 0x30
 800165c:	461a      	mov	r2, r3
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	0a1b      	lsrs	r3, r3, #8
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	f003 030c 	and.w	r3, r3, #12
 8001668:	4413      	add	r3, r2
 800166a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	f003 031f 	and.w	r3, r3, #31
 8001676:	211f      	movs	r1, #31
 8001678:	fa01 f303 	lsl.w	r3, r1, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	401a      	ands	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	0e9b      	lsrs	r3, r3, #26
 8001684:	f003 011f 	and.w	r1, r3, #31
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	f003 031f 	and.w	r3, r3, #31
 800168e:	fa01 f303 	lsl.w	r3, r1, r3
 8001692:	431a      	orrs	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001698:	bf00      	nop
 800169a:	371c      	adds	r7, #28
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b087      	sub	sp, #28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	3314      	adds	r3, #20
 80016b4:	461a      	mov	r2, r3
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	0e5b      	lsrs	r3, r3, #25
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	4413      	add	r3, r2
 80016c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	0d1b      	lsrs	r3, r3, #20
 80016cc:	f003 031f 	and.w	r3, r3, #31
 80016d0:	2107      	movs	r1, #7
 80016d2:	fa01 f303 	lsl.w	r3, r1, r3
 80016d6:	43db      	mvns	r3, r3
 80016d8:	401a      	ands	r2, r3
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	0d1b      	lsrs	r3, r3, #20
 80016de:	f003 031f 	and.w	r3, r3, #31
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	fa01 f303 	lsl.w	r3, r1, r3
 80016e8:	431a      	orrs	r2, r3
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016ee:	bf00      	nop
 80016f0:	371c      	adds	r7, #28
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
	...

080016fc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a0f      	ldr	r2, [pc, #60]	; (8001748 <LL_ADC_SetChannelSingleDiff+0x4c>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d10a      	bne.n	8001726 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800171c:	431a      	orrs	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001724:	e00a      	b.n	800173c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001732:	43db      	mvns	r3, r3
 8001734:	401a      	ands	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800173c:	bf00      	nop
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	407f0000 	.word	0x407f0000

0800174c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800175c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	6093      	str	r3, [r2, #8]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001780:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001784:	d101      	bne.n	800178a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001786:	2301      	movs	r3, #1
 8001788:	e000      	b.n	800178c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80017a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80017d4:	d101      	bne.n	80017da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017d6:	2301      	movs	r3, #1
 80017d8:	e000      	b.n	80017dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d101      	bne.n	8001800 <LL_ADC_IsEnabled+0x18>
 80017fc:	2301      	movs	r3, #1
 80017fe:	e000      	b.n	8001802 <LL_ADC_IsEnabled+0x1a>
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 0304 	and.w	r3, r3, #4
 800181e:	2b04      	cmp	r3, #4
 8001820:	d101      	bne.n	8001826 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001822:	2301      	movs	r3, #1
 8001824:	e000      	b.n	8001828 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f003 0308 	and.w	r3, r3, #8
 8001844:	2b08      	cmp	r3, #8
 8001846:	d101      	bne.n	800184c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001848:	2301      	movs	r3, #1
 800184a:	e000      	b.n	800184e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
	...

0800185c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800185c:	b590      	push	{r4, r7, lr}
 800185e:	b089      	sub	sp, #36	; 0x24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001864:	2300      	movs	r3, #0
 8001866:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001868:	2300      	movs	r3, #0
 800186a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e1af      	b.n	8001bd6 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001880:	2b00      	cmp	r3, #0
 8001882:	d109      	bne.n	8001898 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7fe ff2d 	bl	80006e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff67 	bl	8001770 <LL_ADC_IsDeepPowerDownEnabled>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d004      	beq.n	80018b2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff4d 	bl	800174c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff ff82 	bl	80017c0 <LL_ADC_IsInternalRegulatorEnabled>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d115      	bne.n	80018ee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff ff66 	bl	8001798 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018cc:	4b9f      	ldr	r3, [pc, #636]	; (8001b4c <HAL_ADC_Init+0x2f0>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	099b      	lsrs	r3, r3, #6
 80018d2:	4a9f      	ldr	r2, [pc, #636]	; (8001b50 <HAL_ADC_Init+0x2f4>)
 80018d4:	fba2 2303 	umull	r2, r3, r2, r3
 80018d8:	099b      	lsrs	r3, r3, #6
 80018da:	3301      	adds	r3, #1
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018e0:	e002      	b.n	80018e8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	3b01      	subs	r3, #1
 80018e6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f9      	bne.n	80018e2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff ff64 	bl	80017c0 <LL_ADC_IsInternalRegulatorEnabled>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10d      	bne.n	800191a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001902:	f043 0210 	orr.w	r2, r3, #16
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800190e:	f043 0201 	orr.w	r2, r3, #1
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff ff75 	bl	800180e <LL_ADC_REG_IsConversionOngoing>
 8001924:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800192a:	f003 0310 	and.w	r3, r3, #16
 800192e:	2b00      	cmp	r3, #0
 8001930:	f040 8148 	bne.w	8001bc4 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	2b00      	cmp	r3, #0
 8001938:	f040 8144 	bne.w	8001bc4 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001940:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001944:	f043 0202 	orr.w	r2, r3, #2
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff49 	bl	80017e8 <LL_ADC_IsEnabled>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d141      	bne.n	80019e0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001964:	d004      	beq.n	8001970 <HAL_ADC_Init+0x114>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a7a      	ldr	r2, [pc, #488]	; (8001b54 <HAL_ADC_Init+0x2f8>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d10f      	bne.n	8001990 <HAL_ADC_Init+0x134>
 8001970:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001974:	f7ff ff38 	bl	80017e8 <LL_ADC_IsEnabled>
 8001978:	4604      	mov	r4, r0
 800197a:	4876      	ldr	r0, [pc, #472]	; (8001b54 <HAL_ADC_Init+0x2f8>)
 800197c:	f7ff ff34 	bl	80017e8 <LL_ADC_IsEnabled>
 8001980:	4603      	mov	r3, r0
 8001982:	4323      	orrs	r3, r4
 8001984:	2b00      	cmp	r3, #0
 8001986:	bf0c      	ite	eq
 8001988:	2301      	moveq	r3, #1
 800198a:	2300      	movne	r3, #0
 800198c:	b2db      	uxtb	r3, r3
 800198e:	e012      	b.n	80019b6 <HAL_ADC_Init+0x15a>
 8001990:	4871      	ldr	r0, [pc, #452]	; (8001b58 <HAL_ADC_Init+0x2fc>)
 8001992:	f7ff ff29 	bl	80017e8 <LL_ADC_IsEnabled>
 8001996:	4604      	mov	r4, r0
 8001998:	4870      	ldr	r0, [pc, #448]	; (8001b5c <HAL_ADC_Init+0x300>)
 800199a:	f7ff ff25 	bl	80017e8 <LL_ADC_IsEnabled>
 800199e:	4603      	mov	r3, r0
 80019a0:	431c      	orrs	r4, r3
 80019a2:	486f      	ldr	r0, [pc, #444]	; (8001b60 <HAL_ADC_Init+0x304>)
 80019a4:	f7ff ff20 	bl	80017e8 <LL_ADC_IsEnabled>
 80019a8:	4603      	mov	r3, r0
 80019aa:	4323      	orrs	r3, r4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	bf0c      	ite	eq
 80019b0:	2301      	moveq	r3, #1
 80019b2:	2300      	movne	r3, #0
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d012      	beq.n	80019e0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019c2:	d004      	beq.n	80019ce <HAL_ADC_Init+0x172>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a62      	ldr	r2, [pc, #392]	; (8001b54 <HAL_ADC_Init+0x2f8>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d101      	bne.n	80019d2 <HAL_ADC_Init+0x176>
 80019ce:	4a65      	ldr	r2, [pc, #404]	; (8001b64 <HAL_ADC_Init+0x308>)
 80019d0:	e000      	b.n	80019d4 <HAL_ADC_Init+0x178>
 80019d2:	4a65      	ldr	r2, [pc, #404]	; (8001b68 <HAL_ADC_Init+0x30c>)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	4619      	mov	r1, r3
 80019da:	4610      	mov	r0, r2
 80019dc:	f7ff fd64 	bl	80014a8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	7f5b      	ldrb	r3, [r3, #29]
 80019e4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019ea:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80019f0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80019f6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019fe:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a00:	4313      	orrs	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d106      	bne.n	8001a1c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a12:	3b01      	subs	r3, #1
 8001a14:	045b      	lsls	r3, r3, #17
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d009      	beq.n	8001a38 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a28:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a30:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	68da      	ldr	r2, [r3, #12]
 8001a3e:	4b4b      	ldr	r3, [pc, #300]	; (8001b6c <HAL_ADC_Init+0x310>)
 8001a40:	4013      	ands	r3, r2
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	6812      	ldr	r2, [r2, #0]
 8001a46:	69b9      	ldr	r1, [r7, #24]
 8001a48:	430b      	orrs	r3, r1
 8001a4a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fed1 	bl	800180e <LL_ADC_REG_IsConversionOngoing>
 8001a6c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fede 	bl	8001834 <LL_ADC_INJ_IsConversionOngoing>
 8001a78:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d17f      	bne.n	8001b80 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d17c      	bne.n	8001b80 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a8a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a92:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001aa2:	f023 0302 	bic.w	r3, r3, #2
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6812      	ldr	r2, [r2, #0]
 8001aaa:	69b9      	ldr	r1, [r7, #24]
 8001aac:	430b      	orrs	r3, r1
 8001aae:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d017      	beq.n	8001ae8 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	691a      	ldr	r2, [r3, #16]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ac6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ad0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001ad4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6911      	ldr	r1, [r2, #16]
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	430b      	orrs	r3, r1
 8001ae2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001ae6:	e013      	b.n	8001b10 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	691a      	ldr	r2, [r3, #16]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001af6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b0c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d12a      	bne.n	8001b70 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001b24:	f023 0304 	bic.w	r3, r3, #4
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b30:	4311      	orrs	r1, r2
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001b36:	4311      	orrs	r1, r2
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f042 0201 	orr.w	r2, r2, #1
 8001b48:	611a      	str	r2, [r3, #16]
 8001b4a:	e019      	b.n	8001b80 <HAL_ADC_Init+0x324>
 8001b4c:	20000000 	.word	0x20000000
 8001b50:	053e2d63 	.word	0x053e2d63
 8001b54:	50000100 	.word	0x50000100
 8001b58:	50000400 	.word	0x50000400
 8001b5c:	50000500 	.word	0x50000500
 8001b60:	50000600 	.word	0x50000600
 8001b64:	50000300 	.word	0x50000300
 8001b68:	50000700 	.word	0x50000700
 8001b6c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	691a      	ldr	r2, [r3, #16]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 0201 	bic.w	r2, r2, #1
 8001b7e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d10c      	bne.n	8001ba2 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f023 010f 	bic.w	r1, r3, #15
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a1b      	ldr	r3, [r3, #32]
 8001b96:	1e5a      	subs	r2, r3, #1
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	631a      	str	r2, [r3, #48]	; 0x30
 8001ba0:	e007      	b.n	8001bb2 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 020f 	bic.w	r2, r2, #15
 8001bb0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb6:	f023 0303 	bic.w	r3, r3, #3
 8001bba:	f043 0201 	orr.w	r2, r3, #1
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bc2:	e007      	b.n	8001bd4 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc8:	f043 0210 	orr.w	r2, r3, #16
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001bd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3724      	adds	r7, #36	; 0x24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd90      	pop	{r4, r7, pc}
 8001bde:	bf00      	nop

08001be0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b0b6      	sub	sp, #216	; 0xd8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bea:	2300      	movs	r3, #0
 8001bec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d102      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x24>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	f000 bc13 	b.w	800242a <HAL_ADC_ConfigChannel+0x84a>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fdfc 	bl	800180e <LL_ADC_REG_IsConversionOngoing>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f040 83f3 	bne.w	8002404 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6818      	ldr	r0, [r3, #0]
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	6859      	ldr	r1, [r3, #4]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	f7ff fd0e 	bl	800164c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff fdea 	bl	800180e <LL_ADC_REG_IsConversionOngoing>
 8001c3a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff fdf6 	bl	8001834 <LL_ADC_INJ_IsConversionOngoing>
 8001c48:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c4c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f040 81d9 	bne.w	8002008 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f040 81d4 	bne.w	8002008 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c68:	d10f      	bne.n	8001c8a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6818      	ldr	r0, [r3, #0]
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2200      	movs	r2, #0
 8001c74:	4619      	mov	r1, r3
 8001c76:	f7ff fd15 	bl	80016a4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff fccf 	bl	8001626 <LL_ADC_SetSamplingTimeCommonConfig>
 8001c88:	e00e      	b.n	8001ca8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6818      	ldr	r0, [r3, #0]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	6819      	ldr	r1, [r3, #0]
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	461a      	mov	r2, r3
 8001c98:	f7ff fd04 	bl	80016a4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fcbf 	bl	8001626 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	695a      	ldr	r2, [r3, #20]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	08db      	lsrs	r3, r3, #3
 8001cb4:	f003 0303 	and.w	r3, r3, #3
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	d022      	beq.n	8001d10 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6818      	ldr	r0, [r3, #0]
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	6919      	ldr	r1, [r3, #16]
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001cda:	f7ff fc19 	bl	8001510 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6818      	ldr	r0, [r3, #0]
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	6919      	ldr	r1, [r3, #16]
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	461a      	mov	r2, r3
 8001cec:	f7ff fc65 	bl	80015ba <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6818      	ldr	r0, [r3, #0]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	6919      	ldr	r1, [r3, #16]
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	7f1b      	ldrb	r3, [r3, #28]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d102      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x126>
 8001d00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d04:	e000      	b.n	8001d08 <HAL_ADC_ConfigChannel+0x128>
 8001d06:	2300      	movs	r3, #0
 8001d08:	461a      	mov	r2, r3
 8001d0a:	f7ff fc71 	bl	80015f0 <LL_ADC_SetOffsetSaturation>
 8001d0e:	e17b      	b.n	8002008 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2100      	movs	r1, #0
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff fc1e 	bl	8001558 <LL_ADC_GetOffsetChannel>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10a      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x15c>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff fc13 	bl	8001558 <LL_ADC_GetOffsetChannel>
 8001d32:	4603      	mov	r3, r0
 8001d34:	0e9b      	lsrs	r3, r3, #26
 8001d36:	f003 021f 	and.w	r2, r3, #31
 8001d3a:	e01e      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x19a>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2100      	movs	r1, #0
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff fc08 	bl	8001558 <LL_ADC_GetOffsetChannel>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d52:	fa93 f3a3 	rbit	r3, r3
 8001d56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001d5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001d6a:	2320      	movs	r3, #32
 8001d6c:	e004      	b.n	8001d78 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001d6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d72:	fab3 f383 	clz	r3, r3
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d105      	bne.n	8001d92 <HAL_ADC_ConfigChannel+0x1b2>
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	0e9b      	lsrs	r3, r3, #26
 8001d8c:	f003 031f 	and.w	r3, r3, #31
 8001d90:	e018      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x1e4>
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001d9e:	fa93 f3a3 	rbit	r3, r3
 8001da2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001da6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001daa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001dae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001db6:	2320      	movs	r3, #32
 8001db8:	e004      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001dba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001dbe:	fab3 f383 	clz	r3, r3
 8001dc2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d106      	bne.n	8001dd6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2100      	movs	r1, #0
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff fbd7 	bl	8001584 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2101      	movs	r1, #1
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff fbbb 	bl	8001558 <LL_ADC_GetOffsetChannel>
 8001de2:	4603      	mov	r3, r0
 8001de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d10a      	bne.n	8001e02 <HAL_ADC_ConfigChannel+0x222>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2101      	movs	r1, #1
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff fbb0 	bl	8001558 <LL_ADC_GetOffsetChannel>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	0e9b      	lsrs	r3, r3, #26
 8001dfc:	f003 021f 	and.w	r2, r3, #31
 8001e00:	e01e      	b.n	8001e40 <HAL_ADC_ConfigChannel+0x260>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2101      	movs	r1, #1
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fba5 	bl	8001558 <LL_ADC_GetOffsetChannel>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e18:	fa93 f3a3 	rbit	r3, r3
 8001e1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001e20:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001e28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001e30:	2320      	movs	r3, #32
 8001e32:	e004      	b.n	8001e3e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001e34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e38:	fab3 f383 	clz	r3, r3
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d105      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x278>
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	0e9b      	lsrs	r3, r3, #26
 8001e52:	f003 031f 	and.w	r3, r3, #31
 8001e56:	e018      	b.n	8001e8a <HAL_ADC_ConfigChannel+0x2aa>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e64:	fa93 f3a3 	rbit	r3, r3
 8001e68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001e6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001e70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001e74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001e7c:	2320      	movs	r3, #32
 8001e7e:	e004      	b.n	8001e8a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001e80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e84:	fab3 f383 	clz	r3, r3
 8001e88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d106      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2200      	movs	r2, #0
 8001e94:	2101      	movs	r1, #1
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fb74 	bl	8001584 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2102      	movs	r1, #2
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff fb58 	bl	8001558 <LL_ADC_GetOffsetChannel>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10a      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x2e8>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2102      	movs	r1, #2
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff fb4d 	bl	8001558 <LL_ADC_GetOffsetChannel>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	0e9b      	lsrs	r3, r3, #26
 8001ec2:	f003 021f 	and.w	r2, r3, #31
 8001ec6:	e01e      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x326>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2102      	movs	r1, #2
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff fb42 	bl	8001558 <LL_ADC_GetOffsetChannel>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ede:	fa93 f3a3 	rbit	r3, r3
 8001ee2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001ee6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001eea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001eee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001ef6:	2320      	movs	r3, #32
 8001ef8:	e004      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001efa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001efe:	fab3 f383 	clz	r3, r3
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d105      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x33e>
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	0e9b      	lsrs	r3, r3, #26
 8001f18:	f003 031f 	and.w	r3, r3, #31
 8001f1c:	e016      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x36c>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f2a:	fa93 f3a3 	rbit	r3, r3
 8001f2e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001f30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001f36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001f3e:	2320      	movs	r3, #32
 8001f40:	e004      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001f42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f46:	fab3 f383 	clz	r3, r3
 8001f4a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d106      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2200      	movs	r2, #0
 8001f56:	2102      	movs	r1, #2
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff fb13 	bl	8001584 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2103      	movs	r1, #3
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff faf7 	bl	8001558 <LL_ADC_GetOffsetChannel>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10a      	bne.n	8001f8a <HAL_ADC_ConfigChannel+0x3aa>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2103      	movs	r1, #3
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff faec 	bl	8001558 <LL_ADC_GetOffsetChannel>
 8001f80:	4603      	mov	r3, r0
 8001f82:	0e9b      	lsrs	r3, r3, #26
 8001f84:	f003 021f 	and.w	r2, r3, #31
 8001f88:	e017      	b.n	8001fba <HAL_ADC_ConfigChannel+0x3da>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2103      	movs	r1, #3
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff fae1 	bl	8001558 <LL_ADC_GetOffsetChannel>
 8001f96:	4603      	mov	r3, r0
 8001f98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f9c:	fa93 f3a3 	rbit	r3, r3
 8001fa0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001fa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fa4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001fa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001fac:	2320      	movs	r3, #32
 8001fae:	e003      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001fb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fb2:	fab3 f383 	clz	r3, r3
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d105      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x3f2>
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	0e9b      	lsrs	r3, r3, #26
 8001fcc:	f003 031f 	and.w	r3, r3, #31
 8001fd0:	e011      	b.n	8001ff6 <HAL_ADC_ConfigChannel+0x416>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fda:	fa93 f3a3 	rbit	r3, r3
 8001fde:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001fe0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fe2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001fea:	2320      	movs	r3, #32
 8001fec:	e003      	b.n	8001ff6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ff0:	fab3 f383 	clz	r3, r3
 8001ff4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d106      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2200      	movs	r2, #0
 8002000:	2103      	movs	r1, #3
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fabe 	bl	8001584 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff fbeb 	bl	80017e8 <LL_ADC_IsEnabled>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	f040 813d 	bne.w	8002294 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6818      	ldr	r0, [r3, #0]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	6819      	ldr	r1, [r3, #0]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	461a      	mov	r2, r3
 8002028:	f7ff fb68 	bl	80016fc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	4aa2      	ldr	r2, [pc, #648]	; (80022bc <HAL_ADC_ConfigChannel+0x6dc>)
 8002032:	4293      	cmp	r3, r2
 8002034:	f040 812e 	bne.w	8002294 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10b      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x480>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	0e9b      	lsrs	r3, r3, #26
 800204e:	3301      	adds	r3, #1
 8002050:	f003 031f 	and.w	r3, r3, #31
 8002054:	2b09      	cmp	r3, #9
 8002056:	bf94      	ite	ls
 8002058:	2301      	movls	r3, #1
 800205a:	2300      	movhi	r3, #0
 800205c:	b2db      	uxtb	r3, r3
 800205e:	e019      	b.n	8002094 <HAL_ADC_ConfigChannel+0x4b4>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002066:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002068:	fa93 f3a3 	rbit	r3, r3
 800206c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800206e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002070:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002072:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002078:	2320      	movs	r3, #32
 800207a:	e003      	b.n	8002084 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800207c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800207e:	fab3 f383 	clz	r3, r3
 8002082:	b2db      	uxtb	r3, r3
 8002084:	3301      	adds	r3, #1
 8002086:	f003 031f 	and.w	r3, r3, #31
 800208a:	2b09      	cmp	r3, #9
 800208c:	bf94      	ite	ls
 800208e:	2301      	movls	r3, #1
 8002090:	2300      	movhi	r3, #0
 8002092:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002094:	2b00      	cmp	r3, #0
 8002096:	d079      	beq.n	800218c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d107      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x4d4>
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	0e9b      	lsrs	r3, r3, #26
 80020aa:	3301      	adds	r3, #1
 80020ac:	069b      	lsls	r3, r3, #26
 80020ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020b2:	e015      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x500>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020bc:	fa93 f3a3 	rbit	r3, r3
 80020c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80020c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020c4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80020c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80020cc:	2320      	movs	r3, #32
 80020ce:	e003      	b.n	80020d8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80020d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020d2:	fab3 f383 	clz	r3, r3
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	3301      	adds	r3, #1
 80020da:	069b      	lsls	r3, r3, #26
 80020dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d109      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x520>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	0e9b      	lsrs	r3, r3, #26
 80020f2:	3301      	adds	r3, #1
 80020f4:	f003 031f 	and.w	r3, r3, #31
 80020f8:	2101      	movs	r1, #1
 80020fa:	fa01 f303 	lsl.w	r3, r1, r3
 80020fe:	e017      	b.n	8002130 <HAL_ADC_ConfigChannel+0x550>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002106:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002108:	fa93 f3a3 	rbit	r3, r3
 800210c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800210e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002110:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002118:	2320      	movs	r3, #32
 800211a:	e003      	b.n	8002124 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800211c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800211e:	fab3 f383 	clz	r3, r3
 8002122:	b2db      	uxtb	r3, r3
 8002124:	3301      	adds	r3, #1
 8002126:	f003 031f 	and.w	r3, r3, #31
 800212a:	2101      	movs	r1, #1
 800212c:	fa01 f303 	lsl.w	r3, r1, r3
 8002130:	ea42 0103 	orr.w	r1, r2, r3
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10a      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x576>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	0e9b      	lsrs	r3, r3, #26
 8002146:	3301      	adds	r3, #1
 8002148:	f003 021f 	and.w	r2, r3, #31
 800214c:	4613      	mov	r3, r2
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	4413      	add	r3, r2
 8002152:	051b      	lsls	r3, r3, #20
 8002154:	e018      	b.n	8002188 <HAL_ADC_ConfigChannel+0x5a8>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800215e:	fa93 f3a3 	rbit	r3, r3
 8002162:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002166:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800216e:	2320      	movs	r3, #32
 8002170:	e003      	b.n	800217a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002174:	fab3 f383 	clz	r3, r3
 8002178:	b2db      	uxtb	r3, r3
 800217a:	3301      	adds	r3, #1
 800217c:	f003 021f 	and.w	r2, r3, #31
 8002180:	4613      	mov	r3, r2
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	4413      	add	r3, r2
 8002186:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002188:	430b      	orrs	r3, r1
 800218a:	e07e      	b.n	800228a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002194:	2b00      	cmp	r3, #0
 8002196:	d107      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x5c8>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	0e9b      	lsrs	r3, r3, #26
 800219e:	3301      	adds	r3, #1
 80021a0:	069b      	lsls	r3, r3, #26
 80021a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021a6:	e015      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x5f4>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b0:	fa93 f3a3 	rbit	r3, r3
 80021b4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80021b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80021ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80021c0:	2320      	movs	r3, #32
 80021c2:	e003      	b.n	80021cc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80021c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c6:	fab3 f383 	clz	r3, r3
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	3301      	adds	r3, #1
 80021ce:	069b      	lsls	r3, r3, #26
 80021d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d109      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x614>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	0e9b      	lsrs	r3, r3, #26
 80021e6:	3301      	adds	r3, #1
 80021e8:	f003 031f 	and.w	r3, r3, #31
 80021ec:	2101      	movs	r1, #1
 80021ee:	fa01 f303 	lsl.w	r3, r1, r3
 80021f2:	e017      	b.n	8002224 <HAL_ADC_ConfigChannel+0x644>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	6a3b      	ldr	r3, [r7, #32]
 80021fc:	fa93 f3a3 	rbit	r3, r3
 8002200:	61fb      	str	r3, [r7, #28]
  return result;
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800220c:	2320      	movs	r3, #32
 800220e:	e003      	b.n	8002218 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	fab3 f383 	clz	r3, r3
 8002216:	b2db      	uxtb	r3, r3
 8002218:	3301      	adds	r3, #1
 800221a:	f003 031f 	and.w	r3, r3, #31
 800221e:	2101      	movs	r1, #1
 8002220:	fa01 f303 	lsl.w	r3, r1, r3
 8002224:	ea42 0103 	orr.w	r1, r2, r3
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002230:	2b00      	cmp	r3, #0
 8002232:	d10d      	bne.n	8002250 <HAL_ADC_ConfigChannel+0x670>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	0e9b      	lsrs	r3, r3, #26
 800223a:	3301      	adds	r3, #1
 800223c:	f003 021f 	and.w	r2, r3, #31
 8002240:	4613      	mov	r3, r2
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	4413      	add	r3, r2
 8002246:	3b1e      	subs	r3, #30
 8002248:	051b      	lsls	r3, r3, #20
 800224a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800224e:	e01b      	b.n	8002288 <HAL_ADC_ConfigChannel+0x6a8>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	fa93 f3a3 	rbit	r3, r3
 800225c:	613b      	str	r3, [r7, #16]
  return result;
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002268:	2320      	movs	r3, #32
 800226a:	e003      	b.n	8002274 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	fab3 f383 	clz	r3, r3
 8002272:	b2db      	uxtb	r3, r3
 8002274:	3301      	adds	r3, #1
 8002276:	f003 021f 	and.w	r2, r3, #31
 800227a:	4613      	mov	r3, r2
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	4413      	add	r3, r2
 8002280:	3b1e      	subs	r3, #30
 8002282:	051b      	lsls	r3, r3, #20
 8002284:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002288:	430b      	orrs	r3, r1
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	6892      	ldr	r2, [r2, #8]
 800228e:	4619      	mov	r1, r3
 8002290:	f7ff fa08 	bl	80016a4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <HAL_ADC_ConfigChannel+0x6e0>)
 800229a:	4013      	ands	r3, r2
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 80be 	beq.w	800241e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022aa:	d004      	beq.n	80022b6 <HAL_ADC_ConfigChannel+0x6d6>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a04      	ldr	r2, [pc, #16]	; (80022c4 <HAL_ADC_ConfigChannel+0x6e4>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d10a      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x6ec>
 80022b6:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <HAL_ADC_ConfigChannel+0x6e8>)
 80022b8:	e009      	b.n	80022ce <HAL_ADC_ConfigChannel+0x6ee>
 80022ba:	bf00      	nop
 80022bc:	407f0000 	.word	0x407f0000
 80022c0:	80080000 	.word	0x80080000
 80022c4:	50000100 	.word	0x50000100
 80022c8:	50000300 	.word	0x50000300
 80022cc:	4b59      	ldr	r3, [pc, #356]	; (8002434 <HAL_ADC_ConfigChannel+0x854>)
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff f910 	bl	80014f4 <LL_ADC_GetCommonPathInternalCh>
 80022d4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a56      	ldr	r2, [pc, #344]	; (8002438 <HAL_ADC_ConfigChannel+0x858>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d004      	beq.n	80022ec <HAL_ADC_ConfigChannel+0x70c>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a55      	ldr	r2, [pc, #340]	; (800243c <HAL_ADC_ConfigChannel+0x85c>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d13a      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80022ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d134      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002300:	d005      	beq.n	800230e <HAL_ADC_ConfigChannel+0x72e>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a4e      	ldr	r2, [pc, #312]	; (8002440 <HAL_ADC_ConfigChannel+0x860>)
 8002308:	4293      	cmp	r3, r2
 800230a:	f040 8085 	bne.w	8002418 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002316:	d004      	beq.n	8002322 <HAL_ADC_ConfigChannel+0x742>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a49      	ldr	r2, [pc, #292]	; (8002444 <HAL_ADC_ConfigChannel+0x864>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d101      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x746>
 8002322:	4a49      	ldr	r2, [pc, #292]	; (8002448 <HAL_ADC_ConfigChannel+0x868>)
 8002324:	e000      	b.n	8002328 <HAL_ADC_ConfigChannel+0x748>
 8002326:	4a43      	ldr	r2, [pc, #268]	; (8002434 <HAL_ADC_ConfigChannel+0x854>)
 8002328:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800232c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002330:	4619      	mov	r1, r3
 8002332:	4610      	mov	r0, r2
 8002334:	f7ff f8cb 	bl	80014ce <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002338:	4b44      	ldr	r3, [pc, #272]	; (800244c <HAL_ADC_ConfigChannel+0x86c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	099b      	lsrs	r3, r3, #6
 800233e:	4a44      	ldr	r2, [pc, #272]	; (8002450 <HAL_ADC_ConfigChannel+0x870>)
 8002340:	fba2 2303 	umull	r2, r3, r2, r3
 8002344:	099b      	lsrs	r3, r3, #6
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	4613      	mov	r3, r2
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	4413      	add	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002352:	e002      	b.n	800235a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	3b01      	subs	r3, #1
 8002358:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1f9      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002360:	e05a      	b.n	8002418 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a3b      	ldr	r2, [pc, #236]	; (8002454 <HAL_ADC_ConfigChannel+0x874>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d125      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x7d8>
 800236c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002370:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d11f      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a31      	ldr	r2, [pc, #196]	; (8002444 <HAL_ADC_ConfigChannel+0x864>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d104      	bne.n	800238c <HAL_ADC_ConfigChannel+0x7ac>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a34      	ldr	r2, [pc, #208]	; (8002458 <HAL_ADC_ConfigChannel+0x878>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d047      	beq.n	800241c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002394:	d004      	beq.n	80023a0 <HAL_ADC_ConfigChannel+0x7c0>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a2a      	ldr	r2, [pc, #168]	; (8002444 <HAL_ADC_ConfigChannel+0x864>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d101      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x7c4>
 80023a0:	4a29      	ldr	r2, [pc, #164]	; (8002448 <HAL_ADC_ConfigChannel+0x868>)
 80023a2:	e000      	b.n	80023a6 <HAL_ADC_ConfigChannel+0x7c6>
 80023a4:	4a23      	ldr	r2, [pc, #140]	; (8002434 <HAL_ADC_ConfigChannel+0x854>)
 80023a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023ae:	4619      	mov	r1, r3
 80023b0:	4610      	mov	r0, r2
 80023b2:	f7ff f88c 	bl	80014ce <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023b6:	e031      	b.n	800241c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a27      	ldr	r2, [pc, #156]	; (800245c <HAL_ADC_ConfigChannel+0x87c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d12d      	bne.n	800241e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80023c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d127      	bne.n	800241e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a1c      	ldr	r2, [pc, #112]	; (8002444 <HAL_ADC_ConfigChannel+0x864>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d022      	beq.n	800241e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023e0:	d004      	beq.n	80023ec <HAL_ADC_ConfigChannel+0x80c>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a17      	ldr	r2, [pc, #92]	; (8002444 <HAL_ADC_ConfigChannel+0x864>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d101      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x810>
 80023ec:	4a16      	ldr	r2, [pc, #88]	; (8002448 <HAL_ADC_ConfigChannel+0x868>)
 80023ee:	e000      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x812>
 80023f0:	4a10      	ldr	r2, [pc, #64]	; (8002434 <HAL_ADC_ConfigChannel+0x854>)
 80023f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023fa:	4619      	mov	r1, r3
 80023fc:	4610      	mov	r0, r2
 80023fe:	f7ff f866 	bl	80014ce <LL_ADC_SetCommonPathInternalCh>
 8002402:	e00c      	b.n	800241e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002408:	f043 0220 	orr.w	r2, r3, #32
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002416:	e002      	b.n	800241e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002418:	bf00      	nop
 800241a:	e000      	b.n	800241e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800241c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002426:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800242a:	4618      	mov	r0, r3
 800242c:	37d8      	adds	r7, #216	; 0xd8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	50000700 	.word	0x50000700
 8002438:	c3210000 	.word	0xc3210000
 800243c:	90c00010 	.word	0x90c00010
 8002440:	50000600 	.word	0x50000600
 8002444:	50000100 	.word	0x50000100
 8002448:	50000300 	.word	0x50000300
 800244c:	20000000 	.word	0x20000000
 8002450:	053e2d63 	.word	0x053e2d63
 8002454:	c7520000 	.word	0xc7520000
 8002458:	50000500 	.word	0x50000500
 800245c:	cb840000 	.word	0xcb840000

08002460 <LL_ADC_IsEnabled>:
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b01      	cmp	r3, #1
 8002472:	d101      	bne.n	8002478 <LL_ADC_IsEnabled+0x18>
 8002474:	2301      	movs	r3, #1
 8002476:	e000      	b.n	800247a <LL_ADC_IsEnabled+0x1a>
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <LL_ADC_REG_IsConversionOngoing>:
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 0304 	and.w	r3, r3, #4
 8002496:	2b04      	cmp	r3, #4
 8002498:	d101      	bne.n	800249e <LL_ADC_REG_IsConversionOngoing+0x18>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80024ac:	b590      	push	{r4, r7, lr}
 80024ae:	b0a1      	sub	sp, #132	; 0x84
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d101      	bne.n	80024ca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80024c6:	2302      	movs	r3, #2
 80024c8:	e0e7      	b.n	800269a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80024d2:	2300      	movs	r3, #0
 80024d4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80024d6:	2300      	movs	r3, #0
 80024d8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024e2:	d102      	bne.n	80024ea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80024e4:	4b6f      	ldr	r3, [pc, #444]	; (80026a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80024e6:	60bb      	str	r3, [r7, #8]
 80024e8:	e009      	b.n	80024fe <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a6e      	ldr	r2, [pc, #440]	; (80026a8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d102      	bne.n	80024fa <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80024f4:	4b6d      	ldr	r3, [pc, #436]	; (80026ac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80024f6:	60bb      	str	r3, [r7, #8]
 80024f8:	e001      	b.n	80024fe <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80024fa:	2300      	movs	r3, #0
 80024fc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10b      	bne.n	800251c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002508:	f043 0220 	orr.w	r2, r3, #32
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0be      	b.n	800269a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff ffb1 	bl	8002486 <LL_ADC_REG_IsConversionOngoing>
 8002524:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff ffab 	bl	8002486 <LL_ADC_REG_IsConversionOngoing>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	f040 80a0 	bne.w	8002678 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002538:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800253a:	2b00      	cmp	r3, #0
 800253c:	f040 809c 	bne.w	8002678 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002548:	d004      	beq.n	8002554 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a55      	ldr	r2, [pc, #340]	; (80026a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d101      	bne.n	8002558 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002554:	4b56      	ldr	r3, [pc, #344]	; (80026b0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002556:	e000      	b.n	800255a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002558:	4b56      	ldr	r3, [pc, #344]	; (80026b4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800255a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d04b      	beq.n	80025fc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002564:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	6859      	ldr	r1, [r3, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002576:	035b      	lsls	r3, r3, #13
 8002578:	430b      	orrs	r3, r1
 800257a:	431a      	orrs	r2, r3
 800257c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800257e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002588:	d004      	beq.n	8002594 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a45      	ldr	r2, [pc, #276]	; (80026a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d10f      	bne.n	80025b4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002594:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002598:	f7ff ff62 	bl	8002460 <LL_ADC_IsEnabled>
 800259c:	4604      	mov	r4, r0
 800259e:	4841      	ldr	r0, [pc, #260]	; (80026a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80025a0:	f7ff ff5e 	bl	8002460 <LL_ADC_IsEnabled>
 80025a4:	4603      	mov	r3, r0
 80025a6:	4323      	orrs	r3, r4
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	bf0c      	ite	eq
 80025ac:	2301      	moveq	r3, #1
 80025ae:	2300      	movne	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	e012      	b.n	80025da <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80025b4:	483c      	ldr	r0, [pc, #240]	; (80026a8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80025b6:	f7ff ff53 	bl	8002460 <LL_ADC_IsEnabled>
 80025ba:	4604      	mov	r4, r0
 80025bc:	483b      	ldr	r0, [pc, #236]	; (80026ac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80025be:	f7ff ff4f 	bl	8002460 <LL_ADC_IsEnabled>
 80025c2:	4603      	mov	r3, r0
 80025c4:	431c      	orrs	r4, r3
 80025c6:	483c      	ldr	r0, [pc, #240]	; (80026b8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80025c8:	f7ff ff4a 	bl	8002460 <LL_ADC_IsEnabled>
 80025cc:	4603      	mov	r3, r0
 80025ce:	4323      	orrs	r3, r4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	bf0c      	ite	eq
 80025d4:	2301      	moveq	r3, #1
 80025d6:	2300      	movne	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d056      	beq.n	800268c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80025de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80025e6:	f023 030f 	bic.w	r3, r3, #15
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	6811      	ldr	r1, [r2, #0]
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	6892      	ldr	r2, [r2, #8]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	431a      	orrs	r2, r3
 80025f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025f8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025fa:	e047      	b.n	800268c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80025fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002604:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002606:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002610:	d004      	beq.n	800261c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a23      	ldr	r2, [pc, #140]	; (80026a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d10f      	bne.n	800263c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800261c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002620:	f7ff ff1e 	bl	8002460 <LL_ADC_IsEnabled>
 8002624:	4604      	mov	r4, r0
 8002626:	481f      	ldr	r0, [pc, #124]	; (80026a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002628:	f7ff ff1a 	bl	8002460 <LL_ADC_IsEnabled>
 800262c:	4603      	mov	r3, r0
 800262e:	4323      	orrs	r3, r4
 8002630:	2b00      	cmp	r3, #0
 8002632:	bf0c      	ite	eq
 8002634:	2301      	moveq	r3, #1
 8002636:	2300      	movne	r3, #0
 8002638:	b2db      	uxtb	r3, r3
 800263a:	e012      	b.n	8002662 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800263c:	481a      	ldr	r0, [pc, #104]	; (80026a8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800263e:	f7ff ff0f 	bl	8002460 <LL_ADC_IsEnabled>
 8002642:	4604      	mov	r4, r0
 8002644:	4819      	ldr	r0, [pc, #100]	; (80026ac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002646:	f7ff ff0b 	bl	8002460 <LL_ADC_IsEnabled>
 800264a:	4603      	mov	r3, r0
 800264c:	431c      	orrs	r4, r3
 800264e:	481a      	ldr	r0, [pc, #104]	; (80026b8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002650:	f7ff ff06 	bl	8002460 <LL_ADC_IsEnabled>
 8002654:	4603      	mov	r3, r0
 8002656:	4323      	orrs	r3, r4
 8002658:	2b00      	cmp	r3, #0
 800265a:	bf0c      	ite	eq
 800265c:	2301      	moveq	r3, #1
 800265e:	2300      	movne	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d012      	beq.n	800268c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002666:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800266e:	f023 030f 	bic.w	r3, r3, #15
 8002672:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002674:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002676:	e009      	b.n	800268c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267c:	f043 0220 	orr.w	r2, r3, #32
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800268a:	e000      	b.n	800268e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800268c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002696:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800269a:	4618      	mov	r0, r3
 800269c:	3784      	adds	r7, #132	; 0x84
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd90      	pop	{r4, r7, pc}
 80026a2:	bf00      	nop
 80026a4:	50000100 	.word	0x50000100
 80026a8:	50000400 	.word	0x50000400
 80026ac:	50000500 	.word	0x50000500
 80026b0:	50000300 	.word	0x50000300
 80026b4:	50000700 	.word	0x50000700
 80026b8:	50000600 	.word	0x50000600

080026bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026cc:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <__NVIC_SetPriorityGrouping+0x44>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026d8:	4013      	ands	r3, r2
 80026da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ee:	4a04      	ldr	r2, [pc, #16]	; (8002700 <__NVIC_SetPriorityGrouping+0x44>)
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	60d3      	str	r3, [r2, #12]
}
 80026f4:	bf00      	nop
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002708:	4b04      	ldr	r3, [pc, #16]	; (800271c <__NVIC_GetPriorityGrouping+0x18>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	0a1b      	lsrs	r3, r3, #8
 800270e:	f003 0307 	and.w	r3, r3, #7
}
 8002712:	4618      	mov	r0, r3
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	e000ed00 	.word	0xe000ed00

08002720 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800272a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272e:	2b00      	cmp	r3, #0
 8002730:	db0b      	blt.n	800274a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002732:	79fb      	ldrb	r3, [r7, #7]
 8002734:	f003 021f 	and.w	r2, r3, #31
 8002738:	4907      	ldr	r1, [pc, #28]	; (8002758 <__NVIC_EnableIRQ+0x38>)
 800273a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273e:	095b      	lsrs	r3, r3, #5
 8002740:	2001      	movs	r0, #1
 8002742:	fa00 f202 	lsl.w	r2, r0, r2
 8002746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	e000e100 	.word	0xe000e100

0800275c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	6039      	str	r1, [r7, #0]
 8002766:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276c:	2b00      	cmp	r3, #0
 800276e:	db0a      	blt.n	8002786 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	b2da      	uxtb	r2, r3
 8002774:	490c      	ldr	r1, [pc, #48]	; (80027a8 <__NVIC_SetPriority+0x4c>)
 8002776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277a:	0112      	lsls	r2, r2, #4
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	440b      	add	r3, r1
 8002780:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002784:	e00a      	b.n	800279c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	b2da      	uxtb	r2, r3
 800278a:	4908      	ldr	r1, [pc, #32]	; (80027ac <__NVIC_SetPriority+0x50>)
 800278c:	79fb      	ldrb	r3, [r7, #7]
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	3b04      	subs	r3, #4
 8002794:	0112      	lsls	r2, r2, #4
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	440b      	add	r3, r1
 800279a:	761a      	strb	r2, [r3, #24]
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	e000e100 	.word	0xe000e100
 80027ac:	e000ed00 	.word	0xe000ed00

080027b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b089      	sub	sp, #36	; 0x24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f1c3 0307 	rsb	r3, r3, #7
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	bf28      	it	cs
 80027ce:	2304      	movcs	r3, #4
 80027d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	3304      	adds	r3, #4
 80027d6:	2b06      	cmp	r3, #6
 80027d8:	d902      	bls.n	80027e0 <NVIC_EncodePriority+0x30>
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	3b03      	subs	r3, #3
 80027de:	e000      	b.n	80027e2 <NVIC_EncodePriority+0x32>
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e4:	f04f 32ff 	mov.w	r2, #4294967295
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	43da      	mvns	r2, r3
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	401a      	ands	r2, r3
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027f8:	f04f 31ff 	mov.w	r1, #4294967295
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002802:	43d9      	mvns	r1, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002808:	4313      	orrs	r3, r2
         );
}
 800280a:	4618      	mov	r0, r3
 800280c:	3724      	adds	r7, #36	; 0x24
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b082      	sub	sp, #8
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7ff ff4c 	bl	80026bc <__NVIC_SetPriorityGrouping>
}
 8002824:	bf00      	nop
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
 8002838:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800283a:	f7ff ff63 	bl	8002704 <__NVIC_GetPriorityGrouping>
 800283e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	68b9      	ldr	r1, [r7, #8]
 8002844:	6978      	ldr	r0, [r7, #20]
 8002846:	f7ff ffb3 	bl	80027b0 <NVIC_EncodePriority>
 800284a:	4602      	mov	r2, r0
 800284c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002850:	4611      	mov	r1, r2
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff ff82 	bl	800275c <__NVIC_SetPriority>
}
 8002858:	bf00      	nop
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800286a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff ff56 	bl	8002720 <__NVIC_EnableIRQ>
}
 8002874:	bf00      	nop
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002884:	2300      	movs	r3, #0
 8002886:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d005      	beq.n	80028a0 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2204      	movs	r2, #4
 8002898:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	73fb      	strb	r3, [r7, #15]
 800289e:	e037      	b.n	8002910 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 020e 	bic.w	r2, r2, #14
 80028ae:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028be:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0201 	bic.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d4:	f003 021f 	and.w	r2, r3, #31
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	2101      	movs	r1, #1
 80028de:	fa01 f202 	lsl.w	r2, r1, r2
 80028e2:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80028ec:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00c      	beq.n	8002910 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002900:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002904:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800290e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002920:	7bfb      	ldrb	r3, [r7, #15]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b084      	sub	sp, #16
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002936:	2300      	movs	r3, #0
 8002938:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d00d      	beq.n	8002962 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2204      	movs	r2, #4
 800294a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	73fb      	strb	r3, [r7, #15]
 8002960:	e047      	b.n	80029f2 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 020e 	bic.w	r2, r2, #14
 8002970:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0201 	bic.w	r2, r2, #1
 8002980:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800298c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002990:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002996:	f003 021f 	and.w	r2, r3, #31
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	2101      	movs	r1, #1
 80029a0:	fa01 f202 	lsl.w	r2, r1, r2
 80029a4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80029ae:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00c      	beq.n	80029d2 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029c6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80029d0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	4798      	blx	r3
    }
  }
  return status;
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b087      	sub	sp, #28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002a0a:	e15a      	b.n	8002cc2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	2101      	movs	r1, #1
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	fa01 f303 	lsl.w	r3, r1, r3
 8002a18:	4013      	ands	r3, r2
 8002a1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 814c 	beq.w	8002cbc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 0303 	and.w	r3, r3, #3
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d005      	beq.n	8002a3c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d130      	bne.n	8002a9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	2203      	movs	r2, #3
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4013      	ands	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	68da      	ldr	r2, [r3, #12]
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a72:	2201      	movs	r2, #1
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	091b      	lsrs	r3, r3, #4
 8002a88:	f003 0201 	and.w	r2, r3, #1
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f003 0303 	and.w	r3, r3, #3
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	d017      	beq.n	8002ada <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	2203      	movs	r2, #3
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43db      	mvns	r3, r3
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	689a      	ldr	r2, [r3, #8]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f003 0303 	and.w	r3, r3, #3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d123      	bne.n	8002b2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	08da      	lsrs	r2, r3, #3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3208      	adds	r2, #8
 8002aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002af2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	220f      	movs	r2, #15
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43db      	mvns	r3, r3
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4013      	ands	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	691a      	ldr	r2, [r3, #16]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	08da      	lsrs	r2, r3, #3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3208      	adds	r2, #8
 8002b28:	6939      	ldr	r1, [r7, #16]
 8002b2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	2203      	movs	r2, #3
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4013      	ands	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f003 0203 	and.w	r2, r3, #3
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 80a6 	beq.w	8002cbc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b70:	4b5b      	ldr	r3, [pc, #364]	; (8002ce0 <HAL_GPIO_Init+0x2e4>)
 8002b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b74:	4a5a      	ldr	r2, [pc, #360]	; (8002ce0 <HAL_GPIO_Init+0x2e4>)
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	6613      	str	r3, [r2, #96]	; 0x60
 8002b7c:	4b58      	ldr	r3, [pc, #352]	; (8002ce0 <HAL_GPIO_Init+0x2e4>)
 8002b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	60bb      	str	r3, [r7, #8]
 8002b86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b88:	4a56      	ldr	r2, [pc, #344]	; (8002ce4 <HAL_GPIO_Init+0x2e8>)
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	089b      	lsrs	r3, r3, #2
 8002b8e:	3302      	adds	r3, #2
 8002b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f003 0303 	and.w	r3, r3, #3
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	220f      	movs	r2, #15
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002bb2:	d01f      	beq.n	8002bf4 <HAL_GPIO_Init+0x1f8>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a4c      	ldr	r2, [pc, #304]	; (8002ce8 <HAL_GPIO_Init+0x2ec>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d019      	beq.n	8002bf0 <HAL_GPIO_Init+0x1f4>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a4b      	ldr	r2, [pc, #300]	; (8002cec <HAL_GPIO_Init+0x2f0>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d013      	beq.n	8002bec <HAL_GPIO_Init+0x1f0>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a4a      	ldr	r2, [pc, #296]	; (8002cf0 <HAL_GPIO_Init+0x2f4>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d00d      	beq.n	8002be8 <HAL_GPIO_Init+0x1ec>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a49      	ldr	r2, [pc, #292]	; (8002cf4 <HAL_GPIO_Init+0x2f8>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d007      	beq.n	8002be4 <HAL_GPIO_Init+0x1e8>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a48      	ldr	r2, [pc, #288]	; (8002cf8 <HAL_GPIO_Init+0x2fc>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d101      	bne.n	8002be0 <HAL_GPIO_Init+0x1e4>
 8002bdc:	2305      	movs	r3, #5
 8002bde:	e00a      	b.n	8002bf6 <HAL_GPIO_Init+0x1fa>
 8002be0:	2306      	movs	r3, #6
 8002be2:	e008      	b.n	8002bf6 <HAL_GPIO_Init+0x1fa>
 8002be4:	2304      	movs	r3, #4
 8002be6:	e006      	b.n	8002bf6 <HAL_GPIO_Init+0x1fa>
 8002be8:	2303      	movs	r3, #3
 8002bea:	e004      	b.n	8002bf6 <HAL_GPIO_Init+0x1fa>
 8002bec:	2302      	movs	r3, #2
 8002bee:	e002      	b.n	8002bf6 <HAL_GPIO_Init+0x1fa>
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e000      	b.n	8002bf6 <HAL_GPIO_Init+0x1fa>
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	f002 0203 	and.w	r2, r2, #3
 8002bfc:	0092      	lsls	r2, r2, #2
 8002bfe:	4093      	lsls	r3, r2
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c06:	4937      	ldr	r1, [pc, #220]	; (8002ce4 <HAL_GPIO_Init+0x2e8>)
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	089b      	lsrs	r3, r3, #2
 8002c0c:	3302      	adds	r3, #2
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c14:	4b39      	ldr	r3, [pc, #228]	; (8002cfc <HAL_GPIO_Init+0x300>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	4013      	ands	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c38:	4a30      	ldr	r2, [pc, #192]	; (8002cfc <HAL_GPIO_Init+0x300>)
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c3e:	4b2f      	ldr	r3, [pc, #188]	; (8002cfc <HAL_GPIO_Init+0x300>)
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	43db      	mvns	r3, r3
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c62:	4a26      	ldr	r2, [pc, #152]	; (8002cfc <HAL_GPIO_Init+0x300>)
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002c68:	4b24      	ldr	r3, [pc, #144]	; (8002cfc <HAL_GPIO_Init+0x300>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	43db      	mvns	r3, r3
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	4013      	ands	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c8c:	4a1b      	ldr	r2, [pc, #108]	; (8002cfc <HAL_GPIO_Init+0x300>)
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002c92:	4b1a      	ldr	r3, [pc, #104]	; (8002cfc <HAL_GPIO_Init+0x300>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002cb6:	4a11      	ldr	r2, [pc, #68]	; (8002cfc <HAL_GPIO_Init+0x300>)
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f47f ae9d 	bne.w	8002a0c <HAL_GPIO_Init+0x10>
  }
}
 8002cd2:	bf00      	nop
 8002cd4:	bf00      	nop
 8002cd6:	371c      	adds	r7, #28
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	40010000 	.word	0x40010000
 8002ce8:	48000400 	.word	0x48000400
 8002cec:	48000800 	.word	0x48000800
 8002cf0:	48000c00 	.word	0x48000c00
 8002cf4:	48001000 	.word	0x48001000
 8002cf8:	48001400 	.word	0x48001400
 8002cfc:	40010400 	.word	0x40010400

08002d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	807b      	strh	r3, [r7, #2]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d10:	787b      	ldrb	r3, [r7, #1]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d16:	887a      	ldrh	r2, [r7, #2]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d1c:	e002      	b.n	8002d24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d1e:	887a      	ldrh	r2, [r7, #2]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4603      	mov	r3, r0
 8002d38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d3a:	4b08      	ldr	r3, [pc, #32]	; (8002d5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d3c:	695a      	ldr	r2, [r3, #20]
 8002d3e:	88fb      	ldrh	r3, [r7, #6]
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d006      	beq.n	8002d54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d46:	4a05      	ldr	r2, [pc, #20]	; (8002d5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d48:	88fb      	ldrh	r3, [r7, #6]
 8002d4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d4c:	88fb      	ldrh	r3, [r7, #6]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 f806 	bl	8002d60 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d54:	bf00      	nop
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40010400 	.word	0x40010400

08002d60 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
	...

08002d78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d141      	bne.n	8002e0a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d86:	4b4b      	ldr	r3, [pc, #300]	; (8002eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d92:	d131      	bne.n	8002df8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d94:	4b47      	ldr	r3, [pc, #284]	; (8002eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d9a:	4a46      	ldr	r2, [pc, #280]	; (8002eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002da0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002da4:	4b43      	ldr	r3, [pc, #268]	; (8002eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002dac:	4a41      	ldr	r2, [pc, #260]	; (8002eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002db2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002db4:	4b40      	ldr	r3, [pc, #256]	; (8002eb8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2232      	movs	r2, #50	; 0x32
 8002dba:	fb02 f303 	mul.w	r3, r2, r3
 8002dbe:	4a3f      	ldr	r2, [pc, #252]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc4:	0c9b      	lsrs	r3, r3, #18
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dca:	e002      	b.n	8002dd2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dd2:	4b38      	ldr	r3, [pc, #224]	; (8002eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dde:	d102      	bne.n	8002de6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f2      	bne.n	8002dcc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002de6:	4b33      	ldr	r3, [pc, #204]	; (8002eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002df2:	d158      	bne.n	8002ea6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e057      	b.n	8002ea8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002df8:	4b2e      	ldr	r3, [pc, #184]	; (8002eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dfe:	4a2d      	ldr	r2, [pc, #180]	; (8002eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002e08:	e04d      	b.n	8002ea6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e10:	d141      	bne.n	8002e96 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e12:	4b28      	ldr	r3, [pc, #160]	; (8002eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e1e:	d131      	bne.n	8002e84 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e20:	4b24      	ldr	r3, [pc, #144]	; (8002eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e26:	4a23      	ldr	r2, [pc, #140]	; (8002eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e30:	4b20      	ldr	r3, [pc, #128]	; (8002eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e38:	4a1e      	ldr	r2, [pc, #120]	; (8002eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e40:	4b1d      	ldr	r3, [pc, #116]	; (8002eb8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2232      	movs	r2, #50	; 0x32
 8002e46:	fb02 f303 	mul.w	r3, r2, r3
 8002e4a:	4a1c      	ldr	r2, [pc, #112]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e50:	0c9b      	lsrs	r3, r3, #18
 8002e52:	3301      	adds	r3, #1
 8002e54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e56:	e002      	b.n	8002e5e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e5e:	4b15      	ldr	r3, [pc, #84]	; (8002eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e6a:	d102      	bne.n	8002e72 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1f2      	bne.n	8002e58 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e72:	4b10      	ldr	r3, [pc, #64]	; (8002eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e7e:	d112      	bne.n	8002ea6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e011      	b.n	8002ea8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e84:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e8a:	4a0a      	ldr	r2, [pc, #40]	; (8002eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002e94:	e007      	b.n	8002ea6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e96:	4b07      	ldr	r3, [pc, #28]	; (8002eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e9e:	4a05      	ldr	r2, [pc, #20]	; (8002eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ea0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ea4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	40007000 	.word	0x40007000
 8002eb8:	20000000 	.word	0x20000000
 8002ebc:	431bde83 	.word	0x431bde83

08002ec0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002ec4:	4b05      	ldr	r3, [pc, #20]	; (8002edc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	4a04      	ldr	r2, [pc, #16]	; (8002edc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002eca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ece:	6093      	str	r3, [r2, #8]
}
 8002ed0:	bf00      	nop
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	40007000 	.word	0x40007000

08002ee0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b088      	sub	sp, #32
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e306      	b.n	8003500 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d075      	beq.n	8002fea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002efe:	4b97      	ldr	r3, [pc, #604]	; (800315c <HAL_RCC_OscConfig+0x27c>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 030c 	and.w	r3, r3, #12
 8002f06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f08:	4b94      	ldr	r3, [pc, #592]	; (800315c <HAL_RCC_OscConfig+0x27c>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f003 0303 	and.w	r3, r3, #3
 8002f10:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	2b0c      	cmp	r3, #12
 8002f16:	d102      	bne.n	8002f1e <HAL_RCC_OscConfig+0x3e>
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	2b03      	cmp	r3, #3
 8002f1c:	d002      	beq.n	8002f24 <HAL_RCC_OscConfig+0x44>
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d10b      	bne.n	8002f3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f24:	4b8d      	ldr	r3, [pc, #564]	; (800315c <HAL_RCC_OscConfig+0x27c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d05b      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x108>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d157      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e2e1      	b.n	8003500 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f44:	d106      	bne.n	8002f54 <HAL_RCC_OscConfig+0x74>
 8002f46:	4b85      	ldr	r3, [pc, #532]	; (800315c <HAL_RCC_OscConfig+0x27c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a84      	ldr	r2, [pc, #528]	; (800315c <HAL_RCC_OscConfig+0x27c>)
 8002f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	e01d      	b.n	8002f90 <HAL_RCC_OscConfig+0xb0>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f5c:	d10c      	bne.n	8002f78 <HAL_RCC_OscConfig+0x98>
 8002f5e:	4b7f      	ldr	r3, [pc, #508]	; (800315c <HAL_RCC_OscConfig+0x27c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a7e      	ldr	r2, [pc, #504]	; (800315c <HAL_RCC_OscConfig+0x27c>)
 8002f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	4b7c      	ldr	r3, [pc, #496]	; (800315c <HAL_RCC_OscConfig+0x27c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a7b      	ldr	r2, [pc, #492]	; (800315c <HAL_RCC_OscConfig+0x27c>)
 8002f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	e00b      	b.n	8002f90 <HAL_RCC_OscConfig+0xb0>
 8002f78:	4b78      	ldr	r3, [pc, #480]	; (800315c <HAL_RCC_OscConfig+0x27c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a77      	ldr	r2, [pc, #476]	; (800315c <HAL_RCC_OscConfig+0x27c>)
 8002f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f82:	6013      	str	r3, [r2, #0]
 8002f84:	4b75      	ldr	r3, [pc, #468]	; (800315c <HAL_RCC_OscConfig+0x27c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a74      	ldr	r2, [pc, #464]	; (800315c <HAL_RCC_OscConfig+0x27c>)
 8002f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d013      	beq.n	8002fc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f98:	f7fe fa7a 	bl	8001490 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fa0:	f7fe fa76 	bl	8001490 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b64      	cmp	r3, #100	; 0x64
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e2a6      	b.n	8003500 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fb2:	4b6a      	ldr	r3, [pc, #424]	; (800315c <HAL_RCC_OscConfig+0x27c>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0f0      	beq.n	8002fa0 <HAL_RCC_OscConfig+0xc0>
 8002fbe:	e014      	b.n	8002fea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc0:	f7fe fa66 	bl	8001490 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fc8:	f7fe fa62 	bl	8001490 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b64      	cmp	r3, #100	; 0x64
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e292      	b.n	8003500 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fda:	4b60      	ldr	r3, [pc, #384]	; (800315c <HAL_RCC_OscConfig+0x27c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f0      	bne.n	8002fc8 <HAL_RCC_OscConfig+0xe8>
 8002fe6:	e000      	b.n	8002fea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d075      	beq.n	80030e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ff6:	4b59      	ldr	r3, [pc, #356]	; (800315c <HAL_RCC_OscConfig+0x27c>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 030c 	and.w	r3, r3, #12
 8002ffe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003000:	4b56      	ldr	r3, [pc, #344]	; (800315c <HAL_RCC_OscConfig+0x27c>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f003 0303 	and.w	r3, r3, #3
 8003008:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	2b0c      	cmp	r3, #12
 800300e:	d102      	bne.n	8003016 <HAL_RCC_OscConfig+0x136>
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	2b02      	cmp	r3, #2
 8003014:	d002      	beq.n	800301c <HAL_RCC_OscConfig+0x13c>
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	2b04      	cmp	r3, #4
 800301a:	d11f      	bne.n	800305c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800301c:	4b4f      	ldr	r3, [pc, #316]	; (800315c <HAL_RCC_OscConfig+0x27c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <HAL_RCC_OscConfig+0x154>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e265      	b.n	8003500 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003034:	4b49      	ldr	r3, [pc, #292]	; (800315c <HAL_RCC_OscConfig+0x27c>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	061b      	lsls	r3, r3, #24
 8003042:	4946      	ldr	r1, [pc, #280]	; (800315c <HAL_RCC_OscConfig+0x27c>)
 8003044:	4313      	orrs	r3, r2
 8003046:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003048:	4b45      	ldr	r3, [pc, #276]	; (8003160 <HAL_RCC_OscConfig+0x280>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f7fd fdeb 	bl	8000c28 <HAL_InitTick>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d043      	beq.n	80030e0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e251      	b.n	8003500 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d023      	beq.n	80030ac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003064:	4b3d      	ldr	r3, [pc, #244]	; (800315c <HAL_RCC_OscConfig+0x27c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a3c      	ldr	r2, [pc, #240]	; (800315c <HAL_RCC_OscConfig+0x27c>)
 800306a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800306e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003070:	f7fe fa0e 	bl	8001490 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003078:	f7fe fa0a 	bl	8001490 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e23a      	b.n	8003500 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800308a:	4b34      	ldr	r3, [pc, #208]	; (800315c <HAL_RCC_OscConfig+0x27c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0f0      	beq.n	8003078 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003096:	4b31      	ldr	r3, [pc, #196]	; (800315c <HAL_RCC_OscConfig+0x27c>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	061b      	lsls	r3, r3, #24
 80030a4:	492d      	ldr	r1, [pc, #180]	; (800315c <HAL_RCC_OscConfig+0x27c>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	604b      	str	r3, [r1, #4]
 80030aa:	e01a      	b.n	80030e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ac:	4b2b      	ldr	r3, [pc, #172]	; (800315c <HAL_RCC_OscConfig+0x27c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a2a      	ldr	r2, [pc, #168]	; (800315c <HAL_RCC_OscConfig+0x27c>)
 80030b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b8:	f7fe f9ea 	bl	8001490 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030c0:	f7fe f9e6 	bl	8001490 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e216      	b.n	8003500 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030d2:	4b22      	ldr	r3, [pc, #136]	; (800315c <HAL_RCC_OscConfig+0x27c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1f0      	bne.n	80030c0 <HAL_RCC_OscConfig+0x1e0>
 80030de:	e000      	b.n	80030e2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d041      	beq.n	8003172 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d01c      	beq.n	8003130 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030f6:	4b19      	ldr	r3, [pc, #100]	; (800315c <HAL_RCC_OscConfig+0x27c>)
 80030f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030fc:	4a17      	ldr	r2, [pc, #92]	; (800315c <HAL_RCC_OscConfig+0x27c>)
 80030fe:	f043 0301 	orr.w	r3, r3, #1
 8003102:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003106:	f7fe f9c3 	bl	8001490 <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800310c:	e008      	b.n	8003120 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800310e:	f7fe f9bf 	bl	8001490 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e1ef      	b.n	8003500 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003120:	4b0e      	ldr	r3, [pc, #56]	; (800315c <HAL_RCC_OscConfig+0x27c>)
 8003122:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0ef      	beq.n	800310e <HAL_RCC_OscConfig+0x22e>
 800312e:	e020      	b.n	8003172 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003130:	4b0a      	ldr	r3, [pc, #40]	; (800315c <HAL_RCC_OscConfig+0x27c>)
 8003132:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003136:	4a09      	ldr	r2, [pc, #36]	; (800315c <HAL_RCC_OscConfig+0x27c>)
 8003138:	f023 0301 	bic.w	r3, r3, #1
 800313c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003140:	f7fe f9a6 	bl	8001490 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003146:	e00d      	b.n	8003164 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003148:	f7fe f9a2 	bl	8001490 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d906      	bls.n	8003164 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e1d2      	b.n	8003500 <HAL_RCC_OscConfig+0x620>
 800315a:	bf00      	nop
 800315c:	40021000 	.word	0x40021000
 8003160:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003164:	4b8c      	ldr	r3, [pc, #560]	; (8003398 <HAL_RCC_OscConfig+0x4b8>)
 8003166:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1ea      	bne.n	8003148 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0304 	and.w	r3, r3, #4
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 80a6 	beq.w	80032cc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003180:	2300      	movs	r3, #0
 8003182:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003184:	4b84      	ldr	r3, [pc, #528]	; (8003398 <HAL_RCC_OscConfig+0x4b8>)
 8003186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <HAL_RCC_OscConfig+0x2b4>
 8003190:	2301      	movs	r3, #1
 8003192:	e000      	b.n	8003196 <HAL_RCC_OscConfig+0x2b6>
 8003194:	2300      	movs	r3, #0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00d      	beq.n	80031b6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800319a:	4b7f      	ldr	r3, [pc, #508]	; (8003398 <HAL_RCC_OscConfig+0x4b8>)
 800319c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319e:	4a7e      	ldr	r2, [pc, #504]	; (8003398 <HAL_RCC_OscConfig+0x4b8>)
 80031a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a4:	6593      	str	r3, [r2, #88]	; 0x58
 80031a6:	4b7c      	ldr	r3, [pc, #496]	; (8003398 <HAL_RCC_OscConfig+0x4b8>)
 80031a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80031b2:	2301      	movs	r3, #1
 80031b4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031b6:	4b79      	ldr	r3, [pc, #484]	; (800339c <HAL_RCC_OscConfig+0x4bc>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d118      	bne.n	80031f4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031c2:	4b76      	ldr	r3, [pc, #472]	; (800339c <HAL_RCC_OscConfig+0x4bc>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a75      	ldr	r2, [pc, #468]	; (800339c <HAL_RCC_OscConfig+0x4bc>)
 80031c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ce:	f7fe f95f 	bl	8001490 <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d6:	f7fe f95b 	bl	8001490 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e18b      	b.n	8003500 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031e8:	4b6c      	ldr	r3, [pc, #432]	; (800339c <HAL_RCC_OscConfig+0x4bc>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0f0      	beq.n	80031d6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d108      	bne.n	800320e <HAL_RCC_OscConfig+0x32e>
 80031fc:	4b66      	ldr	r3, [pc, #408]	; (8003398 <HAL_RCC_OscConfig+0x4b8>)
 80031fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003202:	4a65      	ldr	r2, [pc, #404]	; (8003398 <HAL_RCC_OscConfig+0x4b8>)
 8003204:	f043 0301 	orr.w	r3, r3, #1
 8003208:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800320c:	e024      	b.n	8003258 <HAL_RCC_OscConfig+0x378>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	2b05      	cmp	r3, #5
 8003214:	d110      	bne.n	8003238 <HAL_RCC_OscConfig+0x358>
 8003216:	4b60      	ldr	r3, [pc, #384]	; (8003398 <HAL_RCC_OscConfig+0x4b8>)
 8003218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321c:	4a5e      	ldr	r2, [pc, #376]	; (8003398 <HAL_RCC_OscConfig+0x4b8>)
 800321e:	f043 0304 	orr.w	r3, r3, #4
 8003222:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003226:	4b5c      	ldr	r3, [pc, #368]	; (8003398 <HAL_RCC_OscConfig+0x4b8>)
 8003228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322c:	4a5a      	ldr	r2, [pc, #360]	; (8003398 <HAL_RCC_OscConfig+0x4b8>)
 800322e:	f043 0301 	orr.w	r3, r3, #1
 8003232:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003236:	e00f      	b.n	8003258 <HAL_RCC_OscConfig+0x378>
 8003238:	4b57      	ldr	r3, [pc, #348]	; (8003398 <HAL_RCC_OscConfig+0x4b8>)
 800323a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323e:	4a56      	ldr	r2, [pc, #344]	; (8003398 <HAL_RCC_OscConfig+0x4b8>)
 8003240:	f023 0301 	bic.w	r3, r3, #1
 8003244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003248:	4b53      	ldr	r3, [pc, #332]	; (8003398 <HAL_RCC_OscConfig+0x4b8>)
 800324a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800324e:	4a52      	ldr	r2, [pc, #328]	; (8003398 <HAL_RCC_OscConfig+0x4b8>)
 8003250:	f023 0304 	bic.w	r3, r3, #4
 8003254:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d016      	beq.n	800328e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003260:	f7fe f916 	bl	8001490 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003266:	e00a      	b.n	800327e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003268:	f7fe f912 	bl	8001490 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	f241 3288 	movw	r2, #5000	; 0x1388
 8003276:	4293      	cmp	r3, r2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e140      	b.n	8003500 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800327e:	4b46      	ldr	r3, [pc, #280]	; (8003398 <HAL_RCC_OscConfig+0x4b8>)
 8003280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0ed      	beq.n	8003268 <HAL_RCC_OscConfig+0x388>
 800328c:	e015      	b.n	80032ba <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800328e:	f7fe f8ff 	bl	8001490 <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003294:	e00a      	b.n	80032ac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003296:	f7fe f8fb 	bl	8001490 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e129      	b.n	8003500 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032ac:	4b3a      	ldr	r3, [pc, #232]	; (8003398 <HAL_RCC_OscConfig+0x4b8>)
 80032ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1ed      	bne.n	8003296 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032ba:	7ffb      	ldrb	r3, [r7, #31]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d105      	bne.n	80032cc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032c0:	4b35      	ldr	r3, [pc, #212]	; (8003398 <HAL_RCC_OscConfig+0x4b8>)
 80032c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c4:	4a34      	ldr	r2, [pc, #208]	; (8003398 <HAL_RCC_OscConfig+0x4b8>)
 80032c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0320 	and.w	r3, r3, #32
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d03c      	beq.n	8003352 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d01c      	beq.n	800331a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032e0:	4b2d      	ldr	r3, [pc, #180]	; (8003398 <HAL_RCC_OscConfig+0x4b8>)
 80032e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032e6:	4a2c      	ldr	r2, [pc, #176]	; (8003398 <HAL_RCC_OscConfig+0x4b8>)
 80032e8:	f043 0301 	orr.w	r3, r3, #1
 80032ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f0:	f7fe f8ce 	bl	8001490 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032f8:	f7fe f8ca 	bl	8001490 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e0fa      	b.n	8003500 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800330a:	4b23      	ldr	r3, [pc, #140]	; (8003398 <HAL_RCC_OscConfig+0x4b8>)
 800330c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0ef      	beq.n	80032f8 <HAL_RCC_OscConfig+0x418>
 8003318:	e01b      	b.n	8003352 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800331a:	4b1f      	ldr	r3, [pc, #124]	; (8003398 <HAL_RCC_OscConfig+0x4b8>)
 800331c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003320:	4a1d      	ldr	r2, [pc, #116]	; (8003398 <HAL_RCC_OscConfig+0x4b8>)
 8003322:	f023 0301 	bic.w	r3, r3, #1
 8003326:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800332a:	f7fe f8b1 	bl	8001490 <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003332:	f7fe f8ad 	bl	8001490 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e0dd      	b.n	8003500 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003344:	4b14      	ldr	r3, [pc, #80]	; (8003398 <HAL_RCC_OscConfig+0x4b8>)
 8003346:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1ef      	bne.n	8003332 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	2b00      	cmp	r3, #0
 8003358:	f000 80d1 	beq.w	80034fe <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800335c:	4b0e      	ldr	r3, [pc, #56]	; (8003398 <HAL_RCC_OscConfig+0x4b8>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f003 030c 	and.w	r3, r3, #12
 8003364:	2b0c      	cmp	r3, #12
 8003366:	f000 808b 	beq.w	8003480 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	2b02      	cmp	r3, #2
 8003370:	d15e      	bne.n	8003430 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003372:	4b09      	ldr	r3, [pc, #36]	; (8003398 <HAL_RCC_OscConfig+0x4b8>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a08      	ldr	r2, [pc, #32]	; (8003398 <HAL_RCC_OscConfig+0x4b8>)
 8003378:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800337c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337e:	f7fe f887 	bl	8001490 <HAL_GetTick>
 8003382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003384:	e00c      	b.n	80033a0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003386:	f7fe f883 	bl	8001490 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d905      	bls.n	80033a0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e0b3      	b.n	8003500 <HAL_RCC_OscConfig+0x620>
 8003398:	40021000 	.word	0x40021000
 800339c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033a0:	4b59      	ldr	r3, [pc, #356]	; (8003508 <HAL_RCC_OscConfig+0x628>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1ec      	bne.n	8003386 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033ac:	4b56      	ldr	r3, [pc, #344]	; (8003508 <HAL_RCC_OscConfig+0x628>)
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	4b56      	ldr	r3, [pc, #344]	; (800350c <HAL_RCC_OscConfig+0x62c>)
 80033b2:	4013      	ands	r3, r2
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6a11      	ldr	r1, [r2, #32]
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033bc:	3a01      	subs	r2, #1
 80033be:	0112      	lsls	r2, r2, #4
 80033c0:	4311      	orrs	r1, r2
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80033c6:	0212      	lsls	r2, r2, #8
 80033c8:	4311      	orrs	r1, r2
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80033ce:	0852      	lsrs	r2, r2, #1
 80033d0:	3a01      	subs	r2, #1
 80033d2:	0552      	lsls	r2, r2, #21
 80033d4:	4311      	orrs	r1, r2
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033da:	0852      	lsrs	r2, r2, #1
 80033dc:	3a01      	subs	r2, #1
 80033de:	0652      	lsls	r2, r2, #25
 80033e0:	4311      	orrs	r1, r2
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80033e6:	06d2      	lsls	r2, r2, #27
 80033e8:	430a      	orrs	r2, r1
 80033ea:	4947      	ldr	r1, [pc, #284]	; (8003508 <HAL_RCC_OscConfig+0x628>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033f0:	4b45      	ldr	r3, [pc, #276]	; (8003508 <HAL_RCC_OscConfig+0x628>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a44      	ldr	r2, [pc, #272]	; (8003508 <HAL_RCC_OscConfig+0x628>)
 80033f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033fa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033fc:	4b42      	ldr	r3, [pc, #264]	; (8003508 <HAL_RCC_OscConfig+0x628>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	4a41      	ldr	r2, [pc, #260]	; (8003508 <HAL_RCC_OscConfig+0x628>)
 8003402:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003406:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003408:	f7fe f842 	bl	8001490 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003410:	f7fe f83e 	bl	8001490 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e06e      	b.n	8003500 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003422:	4b39      	ldr	r3, [pc, #228]	; (8003508 <HAL_RCC_OscConfig+0x628>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0f0      	beq.n	8003410 <HAL_RCC_OscConfig+0x530>
 800342e:	e066      	b.n	80034fe <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003430:	4b35      	ldr	r3, [pc, #212]	; (8003508 <HAL_RCC_OscConfig+0x628>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a34      	ldr	r2, [pc, #208]	; (8003508 <HAL_RCC_OscConfig+0x628>)
 8003436:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800343a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800343c:	4b32      	ldr	r3, [pc, #200]	; (8003508 <HAL_RCC_OscConfig+0x628>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	4a31      	ldr	r2, [pc, #196]	; (8003508 <HAL_RCC_OscConfig+0x628>)
 8003442:	f023 0303 	bic.w	r3, r3, #3
 8003446:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003448:	4b2f      	ldr	r3, [pc, #188]	; (8003508 <HAL_RCC_OscConfig+0x628>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	4a2e      	ldr	r2, [pc, #184]	; (8003508 <HAL_RCC_OscConfig+0x628>)
 800344e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003456:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003458:	f7fe f81a 	bl	8001490 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003460:	f7fe f816 	bl	8001490 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e046      	b.n	8003500 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003472:	4b25      	ldr	r3, [pc, #148]	; (8003508 <HAL_RCC_OscConfig+0x628>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f0      	bne.n	8003460 <HAL_RCC_OscConfig+0x580>
 800347e:	e03e      	b.n	80034fe <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d101      	bne.n	800348c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e039      	b.n	8003500 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800348c:	4b1e      	ldr	r3, [pc, #120]	; (8003508 <HAL_RCC_OscConfig+0x628>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f003 0203 	and.w	r2, r3, #3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	429a      	cmp	r2, r3
 800349e:	d12c      	bne.n	80034fa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	3b01      	subs	r3, #1
 80034ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d123      	bne.n	80034fa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034be:	429a      	cmp	r2, r3
 80034c0:	d11b      	bne.n	80034fa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d113      	bne.n	80034fa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034dc:	085b      	lsrs	r3, r3, #1
 80034de:	3b01      	subs	r3, #1
 80034e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d109      	bne.n	80034fa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f0:	085b      	lsrs	r3, r3, #1
 80034f2:	3b01      	subs	r3, #1
 80034f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d001      	beq.n	80034fe <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e000      	b.n	8003500 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3720      	adds	r7, #32
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40021000 	.word	0x40021000
 800350c:	019f800c 	.word	0x019f800c

08003510 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800351a:	2300      	movs	r3, #0
 800351c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e11e      	b.n	8003766 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003528:	4b91      	ldr	r3, [pc, #580]	; (8003770 <HAL_RCC_ClockConfig+0x260>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 030f 	and.w	r3, r3, #15
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	d910      	bls.n	8003558 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003536:	4b8e      	ldr	r3, [pc, #568]	; (8003770 <HAL_RCC_ClockConfig+0x260>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f023 020f 	bic.w	r2, r3, #15
 800353e:	498c      	ldr	r1, [pc, #560]	; (8003770 <HAL_RCC_ClockConfig+0x260>)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	4313      	orrs	r3, r2
 8003544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003546:	4b8a      	ldr	r3, [pc, #552]	; (8003770 <HAL_RCC_ClockConfig+0x260>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 030f 	and.w	r3, r3, #15
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	429a      	cmp	r2, r3
 8003552:	d001      	beq.n	8003558 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e106      	b.n	8003766 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b00      	cmp	r3, #0
 8003562:	d073      	beq.n	800364c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b03      	cmp	r3, #3
 800356a:	d129      	bne.n	80035c0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800356c:	4b81      	ldr	r3, [pc, #516]	; (8003774 <HAL_RCC_ClockConfig+0x264>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0f4      	b.n	8003766 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800357c:	f000 f9d0 	bl	8003920 <RCC_GetSysClockFreqFromPLLSource>
 8003580:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	4a7c      	ldr	r2, [pc, #496]	; (8003778 <HAL_RCC_ClockConfig+0x268>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d93f      	bls.n	800360a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800358a:	4b7a      	ldr	r3, [pc, #488]	; (8003774 <HAL_RCC_ClockConfig+0x264>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d009      	beq.n	80035aa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d033      	beq.n	800360a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d12f      	bne.n	800360a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035aa:	4b72      	ldr	r3, [pc, #456]	; (8003774 <HAL_RCC_ClockConfig+0x264>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035b2:	4a70      	ldr	r2, [pc, #448]	; (8003774 <HAL_RCC_ClockConfig+0x264>)
 80035b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035b8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80035ba:	2380      	movs	r3, #128	; 0x80
 80035bc:	617b      	str	r3, [r7, #20]
 80035be:	e024      	b.n	800360a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d107      	bne.n	80035d8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035c8:	4b6a      	ldr	r3, [pc, #424]	; (8003774 <HAL_RCC_ClockConfig+0x264>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d109      	bne.n	80035e8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e0c6      	b.n	8003766 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035d8:	4b66      	ldr	r3, [pc, #408]	; (8003774 <HAL_RCC_ClockConfig+0x264>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e0be      	b.n	8003766 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80035e8:	f000 f8ce 	bl	8003788 <HAL_RCC_GetSysClockFreq>
 80035ec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	4a61      	ldr	r2, [pc, #388]	; (8003778 <HAL_RCC_ClockConfig+0x268>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d909      	bls.n	800360a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035f6:	4b5f      	ldr	r3, [pc, #380]	; (8003774 <HAL_RCC_ClockConfig+0x264>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035fe:	4a5d      	ldr	r2, [pc, #372]	; (8003774 <HAL_RCC_ClockConfig+0x264>)
 8003600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003604:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003606:	2380      	movs	r3, #128	; 0x80
 8003608:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800360a:	4b5a      	ldr	r3, [pc, #360]	; (8003774 <HAL_RCC_ClockConfig+0x264>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f023 0203 	bic.w	r2, r3, #3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	4957      	ldr	r1, [pc, #348]	; (8003774 <HAL_RCC_ClockConfig+0x264>)
 8003618:	4313      	orrs	r3, r2
 800361a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800361c:	f7fd ff38 	bl	8001490 <HAL_GetTick>
 8003620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003622:	e00a      	b.n	800363a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003624:	f7fd ff34 	bl	8001490 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003632:	4293      	cmp	r3, r2
 8003634:	d901      	bls.n	800363a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e095      	b.n	8003766 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363a:	4b4e      	ldr	r3, [pc, #312]	; (8003774 <HAL_RCC_ClockConfig+0x264>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 020c 	and.w	r2, r3, #12
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	429a      	cmp	r2, r3
 800364a:	d1eb      	bne.n	8003624 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d023      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b00      	cmp	r3, #0
 8003662:	d005      	beq.n	8003670 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003664:	4b43      	ldr	r3, [pc, #268]	; (8003774 <HAL_RCC_ClockConfig+0x264>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	4a42      	ldr	r2, [pc, #264]	; (8003774 <HAL_RCC_ClockConfig+0x264>)
 800366a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800366e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0308 	and.w	r3, r3, #8
 8003678:	2b00      	cmp	r3, #0
 800367a:	d007      	beq.n	800368c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800367c:	4b3d      	ldr	r3, [pc, #244]	; (8003774 <HAL_RCC_ClockConfig+0x264>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003684:	4a3b      	ldr	r2, [pc, #236]	; (8003774 <HAL_RCC_ClockConfig+0x264>)
 8003686:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800368a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800368c:	4b39      	ldr	r3, [pc, #228]	; (8003774 <HAL_RCC_ClockConfig+0x264>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	4936      	ldr	r1, [pc, #216]	; (8003774 <HAL_RCC_ClockConfig+0x264>)
 800369a:	4313      	orrs	r3, r2
 800369c:	608b      	str	r3, [r1, #8]
 800369e:	e008      	b.n	80036b2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	2b80      	cmp	r3, #128	; 0x80
 80036a4:	d105      	bne.n	80036b2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80036a6:	4b33      	ldr	r3, [pc, #204]	; (8003774 <HAL_RCC_ClockConfig+0x264>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	4a32      	ldr	r2, [pc, #200]	; (8003774 <HAL_RCC_ClockConfig+0x264>)
 80036ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036b0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036b2:	4b2f      	ldr	r3, [pc, #188]	; (8003770 <HAL_RCC_ClockConfig+0x260>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 030f 	and.w	r3, r3, #15
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d21d      	bcs.n	80036fc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c0:	4b2b      	ldr	r3, [pc, #172]	; (8003770 <HAL_RCC_ClockConfig+0x260>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f023 020f 	bic.w	r2, r3, #15
 80036c8:	4929      	ldr	r1, [pc, #164]	; (8003770 <HAL_RCC_ClockConfig+0x260>)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80036d0:	f7fd fede 	bl	8001490 <HAL_GetTick>
 80036d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d6:	e00a      	b.n	80036ee <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036d8:	f7fd feda 	bl	8001490 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e03b      	b.n	8003766 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ee:	4b20      	ldr	r3, [pc, #128]	; (8003770 <HAL_RCC_ClockConfig+0x260>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d1ed      	bne.n	80036d8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d008      	beq.n	800371a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003708:	4b1a      	ldr	r3, [pc, #104]	; (8003774 <HAL_RCC_ClockConfig+0x264>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	4917      	ldr	r1, [pc, #92]	; (8003774 <HAL_RCC_ClockConfig+0x264>)
 8003716:	4313      	orrs	r3, r2
 8003718:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b00      	cmp	r3, #0
 8003724:	d009      	beq.n	800373a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003726:	4b13      	ldr	r3, [pc, #76]	; (8003774 <HAL_RCC_ClockConfig+0x264>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	490f      	ldr	r1, [pc, #60]	; (8003774 <HAL_RCC_ClockConfig+0x264>)
 8003736:	4313      	orrs	r3, r2
 8003738:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800373a:	f000 f825 	bl	8003788 <HAL_RCC_GetSysClockFreq>
 800373e:	4602      	mov	r2, r0
 8003740:	4b0c      	ldr	r3, [pc, #48]	; (8003774 <HAL_RCC_ClockConfig+0x264>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	091b      	lsrs	r3, r3, #4
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	490c      	ldr	r1, [pc, #48]	; (800377c <HAL_RCC_ClockConfig+0x26c>)
 800374c:	5ccb      	ldrb	r3, [r1, r3]
 800374e:	f003 031f 	and.w	r3, r3, #31
 8003752:	fa22 f303 	lsr.w	r3, r2, r3
 8003756:	4a0a      	ldr	r2, [pc, #40]	; (8003780 <HAL_RCC_ClockConfig+0x270>)
 8003758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800375a:	4b0a      	ldr	r3, [pc, #40]	; (8003784 <HAL_RCC_ClockConfig+0x274>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f7fd fa62 	bl	8000c28 <HAL_InitTick>
 8003764:	4603      	mov	r3, r0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3718      	adds	r7, #24
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40022000 	.word	0x40022000
 8003774:	40021000 	.word	0x40021000
 8003778:	04c4b400 	.word	0x04c4b400
 800377c:	080074d4 	.word	0x080074d4
 8003780:	20000000 	.word	0x20000000
 8003784:	20000004 	.word	0x20000004

08003788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003788:	b480      	push	{r7}
 800378a:	b087      	sub	sp, #28
 800378c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800378e:	4b2c      	ldr	r3, [pc, #176]	; (8003840 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f003 030c 	and.w	r3, r3, #12
 8003796:	2b04      	cmp	r3, #4
 8003798:	d102      	bne.n	80037a0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800379a:	4b2a      	ldr	r3, [pc, #168]	; (8003844 <HAL_RCC_GetSysClockFreq+0xbc>)
 800379c:	613b      	str	r3, [r7, #16]
 800379e:	e047      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80037a0:	4b27      	ldr	r3, [pc, #156]	; (8003840 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f003 030c 	and.w	r3, r3, #12
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	d102      	bne.n	80037b2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037ac:	4b26      	ldr	r3, [pc, #152]	; (8003848 <HAL_RCC_GetSysClockFreq+0xc0>)
 80037ae:	613b      	str	r3, [r7, #16]
 80037b0:	e03e      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80037b2:	4b23      	ldr	r3, [pc, #140]	; (8003840 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 030c 	and.w	r3, r3, #12
 80037ba:	2b0c      	cmp	r3, #12
 80037bc:	d136      	bne.n	800382c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037be:	4b20      	ldr	r3, [pc, #128]	; (8003840 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037c8:	4b1d      	ldr	r3, [pc, #116]	; (8003840 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	091b      	lsrs	r3, r3, #4
 80037ce:	f003 030f 	and.w	r3, r3, #15
 80037d2:	3301      	adds	r3, #1
 80037d4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2b03      	cmp	r3, #3
 80037da:	d10c      	bne.n	80037f6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037dc:	4a1a      	ldr	r2, [pc, #104]	; (8003848 <HAL_RCC_GetSysClockFreq+0xc0>)
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e4:	4a16      	ldr	r2, [pc, #88]	; (8003840 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037e6:	68d2      	ldr	r2, [r2, #12]
 80037e8:	0a12      	lsrs	r2, r2, #8
 80037ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037ee:	fb02 f303 	mul.w	r3, r2, r3
 80037f2:	617b      	str	r3, [r7, #20]
      break;
 80037f4:	e00c      	b.n	8003810 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037f6:	4a13      	ldr	r2, [pc, #76]	; (8003844 <HAL_RCC_GetSysClockFreq+0xbc>)
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fe:	4a10      	ldr	r2, [pc, #64]	; (8003840 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003800:	68d2      	ldr	r2, [r2, #12]
 8003802:	0a12      	lsrs	r2, r2, #8
 8003804:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003808:	fb02 f303 	mul.w	r3, r2, r3
 800380c:	617b      	str	r3, [r7, #20]
      break;
 800380e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003810:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	0e5b      	lsrs	r3, r3, #25
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	3301      	adds	r3, #1
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	fbb2 f3f3 	udiv	r3, r2, r3
 8003828:	613b      	str	r3, [r7, #16]
 800382a:	e001      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800382c:	2300      	movs	r3, #0
 800382e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003830:	693b      	ldr	r3, [r7, #16]
}
 8003832:	4618      	mov	r0, r3
 8003834:	371c      	adds	r7, #28
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	40021000 	.word	0x40021000
 8003844:	00f42400 	.word	0x00f42400
 8003848:	016e3600 	.word	0x016e3600

0800384c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003850:	4b03      	ldr	r3, [pc, #12]	; (8003860 <HAL_RCC_GetHCLKFreq+0x14>)
 8003852:	681b      	ldr	r3, [r3, #0]
}
 8003854:	4618      	mov	r0, r3
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	20000000 	.word	0x20000000

08003864 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003868:	f7ff fff0 	bl	800384c <HAL_RCC_GetHCLKFreq>
 800386c:	4602      	mov	r2, r0
 800386e:	4b06      	ldr	r3, [pc, #24]	; (8003888 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	0a1b      	lsrs	r3, r3, #8
 8003874:	f003 0307 	and.w	r3, r3, #7
 8003878:	4904      	ldr	r1, [pc, #16]	; (800388c <HAL_RCC_GetPCLK1Freq+0x28>)
 800387a:	5ccb      	ldrb	r3, [r1, r3]
 800387c:	f003 031f 	and.w	r3, r3, #31
 8003880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003884:	4618      	mov	r0, r3
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40021000 	.word	0x40021000
 800388c:	080074e4 	.word	0x080074e4

08003890 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003894:	f7ff ffda 	bl	800384c <HAL_RCC_GetHCLKFreq>
 8003898:	4602      	mov	r2, r0
 800389a:	4b06      	ldr	r3, [pc, #24]	; (80038b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	0adb      	lsrs	r3, r3, #11
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	4904      	ldr	r1, [pc, #16]	; (80038b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038a6:	5ccb      	ldrb	r3, [r1, r3]
 80038a8:	f003 031f 	and.w	r3, r3, #31
 80038ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	40021000 	.word	0x40021000
 80038b8:	080074e4 	.word	0x080074e4

080038bc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	220f      	movs	r2, #15
 80038ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80038cc:	4b12      	ldr	r3, [pc, #72]	; (8003918 <HAL_RCC_GetClockConfig+0x5c>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f003 0203 	and.w	r2, r3, #3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80038d8:	4b0f      	ldr	r3, [pc, #60]	; (8003918 <HAL_RCC_GetClockConfig+0x5c>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80038e4:	4b0c      	ldr	r3, [pc, #48]	; (8003918 <HAL_RCC_GetClockConfig+0x5c>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80038f0:	4b09      	ldr	r3, [pc, #36]	; (8003918 <HAL_RCC_GetClockConfig+0x5c>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	08db      	lsrs	r3, r3, #3
 80038f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80038fe:	4b07      	ldr	r3, [pc, #28]	; (800391c <HAL_RCC_GetClockConfig+0x60>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 020f 	and.w	r2, r3, #15
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	601a      	str	r2, [r3, #0]
}
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	40021000 	.word	0x40021000
 800391c:	40022000 	.word	0x40022000

08003920 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003926:	4b1e      	ldr	r3, [pc, #120]	; (80039a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	f003 0303 	and.w	r3, r3, #3
 800392e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003930:	4b1b      	ldr	r3, [pc, #108]	; (80039a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	091b      	lsrs	r3, r3, #4
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	3301      	adds	r3, #1
 800393c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	2b03      	cmp	r3, #3
 8003942:	d10c      	bne.n	800395e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003944:	4a17      	ldr	r2, [pc, #92]	; (80039a4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	fbb2 f3f3 	udiv	r3, r2, r3
 800394c:	4a14      	ldr	r2, [pc, #80]	; (80039a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800394e:	68d2      	ldr	r2, [r2, #12]
 8003950:	0a12      	lsrs	r2, r2, #8
 8003952:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003956:	fb02 f303 	mul.w	r3, r2, r3
 800395a:	617b      	str	r3, [r7, #20]
    break;
 800395c:	e00c      	b.n	8003978 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800395e:	4a12      	ldr	r2, [pc, #72]	; (80039a8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	fbb2 f3f3 	udiv	r3, r2, r3
 8003966:	4a0e      	ldr	r2, [pc, #56]	; (80039a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003968:	68d2      	ldr	r2, [r2, #12]
 800396a:	0a12      	lsrs	r2, r2, #8
 800396c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003970:	fb02 f303 	mul.w	r3, r2, r3
 8003974:	617b      	str	r3, [r7, #20]
    break;
 8003976:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003978:	4b09      	ldr	r3, [pc, #36]	; (80039a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	0e5b      	lsrs	r3, r3, #25
 800397e:	f003 0303 	and.w	r3, r3, #3
 8003982:	3301      	adds	r3, #1
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003990:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003992:	687b      	ldr	r3, [r7, #4]
}
 8003994:	4618      	mov	r0, r3
 8003996:	371c      	adds	r7, #28
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	40021000 	.word	0x40021000
 80039a4:	016e3600 	.word	0x016e3600
 80039a8:	00f42400 	.word	0x00f42400

080039ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039b4:	2300      	movs	r3, #0
 80039b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039b8:	2300      	movs	r3, #0
 80039ba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 8098 	beq.w	8003afa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ca:	2300      	movs	r3, #0
 80039cc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ce:	4b43      	ldr	r3, [pc, #268]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10d      	bne.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039da:	4b40      	ldr	r3, [pc, #256]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039de:	4a3f      	ldr	r2, [pc, #252]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039e4:	6593      	str	r3, [r2, #88]	; 0x58
 80039e6:	4b3d      	ldr	r3, [pc, #244]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ee:	60bb      	str	r3, [r7, #8]
 80039f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039f2:	2301      	movs	r3, #1
 80039f4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039f6:	4b3a      	ldr	r3, [pc, #232]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a39      	ldr	r2, [pc, #228]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80039fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a02:	f7fd fd45 	bl	8001490 <HAL_GetTick>
 8003a06:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a08:	e009      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a0a:	f7fd fd41 	bl	8001490 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d902      	bls.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	74fb      	strb	r3, [r7, #19]
        break;
 8003a1c:	e005      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a1e:	4b30      	ldr	r3, [pc, #192]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0ef      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003a2a:	7cfb      	ldrb	r3, [r7, #19]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d159      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a30:	4b2a      	ldr	r3, [pc, #168]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a3a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d01e      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d019      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a4c:	4b23      	ldr	r3, [pc, #140]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a58:	4b20      	ldr	r3, [pc, #128]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a5e:	4a1f      	ldr	r2, [pc, #124]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a68:	4b1c      	ldr	r3, [pc, #112]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6e:	4a1b      	ldr	r2, [pc, #108]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a78:	4a18      	ldr	r2, [pc, #96]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d016      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8a:	f7fd fd01 	bl	8001490 <HAL_GetTick>
 8003a8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a90:	e00b      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a92:	f7fd fcfd 	bl	8001490 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d902      	bls.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	74fb      	strb	r3, [r7, #19]
            break;
 8003aa8:	e006      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aaa:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0ec      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003ab8:	7cfb      	ldrb	r3, [r7, #19]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10b      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003abe:	4b07      	ldr	r3, [pc, #28]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003acc:	4903      	ldr	r1, [pc, #12]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ad6:	7cfb      	ldrb	r3, [r7, #19]
 8003ad8:	74bb      	strb	r3, [r7, #18]
 8003ada:	e005      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae4:	7cfb      	ldrb	r3, [r7, #19]
 8003ae6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ae8:	7c7b      	ldrb	r3, [r7, #17]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d105      	bne.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aee:	4ba7      	ldr	r3, [pc, #668]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af2:	4aa6      	ldr	r2, [pc, #664]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003af4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003af8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00a      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b06:	4ba1      	ldr	r3, [pc, #644]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0c:	f023 0203 	bic.w	r2, r3, #3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	499d      	ldr	r1, [pc, #628]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00a      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b28:	4b98      	ldr	r3, [pc, #608]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b2e:	f023 020c 	bic.w	r2, r3, #12
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	4995      	ldr	r1, [pc, #596]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0304 	and.w	r3, r3, #4
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00a      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b4a:	4b90      	ldr	r3, [pc, #576]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b50:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	498c      	ldr	r1, [pc, #560]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00a      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b6c:	4b87      	ldr	r3, [pc, #540]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	4984      	ldr	r1, [pc, #528]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0310 	and.w	r3, r3, #16
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b8e:	4b7f      	ldr	r3, [pc, #508]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	497b      	ldr	r1, [pc, #492]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0320 	and.w	r3, r3, #32
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bb0:	4b76      	ldr	r3, [pc, #472]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	4973      	ldr	r1, [pc, #460]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bd2:	4b6e      	ldr	r3, [pc, #440]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	69db      	ldr	r3, [r3, #28]
 8003be0:	496a      	ldr	r1, [pc, #424]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00a      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bf4:	4b65      	ldr	r3, [pc, #404]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	4962      	ldr	r1, [pc, #392]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00a      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c16:	4b5d      	ldr	r3, [pc, #372]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	4959      	ldr	r1, [pc, #356]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00a      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c38:	4b54      	ldr	r3, [pc, #336]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c3e:	f023 0203 	bic.w	r2, r3, #3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c46:	4951      	ldr	r1, [pc, #324]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00a      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c5a:	4b4c      	ldr	r3, [pc, #304]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c68:	4948      	ldr	r1, [pc, #288]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d015      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c7c:	4b43      	ldr	r3, [pc, #268]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8a:	4940      	ldr	r1, [pc, #256]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c9a:	d105      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c9c:	4b3b      	ldr	r3, [pc, #236]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	4a3a      	ldr	r2, [pc, #232]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ca2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ca6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d015      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003cb4:	4b35      	ldr	r3, [pc, #212]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc2:	4932      	ldr	r1, [pc, #200]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cd2:	d105      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cd4:	4b2d      	ldr	r3, [pc, #180]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	4a2c      	ldr	r2, [pc, #176]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cde:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d015      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003cec:	4b27      	ldr	r3, [pc, #156]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfa:	4924      	ldr	r1, [pc, #144]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d0a:	d105      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d0c:	4b1f      	ldr	r3, [pc, #124]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	4a1e      	ldr	r2, [pc, #120]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d16:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d015      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d24:	4b19      	ldr	r3, [pc, #100]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d32:	4916      	ldr	r1, [pc, #88]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d42:	d105      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d44:	4b11      	ldr	r3, [pc, #68]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	4a10      	ldr	r2, [pc, #64]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d4e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d019      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d5c:	4b0b      	ldr	r3, [pc, #44]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	4908      	ldr	r1, [pc, #32]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d7a:	d109      	bne.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d7c:	4b03      	ldr	r3, [pc, #12]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	4a02      	ldr	r2, [pc, #8]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d86:	60d3      	str	r3, [r2, #12]
 8003d88:	e002      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003d8a:	bf00      	nop
 8003d8c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d015      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d9c:	4b29      	ldr	r3, [pc, #164]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003daa:	4926      	ldr	r1, [pc, #152]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dba:	d105      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003dbc:	4b21      	ldr	r3, [pc, #132]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	4a20      	ldr	r2, [pc, #128]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d015      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003dd4:	4b1b      	ldr	r3, [pc, #108]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dda:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003de2:	4918      	ldr	r1, [pc, #96]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df2:	d105      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003df4:	4b13      	ldr	r3, [pc, #76]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	4a12      	ldr	r2, [pc, #72]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dfe:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d015      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003e0c:	4b0d      	ldr	r3, [pc, #52]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e1a:	490a      	ldr	r1, [pc, #40]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e2a:	d105      	bne.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e2c:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	4a04      	ldr	r2, [pc, #16]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e36:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003e38:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	40021000 	.word	0x40021000

08003e48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e049      	b.n	8003eee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d106      	bne.n	8003e74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f841 	bl	8003ef6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2202      	movs	r2, #2
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	3304      	adds	r3, #4
 8003e84:	4619      	mov	r1, r3
 8003e86:	4610      	mov	r0, r2
 8003e88:	f000 fbca 	bl	8004620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b083      	sub	sp, #12
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
	...

08003f0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d001      	beq.n	8003f24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e054      	b.n	8003fce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2202      	movs	r2, #2
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68da      	ldr	r2, [r3, #12]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f042 0201 	orr.w	r2, r2, #1
 8003f3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a26      	ldr	r2, [pc, #152]	; (8003fdc <HAL_TIM_Base_Start_IT+0xd0>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d022      	beq.n	8003f8c <HAL_TIM_Base_Start_IT+0x80>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f4e:	d01d      	beq.n	8003f8c <HAL_TIM_Base_Start_IT+0x80>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a22      	ldr	r2, [pc, #136]	; (8003fe0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d018      	beq.n	8003f8c <HAL_TIM_Base_Start_IT+0x80>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a21      	ldr	r2, [pc, #132]	; (8003fe4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d013      	beq.n	8003f8c <HAL_TIM_Base_Start_IT+0x80>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a1f      	ldr	r2, [pc, #124]	; (8003fe8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d00e      	beq.n	8003f8c <HAL_TIM_Base_Start_IT+0x80>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a1e      	ldr	r2, [pc, #120]	; (8003fec <HAL_TIM_Base_Start_IT+0xe0>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d009      	beq.n	8003f8c <HAL_TIM_Base_Start_IT+0x80>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a1c      	ldr	r2, [pc, #112]	; (8003ff0 <HAL_TIM_Base_Start_IT+0xe4>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d004      	beq.n	8003f8c <HAL_TIM_Base_Start_IT+0x80>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a1b      	ldr	r2, [pc, #108]	; (8003ff4 <HAL_TIM_Base_Start_IT+0xe8>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d115      	bne.n	8003fb8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689a      	ldr	r2, [r3, #8]
 8003f92:	4b19      	ldr	r3, [pc, #100]	; (8003ff8 <HAL_TIM_Base_Start_IT+0xec>)
 8003f94:	4013      	ands	r3, r2
 8003f96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2b06      	cmp	r3, #6
 8003f9c:	d015      	beq.n	8003fca <HAL_TIM_Base_Start_IT+0xbe>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa4:	d011      	beq.n	8003fca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f042 0201 	orr.w	r2, r2, #1
 8003fb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fb6:	e008      	b.n	8003fca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0201 	orr.w	r2, r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	e000      	b.n	8003fcc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3714      	adds	r7, #20
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	40012c00 	.word	0x40012c00
 8003fe0:	40000400 	.word	0x40000400
 8003fe4:	40000800 	.word	0x40000800
 8003fe8:	40000c00 	.word	0x40000c00
 8003fec:	40013400 	.word	0x40013400
 8003ff0:	40014000 	.word	0x40014000
 8003ff4:	40015000 	.word	0x40015000
 8003ff8:	00010007 	.word	0x00010007

08003ffc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e049      	b.n	80040a2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d106      	bne.n	8004028 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7fc ffbe 	bl	8000fa4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2202      	movs	r2, #2
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3304      	adds	r3, #4
 8004038:	4619      	mov	r1, r3
 800403a:	4610      	mov	r0, r2
 800403c:	f000 faf0 	bl	8004620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b082      	sub	sp, #8
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d122      	bne.n	8004106 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d11b      	bne.n	8004106 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f06f 0202 	mvn.w	r2, #2
 80040d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	f003 0303 	and.w	r3, r3, #3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 fa79 	bl	80045e4 <HAL_TIM_IC_CaptureCallback>
 80040f2:	e005      	b.n	8004100 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 fa6b 	bl	80045d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 fa7c 	bl	80045f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b04      	cmp	r3, #4
 8004112:	d122      	bne.n	800415a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f003 0304 	and.w	r3, r3, #4
 800411e:	2b04      	cmp	r3, #4
 8004120:	d11b      	bne.n	800415a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f06f 0204 	mvn.w	r2, #4
 800412a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2202      	movs	r2, #2
 8004130:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 fa4f 	bl	80045e4 <HAL_TIM_IC_CaptureCallback>
 8004146:	e005      	b.n	8004154 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 fa41 	bl	80045d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 fa52 	bl	80045f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	f003 0308 	and.w	r3, r3, #8
 8004164:	2b08      	cmp	r3, #8
 8004166:	d122      	bne.n	80041ae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f003 0308 	and.w	r3, r3, #8
 8004172:	2b08      	cmp	r3, #8
 8004174:	d11b      	bne.n	80041ae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f06f 0208 	mvn.w	r2, #8
 800417e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2204      	movs	r2, #4
 8004184:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	f003 0303 	and.w	r3, r3, #3
 8004190:	2b00      	cmp	r3, #0
 8004192:	d003      	beq.n	800419c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 fa25 	bl	80045e4 <HAL_TIM_IC_CaptureCallback>
 800419a:	e005      	b.n	80041a8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 fa17 	bl	80045d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 fa28 	bl	80045f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	f003 0310 	and.w	r3, r3, #16
 80041b8:	2b10      	cmp	r3, #16
 80041ba:	d122      	bne.n	8004202 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	f003 0310 	and.w	r3, r3, #16
 80041c6:	2b10      	cmp	r3, #16
 80041c8:	d11b      	bne.n	8004202 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f06f 0210 	mvn.w	r2, #16
 80041d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2208      	movs	r2, #8
 80041d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d003      	beq.n	80041f0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 f9fb 	bl	80045e4 <HAL_TIM_IC_CaptureCallback>
 80041ee:	e005      	b.n	80041fc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 f9ed 	bl	80045d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f9fe 	bl	80045f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b01      	cmp	r3, #1
 800420e:	d10e      	bne.n	800422e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b01      	cmp	r3, #1
 800421c:	d107      	bne.n	800422e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f06f 0201 	mvn.w	r2, #1
 8004226:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f7fc fc9b 	bl	8000b64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004238:	2b80      	cmp	r3, #128	; 0x80
 800423a:	d10e      	bne.n	800425a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004246:	2b80      	cmp	r3, #128	; 0x80
 8004248:	d107      	bne.n	800425a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004252:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f001 f82b 	bl	80052b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004268:	d10e      	bne.n	8004288 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004274:	2b80      	cmp	r3, #128	; 0x80
 8004276:	d107      	bne.n	8004288 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f001 f81e 	bl	80052c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004292:	2b40      	cmp	r3, #64	; 0x40
 8004294:	d10e      	bne.n	80042b4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a0:	2b40      	cmp	r3, #64	; 0x40
 80042a2:	d107      	bne.n	80042b4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f9ac 	bl	800460c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	f003 0320 	and.w	r3, r3, #32
 80042be:	2b20      	cmp	r3, #32
 80042c0:	d10e      	bne.n	80042e0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f003 0320 	and.w	r3, r3, #32
 80042cc:	2b20      	cmp	r3, #32
 80042ce:	d107      	bne.n	80042e0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f06f 0220 	mvn.w	r2, #32
 80042d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 ffde 	bl	800529c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042ee:	d10f      	bne.n	8004310 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042fe:	d107      	bne.n	8004310 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 ffe4 	bl	80052d8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800431a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800431e:	d10f      	bne.n	8004340 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800432a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800432e:	d107      	bne.n	8004340 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 ffd6 	bl	80052ec <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800434a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800434e:	d10f      	bne.n	8004370 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800435a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800435e:	d107      	bne.n	8004370 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 ffc8 	bl	8005300 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800437a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800437e:	d10f      	bne.n	80043a0 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800438a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800438e:	d107      	bne.n	80043a0 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 ffba 	bl	8005314 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043a0:	bf00      	nop
 80043a2:	3708      	adds	r7, #8
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043b4:	2300      	movs	r3, #0
 80043b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d101      	bne.n	80043c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043c2:	2302      	movs	r3, #2
 80043c4:	e0ff      	b.n	80045c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b14      	cmp	r3, #20
 80043d2:	f200 80f0 	bhi.w	80045b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80043d6:	a201      	add	r2, pc, #4	; (adr r2, 80043dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043dc:	08004431 	.word	0x08004431
 80043e0:	080045b7 	.word	0x080045b7
 80043e4:	080045b7 	.word	0x080045b7
 80043e8:	080045b7 	.word	0x080045b7
 80043ec:	08004471 	.word	0x08004471
 80043f0:	080045b7 	.word	0x080045b7
 80043f4:	080045b7 	.word	0x080045b7
 80043f8:	080045b7 	.word	0x080045b7
 80043fc:	080044b3 	.word	0x080044b3
 8004400:	080045b7 	.word	0x080045b7
 8004404:	080045b7 	.word	0x080045b7
 8004408:	080045b7 	.word	0x080045b7
 800440c:	080044f3 	.word	0x080044f3
 8004410:	080045b7 	.word	0x080045b7
 8004414:	080045b7 	.word	0x080045b7
 8004418:	080045b7 	.word	0x080045b7
 800441c:	08004535 	.word	0x08004535
 8004420:	080045b7 	.word	0x080045b7
 8004424:	080045b7 	.word	0x080045b7
 8004428:	080045b7 	.word	0x080045b7
 800442c:	08004575 	.word	0x08004575
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68b9      	ldr	r1, [r7, #8]
 8004436:	4618      	mov	r0, r3
 8004438:	f000 f99a 	bl	8004770 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	699a      	ldr	r2, [r3, #24]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0208 	orr.w	r2, r2, #8
 800444a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699a      	ldr	r2, [r3, #24]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0204 	bic.w	r2, r2, #4
 800445a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6999      	ldr	r1, [r3, #24]
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	691a      	ldr	r2, [r3, #16]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	619a      	str	r2, [r3, #24]
      break;
 800446e:	e0a5      	b.n	80045bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68b9      	ldr	r1, [r7, #8]
 8004476:	4618      	mov	r0, r3
 8004478:	f000 fa14 	bl	80048a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	699a      	ldr	r2, [r3, #24]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800448a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	699a      	ldr	r2, [r3, #24]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800449a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6999      	ldr	r1, [r3, #24]
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	021a      	lsls	r2, r3, #8
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	619a      	str	r2, [r3, #24]
      break;
 80044b0:	e084      	b.n	80045bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68b9      	ldr	r1, [r7, #8]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f000 fa87 	bl	80049cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	69da      	ldr	r2, [r3, #28]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f042 0208 	orr.w	r2, r2, #8
 80044cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69da      	ldr	r2, [r3, #28]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0204 	bic.w	r2, r2, #4
 80044dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	69d9      	ldr	r1, [r3, #28]
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	691a      	ldr	r2, [r3, #16]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	61da      	str	r2, [r3, #28]
      break;
 80044f0:	e064      	b.n	80045bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68b9      	ldr	r1, [r7, #8]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f000 faf9 	bl	8004af0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	69da      	ldr	r2, [r3, #28]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800450c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	69da      	ldr	r2, [r3, #28]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800451c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	69d9      	ldr	r1, [r3, #28]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	021a      	lsls	r2, r3, #8
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	61da      	str	r2, [r3, #28]
      break;
 8004532:	e043      	b.n	80045bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68b9      	ldr	r1, [r7, #8]
 800453a:	4618      	mov	r0, r3
 800453c:	f000 fb6c 	bl	8004c18 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f042 0208 	orr.w	r2, r2, #8
 800454e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0204 	bic.w	r2, r2, #4
 800455e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	691a      	ldr	r2, [r3, #16]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004572:	e023      	b.n	80045bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68b9      	ldr	r1, [r7, #8]
 800457a:	4618      	mov	r0, r3
 800457c:	f000 fbb6 	bl	8004cec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800458e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800459e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	021a      	lsls	r2, r3, #8
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80045b4:	e002      	b.n	80045bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	75fb      	strb	r3, [r7, #23]
      break;
 80045ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3718      	adds	r7, #24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop

080045d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a46      	ldr	r2, [pc, #280]	; (800474c <TIM_Base_SetConfig+0x12c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d017      	beq.n	8004668 <TIM_Base_SetConfig+0x48>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800463e:	d013      	beq.n	8004668 <TIM_Base_SetConfig+0x48>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a43      	ldr	r2, [pc, #268]	; (8004750 <TIM_Base_SetConfig+0x130>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d00f      	beq.n	8004668 <TIM_Base_SetConfig+0x48>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a42      	ldr	r2, [pc, #264]	; (8004754 <TIM_Base_SetConfig+0x134>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d00b      	beq.n	8004668 <TIM_Base_SetConfig+0x48>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a41      	ldr	r2, [pc, #260]	; (8004758 <TIM_Base_SetConfig+0x138>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d007      	beq.n	8004668 <TIM_Base_SetConfig+0x48>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a40      	ldr	r2, [pc, #256]	; (800475c <TIM_Base_SetConfig+0x13c>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d003      	beq.n	8004668 <TIM_Base_SetConfig+0x48>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a3f      	ldr	r2, [pc, #252]	; (8004760 <TIM_Base_SetConfig+0x140>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d108      	bne.n	800467a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800466e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	4313      	orrs	r3, r2
 8004678:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a33      	ldr	r2, [pc, #204]	; (800474c <TIM_Base_SetConfig+0x12c>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d023      	beq.n	80046ca <TIM_Base_SetConfig+0xaa>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004688:	d01f      	beq.n	80046ca <TIM_Base_SetConfig+0xaa>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a30      	ldr	r2, [pc, #192]	; (8004750 <TIM_Base_SetConfig+0x130>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d01b      	beq.n	80046ca <TIM_Base_SetConfig+0xaa>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a2f      	ldr	r2, [pc, #188]	; (8004754 <TIM_Base_SetConfig+0x134>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d017      	beq.n	80046ca <TIM_Base_SetConfig+0xaa>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a2e      	ldr	r2, [pc, #184]	; (8004758 <TIM_Base_SetConfig+0x138>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d013      	beq.n	80046ca <TIM_Base_SetConfig+0xaa>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a2d      	ldr	r2, [pc, #180]	; (800475c <TIM_Base_SetConfig+0x13c>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d00f      	beq.n	80046ca <TIM_Base_SetConfig+0xaa>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a2d      	ldr	r2, [pc, #180]	; (8004764 <TIM_Base_SetConfig+0x144>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d00b      	beq.n	80046ca <TIM_Base_SetConfig+0xaa>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a2c      	ldr	r2, [pc, #176]	; (8004768 <TIM_Base_SetConfig+0x148>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d007      	beq.n	80046ca <TIM_Base_SetConfig+0xaa>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a2b      	ldr	r2, [pc, #172]	; (800476c <TIM_Base_SetConfig+0x14c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d003      	beq.n	80046ca <TIM_Base_SetConfig+0xaa>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a26      	ldr	r2, [pc, #152]	; (8004760 <TIM_Base_SetConfig+0x140>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d108      	bne.n	80046dc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	4313      	orrs	r3, r2
 80046da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a12      	ldr	r2, [pc, #72]	; (800474c <TIM_Base_SetConfig+0x12c>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d013      	beq.n	8004730 <TIM_Base_SetConfig+0x110>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a14      	ldr	r2, [pc, #80]	; (800475c <TIM_Base_SetConfig+0x13c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d00f      	beq.n	8004730 <TIM_Base_SetConfig+0x110>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a14      	ldr	r2, [pc, #80]	; (8004764 <TIM_Base_SetConfig+0x144>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d00b      	beq.n	8004730 <TIM_Base_SetConfig+0x110>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a13      	ldr	r2, [pc, #76]	; (8004768 <TIM_Base_SetConfig+0x148>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d007      	beq.n	8004730 <TIM_Base_SetConfig+0x110>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a12      	ldr	r2, [pc, #72]	; (800476c <TIM_Base_SetConfig+0x14c>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d003      	beq.n	8004730 <TIM_Base_SetConfig+0x110>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a0d      	ldr	r2, [pc, #52]	; (8004760 <TIM_Base_SetConfig+0x140>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d103      	bne.n	8004738 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	691a      	ldr	r2, [r3, #16]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	615a      	str	r2, [r3, #20]
}
 800473e:	bf00      	nop
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	40012c00 	.word	0x40012c00
 8004750:	40000400 	.word	0x40000400
 8004754:	40000800 	.word	0x40000800
 8004758:	40000c00 	.word	0x40000c00
 800475c:	40013400 	.word	0x40013400
 8004760:	40015000 	.word	0x40015000
 8004764:	40014000 	.word	0x40014000
 8004768:	40014400 	.word	0x40014400
 800476c:	40014800 	.word	0x40014800

08004770 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004770:	b480      	push	{r7}
 8004772:	b087      	sub	sp, #28
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	f023 0201 	bic.w	r2, r3, #1
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800479e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f023 0303 	bic.w	r3, r3, #3
 80047aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f023 0302 	bic.w	r3, r3, #2
 80047bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a30      	ldr	r2, [pc, #192]	; (800488c <TIM_OC1_SetConfig+0x11c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d013      	beq.n	80047f8 <TIM_OC1_SetConfig+0x88>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a2f      	ldr	r2, [pc, #188]	; (8004890 <TIM_OC1_SetConfig+0x120>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d00f      	beq.n	80047f8 <TIM_OC1_SetConfig+0x88>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a2e      	ldr	r2, [pc, #184]	; (8004894 <TIM_OC1_SetConfig+0x124>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d00b      	beq.n	80047f8 <TIM_OC1_SetConfig+0x88>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a2d      	ldr	r2, [pc, #180]	; (8004898 <TIM_OC1_SetConfig+0x128>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d007      	beq.n	80047f8 <TIM_OC1_SetConfig+0x88>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a2c      	ldr	r2, [pc, #176]	; (800489c <TIM_OC1_SetConfig+0x12c>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d003      	beq.n	80047f8 <TIM_OC1_SetConfig+0x88>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a2b      	ldr	r2, [pc, #172]	; (80048a0 <TIM_OC1_SetConfig+0x130>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d10c      	bne.n	8004812 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f023 0308 	bic.w	r3, r3, #8
 80047fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	4313      	orrs	r3, r2
 8004808:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f023 0304 	bic.w	r3, r3, #4
 8004810:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a1d      	ldr	r2, [pc, #116]	; (800488c <TIM_OC1_SetConfig+0x11c>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d013      	beq.n	8004842 <TIM_OC1_SetConfig+0xd2>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a1c      	ldr	r2, [pc, #112]	; (8004890 <TIM_OC1_SetConfig+0x120>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d00f      	beq.n	8004842 <TIM_OC1_SetConfig+0xd2>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a1b      	ldr	r2, [pc, #108]	; (8004894 <TIM_OC1_SetConfig+0x124>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d00b      	beq.n	8004842 <TIM_OC1_SetConfig+0xd2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a1a      	ldr	r2, [pc, #104]	; (8004898 <TIM_OC1_SetConfig+0x128>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d007      	beq.n	8004842 <TIM_OC1_SetConfig+0xd2>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a19      	ldr	r2, [pc, #100]	; (800489c <TIM_OC1_SetConfig+0x12c>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d003      	beq.n	8004842 <TIM_OC1_SetConfig+0xd2>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a18      	ldr	r2, [pc, #96]	; (80048a0 <TIM_OC1_SetConfig+0x130>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d111      	bne.n	8004866 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004848:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004850:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	4313      	orrs	r3, r2
 800485a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	4313      	orrs	r3, r2
 8004864:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685a      	ldr	r2, [r3, #4]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	621a      	str	r2, [r3, #32]
}
 8004880:	bf00      	nop
 8004882:	371c      	adds	r7, #28
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	40012c00 	.word	0x40012c00
 8004890:	40013400 	.word	0x40013400
 8004894:	40014000 	.word	0x40014000
 8004898:	40014400 	.word	0x40014400
 800489c:	40014800 	.word	0x40014800
 80048a0:	40015000 	.word	0x40015000

080048a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b087      	sub	sp, #28
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	f023 0210 	bic.w	r2, r3, #16
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	021b      	lsls	r3, r3, #8
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f023 0320 	bic.w	r3, r3, #32
 80048f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	011b      	lsls	r3, r3, #4
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a2c      	ldr	r2, [pc, #176]	; (80049b4 <TIM_OC2_SetConfig+0x110>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d007      	beq.n	8004918 <TIM_OC2_SetConfig+0x74>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a2b      	ldr	r2, [pc, #172]	; (80049b8 <TIM_OC2_SetConfig+0x114>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d003      	beq.n	8004918 <TIM_OC2_SetConfig+0x74>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a2a      	ldr	r2, [pc, #168]	; (80049bc <TIM_OC2_SetConfig+0x118>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d10d      	bne.n	8004934 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800491e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	011b      	lsls	r3, r3, #4
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	4313      	orrs	r3, r2
 800492a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004932:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a1f      	ldr	r2, [pc, #124]	; (80049b4 <TIM_OC2_SetConfig+0x110>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d013      	beq.n	8004964 <TIM_OC2_SetConfig+0xc0>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a1e      	ldr	r2, [pc, #120]	; (80049b8 <TIM_OC2_SetConfig+0x114>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d00f      	beq.n	8004964 <TIM_OC2_SetConfig+0xc0>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a1e      	ldr	r2, [pc, #120]	; (80049c0 <TIM_OC2_SetConfig+0x11c>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d00b      	beq.n	8004964 <TIM_OC2_SetConfig+0xc0>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a1d      	ldr	r2, [pc, #116]	; (80049c4 <TIM_OC2_SetConfig+0x120>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d007      	beq.n	8004964 <TIM_OC2_SetConfig+0xc0>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a1c      	ldr	r2, [pc, #112]	; (80049c8 <TIM_OC2_SetConfig+0x124>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d003      	beq.n	8004964 <TIM_OC2_SetConfig+0xc0>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a17      	ldr	r2, [pc, #92]	; (80049bc <TIM_OC2_SetConfig+0x118>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d113      	bne.n	800498c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800496a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004972:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	4313      	orrs	r3, r2
 800497e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	621a      	str	r2, [r3, #32]
}
 80049a6:	bf00      	nop
 80049a8:	371c      	adds	r7, #28
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	40012c00 	.word	0x40012c00
 80049b8:	40013400 	.word	0x40013400
 80049bc:	40015000 	.word	0x40015000
 80049c0:	40014000 	.word	0x40014000
 80049c4:	40014400 	.word	0x40014400
 80049c8:	40014800 	.word	0x40014800

080049cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b087      	sub	sp, #28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f023 0303 	bic.w	r3, r3, #3
 8004a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	021b      	lsls	r3, r3, #8
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a2b      	ldr	r2, [pc, #172]	; (8004ad8 <TIM_OC3_SetConfig+0x10c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d007      	beq.n	8004a3e <TIM_OC3_SetConfig+0x72>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a2a      	ldr	r2, [pc, #168]	; (8004adc <TIM_OC3_SetConfig+0x110>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d003      	beq.n	8004a3e <TIM_OC3_SetConfig+0x72>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a29      	ldr	r2, [pc, #164]	; (8004ae0 <TIM_OC3_SetConfig+0x114>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d10d      	bne.n	8004a5a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	021b      	lsls	r3, r3, #8
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a1e      	ldr	r2, [pc, #120]	; (8004ad8 <TIM_OC3_SetConfig+0x10c>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d013      	beq.n	8004a8a <TIM_OC3_SetConfig+0xbe>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a1d      	ldr	r2, [pc, #116]	; (8004adc <TIM_OC3_SetConfig+0x110>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d00f      	beq.n	8004a8a <TIM_OC3_SetConfig+0xbe>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a1d      	ldr	r2, [pc, #116]	; (8004ae4 <TIM_OC3_SetConfig+0x118>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d00b      	beq.n	8004a8a <TIM_OC3_SetConfig+0xbe>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a1c      	ldr	r2, [pc, #112]	; (8004ae8 <TIM_OC3_SetConfig+0x11c>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d007      	beq.n	8004a8a <TIM_OC3_SetConfig+0xbe>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a1b      	ldr	r2, [pc, #108]	; (8004aec <TIM_OC3_SetConfig+0x120>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d003      	beq.n	8004a8a <TIM_OC3_SetConfig+0xbe>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a16      	ldr	r2, [pc, #88]	; (8004ae0 <TIM_OC3_SetConfig+0x114>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d113      	bne.n	8004ab2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	011b      	lsls	r3, r3, #4
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	011b      	lsls	r3, r3, #4
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	621a      	str	r2, [r3, #32]
}
 8004acc:	bf00      	nop
 8004ace:	371c      	adds	r7, #28
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	40012c00 	.word	0x40012c00
 8004adc:	40013400 	.word	0x40013400
 8004ae0:	40015000 	.word	0x40015000
 8004ae4:	40014000 	.word	0x40014000
 8004ae8:	40014400 	.word	0x40014400
 8004aec:	40014800 	.word	0x40014800

08004af0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b087      	sub	sp, #28
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	021b      	lsls	r3, r3, #8
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	031b      	lsls	r3, r3, #12
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a2c      	ldr	r2, [pc, #176]	; (8004c00 <TIM_OC4_SetConfig+0x110>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d007      	beq.n	8004b64 <TIM_OC4_SetConfig+0x74>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a2b      	ldr	r2, [pc, #172]	; (8004c04 <TIM_OC4_SetConfig+0x114>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d003      	beq.n	8004b64 <TIM_OC4_SetConfig+0x74>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a2a      	ldr	r2, [pc, #168]	; (8004c08 <TIM_OC4_SetConfig+0x118>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d10d      	bne.n	8004b80 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	031b      	lsls	r3, r3, #12
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a1f      	ldr	r2, [pc, #124]	; (8004c00 <TIM_OC4_SetConfig+0x110>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d013      	beq.n	8004bb0 <TIM_OC4_SetConfig+0xc0>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a1e      	ldr	r2, [pc, #120]	; (8004c04 <TIM_OC4_SetConfig+0x114>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d00f      	beq.n	8004bb0 <TIM_OC4_SetConfig+0xc0>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a1e      	ldr	r2, [pc, #120]	; (8004c0c <TIM_OC4_SetConfig+0x11c>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d00b      	beq.n	8004bb0 <TIM_OC4_SetConfig+0xc0>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a1d      	ldr	r2, [pc, #116]	; (8004c10 <TIM_OC4_SetConfig+0x120>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d007      	beq.n	8004bb0 <TIM_OC4_SetConfig+0xc0>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a1c      	ldr	r2, [pc, #112]	; (8004c14 <TIM_OC4_SetConfig+0x124>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d003      	beq.n	8004bb0 <TIM_OC4_SetConfig+0xc0>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a17      	ldr	r2, [pc, #92]	; (8004c08 <TIM_OC4_SetConfig+0x118>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d113      	bne.n	8004bd8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bb6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004bbe:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	019b      	lsls	r3, r3, #6
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	019b      	lsls	r3, r3, #6
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	621a      	str	r2, [r3, #32]
}
 8004bf2:	bf00      	nop
 8004bf4:	371c      	adds	r7, #28
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	40012c00 	.word	0x40012c00
 8004c04:	40013400 	.word	0x40013400
 8004c08:	40015000 	.word	0x40015000
 8004c0c:	40014000 	.word	0x40014000
 8004c10:	40014400 	.word	0x40014400
 8004c14:	40014800 	.word	0x40014800

08004c18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004c5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	041b      	lsls	r3, r3, #16
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a19      	ldr	r2, [pc, #100]	; (8004cd4 <TIM_OC5_SetConfig+0xbc>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d013      	beq.n	8004c9a <TIM_OC5_SetConfig+0x82>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a18      	ldr	r2, [pc, #96]	; (8004cd8 <TIM_OC5_SetConfig+0xc0>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d00f      	beq.n	8004c9a <TIM_OC5_SetConfig+0x82>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a17      	ldr	r2, [pc, #92]	; (8004cdc <TIM_OC5_SetConfig+0xc4>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d00b      	beq.n	8004c9a <TIM_OC5_SetConfig+0x82>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a16      	ldr	r2, [pc, #88]	; (8004ce0 <TIM_OC5_SetConfig+0xc8>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d007      	beq.n	8004c9a <TIM_OC5_SetConfig+0x82>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a15      	ldr	r2, [pc, #84]	; (8004ce4 <TIM_OC5_SetConfig+0xcc>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d003      	beq.n	8004c9a <TIM_OC5_SetConfig+0x82>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a14      	ldr	r2, [pc, #80]	; (8004ce8 <TIM_OC5_SetConfig+0xd0>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d109      	bne.n	8004cae <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ca0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	021b      	lsls	r3, r3, #8
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	621a      	str	r2, [r3, #32]
}
 8004cc8:	bf00      	nop
 8004cca:	371c      	adds	r7, #28
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	40012c00 	.word	0x40012c00
 8004cd8:	40013400 	.word	0x40013400
 8004cdc:	40014000 	.word	0x40014000
 8004ce0:	40014400 	.word	0x40014400
 8004ce4:	40014800 	.word	0x40014800
 8004ce8:	40015000 	.word	0x40015000

08004cec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b087      	sub	sp, #28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	021b      	lsls	r3, r3, #8
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	051b      	lsls	r3, r3, #20
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a1a      	ldr	r2, [pc, #104]	; (8004dac <TIM_OC6_SetConfig+0xc0>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d013      	beq.n	8004d70 <TIM_OC6_SetConfig+0x84>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a19      	ldr	r2, [pc, #100]	; (8004db0 <TIM_OC6_SetConfig+0xc4>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d00f      	beq.n	8004d70 <TIM_OC6_SetConfig+0x84>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a18      	ldr	r2, [pc, #96]	; (8004db4 <TIM_OC6_SetConfig+0xc8>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d00b      	beq.n	8004d70 <TIM_OC6_SetConfig+0x84>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a17      	ldr	r2, [pc, #92]	; (8004db8 <TIM_OC6_SetConfig+0xcc>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d007      	beq.n	8004d70 <TIM_OC6_SetConfig+0x84>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a16      	ldr	r2, [pc, #88]	; (8004dbc <TIM_OC6_SetConfig+0xd0>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d003      	beq.n	8004d70 <TIM_OC6_SetConfig+0x84>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a15      	ldr	r2, [pc, #84]	; (8004dc0 <TIM_OC6_SetConfig+0xd4>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d109      	bne.n	8004d84 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	029b      	lsls	r3, r3, #10
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685a      	ldr	r2, [r3, #4]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	621a      	str	r2, [r3, #32]
}
 8004d9e:	bf00      	nop
 8004da0:	371c      	adds	r7, #28
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	40012c00 	.word	0x40012c00
 8004db0:	40013400 	.word	0x40013400
 8004db4:	40014000 	.word	0x40014000
 8004db8:	40014400 	.word	0x40014400
 8004dbc:	40014800 	.word	0x40014800
 8004dc0:	40015000 	.word	0x40015000

08004dc4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b087      	sub	sp, #28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
 8004dd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	f023 0201 	bic.w	r2, r3, #1
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	4a28      	ldr	r2, [pc, #160]	; (8004e90 <TIM_TI1_SetConfig+0xcc>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d01b      	beq.n	8004e2a <TIM_TI1_SetConfig+0x66>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df8:	d017      	beq.n	8004e2a <TIM_TI1_SetConfig+0x66>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	4a25      	ldr	r2, [pc, #148]	; (8004e94 <TIM_TI1_SetConfig+0xd0>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d013      	beq.n	8004e2a <TIM_TI1_SetConfig+0x66>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	4a24      	ldr	r2, [pc, #144]	; (8004e98 <TIM_TI1_SetConfig+0xd4>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d00f      	beq.n	8004e2a <TIM_TI1_SetConfig+0x66>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	4a23      	ldr	r2, [pc, #140]	; (8004e9c <TIM_TI1_SetConfig+0xd8>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d00b      	beq.n	8004e2a <TIM_TI1_SetConfig+0x66>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	4a22      	ldr	r2, [pc, #136]	; (8004ea0 <TIM_TI1_SetConfig+0xdc>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d007      	beq.n	8004e2a <TIM_TI1_SetConfig+0x66>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	4a21      	ldr	r2, [pc, #132]	; (8004ea4 <TIM_TI1_SetConfig+0xe0>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d003      	beq.n	8004e2a <TIM_TI1_SetConfig+0x66>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	4a20      	ldr	r2, [pc, #128]	; (8004ea8 <TIM_TI1_SetConfig+0xe4>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d101      	bne.n	8004e2e <TIM_TI1_SetConfig+0x6a>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e000      	b.n	8004e30 <TIM_TI1_SetConfig+0x6c>
 8004e2e:	2300      	movs	r3, #0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d008      	beq.n	8004e46 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	f023 0303 	bic.w	r3, r3, #3
 8004e3a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	617b      	str	r3, [r7, #20]
 8004e44:	e003      	b.n	8004e4e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f043 0301 	orr.w	r3, r3, #1
 8004e4c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	011b      	lsls	r3, r3, #4
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	f023 030a 	bic.w	r3, r3, #10
 8004e68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	f003 030a 	and.w	r3, r3, #10
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	621a      	str	r2, [r3, #32]
}
 8004e82:	bf00      	nop
 8004e84:	371c      	adds	r7, #28
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	40012c00 	.word	0x40012c00
 8004e94:	40000400 	.word	0x40000400
 8004e98:	40000800 	.word	0x40000800
 8004e9c:	40000c00 	.word	0x40000c00
 8004ea0:	40013400 	.word	0x40013400
 8004ea4:	40014000 	.word	0x40014000
 8004ea8:	40015000 	.word	0x40015000

08004eac <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b08a      	sub	sp, #40	; 0x28
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d101      	bne.n	8004ec0 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e0a0      	b.n	8005002 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d106      	bne.n	8004eda <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f7fc f885 	bl	8000fe4 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2202      	movs	r2, #2
 8004ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	3304      	adds	r3, #4
 8004eea:	4619      	mov	r1, r3
 8004eec:	4610      	mov	r0, r2
 8004eee:	f7ff fb97 	bl	8004620 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6818      	ldr	r0, [r3, #0]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	6819      	ldr	r1, [r3, #0]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	2203      	movs	r2, #3
 8004f00:	f7ff ff60 	bl	8004dc4 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	699a      	ldr	r2, [r3, #24]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 020c 	bic.w	r2, r2, #12
 8004f12:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6999      	ldr	r1, [r3, #24]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	685a      	ldr	r2, [r3, #4]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f34:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	6812      	ldr	r2, [r2, #0]
 8004f40:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f48:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f58:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	6812      	ldr	r2, [r2, #0]
 8004f64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f68:	f023 0307 	bic.w	r3, r3, #7
 8004f6c:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689a      	ldr	r2, [r3, #8]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f042 0204 	orr.w	r2, r2, #4
 8004f7c:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004f82:	2300      	movs	r3, #0
 8004f84:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8004f86:	2370      	movs	r3, #112	; 0x70
 8004f88:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f92:	2300      	movs	r3, #0
 8004f94:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f107 020c 	add.w	r2, r7, #12
 8004fa4:	4611      	mov	r1, r2
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7ff fc7c 	bl	80048a4 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	6812      	ldr	r2, [r2, #0]
 8004fb6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fbe:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8004fce:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3728      	adds	r7, #40	; 0x28
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
	...

0800500c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800501c:	2b01      	cmp	r3, #1
 800501e:	d101      	bne.n	8005024 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005020:	2302      	movs	r3, #2
 8005022:	e074      	b.n	800510e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2202      	movs	r2, #2
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a34      	ldr	r2, [pc, #208]	; (800511c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d009      	beq.n	8005062 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a33      	ldr	r2, [pc, #204]	; (8005120 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d004      	beq.n	8005062 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a31      	ldr	r2, [pc, #196]	; (8005124 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d108      	bne.n	8005074 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005068:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	4313      	orrs	r3, r2
 8005072:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800507a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	4313      	orrs	r3, r2
 8005088:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a21      	ldr	r2, [pc, #132]	; (800511c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d022      	beq.n	80050e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a4:	d01d      	beq.n	80050e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a1f      	ldr	r2, [pc, #124]	; (8005128 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d018      	beq.n	80050e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a1d      	ldr	r2, [pc, #116]	; (800512c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d013      	beq.n	80050e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a1c      	ldr	r2, [pc, #112]	; (8005130 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d00e      	beq.n	80050e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a15      	ldr	r2, [pc, #84]	; (8005120 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d009      	beq.n	80050e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a18      	ldr	r2, [pc, #96]	; (8005134 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d004      	beq.n	80050e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a11      	ldr	r2, [pc, #68]	; (8005124 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d10c      	bne.n	80050fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	68ba      	ldr	r2, [r7, #8]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	40012c00 	.word	0x40012c00
 8005120:	40013400 	.word	0x40013400
 8005124:	40015000 	.word	0x40015000
 8005128:	40000400 	.word	0x40000400
 800512c:	40000800 	.word	0x40000800
 8005130:	40000c00 	.word	0x40000c00
 8005134:	40014000 	.word	0x40014000

08005138 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005142:	2300      	movs	r3, #0
 8005144:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800514c:	2b01      	cmp	r3, #1
 800514e:	d101      	bne.n	8005154 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005150:	2302      	movs	r3, #2
 8005152:	e096      	b.n	8005282 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	4313      	orrs	r3, r2
 8005168:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	4313      	orrs	r3, r2
 8005176:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	4313      	orrs	r3, r2
 8005184:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4313      	orrs	r3, r2
 8005192:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	4313      	orrs	r3, r2
 80051a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ba:	4313      	orrs	r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	041b      	lsls	r3, r3, #16
 80051ca:	4313      	orrs	r3, r2
 80051cc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a2f      	ldr	r2, [pc, #188]	; (8005290 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d009      	beq.n	80051ec <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a2d      	ldr	r2, [pc, #180]	; (8005294 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d004      	beq.n	80051ec <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a2c      	ldr	r2, [pc, #176]	; (8005298 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d106      	bne.n	80051fa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a24      	ldr	r2, [pc, #144]	; (8005290 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d009      	beq.n	8005218 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a22      	ldr	r2, [pc, #136]	; (8005294 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d004      	beq.n	8005218 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a21      	ldr	r2, [pc, #132]	; (8005298 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d12b      	bne.n	8005270 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005222:	051b      	lsls	r3, r3, #20
 8005224:	4313      	orrs	r3, r2
 8005226:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	4313      	orrs	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	4313      	orrs	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a11      	ldr	r2, [pc, #68]	; (8005290 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d009      	beq.n	8005262 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a10      	ldr	r2, [pc, #64]	; (8005294 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d004      	beq.n	8005262 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a0e      	ldr	r2, [pc, #56]	; (8005298 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d106      	bne.n	8005270 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526c:	4313      	orrs	r3, r2
 800526e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	40012c00 	.word	0x40012c00
 8005294:	40013400 	.word	0x40013400
 8005298:	40015000 	.word	0x40015000

0800529c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e042      	b.n	80053c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005340:	2b00      	cmp	r3, #0
 8005342:	d106      	bne.n	8005352 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f7fb ffab 	bl	80012a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2224      	movs	r2, #36	; 0x24
 8005356:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 0201 	bic.w	r2, r2, #1
 8005368:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fc50 	bl	8005c10 <UART_SetConfig>
 8005370:	4603      	mov	r3, r0
 8005372:	2b01      	cmp	r3, #1
 8005374:	d101      	bne.n	800537a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e022      	b.n	80053c0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537e:	2b00      	cmp	r3, #0
 8005380:	d002      	beq.n	8005388 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 ff40 	bl	8006208 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005396:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689a      	ldr	r2, [r3, #8]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f042 0201 	orr.w	r2, r2, #1
 80053b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 ffc7 	bl	800634c <UART_CheckIdleState>
 80053be:	4603      	mov	r3, r0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b08a      	sub	sp, #40	; 0x28
 80053cc:	af02      	add	r7, sp, #8
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	603b      	str	r3, [r7, #0]
 80053d4:	4613      	mov	r3, r2
 80053d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053de:	2b20      	cmp	r3, #32
 80053e0:	f040 8083 	bne.w	80054ea <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d002      	beq.n	80053f0 <HAL_UART_Transmit+0x28>
 80053ea:	88fb      	ldrh	r3, [r7, #6]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d101      	bne.n	80053f4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e07b      	b.n	80054ec <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d101      	bne.n	8005402 <HAL_UART_Transmit+0x3a>
 80053fe:	2302      	movs	r3, #2
 8005400:	e074      	b.n	80054ec <HAL_UART_Transmit+0x124>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2221      	movs	r2, #33	; 0x21
 8005416:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800541a:	f7fc f839 	bl	8001490 <HAL_GetTick>
 800541e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	88fa      	ldrh	r2, [r7, #6]
 8005424:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	88fa      	ldrh	r2, [r7, #6]
 800542c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005438:	d108      	bne.n	800544c <HAL_UART_Transmit+0x84>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d104      	bne.n	800544c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005442:	2300      	movs	r3, #0
 8005444:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	61bb      	str	r3, [r7, #24]
 800544a:	e003      	b.n	8005454 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005450:	2300      	movs	r3, #0
 8005452:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800545c:	e02c      	b.n	80054b8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	9300      	str	r3, [sp, #0]
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	2200      	movs	r2, #0
 8005466:	2180      	movs	r1, #128	; 0x80
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f000 ffba 	bl	80063e2 <UART_WaitOnFlagUntilTimeout>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e039      	b.n	80054ec <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10b      	bne.n	8005496 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	881b      	ldrh	r3, [r3, #0]
 8005482:	461a      	mov	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800548c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	3302      	adds	r3, #2
 8005492:	61bb      	str	r3, [r7, #24]
 8005494:	e007      	b.n	80054a6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	781a      	ldrb	r2, [r3, #0]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	3301      	adds	r3, #1
 80054a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	3b01      	subs	r3, #1
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80054be:	b29b      	uxth	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1cc      	bne.n	800545e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	2200      	movs	r2, #0
 80054cc:	2140      	movs	r1, #64	; 0x40
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 ff87 	bl	80063e2 <UART_WaitOnFlagUntilTimeout>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e006      	b.n	80054ec <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2220      	movs	r2, #32
 80054e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80054e6:	2300      	movs	r3, #0
 80054e8:	e000      	b.n	80054ec <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80054ea:	2302      	movs	r3, #2
  }
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3720      	adds	r7, #32
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b08a      	sub	sp, #40	; 0x28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	4613      	mov	r3, r2
 8005500:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005508:	2b20      	cmp	r3, #32
 800550a:	d142      	bne.n	8005592 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d002      	beq.n	8005518 <HAL_UART_Receive_IT+0x24>
 8005512:	88fb      	ldrh	r3, [r7, #6]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e03b      	b.n	8005594 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005522:	2b01      	cmp	r3, #1
 8005524:	d101      	bne.n	800552a <HAL_UART_Receive_IT+0x36>
 8005526:	2302      	movs	r3, #2
 8005528:	e034      	b.n	8005594 <HAL_UART_Receive_IT+0xa0>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a17      	ldr	r2, [pc, #92]	; (800559c <HAL_UART_Receive_IT+0xa8>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d01f      	beq.n	8005582 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d018      	beq.n	8005582 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	e853 3f00 	ldrex	r3, [r3]
 800555c:	613b      	str	r3, [r7, #16]
   return(result);
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005564:	627b      	str	r3, [r7, #36]	; 0x24
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	461a      	mov	r2, r3
 800556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556e:	623b      	str	r3, [r7, #32]
 8005570:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005572:	69f9      	ldr	r1, [r7, #28]
 8005574:	6a3a      	ldr	r2, [r7, #32]
 8005576:	e841 2300 	strex	r3, r2, [r1]
 800557a:	61bb      	str	r3, [r7, #24]
   return(result);
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1e6      	bne.n	8005550 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005582:	88fb      	ldrh	r3, [r7, #6]
 8005584:	461a      	mov	r2, r3
 8005586:	68b9      	ldr	r1, [r7, #8]
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f000 fff3 	bl	8006574 <UART_Start_Receive_IT>
 800558e:	4603      	mov	r3, r0
 8005590:	e000      	b.n	8005594 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005592:	2302      	movs	r3, #2
  }
}
 8005594:	4618      	mov	r0, r3
 8005596:	3728      	adds	r7, #40	; 0x28
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	40008000 	.word	0x40008000

080055a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b0ba      	sub	sp, #232	; 0xe8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80055c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80055ca:	f640 030f 	movw	r3, #2063	; 0x80f
 80055ce:	4013      	ands	r3, r2
 80055d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80055d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d11b      	bne.n	8005614 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80055dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055e0:	f003 0320 	and.w	r3, r3, #32
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d015      	beq.n	8005614 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80055e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055ec:	f003 0320 	and.w	r3, r3, #32
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d105      	bne.n	8005600 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80055f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d009      	beq.n	8005614 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 82d6 	beq.w	8005bb6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	4798      	blx	r3
      }
      return;
 8005612:	e2d0      	b.n	8005bb6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005614:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 811f 	beq.w	800585c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800561e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005622:	4b8b      	ldr	r3, [pc, #556]	; (8005850 <HAL_UART_IRQHandler+0x2b0>)
 8005624:	4013      	ands	r3, r2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d106      	bne.n	8005638 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800562a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800562e:	4b89      	ldr	r3, [pc, #548]	; (8005854 <HAL_UART_IRQHandler+0x2b4>)
 8005630:	4013      	ands	r3, r2
 8005632:	2b00      	cmp	r3, #0
 8005634:	f000 8112 	beq.w	800585c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800563c:	f003 0301 	and.w	r3, r3, #1
 8005640:	2b00      	cmp	r3, #0
 8005642:	d011      	beq.n	8005668 <HAL_UART_IRQHandler+0xc8>
 8005644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00b      	beq.n	8005668 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2201      	movs	r2, #1
 8005656:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800565e:	f043 0201 	orr.w	r2, r3, #1
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800566c:	f003 0302 	and.w	r3, r3, #2
 8005670:	2b00      	cmp	r3, #0
 8005672:	d011      	beq.n	8005698 <HAL_UART_IRQHandler+0xf8>
 8005674:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00b      	beq.n	8005698 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2202      	movs	r2, #2
 8005686:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800568e:	f043 0204 	orr.w	r2, r3, #4
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800569c:	f003 0304 	and.w	r3, r3, #4
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d011      	beq.n	80056c8 <HAL_UART_IRQHandler+0x128>
 80056a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00b      	beq.n	80056c8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2204      	movs	r2, #4
 80056b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056be:	f043 0202 	orr.w	r2, r3, #2
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80056c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056cc:	f003 0308 	and.w	r3, r3, #8
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d017      	beq.n	8005704 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80056d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056d8:	f003 0320 	and.w	r3, r3, #32
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d105      	bne.n	80056ec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80056e0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80056e4:	4b5a      	ldr	r3, [pc, #360]	; (8005850 <HAL_UART_IRQHandler+0x2b0>)
 80056e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00b      	beq.n	8005704 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2208      	movs	r2, #8
 80056f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056fa:	f043 0208 	orr.w	r2, r3, #8
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005708:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800570c:	2b00      	cmp	r3, #0
 800570e:	d012      	beq.n	8005736 <HAL_UART_IRQHandler+0x196>
 8005710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005714:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00c      	beq.n	8005736 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005724:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800572c:	f043 0220 	orr.w	r2, r3, #32
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800573c:	2b00      	cmp	r3, #0
 800573e:	f000 823c 	beq.w	8005bba <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005746:	f003 0320 	and.w	r3, r3, #32
 800574a:	2b00      	cmp	r3, #0
 800574c:	d013      	beq.n	8005776 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800574e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005752:	f003 0320 	and.w	r3, r3, #32
 8005756:	2b00      	cmp	r3, #0
 8005758:	d105      	bne.n	8005766 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800575a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800575e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d007      	beq.n	8005776 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576a:	2b00      	cmp	r3, #0
 800576c:	d003      	beq.n	8005776 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800577c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800578a:	2b40      	cmp	r3, #64	; 0x40
 800578c:	d005      	beq.n	800579a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800578e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005792:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005796:	2b00      	cmp	r3, #0
 8005798:	d04f      	beq.n	800583a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f001 f814 	bl	80067c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057aa:	2b40      	cmp	r3, #64	; 0x40
 80057ac:	d141      	bne.n	8005832 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	3308      	adds	r3, #8
 80057b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057bc:	e853 3f00 	ldrex	r3, [r3]
 80057c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80057c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	3308      	adds	r3, #8
 80057d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80057da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80057de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80057e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80057ea:	e841 2300 	strex	r3, r2, [r1]
 80057ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80057f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1d9      	bne.n	80057ae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d013      	beq.n	800582a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005806:	4a14      	ldr	r2, [pc, #80]	; (8005858 <HAL_UART_IRQHandler+0x2b8>)
 8005808:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800580e:	4618      	mov	r0, r3
 8005810:	f7fd f88d 	bl	800292e <HAL_DMA_Abort_IT>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d017      	beq.n	800584a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800581e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005824:	4610      	mov	r0, r2
 8005826:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005828:	e00f      	b.n	800584a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f9da 	bl	8005be4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005830:	e00b      	b.n	800584a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f9d6 	bl	8005be4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005838:	e007      	b.n	800584a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 f9d2 	bl	8005be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005848:	e1b7      	b.n	8005bba <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800584a:	bf00      	nop
    return;
 800584c:	e1b5      	b.n	8005bba <HAL_UART_IRQHandler+0x61a>
 800584e:	bf00      	nop
 8005850:	10000001 	.word	0x10000001
 8005854:	04000120 	.word	0x04000120
 8005858:	08006895 	.word	0x08006895

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005860:	2b01      	cmp	r3, #1
 8005862:	f040 814a 	bne.w	8005afa <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800586a:	f003 0310 	and.w	r3, r3, #16
 800586e:	2b00      	cmp	r3, #0
 8005870:	f000 8143 	beq.w	8005afa <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005878:	f003 0310 	and.w	r3, r3, #16
 800587c:	2b00      	cmp	r3, #0
 800587e:	f000 813c 	beq.w	8005afa <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2210      	movs	r2, #16
 8005888:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005894:	2b40      	cmp	r3, #64	; 0x40
 8005896:	f040 80b5 	bne.w	8005a04 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f000 8187 	beq.w	8005bbe <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80058b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058ba:	429a      	cmp	r2, r3
 80058bc:	f080 817f 	bcs.w	8005bbe <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0320 	and.w	r3, r3, #32
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f040 8086 	bne.w	80059e8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058e8:	e853 3f00 	ldrex	r3, [r3]
 80058ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80058f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	461a      	mov	r2, r3
 8005902:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005906:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800590a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005912:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005916:	e841 2300 	strex	r3, r2, [r1]
 800591a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800591e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1da      	bne.n	80058dc <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3308      	adds	r3, #8
 800592c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005930:	e853 3f00 	ldrex	r3, [r3]
 8005934:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005936:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005938:	f023 0301 	bic.w	r3, r3, #1
 800593c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	3308      	adds	r3, #8
 8005946:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800594a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800594e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005950:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005952:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005956:	e841 2300 	strex	r3, r2, [r1]
 800595a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800595c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1e1      	bne.n	8005926 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	3308      	adds	r3, #8
 8005968:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800596c:	e853 3f00 	ldrex	r3, [r3]
 8005970:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005978:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	3308      	adds	r3, #8
 8005982:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005986:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005988:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800598c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800598e:	e841 2300 	strex	r3, r2, [r1]
 8005992:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005994:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1e3      	bne.n	8005962 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2220      	movs	r2, #32
 800599e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059b0:	e853 3f00 	ldrex	r3, [r3]
 80059b4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80059b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059b8:	f023 0310 	bic.w	r3, r3, #16
 80059bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	461a      	mov	r2, r3
 80059c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80059cc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059d2:	e841 2300 	strex	r3, r2, [r1]
 80059d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80059d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1e4      	bne.n	80059a8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fc ff4a 	bl	800287c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	4619      	mov	r1, r3
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 f8fb 	bl	8005bf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a02:	e0dc      	b.n	8005bbe <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f000 80ce 	beq.w	8005bc2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8005a26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f000 80c9 	beq.w	8005bc2 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a38:	e853 3f00 	ldrex	r3, [r3]
 8005a3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a52:	647b      	str	r3, [r7, #68]	; 0x44
 8005a54:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a5a:	e841 2300 	strex	r3, r2, [r1]
 8005a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1e4      	bne.n	8005a30 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	3308      	adds	r3, #8
 8005a6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a70:	e853 3f00 	ldrex	r3, [r3]
 8005a74:	623b      	str	r3, [r7, #32]
   return(result);
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a7c:	f023 0301 	bic.w	r3, r3, #1
 8005a80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	3308      	adds	r3, #8
 8005a8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a8e:	633a      	str	r2, [r7, #48]	; 0x30
 8005a90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a96:	e841 2300 	strex	r3, r2, [r1]
 8005a9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1e1      	bne.n	8005a66 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	e853 3f00 	ldrex	r3, [r3]
 8005ac2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f023 0310 	bic.w	r3, r3, #16
 8005aca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005ad8:	61fb      	str	r3, [r7, #28]
 8005ada:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005adc:	69b9      	ldr	r1, [r7, #24]
 8005ade:	69fa      	ldr	r2, [r7, #28]
 8005ae0:	e841 2300 	strex	r3, r2, [r1]
 8005ae4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1e4      	bne.n	8005ab6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005aec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005af0:	4619      	mov	r1, r3
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f880 	bl	8005bf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005af8:	e063      	b.n	8005bc2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00e      	beq.n	8005b24 <HAL_UART_IRQHandler+0x584>
 8005b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d008      	beq.n	8005b24 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005b1a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f001 fb57 	bl	80071d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b22:	e051      	b.n	8005bc8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d014      	beq.n	8005b5a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d105      	bne.n	8005b48 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005b3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d008      	beq.n	8005b5a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d03a      	beq.n	8005bc6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	4798      	blx	r3
    }
    return;
 8005b58:	e035      	b.n	8005bc6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d009      	beq.n	8005b7a <HAL_UART_IRQHandler+0x5da>
 8005b66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d003      	beq.n	8005b7a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 fea4 	bl	80068c0 <UART_EndTransmit_IT>
    return;
 8005b78:	e026      	b.n	8005bc8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d009      	beq.n	8005b9a <HAL_UART_IRQHandler+0x5fa>
 8005b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b8a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d003      	beq.n	8005b9a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f001 fb30 	bl	80071f8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b98:	e016      	b.n	8005bc8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d010      	beq.n	8005bc8 <HAL_UART_IRQHandler+0x628>
 8005ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	da0c      	bge.n	8005bc8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f001 fb18 	bl	80071e4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005bb4:	e008      	b.n	8005bc8 <HAL_UART_IRQHandler+0x628>
      return;
 8005bb6:	bf00      	nop
 8005bb8:	e006      	b.n	8005bc8 <HAL_UART_IRQHandler+0x628>
    return;
 8005bba:	bf00      	nop
 8005bbc:	e004      	b.n	8005bc8 <HAL_UART_IRQHandler+0x628>
      return;
 8005bbe:	bf00      	nop
 8005bc0:	e002      	b.n	8005bc8 <HAL_UART_IRQHandler+0x628>
      return;
 8005bc2:	bf00      	nop
 8005bc4:	e000      	b.n	8005bc8 <HAL_UART_IRQHandler+0x628>
    return;
 8005bc6:	bf00      	nop
  }
}
 8005bc8:	37e8      	adds	r7, #232	; 0xe8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop

08005bd0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	460b      	mov	r3, r1
 8005c02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c14:	b08c      	sub	sp, #48	; 0x30
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	689a      	ldr	r2, [r3, #8]
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	431a      	orrs	r2, r3
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	431a      	orrs	r2, r3
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	69db      	ldr	r3, [r3, #28]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	4baa      	ldr	r3, [pc, #680]	; (8005ee8 <UART_SetConfig+0x2d8>)
 8005c40:	4013      	ands	r3, r2
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	6812      	ldr	r2, [r2, #0]
 8005c46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c48:	430b      	orrs	r3, r1
 8005c4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	68da      	ldr	r2, [r3, #12]
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a9f      	ldr	r2, [pc, #636]	; (8005eec <UART_SetConfig+0x2dc>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d004      	beq.n	8005c7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005c86:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	6812      	ldr	r2, [r2, #0]
 8005c8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c90:	430b      	orrs	r3, r1
 8005c92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9a:	f023 010f 	bic.w	r1, r3, #15
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a90      	ldr	r2, [pc, #576]	; (8005ef0 <UART_SetConfig+0x2e0>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d125      	bne.n	8005d00 <UART_SetConfig+0xf0>
 8005cb4:	4b8f      	ldr	r3, [pc, #572]	; (8005ef4 <UART_SetConfig+0x2e4>)
 8005cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cba:	f003 0303 	and.w	r3, r3, #3
 8005cbe:	2b03      	cmp	r3, #3
 8005cc0:	d81a      	bhi.n	8005cf8 <UART_SetConfig+0xe8>
 8005cc2:	a201      	add	r2, pc, #4	; (adr r2, 8005cc8 <UART_SetConfig+0xb8>)
 8005cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc8:	08005cd9 	.word	0x08005cd9
 8005ccc:	08005ce9 	.word	0x08005ce9
 8005cd0:	08005ce1 	.word	0x08005ce1
 8005cd4:	08005cf1 	.word	0x08005cf1
 8005cd8:	2301      	movs	r3, #1
 8005cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cde:	e116      	b.n	8005f0e <UART_SetConfig+0x2fe>
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ce6:	e112      	b.n	8005f0e <UART_SetConfig+0x2fe>
 8005ce8:	2304      	movs	r3, #4
 8005cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cee:	e10e      	b.n	8005f0e <UART_SetConfig+0x2fe>
 8005cf0:	2308      	movs	r3, #8
 8005cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cf6:	e10a      	b.n	8005f0e <UART_SetConfig+0x2fe>
 8005cf8:	2310      	movs	r3, #16
 8005cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cfe:	e106      	b.n	8005f0e <UART_SetConfig+0x2fe>
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a7c      	ldr	r2, [pc, #496]	; (8005ef8 <UART_SetConfig+0x2e8>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d138      	bne.n	8005d7c <UART_SetConfig+0x16c>
 8005d0a:	4b7a      	ldr	r3, [pc, #488]	; (8005ef4 <UART_SetConfig+0x2e4>)
 8005d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d10:	f003 030c 	and.w	r3, r3, #12
 8005d14:	2b0c      	cmp	r3, #12
 8005d16:	d82d      	bhi.n	8005d74 <UART_SetConfig+0x164>
 8005d18:	a201      	add	r2, pc, #4	; (adr r2, 8005d20 <UART_SetConfig+0x110>)
 8005d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d1e:	bf00      	nop
 8005d20:	08005d55 	.word	0x08005d55
 8005d24:	08005d75 	.word	0x08005d75
 8005d28:	08005d75 	.word	0x08005d75
 8005d2c:	08005d75 	.word	0x08005d75
 8005d30:	08005d65 	.word	0x08005d65
 8005d34:	08005d75 	.word	0x08005d75
 8005d38:	08005d75 	.word	0x08005d75
 8005d3c:	08005d75 	.word	0x08005d75
 8005d40:	08005d5d 	.word	0x08005d5d
 8005d44:	08005d75 	.word	0x08005d75
 8005d48:	08005d75 	.word	0x08005d75
 8005d4c:	08005d75 	.word	0x08005d75
 8005d50:	08005d6d 	.word	0x08005d6d
 8005d54:	2300      	movs	r3, #0
 8005d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d5a:	e0d8      	b.n	8005f0e <UART_SetConfig+0x2fe>
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d62:	e0d4      	b.n	8005f0e <UART_SetConfig+0x2fe>
 8005d64:	2304      	movs	r3, #4
 8005d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d6a:	e0d0      	b.n	8005f0e <UART_SetConfig+0x2fe>
 8005d6c:	2308      	movs	r3, #8
 8005d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d72:	e0cc      	b.n	8005f0e <UART_SetConfig+0x2fe>
 8005d74:	2310      	movs	r3, #16
 8005d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d7a:	e0c8      	b.n	8005f0e <UART_SetConfig+0x2fe>
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a5e      	ldr	r2, [pc, #376]	; (8005efc <UART_SetConfig+0x2ec>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d125      	bne.n	8005dd2 <UART_SetConfig+0x1c2>
 8005d86:	4b5b      	ldr	r3, [pc, #364]	; (8005ef4 <UART_SetConfig+0x2e4>)
 8005d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d90:	2b30      	cmp	r3, #48	; 0x30
 8005d92:	d016      	beq.n	8005dc2 <UART_SetConfig+0x1b2>
 8005d94:	2b30      	cmp	r3, #48	; 0x30
 8005d96:	d818      	bhi.n	8005dca <UART_SetConfig+0x1ba>
 8005d98:	2b20      	cmp	r3, #32
 8005d9a:	d00a      	beq.n	8005db2 <UART_SetConfig+0x1a2>
 8005d9c:	2b20      	cmp	r3, #32
 8005d9e:	d814      	bhi.n	8005dca <UART_SetConfig+0x1ba>
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d002      	beq.n	8005daa <UART_SetConfig+0x19a>
 8005da4:	2b10      	cmp	r3, #16
 8005da6:	d008      	beq.n	8005dba <UART_SetConfig+0x1aa>
 8005da8:	e00f      	b.n	8005dca <UART_SetConfig+0x1ba>
 8005daa:	2300      	movs	r3, #0
 8005dac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005db0:	e0ad      	b.n	8005f0e <UART_SetConfig+0x2fe>
 8005db2:	2302      	movs	r3, #2
 8005db4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005db8:	e0a9      	b.n	8005f0e <UART_SetConfig+0x2fe>
 8005dba:	2304      	movs	r3, #4
 8005dbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dc0:	e0a5      	b.n	8005f0e <UART_SetConfig+0x2fe>
 8005dc2:	2308      	movs	r3, #8
 8005dc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dc8:	e0a1      	b.n	8005f0e <UART_SetConfig+0x2fe>
 8005dca:	2310      	movs	r3, #16
 8005dcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dd0:	e09d      	b.n	8005f0e <UART_SetConfig+0x2fe>
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a4a      	ldr	r2, [pc, #296]	; (8005f00 <UART_SetConfig+0x2f0>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d125      	bne.n	8005e28 <UART_SetConfig+0x218>
 8005ddc:	4b45      	ldr	r3, [pc, #276]	; (8005ef4 <UART_SetConfig+0x2e4>)
 8005dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005de6:	2bc0      	cmp	r3, #192	; 0xc0
 8005de8:	d016      	beq.n	8005e18 <UART_SetConfig+0x208>
 8005dea:	2bc0      	cmp	r3, #192	; 0xc0
 8005dec:	d818      	bhi.n	8005e20 <UART_SetConfig+0x210>
 8005dee:	2b80      	cmp	r3, #128	; 0x80
 8005df0:	d00a      	beq.n	8005e08 <UART_SetConfig+0x1f8>
 8005df2:	2b80      	cmp	r3, #128	; 0x80
 8005df4:	d814      	bhi.n	8005e20 <UART_SetConfig+0x210>
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d002      	beq.n	8005e00 <UART_SetConfig+0x1f0>
 8005dfa:	2b40      	cmp	r3, #64	; 0x40
 8005dfc:	d008      	beq.n	8005e10 <UART_SetConfig+0x200>
 8005dfe:	e00f      	b.n	8005e20 <UART_SetConfig+0x210>
 8005e00:	2300      	movs	r3, #0
 8005e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e06:	e082      	b.n	8005f0e <UART_SetConfig+0x2fe>
 8005e08:	2302      	movs	r3, #2
 8005e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e0e:	e07e      	b.n	8005f0e <UART_SetConfig+0x2fe>
 8005e10:	2304      	movs	r3, #4
 8005e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e16:	e07a      	b.n	8005f0e <UART_SetConfig+0x2fe>
 8005e18:	2308      	movs	r3, #8
 8005e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e1e:	e076      	b.n	8005f0e <UART_SetConfig+0x2fe>
 8005e20:	2310      	movs	r3, #16
 8005e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e26:	e072      	b.n	8005f0e <UART_SetConfig+0x2fe>
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a35      	ldr	r2, [pc, #212]	; (8005f04 <UART_SetConfig+0x2f4>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d12a      	bne.n	8005e88 <UART_SetConfig+0x278>
 8005e32:	4b30      	ldr	r3, [pc, #192]	; (8005ef4 <UART_SetConfig+0x2e4>)
 8005e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e40:	d01a      	beq.n	8005e78 <UART_SetConfig+0x268>
 8005e42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e46:	d81b      	bhi.n	8005e80 <UART_SetConfig+0x270>
 8005e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e4c:	d00c      	beq.n	8005e68 <UART_SetConfig+0x258>
 8005e4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e52:	d815      	bhi.n	8005e80 <UART_SetConfig+0x270>
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d003      	beq.n	8005e60 <UART_SetConfig+0x250>
 8005e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e5c:	d008      	beq.n	8005e70 <UART_SetConfig+0x260>
 8005e5e:	e00f      	b.n	8005e80 <UART_SetConfig+0x270>
 8005e60:	2300      	movs	r3, #0
 8005e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e66:	e052      	b.n	8005f0e <UART_SetConfig+0x2fe>
 8005e68:	2302      	movs	r3, #2
 8005e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e6e:	e04e      	b.n	8005f0e <UART_SetConfig+0x2fe>
 8005e70:	2304      	movs	r3, #4
 8005e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e76:	e04a      	b.n	8005f0e <UART_SetConfig+0x2fe>
 8005e78:	2308      	movs	r3, #8
 8005e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e7e:	e046      	b.n	8005f0e <UART_SetConfig+0x2fe>
 8005e80:	2310      	movs	r3, #16
 8005e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e86:	e042      	b.n	8005f0e <UART_SetConfig+0x2fe>
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a17      	ldr	r2, [pc, #92]	; (8005eec <UART_SetConfig+0x2dc>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d13a      	bne.n	8005f08 <UART_SetConfig+0x2f8>
 8005e92:	4b18      	ldr	r3, [pc, #96]	; (8005ef4 <UART_SetConfig+0x2e4>)
 8005e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ea0:	d01a      	beq.n	8005ed8 <UART_SetConfig+0x2c8>
 8005ea2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ea6:	d81b      	bhi.n	8005ee0 <UART_SetConfig+0x2d0>
 8005ea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eac:	d00c      	beq.n	8005ec8 <UART_SetConfig+0x2b8>
 8005eae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eb2:	d815      	bhi.n	8005ee0 <UART_SetConfig+0x2d0>
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d003      	beq.n	8005ec0 <UART_SetConfig+0x2b0>
 8005eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ebc:	d008      	beq.n	8005ed0 <UART_SetConfig+0x2c0>
 8005ebe:	e00f      	b.n	8005ee0 <UART_SetConfig+0x2d0>
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ec6:	e022      	b.n	8005f0e <UART_SetConfig+0x2fe>
 8005ec8:	2302      	movs	r3, #2
 8005eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ece:	e01e      	b.n	8005f0e <UART_SetConfig+0x2fe>
 8005ed0:	2304      	movs	r3, #4
 8005ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ed6:	e01a      	b.n	8005f0e <UART_SetConfig+0x2fe>
 8005ed8:	2308      	movs	r3, #8
 8005eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ede:	e016      	b.n	8005f0e <UART_SetConfig+0x2fe>
 8005ee0:	2310      	movs	r3, #16
 8005ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ee6:	e012      	b.n	8005f0e <UART_SetConfig+0x2fe>
 8005ee8:	cfff69f3 	.word	0xcfff69f3
 8005eec:	40008000 	.word	0x40008000
 8005ef0:	40013800 	.word	0x40013800
 8005ef4:	40021000 	.word	0x40021000
 8005ef8:	40004400 	.word	0x40004400
 8005efc:	40004800 	.word	0x40004800
 8005f00:	40004c00 	.word	0x40004c00
 8005f04:	40005000 	.word	0x40005000
 8005f08:	2310      	movs	r3, #16
 8005f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4aae      	ldr	r2, [pc, #696]	; (80061cc <UART_SetConfig+0x5bc>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	f040 8097 	bne.w	8006048 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f1e:	2b08      	cmp	r3, #8
 8005f20:	d823      	bhi.n	8005f6a <UART_SetConfig+0x35a>
 8005f22:	a201      	add	r2, pc, #4	; (adr r2, 8005f28 <UART_SetConfig+0x318>)
 8005f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f28:	08005f4d 	.word	0x08005f4d
 8005f2c:	08005f6b 	.word	0x08005f6b
 8005f30:	08005f55 	.word	0x08005f55
 8005f34:	08005f6b 	.word	0x08005f6b
 8005f38:	08005f5b 	.word	0x08005f5b
 8005f3c:	08005f6b 	.word	0x08005f6b
 8005f40:	08005f6b 	.word	0x08005f6b
 8005f44:	08005f6b 	.word	0x08005f6b
 8005f48:	08005f63 	.word	0x08005f63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f4c:	f7fd fc8a 	bl	8003864 <HAL_RCC_GetPCLK1Freq>
 8005f50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f52:	e010      	b.n	8005f76 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f54:	4b9e      	ldr	r3, [pc, #632]	; (80061d0 <UART_SetConfig+0x5c0>)
 8005f56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f58:	e00d      	b.n	8005f76 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f5a:	f7fd fc15 	bl	8003788 <HAL_RCC_GetSysClockFreq>
 8005f5e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f60:	e009      	b.n	8005f76 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f68:	e005      	b.n	8005f76 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005f74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 8130 	beq.w	80061de <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	4a94      	ldr	r2, [pc, #592]	; (80061d4 <UART_SetConfig+0x5c4>)
 8005f84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f88:	461a      	mov	r2, r3
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f90:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	685a      	ldr	r2, [r3, #4]
 8005f96:	4613      	mov	r3, r2
 8005f98:	005b      	lsls	r3, r3, #1
 8005f9a:	4413      	add	r3, r2
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d305      	bcc.n	8005fae <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fa8:	69ba      	ldr	r2, [r7, #24]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d903      	bls.n	8005fb6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005fb4:	e113      	b.n	80061de <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb8:	2200      	movs	r2, #0
 8005fba:	60bb      	str	r3, [r7, #8]
 8005fbc:	60fa      	str	r2, [r7, #12]
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc2:	4a84      	ldr	r2, [pc, #528]	; (80061d4 <UART_SetConfig+0x5c4>)
 8005fc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	2200      	movs	r2, #0
 8005fcc:	603b      	str	r3, [r7, #0]
 8005fce:	607a      	str	r2, [r7, #4]
 8005fd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fd4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005fd8:	f7fa f928 	bl	800022c <__aeabi_uldivmod>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	460b      	mov	r3, r1
 8005fe0:	4610      	mov	r0, r2
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	f04f 0200 	mov.w	r2, #0
 8005fe8:	f04f 0300 	mov.w	r3, #0
 8005fec:	020b      	lsls	r3, r1, #8
 8005fee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005ff2:	0202      	lsls	r2, r0, #8
 8005ff4:	6979      	ldr	r1, [r7, #20]
 8005ff6:	6849      	ldr	r1, [r1, #4]
 8005ff8:	0849      	lsrs	r1, r1, #1
 8005ffa:	2000      	movs	r0, #0
 8005ffc:	460c      	mov	r4, r1
 8005ffe:	4605      	mov	r5, r0
 8006000:	eb12 0804 	adds.w	r8, r2, r4
 8006004:	eb43 0905 	adc.w	r9, r3, r5
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	469a      	mov	sl, r3
 8006010:	4693      	mov	fp, r2
 8006012:	4652      	mov	r2, sl
 8006014:	465b      	mov	r3, fp
 8006016:	4640      	mov	r0, r8
 8006018:	4649      	mov	r1, r9
 800601a:	f7fa f907 	bl	800022c <__aeabi_uldivmod>
 800601e:	4602      	mov	r2, r0
 8006020:	460b      	mov	r3, r1
 8006022:	4613      	mov	r3, r2
 8006024:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006026:	6a3b      	ldr	r3, [r7, #32]
 8006028:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800602c:	d308      	bcc.n	8006040 <UART_SetConfig+0x430>
 800602e:	6a3b      	ldr	r3, [r7, #32]
 8006030:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006034:	d204      	bcs.n	8006040 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6a3a      	ldr	r2, [r7, #32]
 800603c:	60da      	str	r2, [r3, #12]
 800603e:	e0ce      	b.n	80061de <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006046:	e0ca      	b.n	80061de <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	69db      	ldr	r3, [r3, #28]
 800604c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006050:	d166      	bne.n	8006120 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006052:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006056:	2b08      	cmp	r3, #8
 8006058:	d827      	bhi.n	80060aa <UART_SetConfig+0x49a>
 800605a:	a201      	add	r2, pc, #4	; (adr r2, 8006060 <UART_SetConfig+0x450>)
 800605c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006060:	08006085 	.word	0x08006085
 8006064:	0800608d 	.word	0x0800608d
 8006068:	08006095 	.word	0x08006095
 800606c:	080060ab 	.word	0x080060ab
 8006070:	0800609b 	.word	0x0800609b
 8006074:	080060ab 	.word	0x080060ab
 8006078:	080060ab 	.word	0x080060ab
 800607c:	080060ab 	.word	0x080060ab
 8006080:	080060a3 	.word	0x080060a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006084:	f7fd fbee 	bl	8003864 <HAL_RCC_GetPCLK1Freq>
 8006088:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800608a:	e014      	b.n	80060b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800608c:	f7fd fc00 	bl	8003890 <HAL_RCC_GetPCLK2Freq>
 8006090:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006092:	e010      	b.n	80060b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006094:	4b4e      	ldr	r3, [pc, #312]	; (80061d0 <UART_SetConfig+0x5c0>)
 8006096:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006098:	e00d      	b.n	80060b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800609a:	f7fd fb75 	bl	8003788 <HAL_RCC_GetSysClockFreq>
 800609e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060a0:	e009      	b.n	80060b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80060a8:	e005      	b.n	80060b6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80060aa:	2300      	movs	r3, #0
 80060ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80060b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f000 8090 	beq.w	80061de <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c2:	4a44      	ldr	r2, [pc, #272]	; (80061d4 <UART_SetConfig+0x5c4>)
 80060c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060c8:	461a      	mov	r2, r3
 80060ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80060d0:	005a      	lsls	r2, r3, #1
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	085b      	lsrs	r3, r3, #1
 80060d8:	441a      	add	r2, r3
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	2b0f      	cmp	r3, #15
 80060e8:	d916      	bls.n	8006118 <UART_SetConfig+0x508>
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060f0:	d212      	bcs.n	8006118 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060f2:	6a3b      	ldr	r3, [r7, #32]
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	f023 030f 	bic.w	r3, r3, #15
 80060fa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060fc:	6a3b      	ldr	r3, [r7, #32]
 80060fe:	085b      	lsrs	r3, r3, #1
 8006100:	b29b      	uxth	r3, r3
 8006102:	f003 0307 	and.w	r3, r3, #7
 8006106:	b29a      	uxth	r2, r3
 8006108:	8bfb      	ldrh	r3, [r7, #30]
 800610a:	4313      	orrs	r3, r2
 800610c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	8bfa      	ldrh	r2, [r7, #30]
 8006114:	60da      	str	r2, [r3, #12]
 8006116:	e062      	b.n	80061de <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800611e:	e05e      	b.n	80061de <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006120:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006124:	2b08      	cmp	r3, #8
 8006126:	d828      	bhi.n	800617a <UART_SetConfig+0x56a>
 8006128:	a201      	add	r2, pc, #4	; (adr r2, 8006130 <UART_SetConfig+0x520>)
 800612a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612e:	bf00      	nop
 8006130:	08006155 	.word	0x08006155
 8006134:	0800615d 	.word	0x0800615d
 8006138:	08006165 	.word	0x08006165
 800613c:	0800617b 	.word	0x0800617b
 8006140:	0800616b 	.word	0x0800616b
 8006144:	0800617b 	.word	0x0800617b
 8006148:	0800617b 	.word	0x0800617b
 800614c:	0800617b 	.word	0x0800617b
 8006150:	08006173 	.word	0x08006173
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006154:	f7fd fb86 	bl	8003864 <HAL_RCC_GetPCLK1Freq>
 8006158:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800615a:	e014      	b.n	8006186 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800615c:	f7fd fb98 	bl	8003890 <HAL_RCC_GetPCLK2Freq>
 8006160:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006162:	e010      	b.n	8006186 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006164:	4b1a      	ldr	r3, [pc, #104]	; (80061d0 <UART_SetConfig+0x5c0>)
 8006166:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006168:	e00d      	b.n	8006186 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800616a:	f7fd fb0d 	bl	8003788 <HAL_RCC_GetSysClockFreq>
 800616e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006170:	e009      	b.n	8006186 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006176:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006178:	e005      	b.n	8006186 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800617a:	2300      	movs	r3, #0
 800617c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006184:	bf00      	nop
    }

    if (pclk != 0U)
 8006186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006188:	2b00      	cmp	r3, #0
 800618a:	d028      	beq.n	80061de <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006190:	4a10      	ldr	r2, [pc, #64]	; (80061d4 <UART_SetConfig+0x5c4>)
 8006192:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006196:	461a      	mov	r2, r3
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	fbb3 f2f2 	udiv	r2, r3, r2
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	085b      	lsrs	r3, r3, #1
 80061a4:	441a      	add	r2, r3
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061b0:	6a3b      	ldr	r3, [r7, #32]
 80061b2:	2b0f      	cmp	r3, #15
 80061b4:	d910      	bls.n	80061d8 <UART_SetConfig+0x5c8>
 80061b6:	6a3b      	ldr	r3, [r7, #32]
 80061b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061bc:	d20c      	bcs.n	80061d8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061be:	6a3b      	ldr	r3, [r7, #32]
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	60da      	str	r2, [r3, #12]
 80061c8:	e009      	b.n	80061de <UART_SetConfig+0x5ce>
 80061ca:	bf00      	nop
 80061cc:	40008000 	.word	0x40008000
 80061d0:	00f42400 	.word	0x00f42400
 80061d4:	080074ec 	.word	0x080074ec
      }
      else
      {
        ret = HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	2200      	movs	r2, #0
 80061f2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	2200      	movs	r2, #0
 80061f8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80061fa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3730      	adds	r7, #48	; 0x30
 8006202:	46bd      	mov	sp, r7
 8006204:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006208 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006214:	f003 0301 	and.w	r3, r3, #1
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00a      	beq.n	8006232 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	430a      	orrs	r2, r1
 8006230:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006236:	f003 0302 	and.w	r3, r3, #2
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00a      	beq.n	8006254 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	430a      	orrs	r2, r1
 8006252:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006258:	f003 0304 	and.w	r3, r3, #4
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00a      	beq.n	8006276 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	430a      	orrs	r2, r1
 8006274:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800627a:	f003 0308 	and.w	r3, r3, #8
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00a      	beq.n	8006298 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	430a      	orrs	r2, r1
 8006296:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800629c:	f003 0310 	and.w	r3, r3, #16
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00a      	beq.n	80062ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062be:	f003 0320 	and.w	r3, r3, #32
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00a      	beq.n	80062dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	430a      	orrs	r2, r1
 80062da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d01a      	beq.n	800631e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006302:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006306:	d10a      	bne.n	800631e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	430a      	orrs	r2, r1
 800631c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00a      	beq.n	8006340 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	430a      	orrs	r2, r1
 800633e:	605a      	str	r2, [r3, #4]
  }
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b086      	sub	sp, #24
 8006350:	af02      	add	r7, sp, #8
 8006352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800635c:	f7fb f898 	bl	8001490 <HAL_GetTick>
 8006360:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0308 	and.w	r3, r3, #8
 800636c:	2b08      	cmp	r3, #8
 800636e:	d10e      	bne.n	800638e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006370:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006374:	9300      	str	r3, [sp, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 f82f 	bl	80063e2 <UART_WaitOnFlagUntilTimeout>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e025      	b.n	80063da <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0304 	and.w	r3, r3, #4
 8006398:	2b04      	cmp	r3, #4
 800639a:	d10e      	bne.n	80063ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800639c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063a0:	9300      	str	r3, [sp, #0]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f819 	bl	80063e2 <UART_WaitOnFlagUntilTimeout>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d001      	beq.n	80063ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e00f      	b.n	80063da <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2220      	movs	r2, #32
 80063be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2220      	movs	r2, #32
 80063c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b09c      	sub	sp, #112	; 0x70
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	60f8      	str	r0, [r7, #12]
 80063ea:	60b9      	str	r1, [r7, #8]
 80063ec:	603b      	str	r3, [r7, #0]
 80063ee:	4613      	mov	r3, r2
 80063f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063f2:	e0a9      	b.n	8006548 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063fa:	f000 80a5 	beq.w	8006548 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063fe:	f7fb f847 	bl	8001490 <HAL_GetTick>
 8006402:	4602      	mov	r2, r0
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800640a:	429a      	cmp	r2, r3
 800640c:	d302      	bcc.n	8006414 <UART_WaitOnFlagUntilTimeout+0x32>
 800640e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006410:	2b00      	cmp	r3, #0
 8006412:	d140      	bne.n	8006496 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800641c:	e853 3f00 	ldrex	r3, [r3]
 8006420:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006424:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006428:	667b      	str	r3, [r7, #100]	; 0x64
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	461a      	mov	r2, r3
 8006430:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006432:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006434:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006436:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006438:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800643a:	e841 2300 	strex	r3, r2, [r1]
 800643e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1e6      	bne.n	8006414 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	3308      	adds	r3, #8
 800644c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006450:	e853 3f00 	ldrex	r3, [r3]
 8006454:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006458:	f023 0301 	bic.w	r3, r3, #1
 800645c:	663b      	str	r3, [r7, #96]	; 0x60
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	3308      	adds	r3, #8
 8006464:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006466:	64ba      	str	r2, [r7, #72]	; 0x48
 8006468:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800646c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800646e:	e841 2300 	strex	r3, r2, [r1]
 8006472:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1e5      	bne.n	8006446 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2220      	movs	r2, #32
 800647e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2220      	movs	r2, #32
 8006486:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e069      	b.n	800656a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0304 	and.w	r3, r3, #4
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d051      	beq.n	8006548 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	69db      	ldr	r3, [r3, #28]
 80064aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064b2:	d149      	bne.n	8006548 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c6:	e853 3f00 	ldrex	r3, [r3]
 80064ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80064d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	461a      	mov	r2, r3
 80064da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064dc:	637b      	str	r3, [r7, #52]	; 0x34
 80064de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064e4:	e841 2300 	strex	r3, r2, [r1]
 80064e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80064ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1e6      	bne.n	80064be <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	3308      	adds	r3, #8
 80064f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	e853 3f00 	ldrex	r3, [r3]
 80064fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	f023 0301 	bic.w	r3, r3, #1
 8006506:	66bb      	str	r3, [r7, #104]	; 0x68
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3308      	adds	r3, #8
 800650e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006510:	623a      	str	r2, [r7, #32]
 8006512:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006514:	69f9      	ldr	r1, [r7, #28]
 8006516:	6a3a      	ldr	r2, [r7, #32]
 8006518:	e841 2300 	strex	r3, r2, [r1]
 800651c:	61bb      	str	r3, [r7, #24]
   return(result);
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1e5      	bne.n	80064f0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2220      	movs	r2, #32
 8006528:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2220      	movs	r2, #32
 8006530:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2220      	movs	r2, #32
 8006538:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e010      	b.n	800656a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	69da      	ldr	r2, [r3, #28]
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	4013      	ands	r3, r2
 8006552:	68ba      	ldr	r2, [r7, #8]
 8006554:	429a      	cmp	r2, r3
 8006556:	bf0c      	ite	eq
 8006558:	2301      	moveq	r3, #1
 800655a:	2300      	movne	r3, #0
 800655c:	b2db      	uxtb	r3, r3
 800655e:	461a      	mov	r2, r3
 8006560:	79fb      	ldrb	r3, [r7, #7]
 8006562:	429a      	cmp	r2, r3
 8006564:	f43f af46 	beq.w	80063f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3770      	adds	r7, #112	; 0x70
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
	...

08006574 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006574:	b480      	push	{r7}
 8006576:	b0a3      	sub	sp, #140	; 0x8c
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	4613      	mov	r3, r2
 8006580:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	88fa      	ldrh	r2, [r7, #6]
 800658c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	88fa      	ldrh	r2, [r7, #6]
 8006594:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065a6:	d10e      	bne.n	80065c6 <UART_Start_Receive_IT+0x52>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d105      	bne.n	80065bc <UART_Start_Receive_IT+0x48>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80065b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80065ba:	e02d      	b.n	8006618 <UART_Start_Receive_IT+0xa4>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	22ff      	movs	r2, #255	; 0xff
 80065c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80065c4:	e028      	b.n	8006618 <UART_Start_Receive_IT+0xa4>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10d      	bne.n	80065ea <UART_Start_Receive_IT+0x76>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d104      	bne.n	80065e0 <UART_Start_Receive_IT+0x6c>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	22ff      	movs	r2, #255	; 0xff
 80065da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80065de:	e01b      	b.n	8006618 <UART_Start_Receive_IT+0xa4>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	227f      	movs	r2, #127	; 0x7f
 80065e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80065e8:	e016      	b.n	8006618 <UART_Start_Receive_IT+0xa4>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065f2:	d10d      	bne.n	8006610 <UART_Start_Receive_IT+0x9c>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d104      	bne.n	8006606 <UART_Start_Receive_IT+0x92>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	227f      	movs	r2, #127	; 0x7f
 8006600:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006604:	e008      	b.n	8006618 <UART_Start_Receive_IT+0xa4>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	223f      	movs	r2, #63	; 0x3f
 800660a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800660e:	e003      	b.n	8006618 <UART_Start_Receive_IT+0xa4>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2222      	movs	r2, #34	; 0x22
 8006624:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	3308      	adds	r3, #8
 800662e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006630:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006632:	e853 3f00 	ldrex	r3, [r3]
 8006636:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006638:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800663a:	f043 0301 	orr.w	r3, r3, #1
 800663e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	3308      	adds	r3, #8
 8006648:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800664c:	673a      	str	r2, [r7, #112]	; 0x70
 800664e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006650:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006652:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006654:	e841 2300 	strex	r3, r2, [r1]
 8006658:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800665a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1e3      	bne.n	8006628 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006664:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006668:	d153      	bne.n	8006712 <UART_Start_Receive_IT+0x19e>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006670:	88fa      	ldrh	r2, [r7, #6]
 8006672:	429a      	cmp	r2, r3
 8006674:	d34d      	bcc.n	8006712 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800667e:	d107      	bne.n	8006690 <UART_Start_Receive_IT+0x11c>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d103      	bne.n	8006690 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	4a4b      	ldr	r2, [pc, #300]	; (80067b8 <UART_Start_Receive_IT+0x244>)
 800668c:	671a      	str	r2, [r3, #112]	; 0x70
 800668e:	e002      	b.n	8006696 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	4a4a      	ldr	r2, [pc, #296]	; (80067bc <UART_Start_Receive_IT+0x248>)
 8006694:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d01a      	beq.n	80066dc <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066ae:	e853 3f00 	ldrex	r3, [r3]
 80066b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80066b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	461a      	mov	r2, r3
 80066c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80066c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066ca:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066cc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80066ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80066d0:	e841 2300 	strex	r3, r2, [r1]
 80066d4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80066d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1e4      	bne.n	80066a6 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	3308      	adds	r3, #8
 80066e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066e6:	e853 3f00 	ldrex	r3, [r3]
 80066ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	3308      	adds	r3, #8
 80066fa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80066fc:	64ba      	str	r2, [r7, #72]	; 0x48
 80066fe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006700:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006702:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006704:	e841 2300 	strex	r3, r2, [r1]
 8006708:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800670a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1e5      	bne.n	80066dc <UART_Start_Receive_IT+0x168>
 8006710:	e04a      	b.n	80067a8 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800671a:	d107      	bne.n	800672c <UART_Start_Receive_IT+0x1b8>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d103      	bne.n	800672c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	4a26      	ldr	r2, [pc, #152]	; (80067c0 <UART_Start_Receive_IT+0x24c>)
 8006728:	671a      	str	r2, [r3, #112]	; 0x70
 800672a:	e002      	b.n	8006732 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	4a25      	ldr	r2, [pc, #148]	; (80067c4 <UART_Start_Receive_IT+0x250>)
 8006730:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d019      	beq.n	8006776 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674a:	e853 3f00 	ldrex	r3, [r3]
 800674e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006752:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006756:	677b      	str	r3, [r7, #116]	; 0x74
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	461a      	mov	r2, r3
 800675e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006760:	637b      	str	r3, [r7, #52]	; 0x34
 8006762:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006764:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006766:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006768:	e841 2300 	strex	r3, r2, [r1]
 800676c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800676e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1e6      	bne.n	8006742 <UART_Start_Receive_IT+0x1ce>
 8006774:	e018      	b.n	80067a8 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	e853 3f00 	ldrex	r3, [r3]
 8006782:	613b      	str	r3, [r7, #16]
   return(result);
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	f043 0320 	orr.w	r3, r3, #32
 800678a:	67bb      	str	r3, [r7, #120]	; 0x78
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	461a      	mov	r2, r3
 8006792:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006794:	623b      	str	r3, [r7, #32]
 8006796:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006798:	69f9      	ldr	r1, [r7, #28]
 800679a:	6a3a      	ldr	r2, [r7, #32]
 800679c:	e841 2300 	strex	r3, r2, [r1]
 80067a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1e6      	bne.n	8006776 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	378c      	adds	r7, #140	; 0x8c
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	08006ed1 	.word	0x08006ed1
 80067bc:	08006bd9 	.word	0x08006bd9
 80067c0:	08006a77 	.word	0x08006a77
 80067c4:	08006917 	.word	0x08006917

080067c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b095      	sub	sp, #84	; 0x54
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067d8:	e853 3f00 	ldrex	r3, [r3]
 80067dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80067de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	461a      	mov	r2, r3
 80067ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ee:	643b      	str	r3, [r7, #64]	; 0x40
 80067f0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067f6:	e841 2300 	strex	r3, r2, [r1]
 80067fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1e6      	bne.n	80067d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	3308      	adds	r3, #8
 8006808:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680a:	6a3b      	ldr	r3, [r7, #32]
 800680c:	e853 3f00 	ldrex	r3, [r3]
 8006810:	61fb      	str	r3, [r7, #28]
   return(result);
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006818:	f023 0301 	bic.w	r3, r3, #1
 800681c:	64bb      	str	r3, [r7, #72]	; 0x48
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	3308      	adds	r3, #8
 8006824:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006826:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006828:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800682c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800682e:	e841 2300 	strex	r3, r2, [r1]
 8006832:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1e3      	bne.n	8006802 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800683e:	2b01      	cmp	r3, #1
 8006840:	d118      	bne.n	8006874 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	e853 3f00 	ldrex	r3, [r3]
 800684e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	f023 0310 	bic.w	r3, r3, #16
 8006856:	647b      	str	r3, [r7, #68]	; 0x44
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	461a      	mov	r2, r3
 800685e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006860:	61bb      	str	r3, [r7, #24]
 8006862:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006864:	6979      	ldr	r1, [r7, #20]
 8006866:	69ba      	ldr	r2, [r7, #24]
 8006868:	e841 2300 	strex	r3, r2, [r1]
 800686c:	613b      	str	r3, [r7, #16]
   return(result);
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d1e6      	bne.n	8006842 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2220      	movs	r2, #32
 8006878:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006888:	bf00      	nop
 800688a:	3754      	adds	r7, #84	; 0x54
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068b2:	68f8      	ldr	r0, [r7, #12]
 80068b4:	f7ff f996 	bl	8005be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068b8:	bf00      	nop
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b088      	sub	sp, #32
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	e853 3f00 	ldrex	r3, [r3]
 80068d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068dc:	61fb      	str	r3, [r7, #28]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	461a      	mov	r2, r3
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	61bb      	str	r3, [r7, #24]
 80068e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ea:	6979      	ldr	r1, [r7, #20]
 80068ec:	69ba      	ldr	r2, [r7, #24]
 80068ee:	e841 2300 	strex	r3, r2, [r1]
 80068f2:	613b      	str	r3, [r7, #16]
   return(result);
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1e6      	bne.n	80068c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2220      	movs	r2, #32
 80068fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f7ff f961 	bl	8005bd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800690e:	bf00      	nop
 8006910:	3720      	adds	r7, #32
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b096      	sub	sp, #88	; 0x58
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006924:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800692e:	2b22      	cmp	r3, #34	; 0x22
 8006930:	f040 8095 	bne.w	8006a5e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800693e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006942:	b2d9      	uxtb	r1, r3
 8006944:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006948:	b2da      	uxtb	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800694e:	400a      	ands	r2, r1
 8006950:	b2d2      	uxtb	r2, r2
 8006952:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006958:	1c5a      	adds	r2, r3, #1
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006964:	b29b      	uxth	r3, r3
 8006966:	3b01      	subs	r3, #1
 8006968:	b29a      	uxth	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006976:	b29b      	uxth	r3, r3
 8006978:	2b00      	cmp	r3, #0
 800697a:	d178      	bne.n	8006a6e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006984:	e853 3f00 	ldrex	r3, [r3]
 8006988:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800698a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800698c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006990:	653b      	str	r3, [r7, #80]	; 0x50
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	461a      	mov	r2, r3
 8006998:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800699a:	647b      	str	r3, [r7, #68]	; 0x44
 800699c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069a2:	e841 2300 	strex	r3, r2, [r1]
 80069a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1e6      	bne.n	800697c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	3308      	adds	r3, #8
 80069b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b8:	e853 3f00 	ldrex	r3, [r3]
 80069bc:	623b      	str	r3, [r7, #32]
   return(result);
 80069be:	6a3b      	ldr	r3, [r7, #32]
 80069c0:	f023 0301 	bic.w	r3, r3, #1
 80069c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	3308      	adds	r3, #8
 80069cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80069ce:	633a      	str	r2, [r7, #48]	; 0x30
 80069d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069d6:	e841 2300 	strex	r3, r2, [r1]
 80069da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1e5      	bne.n	80069ae <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2220      	movs	r2, #32
 80069e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d12e      	bne.n	8006a56 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	e853 3f00 	ldrex	r3, [r3]
 8006a0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f023 0310 	bic.w	r3, r3, #16
 8006a12:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	461a      	mov	r2, r3
 8006a1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a1c:	61fb      	str	r3, [r7, #28]
 8006a1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a20:	69b9      	ldr	r1, [r7, #24]
 8006a22:	69fa      	ldr	r2, [r7, #28]
 8006a24:	e841 2300 	strex	r3, r2, [r1]
 8006a28:	617b      	str	r3, [r7, #20]
   return(result);
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1e6      	bne.n	80069fe <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	69db      	ldr	r3, [r3, #28]
 8006a36:	f003 0310 	and.w	r3, r3, #16
 8006a3a:	2b10      	cmp	r3, #16
 8006a3c:	d103      	bne.n	8006a46 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2210      	movs	r2, #16
 8006a44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f7ff f8d2 	bl	8005bf8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a54:	e00b      	b.n	8006a6e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f7fa f868 	bl	8000b2c <HAL_UART_RxCpltCallback>
}
 8006a5c:	e007      	b.n	8006a6e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	699a      	ldr	r2, [r3, #24]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f042 0208 	orr.w	r2, r2, #8
 8006a6c:	619a      	str	r2, [r3, #24]
}
 8006a6e:	bf00      	nop
 8006a70:	3758      	adds	r7, #88	; 0x58
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b096      	sub	sp, #88	; 0x58
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006a84:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a8e:	2b22      	cmp	r3, #34	; 0x22
 8006a90:	f040 8095 	bne.w	8006bbe <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aa2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006aa4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006aa8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006aac:	4013      	ands	r3, r2
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ab2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ab8:	1c9a      	adds	r2, r3, #2
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d178      	bne.n	8006bce <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ae4:	e853 3f00 	ldrex	r3, [r3]
 8006ae8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006af0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	461a      	mov	r2, r3
 8006af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006afa:	643b      	str	r3, [r7, #64]	; 0x40
 8006afc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b02:	e841 2300 	strex	r3, r2, [r1]
 8006b06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1e6      	bne.n	8006adc <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	3308      	adds	r3, #8
 8006b14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b16:	6a3b      	ldr	r3, [r7, #32]
 8006b18:	e853 3f00 	ldrex	r3, [r3]
 8006b1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	f023 0301 	bic.w	r3, r3, #1
 8006b24:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	3308      	adds	r3, #8
 8006b2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b36:	e841 2300 	strex	r3, r2, [r1]
 8006b3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1e5      	bne.n	8006b0e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2220      	movs	r2, #32
 8006b46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d12e      	bne.n	8006bb6 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	e853 3f00 	ldrex	r3, [r3]
 8006b6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	f023 0310 	bic.w	r3, r3, #16
 8006b72:	647b      	str	r3, [r7, #68]	; 0x44
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	461a      	mov	r2, r3
 8006b7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b7c:	61bb      	str	r3, [r7, #24]
 8006b7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b80:	6979      	ldr	r1, [r7, #20]
 8006b82:	69ba      	ldr	r2, [r7, #24]
 8006b84:	e841 2300 	strex	r3, r2, [r1]
 8006b88:	613b      	str	r3, [r7, #16]
   return(result);
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d1e6      	bne.n	8006b5e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	69db      	ldr	r3, [r3, #28]
 8006b96:	f003 0310 	and.w	r3, r3, #16
 8006b9a:	2b10      	cmp	r3, #16
 8006b9c:	d103      	bne.n	8006ba6 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2210      	movs	r2, #16
 8006ba4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006bac:	4619      	mov	r1, r3
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f7ff f822 	bl	8005bf8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006bb4:	e00b      	b.n	8006bce <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f7f9 ffb8 	bl	8000b2c <HAL_UART_RxCpltCallback>
}
 8006bbc:	e007      	b.n	8006bce <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	699a      	ldr	r2, [r3, #24]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f042 0208 	orr.w	r2, r2, #8
 8006bcc:	619a      	str	r2, [r3, #24]
}
 8006bce:	bf00      	nop
 8006bd0:	3758      	adds	r7, #88	; 0x58
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
	...

08006bd8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b0a6      	sub	sp, #152	; 0x98
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006be6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	69db      	ldr	r3, [r3, #28]
 8006bf0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c0e:	2b22      	cmp	r3, #34	; 0x22
 8006c10:	f040 814f 	bne.w	8006eb2 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006c1a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006c1e:	e0f6      	b.n	8006e0e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c26:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006c2a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8006c2e:	b2d9      	uxtb	r1, r3
 8006c30:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8006c34:	b2da      	uxtb	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c3a:	400a      	ands	r2, r1
 8006c3c:	b2d2      	uxtb	r2, r2
 8006c3e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c44:	1c5a      	adds	r2, r3, #1
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	3b01      	subs	r3, #1
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	69db      	ldr	r3, [r3, #28]
 8006c62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006c66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006c6a:	f003 0307 	and.w	r3, r3, #7
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d053      	beq.n	8006d1a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006c76:	f003 0301 	and.w	r3, r3, #1
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d011      	beq.n	8006ca2 <UART_RxISR_8BIT_FIFOEN+0xca>
 8006c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00b      	beq.n	8006ca2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c98:	f043 0201 	orr.w	r2, r3, #1
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ca2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006ca6:	f003 0302 	and.w	r3, r3, #2
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d011      	beq.n	8006cd2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006cae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00b      	beq.n	8006cd2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2202      	movs	r2, #2
 8006cc0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cc8:	f043 0204 	orr.w	r2, r3, #4
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006cd6:	f003 0304 	and.w	r3, r3, #4
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d011      	beq.n	8006d02 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006cde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ce2:	f003 0301 	and.w	r3, r3, #1
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00b      	beq.n	8006d02 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2204      	movs	r2, #4
 8006cf0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cf8:	f043 0202 	orr.w	r2, r3, #2
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d006      	beq.n	8006d1a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f7fe ff69 	bl	8005be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d173      	bne.n	8006e0e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d2e:	e853 3f00 	ldrex	r3, [r3]
 8006d32:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006d34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	461a      	mov	r2, r3
 8006d44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006d48:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d4a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006d4e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006d50:	e841 2300 	strex	r3, r2, [r1]
 8006d54:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006d56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1e4      	bne.n	8006d26 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	3308      	adds	r3, #8
 8006d62:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d66:	e853 3f00 	ldrex	r3, [r3]
 8006d6a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d72:	f023 0301 	bic.w	r3, r3, #1
 8006d76:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	3308      	adds	r3, #8
 8006d7e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006d80:	657a      	str	r2, [r7, #84]	; 0x54
 8006d82:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d84:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006d86:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d88:	e841 2300 	strex	r3, r2, [r1]
 8006d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1e3      	bne.n	8006d5c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2220      	movs	r2, #32
 8006d98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d12e      	bne.n	8006e08 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db8:	e853 3f00 	ldrex	r3, [r3]
 8006dbc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc0:	f023 0310 	bic.w	r3, r3, #16
 8006dc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dce:	643b      	str	r3, [r7, #64]	; 0x40
 8006dd0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006dd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006dd6:	e841 2300 	strex	r3, r2, [r1]
 8006dda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1e6      	bne.n	8006db0 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	69db      	ldr	r3, [r3, #28]
 8006de8:	f003 0310 	and.w	r3, r3, #16
 8006dec:	2b10      	cmp	r3, #16
 8006dee:	d103      	bne.n	8006df8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2210      	movs	r2, #16
 8006df6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006dfe:	4619      	mov	r1, r3
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f7fe fef9 	bl	8005bf8 <HAL_UARTEx_RxEventCallback>
 8006e06:	e002      	b.n	8006e0e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f7f9 fe8f 	bl	8000b2c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006e0e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d006      	beq.n	8006e24 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8006e16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e1a:	f003 0320 	and.w	r3, r3, #32
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f47f aefe 	bne.w	8006c20 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e2a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006e2e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d045      	beq.n	8006ec2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006e3c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d23e      	bcs.n	8006ec2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	3308      	adds	r3, #8
 8006e4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4c:	6a3b      	ldr	r3, [r7, #32]
 8006e4e:	e853 3f00 	ldrex	r3, [r3]
 8006e52:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e5a:	673b      	str	r3, [r7, #112]	; 0x70
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3308      	adds	r3, #8
 8006e62:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006e64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e6c:	e841 2300 	strex	r3, r2, [r1]
 8006e70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1e5      	bne.n	8006e44 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a14      	ldr	r2, [pc, #80]	; (8006ecc <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8006e7c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	e853 3f00 	ldrex	r3, [r3]
 8006e8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	f043 0320 	orr.w	r3, r3, #32
 8006e92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	461a      	mov	r2, r3
 8006e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e9c:	61bb      	str	r3, [r7, #24]
 8006e9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea0:	6979      	ldr	r1, [r7, #20]
 8006ea2:	69ba      	ldr	r2, [r7, #24]
 8006ea4:	e841 2300 	strex	r3, r2, [r1]
 8006ea8:	613b      	str	r3, [r7, #16]
   return(result);
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1e6      	bne.n	8006e7e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006eb0:	e007      	b.n	8006ec2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	699a      	ldr	r2, [r3, #24]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f042 0208 	orr.w	r2, r2, #8
 8006ec0:	619a      	str	r2, [r3, #24]
}
 8006ec2:	bf00      	nop
 8006ec4:	3798      	adds	r7, #152	; 0x98
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	08006917 	.word	0x08006917

08006ed0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b0a8      	sub	sp, #160	; 0xa0
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006ede:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	69db      	ldr	r3, [r3, #28]
 8006ee8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f06:	2b22      	cmp	r3, #34	; 0x22
 8006f08:	f040 8153 	bne.w	80071b2 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006f12:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006f16:	e0fa      	b.n	800710e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8006f2a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8006f2e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006f32:	4013      	ands	r3, r2
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f3a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f40:	1c9a      	adds	r2, r3, #2
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	b29a      	uxth	r2, r3
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	69db      	ldr	r3, [r3, #28]
 8006f5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006f62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f66:	f003 0307 	and.w	r3, r3, #7
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d053      	beq.n	8007016 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d011      	beq.n	8006f9e <UART_RxISR_16BIT_FIFOEN+0xce>
 8006f7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00b      	beq.n	8006f9e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f94:	f043 0201 	orr.w	r2, r3, #1
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fa2:	f003 0302 	and.w	r3, r3, #2
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d011      	beq.n	8006fce <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006faa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fae:	f003 0301 	and.w	r3, r3, #1
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00b      	beq.n	8006fce <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2202      	movs	r2, #2
 8006fbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fc4:	f043 0204 	orr.w	r2, r3, #4
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fd2:	f003 0304 	and.w	r3, r3, #4
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d011      	beq.n	8006ffe <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006fda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fde:	f003 0301 	and.w	r3, r3, #1
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00b      	beq.n	8006ffe <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	2204      	movs	r2, #4
 8006fec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ff4:	f043 0202 	orr.w	r2, r3, #2
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007004:	2b00      	cmp	r3, #0
 8007006:	d006      	beq.n	8007016 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f7fe fdeb 	bl	8005be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800701c:	b29b      	uxth	r3, r3
 800701e:	2b00      	cmp	r3, #0
 8007020:	d175      	bne.n	800710e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007028:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800702a:	e853 3f00 	ldrex	r3, [r3]
 800702e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007030:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007032:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007036:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	461a      	mov	r2, r3
 8007040:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007044:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007046:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007048:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800704a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800704c:	e841 2300 	strex	r3, r2, [r1]
 8007050:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007052:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007054:	2b00      	cmp	r3, #0
 8007056:	d1e4      	bne.n	8007022 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	3308      	adds	r3, #8
 800705e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007062:	e853 3f00 	ldrex	r3, [r3]
 8007066:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007068:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800706a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800706e:	f023 0301 	bic.w	r3, r3, #1
 8007072:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	3308      	adds	r3, #8
 800707c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007080:	65ba      	str	r2, [r7, #88]	; 0x58
 8007082:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007084:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007086:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007088:	e841 2300 	strex	r3, r2, [r1]
 800708c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800708e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1e1      	bne.n	8007058 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2220      	movs	r2, #32
 8007098:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d12e      	bne.n	8007108 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b8:	e853 3f00 	ldrex	r3, [r3]
 80070bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070c0:	f023 0310 	bic.w	r3, r3, #16
 80070c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	461a      	mov	r2, r3
 80070cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80070ce:	647b      	str	r3, [r7, #68]	; 0x44
 80070d0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070d6:	e841 2300 	strex	r3, r2, [r1]
 80070da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80070dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d1e6      	bne.n	80070b0 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	69db      	ldr	r3, [r3, #28]
 80070e8:	f003 0310 	and.w	r3, r3, #16
 80070ec:	2b10      	cmp	r3, #16
 80070ee:	d103      	bne.n	80070f8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2210      	movs	r2, #16
 80070f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80070fe:	4619      	mov	r1, r3
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f7fe fd79 	bl	8005bf8 <HAL_UARTEx_RxEventCallback>
 8007106:	e002      	b.n	800710e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f7f9 fd0f 	bl	8000b2c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800710e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007112:	2b00      	cmp	r3, #0
 8007114:	d006      	beq.n	8007124 <UART_RxISR_16BIT_FIFOEN+0x254>
 8007116:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800711a:	f003 0320 	and.w	r3, r3, #32
 800711e:	2b00      	cmp	r3, #0
 8007120:	f47f aefa 	bne.w	8006f18 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800712a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800712e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8007132:	2b00      	cmp	r3, #0
 8007134:	d045      	beq.n	80071c2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800713c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8007140:	429a      	cmp	r2, r3
 8007142:	d23e      	bcs.n	80071c2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	3308      	adds	r3, #8
 800714a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714e:	e853 3f00 	ldrex	r3, [r3]
 8007152:	623b      	str	r3, [r7, #32]
   return(result);
 8007154:	6a3b      	ldr	r3, [r7, #32]
 8007156:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800715a:	677b      	str	r3, [r7, #116]	; 0x74
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	3308      	adds	r3, #8
 8007162:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007164:	633a      	str	r2, [r7, #48]	; 0x30
 8007166:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007168:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800716a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800716c:	e841 2300 	strex	r3, r2, [r1]
 8007170:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007174:	2b00      	cmp	r3, #0
 8007176:	d1e5      	bne.n	8007144 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a14      	ldr	r2, [pc, #80]	; (80071cc <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800717c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	e853 3f00 	ldrex	r3, [r3]
 800718a:	60fb      	str	r3, [r7, #12]
   return(result);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f043 0320 	orr.w	r3, r3, #32
 8007192:	673b      	str	r3, [r7, #112]	; 0x70
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	461a      	mov	r2, r3
 800719a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800719c:	61fb      	str	r3, [r7, #28]
 800719e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a0:	69b9      	ldr	r1, [r7, #24]
 80071a2:	69fa      	ldr	r2, [r7, #28]
 80071a4:	e841 2300 	strex	r3, r2, [r1]
 80071a8:	617b      	str	r3, [r7, #20]
   return(result);
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1e6      	bne.n	800717e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80071b0:	e007      	b.n	80071c2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	699a      	ldr	r2, [r3, #24]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f042 0208 	orr.w	r2, r2, #8
 80071c0:	619a      	str	r2, [r3, #24]
}
 80071c2:	bf00      	nop
 80071c4:	37a0      	adds	r7, #160	; 0xa0
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	08006a77 	.word	0x08006a77

080071d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80071d8:	bf00      	nop
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80071ec:	bf00      	nop
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007200:	bf00      	nop
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800720c:	b480      	push	{r7}
 800720e:	b085      	sub	sp, #20
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800721a:	2b01      	cmp	r3, #1
 800721c:	d101      	bne.n	8007222 <HAL_UARTEx_DisableFifoMode+0x16>
 800721e:	2302      	movs	r3, #2
 8007220:	e027      	b.n	8007272 <HAL_UARTEx_DisableFifoMode+0x66>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2201      	movs	r2, #1
 8007226:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2224      	movs	r2, #36	; 0x24
 800722e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f022 0201 	bic.w	r2, r2, #1
 8007248:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007250:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2220      	movs	r2, #32
 8007264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3714      	adds	r7, #20
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b084      	sub	sp, #16
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
 8007286:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800728e:	2b01      	cmp	r3, #1
 8007290:	d101      	bne.n	8007296 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007292:	2302      	movs	r3, #2
 8007294:	e02d      	b.n	80072f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2224      	movs	r2, #36	; 0x24
 80072a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f022 0201 	bic.w	r2, r2, #1
 80072bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	683a      	ldr	r2, [r7, #0]
 80072ce:	430a      	orrs	r2, r1
 80072d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 f850 	bl	8007378 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2220      	movs	r2, #32
 80072e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b084      	sub	sp, #16
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
 8007302:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800730a:	2b01      	cmp	r3, #1
 800730c:	d101      	bne.n	8007312 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800730e:	2302      	movs	r3, #2
 8007310:	e02d      	b.n	800736e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2201      	movs	r2, #1
 8007316:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2224      	movs	r2, #36	; 0x24
 800731e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f022 0201 	bic.w	r2, r2, #1
 8007338:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	683a      	ldr	r2, [r7, #0]
 800734a:	430a      	orrs	r2, r1
 800734c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f812 	bl	8007378 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2220      	movs	r2, #32
 8007360:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
	...

08007378 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007384:	2b00      	cmp	r3, #0
 8007386:	d108      	bne.n	800739a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007398:	e031      	b.n	80073fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800739a:	2308      	movs	r3, #8
 800739c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800739e:	2308      	movs	r3, #8
 80073a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	0e5b      	lsrs	r3, r3, #25
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	f003 0307 	and.w	r3, r3, #7
 80073b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	0f5b      	lsrs	r3, r3, #29
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	f003 0307 	and.w	r3, r3, #7
 80073c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073c2:	7bbb      	ldrb	r3, [r7, #14]
 80073c4:	7b3a      	ldrb	r2, [r7, #12]
 80073c6:	4911      	ldr	r1, [pc, #68]	; (800740c <UARTEx_SetNbDataToProcess+0x94>)
 80073c8:	5c8a      	ldrb	r2, [r1, r2]
 80073ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80073ce:	7b3a      	ldrb	r2, [r7, #12]
 80073d0:	490f      	ldr	r1, [pc, #60]	; (8007410 <UARTEx_SetNbDataToProcess+0x98>)
 80073d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80073d8:	b29a      	uxth	r2, r3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073e0:	7bfb      	ldrb	r3, [r7, #15]
 80073e2:	7b7a      	ldrb	r2, [r7, #13]
 80073e4:	4909      	ldr	r1, [pc, #36]	; (800740c <UARTEx_SetNbDataToProcess+0x94>)
 80073e6:	5c8a      	ldrb	r2, [r1, r2]
 80073e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80073ec:	7b7a      	ldrb	r2, [r7, #13]
 80073ee:	4908      	ldr	r1, [pc, #32]	; (8007410 <UARTEx_SetNbDataToProcess+0x98>)
 80073f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80073fe:	bf00      	nop
 8007400:	3714      	adds	r7, #20
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	08007504 	.word	0x08007504
 8007410:	0800750c 	.word	0x0800750c

08007414 <memset>:
 8007414:	4402      	add	r2, r0
 8007416:	4603      	mov	r3, r0
 8007418:	4293      	cmp	r3, r2
 800741a:	d100      	bne.n	800741e <memset+0xa>
 800741c:	4770      	bx	lr
 800741e:	f803 1b01 	strb.w	r1, [r3], #1
 8007422:	e7f9      	b.n	8007418 <memset+0x4>

08007424 <__libc_init_array>:
 8007424:	b570      	push	{r4, r5, r6, lr}
 8007426:	4d0d      	ldr	r5, [pc, #52]	; (800745c <__libc_init_array+0x38>)
 8007428:	4c0d      	ldr	r4, [pc, #52]	; (8007460 <__libc_init_array+0x3c>)
 800742a:	1b64      	subs	r4, r4, r5
 800742c:	10a4      	asrs	r4, r4, #2
 800742e:	2600      	movs	r6, #0
 8007430:	42a6      	cmp	r6, r4
 8007432:	d109      	bne.n	8007448 <__libc_init_array+0x24>
 8007434:	4d0b      	ldr	r5, [pc, #44]	; (8007464 <__libc_init_array+0x40>)
 8007436:	4c0c      	ldr	r4, [pc, #48]	; (8007468 <__libc_init_array+0x44>)
 8007438:	f000 f818 	bl	800746c <_init>
 800743c:	1b64      	subs	r4, r4, r5
 800743e:	10a4      	asrs	r4, r4, #2
 8007440:	2600      	movs	r6, #0
 8007442:	42a6      	cmp	r6, r4
 8007444:	d105      	bne.n	8007452 <__libc_init_array+0x2e>
 8007446:	bd70      	pop	{r4, r5, r6, pc}
 8007448:	f855 3b04 	ldr.w	r3, [r5], #4
 800744c:	4798      	blx	r3
 800744e:	3601      	adds	r6, #1
 8007450:	e7ee      	b.n	8007430 <__libc_init_array+0xc>
 8007452:	f855 3b04 	ldr.w	r3, [r5], #4
 8007456:	4798      	blx	r3
 8007458:	3601      	adds	r6, #1
 800745a:	e7f2      	b.n	8007442 <__libc_init_array+0x1e>
 800745c:	0800751c 	.word	0x0800751c
 8007460:	0800751c 	.word	0x0800751c
 8007464:	0800751c 	.word	0x0800751c
 8007468:	08007520 	.word	0x08007520

0800746c <_init>:
 800746c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746e:	bf00      	nop
 8007470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007472:	bc08      	pop	{r3}
 8007474:	469e      	mov	lr, r3
 8007476:	4770      	bx	lr

08007478 <_fini>:
 8007478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800747a:	bf00      	nop
 800747c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800747e:	bc08      	pop	{r3}
 8007480:	469e      	mov	lr, r3
 8007482:	4770      	bx	lr
