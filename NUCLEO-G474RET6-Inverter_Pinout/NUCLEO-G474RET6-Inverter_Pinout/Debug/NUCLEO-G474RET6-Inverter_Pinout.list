
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c80  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08005e58  08005e58  00015e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ea8  08005ea8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ea8  08005ea8  00015ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005eb0  08005eb0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005eb0  08005eb0  00015eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005eb4  08005eb4  00015eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  2000000c  08005ec4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  08005ec4  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017343  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a64  00000000  00000000  000373c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001400  00000000  00000000  00039e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f9e  00000000  00000000  0003b228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027acd  00000000  00000000  0003c1c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016c14  00000000  00000000  00063c93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010e844  00000000  00000000  0007a8a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000056cc  00000000  00000000  001890ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  0018e7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005e40 	.word	0x08005e40

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005e40 	.word	0x08005e40

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295
 8000238:	f04f 30ff 	movne.w	r0, #4294967295
 800023c:	f000 b970 	b.w	8000520 <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	460d      	mov	r5, r1
 8000260:	4604      	mov	r4, r0
 8000262:	460f      	mov	r7, r1
 8000264:	2b00      	cmp	r3, #0
 8000266:	d14a      	bne.n	80002fe <__udivmoddi4+0xa6>
 8000268:	428a      	cmp	r2, r1
 800026a:	4694      	mov	ip, r2
 800026c:	d965      	bls.n	800033a <__udivmoddi4+0xe2>
 800026e:	fab2 f382 	clz	r3, r2
 8000272:	b143      	cbz	r3, 8000286 <__udivmoddi4+0x2e>
 8000274:	fa02 fc03 	lsl.w	ip, r2, r3
 8000278:	f1c3 0220 	rsb	r2, r3, #32
 800027c:	409f      	lsls	r7, r3
 800027e:	fa20 f202 	lsr.w	r2, r0, r2
 8000282:	4317      	orrs	r7, r2
 8000284:	409c      	lsls	r4, r3
 8000286:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800028a:	fa1f f58c 	uxth.w	r5, ip
 800028e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000292:	0c22      	lsrs	r2, r4, #16
 8000294:	fb0e 7711 	mls	r7, lr, r1, r7
 8000298:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800029c:	fb01 f005 	mul.w	r0, r1, r5
 80002a0:	4290      	cmp	r0, r2
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x62>
 80002a4:	eb1c 0202 	adds.w	r2, ip, r2
 80002a8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002ac:	f080 811c 	bcs.w	80004e8 <__udivmoddi4+0x290>
 80002b0:	4290      	cmp	r0, r2
 80002b2:	f240 8119 	bls.w	80004e8 <__udivmoddi4+0x290>
 80002b6:	3902      	subs	r1, #2
 80002b8:	4462      	add	r2, ip
 80002ba:	1a12      	subs	r2, r2, r0
 80002bc:	b2a4      	uxth	r4, r4
 80002be:	fbb2 f0fe 	udiv	r0, r2, lr
 80002c2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002c6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ca:	fb00 f505 	mul.w	r5, r0, r5
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x90>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002da:	f080 8107 	bcs.w	80004ec <__udivmoddi4+0x294>
 80002de:	42a5      	cmp	r5, r4
 80002e0:	f240 8104 	bls.w	80004ec <__udivmoddi4+0x294>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ec:	1b64      	subs	r4, r4, r5
 80002ee:	2100      	movs	r1, #0
 80002f0:	b11e      	cbz	r6, 80002fa <__udivmoddi4+0xa2>
 80002f2:	40dc      	lsrs	r4, r3
 80002f4:	2300      	movs	r3, #0
 80002f6:	e9c6 4300 	strd	r4, r3, [r6]
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0xbc>
 8000302:	2e00      	cmp	r6, #0
 8000304:	f000 80ed 	beq.w	80004e2 <__udivmoddi4+0x28a>
 8000308:	2100      	movs	r1, #0
 800030a:	e9c6 0500 	strd	r0, r5, [r6]
 800030e:	4608      	mov	r0, r1
 8000310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000314:	fab3 f183 	clz	r1, r3
 8000318:	2900      	cmp	r1, #0
 800031a:	d149      	bne.n	80003b0 <__udivmoddi4+0x158>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d302      	bcc.n	8000326 <__udivmoddi4+0xce>
 8000320:	4282      	cmp	r2, r0
 8000322:	f200 80f8 	bhi.w	8000516 <__udivmoddi4+0x2be>
 8000326:	1a84      	subs	r4, r0, r2
 8000328:	eb65 0203 	sbc.w	r2, r5, r3
 800032c:	2001      	movs	r0, #1
 800032e:	4617      	mov	r7, r2
 8000330:	2e00      	cmp	r6, #0
 8000332:	d0e2      	beq.n	80002fa <__udivmoddi4+0xa2>
 8000334:	e9c6 4700 	strd	r4, r7, [r6]
 8000338:	e7df      	b.n	80002fa <__udivmoddi4+0xa2>
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xe6>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f382 	clz	r3, r2
 8000342:	2b00      	cmp	r3, #0
 8000344:	f040 8090 	bne.w	8000468 <__udivmoddi4+0x210>
 8000348:	1a8a      	subs	r2, r1, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2101      	movs	r1, #1
 8000354:	fbb2 f5f7 	udiv	r5, r2, r7
 8000358:	fb07 2015 	mls	r0, r7, r5, r2
 800035c:	0c22      	lsrs	r2, r4, #16
 800035e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000362:	fb0e f005 	mul.w	r0, lr, r5
 8000366:	4290      	cmp	r0, r2
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x124>
 800036a:	eb1c 0202 	adds.w	r2, ip, r2
 800036e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x122>
 8000374:	4290      	cmp	r0, r2
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2b8>
 800037a:	4645      	mov	r5, r8
 800037c:	1a12      	subs	r2, r2, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb2 f0f7 	udiv	r0, r2, r7
 8000384:	fb07 2210 	mls	r2, r7, r0, r2
 8000388:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x14e>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 32ff 	add.w	r2, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x14c>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2c2>
 80003a4:	4610      	mov	r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ae:	e79f      	b.n	80002f0 <__udivmoddi4+0x98>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa05 f401 	lsl.w	r4, r5, r1
 80003c2:	fa20 f307 	lsr.w	r3, r0, r7
 80003c6:	40fd      	lsrs	r5, r7
 80003c8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003cc:	4323      	orrs	r3, r4
 80003ce:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d2:	fa1f fe8c 	uxth.w	lr, ip
 80003d6:	fb09 5518 	mls	r5, r9, r8, r5
 80003da:	0c1c      	lsrs	r4, r3, #16
 80003dc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003e0:	fb08 f50e 	mul.w	r5, r8, lr
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ea:	fa00 f001 	lsl.w	r0, r0, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b0>
 80003f0:	eb1c 0404 	adds.w	r4, ip, r4
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2b4>
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2b4>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4464      	add	r4, ip
 8000408:	1b64      	subs	r4, r4, r5
 800040a:	b29d      	uxth	r5, r3
 800040c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000410:	fb09 4413 	mls	r4, r9, r3, r4
 8000414:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000418:	fb03 fe0e 	mul.w	lr, r3, lr
 800041c:	45a6      	cmp	lr, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1da>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f103 35ff 	add.w	r5, r3, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2ac>
 800042a:	45a6      	cmp	lr, r4
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2ac>
 800042e:	3b02      	subs	r3, #2
 8000430:	4464      	add	r4, ip
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fba3 9502 	umull	r9, r5, r3, r2
 800043a:	eba4 040e 	sub.w	r4, r4, lr
 800043e:	42ac      	cmp	r4, r5
 8000440:	46c8      	mov	r8, r9
 8000442:	46ae      	mov	lr, r5
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x29c>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x298>
 8000448:	b156      	cbz	r6, 8000460 <__udivmoddi4+0x208>
 800044a:	ebb0 0208 	subs.w	r2, r0, r8
 800044e:	eb64 040e 	sbc.w	r4, r4, lr
 8000452:	fa04 f707 	lsl.w	r7, r4, r7
 8000456:	40ca      	lsrs	r2, r1
 8000458:	40cc      	lsrs	r4, r1
 800045a:	4317      	orrs	r7, r2
 800045c:	e9c6 7400 	strd	r7, r4, [r6]
 8000460:	4618      	mov	r0, r3
 8000462:	2100      	movs	r1, #0
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	f1c3 0120 	rsb	r1, r3, #32
 800046c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000470:	fa20 f201 	lsr.w	r2, r0, r1
 8000474:	fa25 f101 	lsr.w	r1, r5, r1
 8000478:	409d      	lsls	r5, r3
 800047a:	432a      	orrs	r2, r5
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb1 f0f7 	udiv	r0, r1, r7
 8000488:	fb07 1510 	mls	r5, r7, r0, r1
 800048c:	0c11      	lsrs	r1, r2, #16
 800048e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000492:	fb00 f50e 	mul.w	r5, r0, lr
 8000496:	428d      	cmp	r5, r1
 8000498:	fa04 f403 	lsl.w	r4, r4, r3
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x258>
 800049e:	eb1c 0101 	adds.w	r1, ip, r1
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b0>
 80004a8:	428d      	cmp	r5, r1
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b0>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4461      	add	r1, ip
 80004b0:	1b49      	subs	r1, r1, r5
 80004b2:	b292      	uxth	r2, r2
 80004b4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b8:	fb07 1115 	mls	r1, r7, r5, r1
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	fb05 f10e 	mul.w	r1, r5, lr
 80004c4:	4291      	cmp	r1, r2
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x282>
 80004c8:	eb1c 0202 	adds.w	r2, ip, r2
 80004cc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2a8>
 80004d2:	4291      	cmp	r1, r2
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2a8>
 80004d6:	3d02      	subs	r5, #2
 80004d8:	4462      	add	r2, ip
 80004da:	1a52      	subs	r2, r2, r1
 80004dc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0xfc>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xa2>
 80004e8:	4639      	mov	r1, r7
 80004ea:	e6e6      	b.n	80002ba <__udivmoddi4+0x62>
 80004ec:	4610      	mov	r0, r2
 80004ee:	e6fb      	b.n	80002e8 <__udivmoddi4+0x90>
 80004f0:	4548      	cmp	r0, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f0>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004fc:	3b01      	subs	r3, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f0>
 8000500:	4645      	mov	r5, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x282>
 8000504:	462b      	mov	r3, r5
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1da>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x258>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b0>
 8000510:	3d02      	subs	r5, #2
 8000512:	4462      	add	r2, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x124>
 8000516:	4608      	mov	r0, r1
 8000518:	e70a      	b.n	8000330 <__udivmoddi4+0xd8>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x14e>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b590      	push	{r4, r7, lr}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052a:	f000 ff0c 	bl	8001346 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052e:	f000 f825 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000532:	f000 fadb 	bl	8000aec <MX_GPIO_Init>
  MX_ADC2_Init();
 8000536:	f000 f8e3 	bl	8000700 <MX_ADC2_Init>
  MX_ADC1_Init();
 800053a:	f000 f869 	bl	8000610 <MX_ADC1_Init>
  MX_TIM1_Init();
 800053e:	f000 f945 	bl	80007cc <MX_TIM1_Init>
  MX_TIM3_Init();
 8000542:	f000 f9ef 	bl	8000924 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000546:	f000 fa39 	bl	80009bc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800054a:	f000 fa83 	bl	8000a54 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  char message[] = "Hello, World!\r\n";
 800054e:	4b09      	ldr	r3, [pc, #36]	; (8000574 <main+0x50>)
 8000550:	463c      	mov	r4, r7
 8000552:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000554:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8000558:	463b      	mov	r3, r7
 800055a:	4618      	mov	r0, r3
 800055c:	f7ff fe5c 	bl	8000218 <strlen>
 8000560:	4603      	mov	r3, r0
 8000562:	b29a      	uxth	r2, r3
 8000564:	4639      	mov	r1, r7
 8000566:	f04f 33ff 	mov.w	r3, #4294967295
 800056a:	4803      	ldr	r0, [pc, #12]	; (8000578 <main+0x54>)
 800056c:	f004 fdf2 	bl	8005154 <HAL_UART_Transmit>
  {
 8000570:	e7f2      	b.n	8000558 <main+0x34>
 8000572:	bf00      	nop
 8000574:	08005e58 	.word	0x08005e58
 8000578:	20000198 	.word	0x20000198

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	; 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0318 	add.w	r3, r7, #24
 8000586:	2238      	movs	r2, #56	; 0x38
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f005 fc2c 	bl	8005de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800059e:	2000      	movs	r0, #0
 80005a0:	f002 fab0 	bl	8002b04 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a4:	2301      	movs	r3, #1
 80005a6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ac:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	2302      	movs	r3, #2
 80005b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b2:	2303      	movs	r3, #3
 80005b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80005b6:	2306      	movs	r3, #6
 80005b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005ba:	2355      	movs	r3, #85	; 0x55
 80005bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005be:	2302      	movs	r3, #2
 80005c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ca:	f107 0318 	add.w	r3, r7, #24
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 fb4c 	bl	8002c6c <HAL_RCC_OscConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x62>
  {
    Error_Handler();
 80005da:	f000 fb29 	bl	8000c30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005de:	230f      	movs	r3, #15
 80005e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e2:	2303      	movs	r3, #3
 80005e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2104      	movs	r1, #4
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 fe50 	bl	800329c <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000602:	f000 fb15 	bl	8000c30 <Error_Handler>
  }
}
 8000606:	bf00      	nop
 8000608:	3750      	adds	r7, #80	; 0x50
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
	...

08000610 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08c      	sub	sp, #48	; 0x30
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2220      	movs	r2, #32
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f005 fbdd 	bl	8005de8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800062e:	4b32      	ldr	r3, [pc, #200]	; (80006f8 <MX_ADC1_Init+0xe8>)
 8000630:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000634:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000636:	4b30      	ldr	r3, [pc, #192]	; (80006f8 <MX_ADC1_Init+0xe8>)
 8000638:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800063c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800063e:	4b2e      	ldr	r3, [pc, #184]	; (80006f8 <MX_ADC1_Init+0xe8>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000644:	4b2c      	ldr	r3, [pc, #176]	; (80006f8 <MX_ADC1_Init+0xe8>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800064a:	4b2b      	ldr	r3, [pc, #172]	; (80006f8 <MX_ADC1_Init+0xe8>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000650:	4b29      	ldr	r3, [pc, #164]	; (80006f8 <MX_ADC1_Init+0xe8>)
 8000652:	2200      	movs	r2, #0
 8000654:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000656:	4b28      	ldr	r3, [pc, #160]	; (80006f8 <MX_ADC1_Init+0xe8>)
 8000658:	2204      	movs	r2, #4
 800065a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800065c:	4b26      	ldr	r3, [pc, #152]	; (80006f8 <MX_ADC1_Init+0xe8>)
 800065e:	2200      	movs	r2, #0
 8000660:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000662:	4b25      	ldr	r3, [pc, #148]	; (80006f8 <MX_ADC1_Init+0xe8>)
 8000664:	2200      	movs	r2, #0
 8000666:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000668:	4b23      	ldr	r3, [pc, #140]	; (80006f8 <MX_ADC1_Init+0xe8>)
 800066a:	2201      	movs	r2, #1
 800066c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800066e:	4b22      	ldr	r3, [pc, #136]	; (80006f8 <MX_ADC1_Init+0xe8>)
 8000670:	2200      	movs	r2, #0
 8000672:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000676:	4b20      	ldr	r3, [pc, #128]	; (80006f8 <MX_ADC1_Init+0xe8>)
 8000678:	2200      	movs	r2, #0
 800067a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800067c:	4b1e      	ldr	r3, [pc, #120]	; (80006f8 <MX_ADC1_Init+0xe8>)
 800067e:	2200      	movs	r2, #0
 8000680:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000682:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <MX_ADC1_Init+0xe8>)
 8000684:	2200      	movs	r2, #0
 8000686:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800068a:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <MX_ADC1_Init+0xe8>)
 800068c:	2200      	movs	r2, #0
 800068e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000690:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <MX_ADC1_Init+0xe8>)
 8000692:	2200      	movs	r2, #0
 8000694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000698:	4817      	ldr	r0, [pc, #92]	; (80006f8 <MX_ADC1_Init+0xe8>)
 800069a:	f001 f865 	bl	8001768 <HAL_ADC_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80006a4:	f000 fac4 	bl	8000c30 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006a8:	2300      	movs	r3, #0
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b0:	4619      	mov	r1, r3
 80006b2:	4811      	ldr	r0, [pc, #68]	; (80006f8 <MX_ADC1_Init+0xe8>)
 80006b4:	f001 fe80 	bl	80023b8 <HAL_ADCEx_MultiModeConfigChannel>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80006be:	f000 fab7 	bl	8000c30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_ADC1_Init+0xec>)
 80006c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006c6:	2306      	movs	r3, #6
 80006c8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ce:	237f      	movs	r3, #127	; 0x7f
 80006d0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006d2:	2304      	movs	r3, #4
 80006d4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	4619      	mov	r1, r3
 80006de:	4806      	ldr	r0, [pc, #24]	; (80006f8 <MX_ADC1_Init+0xe8>)
 80006e0:	f001 fa04 	bl	8001aec <HAL_ADC_ConfigChannel>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006ea:	f000 faa1 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	3730      	adds	r7, #48	; 0x30
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000028 	.word	0x20000028
 80006fc:	21800100 	.word	0x21800100

08000700 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b088      	sub	sp, #32
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000706:	463b      	mov	r3, r7
 8000708:	2220      	movs	r2, #32
 800070a:	2100      	movs	r1, #0
 800070c:	4618      	mov	r0, r3
 800070e:	f005 fb6b 	bl	8005de8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000712:	4b2b      	ldr	r3, [pc, #172]	; (80007c0 <MX_ADC2_Init+0xc0>)
 8000714:	4a2b      	ldr	r2, [pc, #172]	; (80007c4 <MX_ADC2_Init+0xc4>)
 8000716:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000718:	4b29      	ldr	r3, [pc, #164]	; (80007c0 <MX_ADC2_Init+0xc0>)
 800071a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800071e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000720:	4b27      	ldr	r3, [pc, #156]	; (80007c0 <MX_ADC2_Init+0xc0>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000726:	4b26      	ldr	r3, [pc, #152]	; (80007c0 <MX_ADC2_Init+0xc0>)
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800072c:	4b24      	ldr	r3, [pc, #144]	; (80007c0 <MX_ADC2_Init+0xc0>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000732:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <MX_ADC2_Init+0xc0>)
 8000734:	2200      	movs	r2, #0
 8000736:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000738:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <MX_ADC2_Init+0xc0>)
 800073a:	2204      	movs	r2, #4
 800073c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800073e:	4b20      	ldr	r3, [pc, #128]	; (80007c0 <MX_ADC2_Init+0xc0>)
 8000740:	2200      	movs	r2, #0
 8000742:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000744:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <MX_ADC2_Init+0xc0>)
 8000746:	2200      	movs	r2, #0
 8000748:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800074a:	4b1d      	ldr	r3, [pc, #116]	; (80007c0 <MX_ADC2_Init+0xc0>)
 800074c:	2201      	movs	r2, #1
 800074e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000750:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <MX_ADC2_Init+0xc0>)
 8000752:	2200      	movs	r2, #0
 8000754:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000758:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <MX_ADC2_Init+0xc0>)
 800075a:	2200      	movs	r2, #0
 800075c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800075e:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <MX_ADC2_Init+0xc0>)
 8000760:	2200      	movs	r2, #0
 8000762:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000764:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <MX_ADC2_Init+0xc0>)
 8000766:	2200      	movs	r2, #0
 8000768:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_ADC2_Init+0xc0>)
 800076e:	2200      	movs	r2, #0
 8000770:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000772:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <MX_ADC2_Init+0xc0>)
 8000774:	2200      	movs	r2, #0
 8000776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800077a:	4811      	ldr	r0, [pc, #68]	; (80007c0 <MX_ADC2_Init+0xc0>)
 800077c:	f000 fff4 	bl	8001768 <HAL_ADC_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000786:	f000 fa53 	bl	8000c30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_ADC2_Init+0xc8>)
 800078c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800078e:	2306      	movs	r3, #6
 8000790:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000796:	237f      	movs	r3, #127	; 0x7f
 8000798:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800079a:	2304      	movs	r3, #4
 800079c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007a2:	463b      	mov	r3, r7
 80007a4:	4619      	mov	r1, r3
 80007a6:	4806      	ldr	r0, [pc, #24]	; (80007c0 <MX_ADC2_Init+0xc0>)
 80007a8:	f001 f9a0 	bl	8001aec <HAL_ADC_ConfigChannel>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80007b2:	f000 fa3d 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	3720      	adds	r7, #32
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000094 	.word	0x20000094
 80007c4:	50000100 	.word	0x50000100
 80007c8:	19200040 	.word	0x19200040

080007cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b098      	sub	sp, #96	; 0x60
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]
 80007ee:	615a      	str	r2, [r3, #20]
 80007f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	2234      	movs	r2, #52	; 0x34
 80007f6:	2100      	movs	r1, #0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f005 faf5 	bl	8005de8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007fe:	4b47      	ldr	r3, [pc, #284]	; (800091c <MX_TIM1_Init+0x150>)
 8000800:	4a47      	ldr	r2, [pc, #284]	; (8000920 <MX_TIM1_Init+0x154>)
 8000802:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000804:	4b45      	ldr	r3, [pc, #276]	; (800091c <MX_TIM1_Init+0x150>)
 8000806:	2200      	movs	r2, #0
 8000808:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080a:	4b44      	ldr	r3, [pc, #272]	; (800091c <MX_TIM1_Init+0x150>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000810:	4b42      	ldr	r3, [pc, #264]	; (800091c <MX_TIM1_Init+0x150>)
 8000812:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000816:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000818:	4b40      	ldr	r3, [pc, #256]	; (800091c <MX_TIM1_Init+0x150>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800081e:	4b3f      	ldr	r3, [pc, #252]	; (800091c <MX_TIM1_Init+0x150>)
 8000820:	2200      	movs	r2, #0
 8000822:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000824:	4b3d      	ldr	r3, [pc, #244]	; (800091c <MX_TIM1_Init+0x150>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800082a:	483c      	ldr	r0, [pc, #240]	; (800091c <MX_TIM1_Init+0x150>)
 800082c:	f003 faac 	bl	8003d88 <HAL_TIM_PWM_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000836:	f000 f9fb 	bl	8000c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800083a:	2300      	movs	r3, #0
 800083c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800083e:	2300      	movs	r3, #0
 8000840:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000842:	2300      	movs	r3, #0
 8000844:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000846:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800084a:	4619      	mov	r1, r3
 800084c:	4833      	ldr	r0, [pc, #204]	; (800091c <MX_TIM1_Init+0x150>)
 800084e:	f004 faa3 	bl	8004d98 <HAL_TIMEx_MasterConfigSynchronization>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000858:	f000 f9ea 	bl	8000c30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800085c:	2360      	movs	r3, #96	; 0x60
 800085e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000864:	2300      	movs	r3, #0
 8000866:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000868:	2300      	movs	r3, #0
 800086a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800086c:	2300      	movs	r3, #0
 800086e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000870:	2300      	movs	r3, #0
 8000872:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000874:	2300      	movs	r3, #0
 8000876:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000878:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800087c:	2200      	movs	r2, #0
 800087e:	4619      	mov	r1, r3
 8000880:	4826      	ldr	r0, [pc, #152]	; (800091c <MX_TIM1_Init+0x150>)
 8000882:	f003 fc57 	bl	8004134 <HAL_TIM_PWM_ConfigChannel>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800088c:	f000 f9d0 	bl	8000c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000890:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000894:	2204      	movs	r2, #4
 8000896:	4619      	mov	r1, r3
 8000898:	4820      	ldr	r0, [pc, #128]	; (800091c <MX_TIM1_Init+0x150>)
 800089a:	f003 fc4b 	bl	8004134 <HAL_TIM_PWM_ConfigChannel>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80008a4:	f000 f9c4 	bl	8000c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008ac:	2208      	movs	r2, #8
 80008ae:	4619      	mov	r1, r3
 80008b0:	481a      	ldr	r0, [pc, #104]	; (800091c <MX_TIM1_Init+0x150>)
 80008b2:	f003 fc3f 	bl	8004134 <HAL_TIM_PWM_ConfigChannel>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80008bc:	f000 f9b8 	bl	8000c30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80008de:	2300      	movs	r3, #0
 80008e0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80008f0:	2300      	movs	r3, #0
 80008f2:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	4619      	mov	r1, r3
 80008fc:	4807      	ldr	r0, [pc, #28]	; (800091c <MX_TIM1_Init+0x150>)
 80008fe:	f004 fae1 	bl	8004ec4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000908:	f000 f992 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800090c:	4803      	ldr	r0, [pc, #12]	; (800091c <MX_TIM1_Init+0x150>)
 800090e:	f000 fb35 	bl	8000f7c <HAL_TIM_MspPostInit>

}
 8000912:	bf00      	nop
 8000914:	3760      	adds	r7, #96	; 0x60
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000100 	.word	0x20000100
 8000920:	40012c00 	.word	0x40012c00

08000924 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b088      	sub	sp, #32
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 800092a:	f107 0310 	add.w	r3, r7, #16
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000942:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <MX_TIM3_Init+0x90>)
 8000944:	4a1c      	ldr	r2, [pc, #112]	; (80009b8 <MX_TIM3_Init+0x94>)
 8000946:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000948:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MX_TIM3_Init+0x90>)
 800094a:	2200      	movs	r2, #0
 800094c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094e:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <MX_TIM3_Init+0x90>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000954:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <MX_TIM3_Init+0x90>)
 8000956:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800095a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095c:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <MX_TIM3_Init+0x90>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_TIM3_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000968:	2300      	movs	r3, #0
 800096a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8000978:	f107 0310 	add.w	r3, r7, #16
 800097c:	4619      	mov	r1, r3
 800097e:	480d      	ldr	r0, [pc, #52]	; (80009b4 <MX_TIM3_Init+0x90>)
 8000980:	f004 f95a 	bl	8004c38 <HAL_TIMEx_HallSensor_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800098a:	f000 f951 	bl	8000c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800098e:	2350      	movs	r3, #80	; 0x50
 8000990:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	4619      	mov	r1, r3
 800099a:	4806      	ldr	r0, [pc, #24]	; (80009b4 <MX_TIM3_Init+0x90>)
 800099c:	f004 f9fc 	bl	8004d98 <HAL_TIMEx_MasterConfigSynchronization>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80009a6:	f000 f943 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	3720      	adds	r7, #32
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	2000014c 	.word	0x2000014c
 80009b8:	40000400 	.word	0x40000400

080009bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009c0:	4b22      	ldr	r3, [pc, #136]	; (8000a4c <MX_USART2_UART_Init+0x90>)
 80009c2:	4a23      	ldr	r2, [pc, #140]	; (8000a50 <MX_USART2_UART_Init+0x94>)
 80009c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009c6:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <MX_USART2_UART_Init+0x90>)
 80009c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ce:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <MX_USART2_UART_Init+0x90>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009d4:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <MX_USART2_UART_Init+0x90>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009da:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <MX_USART2_UART_Init+0x90>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009e0:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <MX_USART2_UART_Init+0x90>)
 80009e2:	220c      	movs	r2, #12
 80009e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e6:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <MX_USART2_UART_Init+0x90>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ec:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <MX_USART2_UART_Init+0x90>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009f2:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <MX_USART2_UART_Init+0x90>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <MX_USART2_UART_Init+0x90>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009fe:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <MX_USART2_UART_Init+0x90>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a04:	4811      	ldr	r0, [pc, #68]	; (8000a4c <MX_USART2_UART_Init+0x90>)
 8000a06:	f004 fb55 	bl	80050b4 <HAL_UART_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a10:	f000 f90e 	bl	8000c30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a14:	2100      	movs	r1, #0
 8000a16:	480d      	ldr	r0, [pc, #52]	; (8000a4c <MX_USART2_UART_Init+0x90>)
 8000a18:	f005 f91c 	bl	8005c54 <HAL_UARTEx_SetTxFifoThreshold>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a22:	f000 f905 	bl	8000c30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a26:	2100      	movs	r1, #0
 8000a28:	4808      	ldr	r0, [pc, #32]	; (8000a4c <MX_USART2_UART_Init+0x90>)
 8000a2a:	f005 f951 	bl	8005cd0 <HAL_UARTEx_SetRxFifoThreshold>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a34:	f000 f8fc 	bl	8000c30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <MX_USART2_UART_Init+0x90>)
 8000a3a:	f005 f8d2 	bl	8005be2 <HAL_UARTEx_DisableFifoMode>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a44:	f000 f8f4 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000198 	.word	0x20000198
 8000a50:	40004400 	.word	0x40004400

08000a54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a58:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a5a:	4a23      	ldr	r2, [pc, #140]	; (8000ae8 <MX_USART3_UART_Init+0x94>)
 8000a5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a5e:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a66:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a72:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a78:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7e:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a84:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a8a:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a96:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a9c:	4811      	ldr	r0, [pc, #68]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a9e:	f004 fb09 	bl	80050b4 <HAL_UART_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000aa8:	f000 f8c2 	bl	8000c30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aac:	2100      	movs	r1, #0
 8000aae:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000ab0:	f005 f8d0 	bl	8005c54 <HAL_UARTEx_SetTxFifoThreshold>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000aba:	f000 f8b9 	bl	8000c30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4808      	ldr	r0, [pc, #32]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000ac2:	f005 f905 	bl	8005cd0 <HAL_UARTEx_SetRxFifoThreshold>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000acc:	f000 f8b0 	bl	8000c30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ad0:	4804      	ldr	r0, [pc, #16]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000ad2:	f005 f886 	bl	8005be2 <HAL_UARTEx_DisableFifoMode>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000adc:	f000 f8a8 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000228 	.word	0x20000228
 8000ae8:	40004800 	.word	0x40004800

08000aec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	; 0x28
 8000af0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b02:	4b3f      	ldr	r3, [pc, #252]	; (8000c00 <MX_GPIO_Init+0x114>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b06:	4a3e      	ldr	r2, [pc, #248]	; (8000c00 <MX_GPIO_Init+0x114>)
 8000b08:	f043 0304 	orr.w	r3, r3, #4
 8000b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0e:	4b3c      	ldr	r3, [pc, #240]	; (8000c00 <MX_GPIO_Init+0x114>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b12:	f003 0304 	and.w	r3, r3, #4
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b1a:	4b39      	ldr	r3, [pc, #228]	; (8000c00 <MX_GPIO_Init+0x114>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1e:	4a38      	ldr	r2, [pc, #224]	; (8000c00 <MX_GPIO_Init+0x114>)
 8000b20:	f043 0320 	orr.w	r3, r3, #32
 8000b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b26:	4b36      	ldr	r3, [pc, #216]	; (8000c00 <MX_GPIO_Init+0x114>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2a:	f003 0320 	and.w	r3, r3, #32
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	4b33      	ldr	r3, [pc, #204]	; (8000c00 <MX_GPIO_Init+0x114>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b36:	4a32      	ldr	r2, [pc, #200]	; (8000c00 <MX_GPIO_Init+0x114>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3e:	4b30      	ldr	r3, [pc, #192]	; (8000c00 <MX_GPIO_Init+0x114>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4a:	4b2d      	ldr	r3, [pc, #180]	; (8000c00 <MX_GPIO_Init+0x114>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4e:	4a2c      	ldr	r2, [pc, #176]	; (8000c00 <MX_GPIO_Init+0x114>)
 8000b50:	f043 0302 	orr.w	r3, r3, #2
 8000b54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b56:	4b2a      	ldr	r3, [pc, #168]	; (8000c00 <MX_GPIO_Init+0x114>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5a:	f003 0302 	and.w	r3, r3, #2
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b62:	4b27      	ldr	r3, [pc, #156]	; (8000c00 <MX_GPIO_Init+0x114>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b66:	4a26      	ldr	r2, [pc, #152]	; (8000c00 <MX_GPIO_Init+0x114>)
 8000b68:	f043 0308 	orr.w	r3, r3, #8
 8000b6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6e:	4b24      	ldr	r3, [pc, #144]	; (8000c00 <MX_GPIO_Init+0x114>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b72:	f003 0308 	and.w	r3, r3, #8
 8000b76:	603b      	str	r3, [r7, #0]
 8000b78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2120      	movs	r1, #32
 8000b7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b82:	f001 ff83 	bl	8002a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2104      	movs	r1, #4
 8000b8a:	481e      	ldr	r0, [pc, #120]	; (8000c04 <MX_GPIO_Init+0x118>)
 8000b8c:	f001 ff7e 	bl	8002a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USR_BTN_Pin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000b90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b96:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4818      	ldr	r0, [pc, #96]	; (8000c08 <MX_GPIO_Init+0x11c>)
 8000ba8:	f001 fdee 	bl	8002788 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_LED_Pin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000bac:	2320      	movs	r3, #32
 8000bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc6:	f001 fddf 	bl	8002788 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRST_SafetyUC_Pin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000bca:	2304      	movs	r3, #4
 8000bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4619      	mov	r1, r3
 8000be0:	4808      	ldr	r0, [pc, #32]	; (8000c04 <MX_GPIO_Init+0x118>)
 8000be2:	f001 fdd1 	bl	8002788 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2100      	movs	r1, #0
 8000bea:	2028      	movs	r0, #40	; 0x28
 8000bec:	f001 fda4 	bl	8002738 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bf0:	2028      	movs	r0, #40	; 0x28
 8000bf2:	f001 fdbb 	bl	800276c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bf6:	bf00      	nop
 8000bf8:	3728      	adds	r7, #40	; 0x28
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40021000 	.word	0x40021000
 8000c04:	48000c00 	.word	0x48000c00
 8000c08:	48000800 	.word	0x48000800

08000c0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d101      	bne.n	8000c22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c1e:	f000 fbab 	bl	8001378 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40001000 	.word	0x40001000

08000c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c34:	b672      	cpsid	i
}
 8000c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <Error_Handler+0x8>
	...

08000c3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c42:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <HAL_MspInit+0x44>)
 8000c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c46:	4a0e      	ldr	r2, [pc, #56]	; (8000c80 <HAL_MspInit+0x44>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <HAL_MspInit+0x44>)
 8000c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <HAL_MspInit+0x44>)
 8000c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5e:	4a08      	ldr	r2, [pc, #32]	; (8000c80 <HAL_MspInit+0x44>)
 8000c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c64:	6593      	str	r3, [r2, #88]	; 0x58
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_MspInit+0x44>)
 8000c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c72:	f001 ffeb 	bl	8002c4c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40021000 	.word	0x40021000

08000c84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b0a4      	sub	sp, #144	; 0x90
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ca0:	2254      	movs	r2, #84	; 0x54
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f005 f89f 	bl	8005de8 <memset>
  if(hadc->Instance==ADC1)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cb2:	d174      	bne.n	8000d9e <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000cb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cb8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000cba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000cbe:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f002 fd37 	bl	8003738 <HAL_RCCEx_PeriphCLKConfig>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000cd0:	f7ff ffae 	bl	8000c30 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000cd4:	4b63      	ldr	r3, [pc, #396]	; (8000e64 <HAL_ADC_MspInit+0x1e0>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	4a62      	ldr	r2, [pc, #392]	; (8000e64 <HAL_ADC_MspInit+0x1e0>)
 8000cdc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000cde:	4b61      	ldr	r3, [pc, #388]	; (8000e64 <HAL_ADC_MspInit+0x1e0>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d10b      	bne.n	8000cfe <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ce6:	4b60      	ldr	r3, [pc, #384]	; (8000e68 <HAL_ADC_MspInit+0x1e4>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cea:	4a5f      	ldr	r2, [pc, #380]	; (8000e68 <HAL_ADC_MspInit+0x1e4>)
 8000cec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf2:	4b5d      	ldr	r3, [pc, #372]	; (8000e68 <HAL_ADC_MspInit+0x1e4>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8000cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfe:	4b5a      	ldr	r3, [pc, #360]	; (8000e68 <HAL_ADC_MspInit+0x1e4>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d02:	4a59      	ldr	r2, [pc, #356]	; (8000e68 <HAL_ADC_MspInit+0x1e4>)
 8000d04:	f043 0304 	orr.w	r3, r3, #4
 8000d08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d0a:	4b57      	ldr	r3, [pc, #348]	; (8000e68 <HAL_ADC_MspInit+0x1e4>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0e:	f003 0304 	and.w	r3, r3, #4
 8000d12:	623b      	str	r3, [r7, #32]
 8000d14:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d16:	4b54      	ldr	r3, [pc, #336]	; (8000e68 <HAL_ADC_MspInit+0x1e4>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1a:	4a53      	ldr	r2, [pc, #332]	; (8000e68 <HAL_ADC_MspInit+0x1e4>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d22:	4b51      	ldr	r3, [pc, #324]	; (8000e68 <HAL_ADC_MspInit+0x1e4>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	61fb      	str	r3, [r7, #28]
 8000d2c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2e:	4b4e      	ldr	r3, [pc, #312]	; (8000e68 <HAL_ADC_MspInit+0x1e4>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d32:	4a4d      	ldr	r2, [pc, #308]	; (8000e68 <HAL_ADC_MspInit+0x1e4>)
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d3a:	4b4b      	ldr	r3, [pc, #300]	; (8000e68 <HAL_ADC_MspInit+0x1e4>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	61bb      	str	r3, [r7, #24]
 8000d44:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 8000d46:	2304      	movs	r3, #4
 8000d48:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 8000d56:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4843      	ldr	r0, [pc, #268]	; (8000e6c <HAL_ADC_MspInit+0x1e8>)
 8000d5e:	f001 fd13 	bl	8002788 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 8000d62:	2302      	movs	r3, #2
 8000d64:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d66:	2303      	movs	r3, #3
 8000d68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8000d72:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d76:	4619      	mov	r1, r3
 8000d78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7c:	f001 fd04 	bl	8002788 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d80:	2303      	movs	r3, #3
 8000d82:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d84:	2303      	movs	r3, #3
 8000d86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d90:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d94:	4619      	mov	r1, r3
 8000d96:	4836      	ldr	r0, [pc, #216]	; (8000e70 <HAL_ADC_MspInit+0x1ec>)
 8000d98:	f001 fcf6 	bl	8002788 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000d9c:	e05e      	b.n	8000e5c <HAL_ADC_MspInit+0x1d8>
  else if(hadc->Instance==ADC2)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a34      	ldr	r2, [pc, #208]	; (8000e74 <HAL_ADC_MspInit+0x1f0>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d159      	bne.n	8000e5c <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000da8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dac:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000dae:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000db2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000db8:	4618      	mov	r0, r3
 8000dba:	f002 fcbd 	bl	8003738 <HAL_RCCEx_PeriphCLKConfig>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <HAL_ADC_MspInit+0x144>
      Error_Handler();
 8000dc4:	f7ff ff34 	bl	8000c30 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000dc8:	4b26      	ldr	r3, [pc, #152]	; (8000e64 <HAL_ADC_MspInit+0x1e0>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	4a25      	ldr	r2, [pc, #148]	; (8000e64 <HAL_ADC_MspInit+0x1e0>)
 8000dd0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000dd2:	4b24      	ldr	r3, [pc, #144]	; (8000e64 <HAL_ADC_MspInit+0x1e0>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d10b      	bne.n	8000df2 <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000dda:	4b23      	ldr	r3, [pc, #140]	; (8000e68 <HAL_ADC_MspInit+0x1e4>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	4a22      	ldr	r2, [pc, #136]	; (8000e68 <HAL_ADC_MspInit+0x1e4>)
 8000de0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de6:	4b20      	ldr	r3, [pc, #128]	; (8000e68 <HAL_ADC_MspInit+0x1e4>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df2:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <HAL_ADC_MspInit+0x1e4>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df6:	4a1c      	ldr	r2, [pc, #112]	; (8000e68 <HAL_ADC_MspInit+0x1e4>)
 8000df8:	f043 0304 	orr.w	r3, r3, #4
 8000dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfe:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <HAL_ADC_MspInit+0x1e4>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	f003 0304 	and.w	r3, r3, #4
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <HAL_ADC_MspInit+0x1e4>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0e:	4a16      	ldr	r2, [pc, #88]	; (8000e68 <HAL_ADC_MspInit+0x1e4>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e16:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <HAL_ADC_MspInit+0x1e4>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 8000e22:	230b      	movs	r3, #11
 8000e24:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e26:	2303      	movs	r3, #3
 8000e28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e32:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e36:	4619      	mov	r1, r3
 8000e38:	480c      	ldr	r0, [pc, #48]	; (8000e6c <HAL_ADC_MspInit+0x1e8>)
 8000e3a:	f001 fca5 	bl	8002788 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e42:	2303      	movs	r3, #3
 8000e44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8000e4e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e52:	4619      	mov	r1, r3
 8000e54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e58:	f001 fc96 	bl	8002788 <HAL_GPIO_Init>
}
 8000e5c:	bf00      	nop
 8000e5e:	3790      	adds	r7, #144	; 0x90
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	200002b8 	.word	0x200002b8
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	48000800 	.word	0x48000800
 8000e70:	48000400 	.word	0x48000400
 8000e74:	50000100 	.word	0x50000100

08000e78 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <HAL_TIM_PWM_MspInit+0x38>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d10b      	bne.n	8000ea2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e8e:	4a09      	ldr	r2, [pc, #36]	; (8000eb4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e94:	6613      	str	r3, [r2, #96]	; 0x60
 8000e96:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ea2:	bf00      	nop
 8000ea4:	3714      	adds	r7, #20
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	40012c00 	.word	0x40012c00
 8000eb4:	40021000 	.word	0x40021000

08000eb8 <HAL_TIMEx_HallSensor_MspInit>:
* This function configures the hardware resources used in this example
* @param htimex_hallsensor: TIMEx_HallSensor handle pointer
* @retval None
*/
void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* htimex_hallsensor)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	; 0x28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  if(htimex_hallsensor->Instance==TIM3)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a26      	ldr	r2, [pc, #152]	; (8000f70 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d145      	bne.n	8000f66 <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000eda:	4b26      	ldr	r3, [pc, #152]	; (8000f74 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8000edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ede:	4a25      	ldr	r2, [pc, #148]	; (8000f74 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8000ee0:	f043 0302 	orr.w	r3, r3, #2
 8000ee4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ee6:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8000ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	4a1f      	ldr	r2, [pc, #124]	; (8000f74 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efe:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0a:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	4a19      	ldr	r2, [pc, #100]	; (8000f74 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8000f10:	f043 0304 	orr.w	r3, r3, #4
 8000f14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f16:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	f003 0304 	and.w	r3, r3, #4
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000f22:	2350      	movs	r3, #80	; 0x50
 8000f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f32:	2302      	movs	r3, #2
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f40:	f001 fc22 	bl	8002788 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2300      	movs	r3, #0
 8000f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f56:	2302      	movs	r3, #2
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4805      	ldr	r0, [pc, #20]	; (8000f78 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 8000f62:	f001 fc11 	bl	8002788 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f66:	bf00      	nop
 8000f68:	3728      	adds	r7, #40	; 0x28
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40000400 	.word	0x40000400
 8000f74:	40021000 	.word	0x40021000
 8000f78:	48000800 	.word	0x48000800

08000f7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	; 0x28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a29      	ldr	r2, [pc, #164]	; (8001040 <HAL_TIM_MspPostInit+0xc4>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d14b      	bne.n	8001036 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9e:	4b29      	ldr	r3, [pc, #164]	; (8001044 <HAL_TIM_MspPostInit+0xc8>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	4a28      	ldr	r2, [pc, #160]	; (8001044 <HAL_TIM_MspPostInit+0xc8>)
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000faa:	4b26      	ldr	r3, [pc, #152]	; (8001044 <HAL_TIM_MspPostInit+0xc8>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb6:	4b23      	ldr	r3, [pc, #140]	; (8001044 <HAL_TIM_MspPostInit+0xc8>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	4a22      	ldr	r2, [pc, #136]	; (8001044 <HAL_TIM_MspPostInit+0xc8>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc2:	4b20      	ldr	r3, [pc, #128]	; (8001044 <HAL_TIM_MspPostInit+0xc8>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8000fce:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000fe0:	2306      	movs	r3, #6
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4817      	ldr	r0, [pc, #92]	; (8001048 <HAL_TIM_MspPostInit+0xcc>)
 8000fec:	f001 fbcc 	bl	8002788 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8000ff0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001002:	2304      	movs	r3, #4
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4619      	mov	r1, r3
 800100c:	480e      	ldr	r0, [pc, #56]	; (8001048 <HAL_TIM_MspPostInit+0xcc>)
 800100e:	f001 fbbb 	bl	8002788 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 8001012:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001024:	2306      	movs	r3, #6
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	4619      	mov	r1, r3
 800102e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001032:	f001 fba9 	bl	8002788 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001036:	bf00      	nop
 8001038:	3728      	adds	r7, #40	; 0x28
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40012c00 	.word	0x40012c00
 8001044:	40021000 	.word	0x40021000
 8001048:	48000400 	.word	0x48000400

0800104c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b0a0      	sub	sp, #128	; 0x80
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001064:	f107 0318 	add.w	r3, r7, #24
 8001068:	2254      	movs	r2, #84	; 0x54
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f004 febb 	bl	8005de8 <memset>
  if(huart->Instance==USART2)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a3d      	ldr	r2, [pc, #244]	; (800116c <HAL_UART_MspInit+0x120>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d137      	bne.n	80010ec <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800107c:	2302      	movs	r3, #2
 800107e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001080:	2300      	movs	r3, #0
 8001082:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001084:	f107 0318 	add.w	r3, r7, #24
 8001088:	4618      	mov	r0, r3
 800108a:	f002 fb55 	bl	8003738 <HAL_RCCEx_PeriphCLKConfig>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001094:	f7ff fdcc 	bl	8000c30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001098:	4b35      	ldr	r3, [pc, #212]	; (8001170 <HAL_UART_MspInit+0x124>)
 800109a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109c:	4a34      	ldr	r2, [pc, #208]	; (8001170 <HAL_UART_MspInit+0x124>)
 800109e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a2:	6593      	str	r3, [r2, #88]	; 0x58
 80010a4:	4b32      	ldr	r3, [pc, #200]	; (8001170 <HAL_UART_MspInit+0x124>)
 80010a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b0:	4b2f      	ldr	r3, [pc, #188]	; (8001170 <HAL_UART_MspInit+0x124>)
 80010b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b4:	4a2e      	ldr	r2, [pc, #184]	; (8001170 <HAL_UART_MspInit+0x124>)
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010bc:	4b2c      	ldr	r3, [pc, #176]	; (8001170 <HAL_UART_MspInit+0x124>)
 80010be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010c8:	230c      	movs	r3, #12
 80010ca:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010d8:	2307      	movs	r3, #7
 80010da:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010e0:	4619      	mov	r1, r3
 80010e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e6:	f001 fb4f 	bl	8002788 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010ea:	e03b      	b.n	8001164 <HAL_UART_MspInit+0x118>
  else if(huart->Instance==USART3)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a20      	ldr	r2, [pc, #128]	; (8001174 <HAL_UART_MspInit+0x128>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d136      	bne.n	8001164 <HAL_UART_MspInit+0x118>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010f6:	2304      	movs	r3, #4
 80010f8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010fe:	f107 0318 	add.w	r3, r7, #24
 8001102:	4618      	mov	r0, r3
 8001104:	f002 fb18 	bl	8003738 <HAL_RCCEx_PeriphCLKConfig>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 800110e:	f7ff fd8f 	bl	8000c30 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001112:	4b17      	ldr	r3, [pc, #92]	; (8001170 <HAL_UART_MspInit+0x124>)
 8001114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001116:	4a16      	ldr	r2, [pc, #88]	; (8001170 <HAL_UART_MspInit+0x124>)
 8001118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800111c:	6593      	str	r3, [r2, #88]	; 0x58
 800111e:	4b14      	ldr	r3, [pc, #80]	; (8001170 <HAL_UART_MspInit+0x124>)
 8001120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001122:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <HAL_UART_MspInit+0x124>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	4a10      	ldr	r2, [pc, #64]	; (8001170 <HAL_UART_MspInit+0x124>)
 8001130:	f043 0304 	orr.w	r3, r3, #4
 8001134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <HAL_UART_MspInit+0x124>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	f003 0304 	and.w	r3, r3, #4
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001142:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001146:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	2302      	movs	r3, #2
 800114a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001154:	2307      	movs	r3, #7
 8001156:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001158:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800115c:	4619      	mov	r1, r3
 800115e:	4806      	ldr	r0, [pc, #24]	; (8001178 <HAL_UART_MspInit+0x12c>)
 8001160:	f001 fb12 	bl	8002788 <HAL_GPIO_Init>
}
 8001164:	bf00      	nop
 8001166:	3780      	adds	r7, #128	; 0x80
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40004400 	.word	0x40004400
 8001170:	40021000 	.word	0x40021000
 8001174:	40004800 	.word	0x40004800
 8001178:	48000800 	.word	0x48000800

0800117c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08c      	sub	sp, #48	; 0x30
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800118c:	4b2c      	ldr	r3, [pc, #176]	; (8001240 <HAL_InitTick+0xc4>)
 800118e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001190:	4a2b      	ldr	r2, [pc, #172]	; (8001240 <HAL_InitTick+0xc4>)
 8001192:	f043 0310 	orr.w	r3, r3, #16
 8001196:	6593      	str	r3, [r2, #88]	; 0x58
 8001198:	4b29      	ldr	r3, [pc, #164]	; (8001240 <HAL_InitTick+0xc4>)
 800119a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119c:	f003 0310 	and.w	r3, r3, #16
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011a4:	f107 020c 	add.w	r2, r7, #12
 80011a8:	f107 0310 	add.w	r3, r7, #16
 80011ac:	4611      	mov	r1, r2
 80011ae:	4618      	mov	r0, r3
 80011b0:	f002 fa4a 	bl	8003648 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011b4:	f002 fa1c 	bl	80035f0 <HAL_RCC_GetPCLK1Freq>
 80011b8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011bc:	4a21      	ldr	r2, [pc, #132]	; (8001244 <HAL_InitTick+0xc8>)
 80011be:	fba2 2303 	umull	r2, r3, r2, r3
 80011c2:	0c9b      	lsrs	r3, r3, #18
 80011c4:	3b01      	subs	r3, #1
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80011c8:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <HAL_InitTick+0xcc>)
 80011ca:	4a20      	ldr	r2, [pc, #128]	; (800124c <HAL_InitTick+0xd0>)
 80011cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80011ce:	4b1e      	ldr	r3, [pc, #120]	; (8001248 <HAL_InitTick+0xcc>)
 80011d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011d4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80011d6:	4a1c      	ldr	r2, [pc, #112]	; (8001248 <HAL_InitTick+0xcc>)
 80011d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011da:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80011dc:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <HAL_InitTick+0xcc>)
 80011de:	2200      	movs	r2, #0
 80011e0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e2:	4b19      	ldr	r3, [pc, #100]	; (8001248 <HAL_InitTick+0xcc>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80011e8:	4817      	ldr	r0, [pc, #92]	; (8001248 <HAL_InitTick+0xcc>)
 80011ea:	f002 fcf3 	bl	8003bd4 <HAL_TIM_Base_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80011f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d11b      	bne.n	8001234 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80011fc:	4812      	ldr	r0, [pc, #72]	; (8001248 <HAL_InitTick+0xcc>)
 80011fe:	f002 fd4b 	bl	8003c98 <HAL_TIM_Base_Start_IT>
 8001202:	4603      	mov	r3, r0
 8001204:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001208:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800120c:	2b00      	cmp	r3, #0
 800120e:	d111      	bne.n	8001234 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001210:	2036      	movs	r0, #54	; 0x36
 8001212:	f001 faab 	bl	800276c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b0f      	cmp	r3, #15
 800121a:	d808      	bhi.n	800122e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800121c:	2200      	movs	r2, #0
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	2036      	movs	r0, #54	; 0x36
 8001222:	f001 fa89 	bl	8002738 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001226:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <HAL_InitTick+0xd4>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	e002      	b.n	8001234 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001234:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001238:	4618      	mov	r0, r3
 800123a:	3730      	adds	r7, #48	; 0x30
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40021000 	.word	0x40021000
 8001244:	431bde83 	.word	0x431bde83
 8001248:	200002bc 	.word	0x200002bc
 800124c:	40001000 	.word	0x40001000
 8001250:	20000004 	.word	0x20000004

08001254 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <NMI_Handler+0x4>

0800125a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125e:	e7fe      	b.n	800125e <HardFault_Handler+0x4>

08001260 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <MemManage_Handler+0x4>

08001266 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800126a:	e7fe      	b.n	800126a <BusFault_Handler+0x4>

0800126c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001270:	e7fe      	b.n	8001270 <UsageFault_Handler+0x4>

08001272 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 80012ae:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012b2:	f001 fc03 	bl	8002abc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012c0:	4802      	ldr	r0, [pc, #8]	; (80012cc <TIM6_DAC_IRQHandler+0x10>)
 80012c2:	f002 fdb8 	bl	8003e36 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200002bc 	.word	0x200002bc

080012d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <SystemInit+0x20>)
 80012d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012da:	4a05      	ldr	r2, [pc, #20]	; (80012f0 <SystemInit+0x20>)
 80012dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012f4:	480d      	ldr	r0, [pc, #52]	; (800132c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012f8:	480d      	ldr	r0, [pc, #52]	; (8001330 <LoopForever+0x6>)
  ldr r1, =_edata
 80012fa:	490e      	ldr	r1, [pc, #56]	; (8001334 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012fc:	4a0e      	ldr	r2, [pc, #56]	; (8001338 <LoopForever+0xe>)
  movs r3, #0
 80012fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001300:	e002      	b.n	8001308 <LoopCopyDataInit>

08001302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001306:	3304      	adds	r3, #4

08001308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800130a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800130c:	d3f9      	bcc.n	8001302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800130e:	4a0b      	ldr	r2, [pc, #44]	; (800133c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001310:	4c0b      	ldr	r4, [pc, #44]	; (8001340 <LoopForever+0x16>)
  movs r3, #0
 8001312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001314:	e001      	b.n	800131a <LoopFillZerobss>

08001316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001318:	3204      	adds	r2, #4

0800131a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800131a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800131c:	d3fb      	bcc.n	8001316 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800131e:	f7ff ffd7 	bl	80012d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001322:	f004 fd69 	bl	8005df8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001326:	f7ff f8fd 	bl	8000524 <main>

0800132a <LoopForever>:

LoopForever:
    b LoopForever
 800132a:	e7fe      	b.n	800132a <LoopForever>
  ldr   r0, =_estack
 800132c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001334:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001338:	08005eb8 	.word	0x08005eb8
  ldr r2, =_sbss
 800133c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001340:	2000030c 	.word	0x2000030c

08001344 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001344:	e7fe      	b.n	8001344 <ADC1_2_IRQHandler>

08001346 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800134c:	2300      	movs	r3, #0
 800134e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001350:	2003      	movs	r0, #3
 8001352:	f001 f9e6 	bl	8002722 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001356:	200f      	movs	r0, #15
 8001358:	f7ff ff10 	bl	800117c <HAL_InitTick>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d002      	beq.n	8001368 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	71fb      	strb	r3, [r7, #7]
 8001366:	e001      	b.n	800136c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001368:	f7ff fc68 	bl	8000c3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800136c:	79fb      	ldrb	r3, [r7, #7]

}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <HAL_IncTick+0x1c>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <HAL_IncTick+0x20>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4413      	add	r3, r2
 8001386:	4a03      	ldr	r2, [pc, #12]	; (8001394 <HAL_IncTick+0x1c>)
 8001388:	6013      	str	r3, [r2, #0]
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	20000308 	.word	0x20000308
 8001398:	20000008 	.word	0x20000008

0800139c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return uwTick;
 80013a0:	4b03      	ldr	r3, [pc, #12]	; (80013b0 <HAL_GetTick+0x14>)
 80013a2:	681b      	ldr	r3, [r3, #0]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20000308 	.word	0x20000308

080013b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	431a      	orrs	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	609a      	str	r2, [r3, #8]
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
 80013e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	431a      	orrs	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	609a      	str	r2, [r3, #8]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001410:	4618      	mov	r0, r3
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800141c:	b480      	push	{r7}
 800141e:	b087      	sub	sp, #28
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
 8001428:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	3360      	adds	r3, #96	; 0x60
 800142e:	461a      	mov	r2, r3
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <LL_ADC_SetOffset+0x44>)
 800143e:	4013      	ands	r3, r2
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001446:	683a      	ldr	r2, [r7, #0]
 8001448:	430a      	orrs	r2, r1
 800144a:	4313      	orrs	r3, r2
 800144c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001454:	bf00      	nop
 8001456:	371c      	adds	r7, #28
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	03fff000 	.word	0x03fff000

08001464 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3360      	adds	r3, #96	; 0x60
 8001472:	461a      	mov	r2, r3
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001484:	4618      	mov	r0, r3
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001490:	b480      	push	{r7}
 8001492:	b087      	sub	sp, #28
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	3360      	adds	r3, #96	; 0x60
 80014a0:	461a      	mov	r2, r3
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	431a      	orrs	r2, r3
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80014ba:	bf00      	nop
 80014bc:	371c      	adds	r7, #28
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b087      	sub	sp, #28
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	60f8      	str	r0, [r7, #12]
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	3360      	adds	r3, #96	; 0x60
 80014d6:	461a      	mov	r2, r3
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	431a      	orrs	r2, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80014f0:	bf00      	nop
 80014f2:	371c      	adds	r7, #28
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b087      	sub	sp, #28
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	3360      	adds	r3, #96	; 0x60
 800150c:	461a      	mov	r2, r3
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	431a      	orrs	r2, r3
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001526:	bf00      	nop
 8001528:	371c      	adds	r7, #28
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	695b      	ldr	r3, [r3, #20]
 8001540:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	431a      	orrs	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	615a      	str	r2, [r3, #20]
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001558:	b480      	push	{r7}
 800155a:	b087      	sub	sp, #28
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	3330      	adds	r3, #48	; 0x30
 8001568:	461a      	mov	r2, r3
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	f003 030c 	and.w	r3, r3, #12
 8001574:	4413      	add	r3, r2
 8001576:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	f003 031f 	and.w	r3, r3, #31
 8001582:	211f      	movs	r1, #31
 8001584:	fa01 f303 	lsl.w	r3, r1, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	401a      	ands	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	0e9b      	lsrs	r3, r3, #26
 8001590:	f003 011f 	and.w	r1, r3, #31
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	f003 031f 	and.w	r3, r3, #31
 800159a:	fa01 f303 	lsl.w	r3, r1, r3
 800159e:	431a      	orrs	r2, r3
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80015a4:	bf00      	nop
 80015a6:	371c      	adds	r7, #28
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b087      	sub	sp, #28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	3314      	adds	r3, #20
 80015c0:	461a      	mov	r2, r3
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	0e5b      	lsrs	r3, r3, #25
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	4413      	add	r3, r2
 80015ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	0d1b      	lsrs	r3, r3, #20
 80015d8:	f003 031f 	and.w	r3, r3, #31
 80015dc:	2107      	movs	r1, #7
 80015de:	fa01 f303 	lsl.w	r3, r1, r3
 80015e2:	43db      	mvns	r3, r3
 80015e4:	401a      	ands	r2, r3
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	0d1b      	lsrs	r3, r3, #20
 80015ea:	f003 031f 	and.w	r3, r3, #31
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	fa01 f303 	lsl.w	r3, r1, r3
 80015f4:	431a      	orrs	r2, r3
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80015fa:	bf00      	nop
 80015fc:	371c      	adds	r7, #28
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
	...

08001608 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a0f      	ldr	r2, [pc, #60]	; (8001654 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d10a      	bne.n	8001632 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001628:	431a      	orrs	r2, r3
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001630:	e00a      	b.n	8001648 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800163e:	43db      	mvns	r3, r3
 8001640:	401a      	ands	r2, r3
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001648:	bf00      	nop
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	407f0000 	.word	0x407f0000

08001658 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001668:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	6093      	str	r3, [r2, #8]
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800168c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001690:	d101      	bne.n	8001696 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001692:	2301      	movs	r3, #1
 8001694:	e000      	b.n	8001698 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80016b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80016e0:	d101      	bne.n	80016e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80016e2:	2301      	movs	r3, #1
 80016e4:	e000      	b.n	80016e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	2b01      	cmp	r3, #1
 8001706:	d101      	bne.n	800170c <LL_ADC_IsEnabled+0x18>
 8001708:	2301      	movs	r3, #1
 800170a:	e000      	b.n	800170e <LL_ADC_IsEnabled+0x1a>
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 0304 	and.w	r3, r3, #4
 800172a:	2b04      	cmp	r3, #4
 800172c:	d101      	bne.n	8001732 <LL_ADC_REG_IsConversionOngoing+0x18>
 800172e:	2301      	movs	r3, #1
 8001730:	e000      	b.n	8001734 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f003 0308 	and.w	r3, r3, #8
 8001750:	2b08      	cmp	r3, #8
 8001752:	d101      	bne.n	8001758 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001754:	2301      	movs	r3, #1
 8001756:	e000      	b.n	800175a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
	...

08001768 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001768:	b590      	push	{r4, r7, lr}
 800176a:	b089      	sub	sp, #36	; 0x24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001770:	2300      	movs	r3, #0
 8001772:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001774:	2300      	movs	r3, #0
 8001776:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e1af      	b.n	8001ae2 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800178c:	2b00      	cmp	r3, #0
 800178e:	d109      	bne.n	80017a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff fa77 	bl	8000c84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff67 	bl	800167c <LL_ADC_IsDeepPowerDownEnabled>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d004      	beq.n	80017be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff4d 	bl	8001658 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff ff82 	bl	80016cc <LL_ADC_IsInternalRegulatorEnabled>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d115      	bne.n	80017fa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff ff66 	bl	80016a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017d8:	4b9f      	ldr	r3, [pc, #636]	; (8001a58 <HAL_ADC_Init+0x2f0>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	099b      	lsrs	r3, r3, #6
 80017de:	4a9f      	ldr	r2, [pc, #636]	; (8001a5c <HAL_ADC_Init+0x2f4>)
 80017e0:	fba2 2303 	umull	r2, r3, r2, r3
 80017e4:	099b      	lsrs	r3, r3, #6
 80017e6:	3301      	adds	r3, #1
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80017ec:	e002      	b.n	80017f4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	3b01      	subs	r3, #1
 80017f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f9      	bne.n	80017ee <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff ff64 	bl	80016cc <LL_ADC_IsInternalRegulatorEnabled>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10d      	bne.n	8001826 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180e:	f043 0210 	orr.w	r2, r3, #16
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800181a:	f043 0201 	orr.w	r2, r3, #1
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff ff75 	bl	800171a <LL_ADC_REG_IsConversionOngoing>
 8001830:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001836:	f003 0310 	and.w	r3, r3, #16
 800183a:	2b00      	cmp	r3, #0
 800183c:	f040 8148 	bne.w	8001ad0 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	2b00      	cmp	r3, #0
 8001844:	f040 8144 	bne.w	8001ad0 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800184c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001850:	f043 0202 	orr.w	r2, r3, #2
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff49 	bl	80016f4 <LL_ADC_IsEnabled>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d141      	bne.n	80018ec <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001870:	d004      	beq.n	800187c <HAL_ADC_Init+0x114>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a7a      	ldr	r2, [pc, #488]	; (8001a60 <HAL_ADC_Init+0x2f8>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d10f      	bne.n	800189c <HAL_ADC_Init+0x134>
 800187c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001880:	f7ff ff38 	bl	80016f4 <LL_ADC_IsEnabled>
 8001884:	4604      	mov	r4, r0
 8001886:	4876      	ldr	r0, [pc, #472]	; (8001a60 <HAL_ADC_Init+0x2f8>)
 8001888:	f7ff ff34 	bl	80016f4 <LL_ADC_IsEnabled>
 800188c:	4603      	mov	r3, r0
 800188e:	4323      	orrs	r3, r4
 8001890:	2b00      	cmp	r3, #0
 8001892:	bf0c      	ite	eq
 8001894:	2301      	moveq	r3, #1
 8001896:	2300      	movne	r3, #0
 8001898:	b2db      	uxtb	r3, r3
 800189a:	e012      	b.n	80018c2 <HAL_ADC_Init+0x15a>
 800189c:	4871      	ldr	r0, [pc, #452]	; (8001a64 <HAL_ADC_Init+0x2fc>)
 800189e:	f7ff ff29 	bl	80016f4 <LL_ADC_IsEnabled>
 80018a2:	4604      	mov	r4, r0
 80018a4:	4870      	ldr	r0, [pc, #448]	; (8001a68 <HAL_ADC_Init+0x300>)
 80018a6:	f7ff ff25 	bl	80016f4 <LL_ADC_IsEnabled>
 80018aa:	4603      	mov	r3, r0
 80018ac:	431c      	orrs	r4, r3
 80018ae:	486f      	ldr	r0, [pc, #444]	; (8001a6c <HAL_ADC_Init+0x304>)
 80018b0:	f7ff ff20 	bl	80016f4 <LL_ADC_IsEnabled>
 80018b4:	4603      	mov	r3, r0
 80018b6:	4323      	orrs	r3, r4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	bf0c      	ite	eq
 80018bc:	2301      	moveq	r3, #1
 80018be:	2300      	movne	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d012      	beq.n	80018ec <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018ce:	d004      	beq.n	80018da <HAL_ADC_Init+0x172>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a62      	ldr	r2, [pc, #392]	; (8001a60 <HAL_ADC_Init+0x2f8>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d101      	bne.n	80018de <HAL_ADC_Init+0x176>
 80018da:	4a65      	ldr	r2, [pc, #404]	; (8001a70 <HAL_ADC_Init+0x308>)
 80018dc:	e000      	b.n	80018e0 <HAL_ADC_Init+0x178>
 80018de:	4a65      	ldr	r2, [pc, #404]	; (8001a74 <HAL_ADC_Init+0x30c>)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	4619      	mov	r1, r3
 80018e6:	4610      	mov	r0, r2
 80018e8:	f7ff fd64 	bl	80013b4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	7f5b      	ldrb	r3, [r3, #29]
 80018f0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018f6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80018fc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001902:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800190a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001916:	2b01      	cmp	r3, #1
 8001918:	d106      	bne.n	8001928 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191e:	3b01      	subs	r3, #1
 8001920:	045b      	lsls	r3, r3, #17
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4313      	orrs	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192c:	2b00      	cmp	r3, #0
 800192e:	d009      	beq.n	8001944 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001934:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4313      	orrs	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	4b4b      	ldr	r3, [pc, #300]	; (8001a78 <HAL_ADC_Init+0x310>)
 800194c:	4013      	ands	r3, r2
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	6812      	ldr	r2, [r2, #0]
 8001952:	69b9      	ldr	r1, [r7, #24]
 8001954:	430b      	orrs	r3, r1
 8001956:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fed1 	bl	800171a <LL_ADC_REG_IsConversionOngoing>
 8001978:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff fede 	bl	8001740 <LL_ADC_INJ_IsConversionOngoing>
 8001984:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d17f      	bne.n	8001a8c <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d17c      	bne.n	8001a8c <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001996:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800199e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019ae:	f023 0302 	bic.w	r3, r3, #2
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	69b9      	ldr	r1, [r7, #24]
 80019b8:	430b      	orrs	r3, r1
 80019ba:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d017      	beq.n	80019f4 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	691a      	ldr	r2, [r3, #16]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80019d2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80019dc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80019e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	6911      	ldr	r1, [r2, #16]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	430b      	orrs	r3, r1
 80019ee:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80019f2:	e013      	b.n	8001a1c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	691a      	ldr	r2, [r3, #16]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a02:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	6812      	ldr	r2, [r2, #0]
 8001a10:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001a14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a18:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d12a      	bne.n	8001a7c <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001a30:	f023 0304 	bic.w	r3, r3, #4
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a3c:	4311      	orrs	r1, r2
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001a42:	4311      	orrs	r1, r2
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f042 0201 	orr.w	r2, r2, #1
 8001a54:	611a      	str	r2, [r3, #16]
 8001a56:	e019      	b.n	8001a8c <HAL_ADC_Init+0x324>
 8001a58:	20000000 	.word	0x20000000
 8001a5c:	053e2d63 	.word	0x053e2d63
 8001a60:	50000100 	.word	0x50000100
 8001a64:	50000400 	.word	0x50000400
 8001a68:	50000500 	.word	0x50000500
 8001a6c:	50000600 	.word	0x50000600
 8001a70:	50000300 	.word	0x50000300
 8001a74:	50000700 	.word	0x50000700
 8001a78:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	691a      	ldr	r2, [r3, #16]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 0201 	bic.w	r2, r2, #1
 8001a8a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d10c      	bne.n	8001aae <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f023 010f 	bic.w	r1, r3, #15
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	1e5a      	subs	r2, r3, #1
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	631a      	str	r2, [r3, #48]	; 0x30
 8001aac:	e007      	b.n	8001abe <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 020f 	bic.w	r2, r2, #15
 8001abc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac2:	f023 0303 	bic.w	r3, r3, #3
 8001ac6:	f043 0201 	orr.w	r2, r3, #1
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ace:	e007      	b.n	8001ae0 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad4:	f043 0210 	orr.w	r2, r3, #16
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ae0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3724      	adds	r7, #36	; 0x24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd90      	pop	{r4, r7, pc}
 8001aea:	bf00      	nop

08001aec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b0b6      	sub	sp, #216	; 0xd8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d102      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x24>
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	f000 bc13 	b.w	8002336 <HAL_ADC_ConfigChannel+0x84a>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fdfc 	bl	800171a <LL_ADC_REG_IsConversionOngoing>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f040 83f3 	bne.w	8002310 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6818      	ldr	r0, [r3, #0]
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	6859      	ldr	r1, [r3, #4]
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	f7ff fd0e 	bl	8001558 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fdea 	bl	800171a <LL_ADC_REG_IsConversionOngoing>
 8001b46:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff fdf6 	bl	8001740 <LL_ADC_INJ_IsConversionOngoing>
 8001b54:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b58:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f040 81d9 	bne.w	8001f14 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f040 81d4 	bne.w	8001f14 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b74:	d10f      	bne.n	8001b96 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6818      	ldr	r0, [r3, #0]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	4619      	mov	r1, r3
 8001b82:	f7ff fd15 	bl	80015b0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fccf 	bl	8001532 <LL_ADC_SetSamplingTimeCommonConfig>
 8001b94:	e00e      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6818      	ldr	r0, [r3, #0]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	6819      	ldr	r1, [r3, #0]
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	f7ff fd04 	bl	80015b0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2100      	movs	r1, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff fcbf 	bl	8001532 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	695a      	ldr	r2, [r3, #20]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	08db      	lsrs	r3, r3, #3
 8001bc0:	f003 0303 	and.w	r3, r3, #3
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	d022      	beq.n	8001c1c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6818      	ldr	r0, [r3, #0]
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	6919      	ldr	r1, [r3, #16]
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001be6:	f7ff fc19 	bl	800141c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6818      	ldr	r0, [r3, #0]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	6919      	ldr	r1, [r3, #16]
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	f7ff fc65 	bl	80014c6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6818      	ldr	r0, [r3, #0]
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	6919      	ldr	r1, [r3, #16]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	7f1b      	ldrb	r3, [r3, #28]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d102      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x126>
 8001c0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c10:	e000      	b.n	8001c14 <HAL_ADC_ConfigChannel+0x128>
 8001c12:	2300      	movs	r3, #0
 8001c14:	461a      	mov	r2, r3
 8001c16:	f7ff fc71 	bl	80014fc <LL_ADC_SetOffsetSaturation>
 8001c1a:	e17b      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2100      	movs	r1, #0
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fc1e 	bl	8001464 <LL_ADC_GetOffsetChannel>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10a      	bne.n	8001c48 <HAL_ADC_ConfigChannel+0x15c>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff fc13 	bl	8001464 <LL_ADC_GetOffsetChannel>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	0e9b      	lsrs	r3, r3, #26
 8001c42:	f003 021f 	and.w	r2, r3, #31
 8001c46:	e01e      	b.n	8001c86 <HAL_ADC_ConfigChannel+0x19a>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff fc08 	bl	8001464 <LL_ADC_GetOffsetChannel>
 8001c54:	4603      	mov	r3, r0
 8001c56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001c5e:	fa93 f3a3 	rbit	r3, r3
 8001c62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001c76:	2320      	movs	r3, #32
 8001c78:	e004      	b.n	8001c84 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001c7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c7e:	fab3 f383 	clz	r3, r3
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d105      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x1b2>
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	0e9b      	lsrs	r3, r3, #26
 8001c98:	f003 031f 	and.w	r3, r3, #31
 8001c9c:	e018      	b.n	8001cd0 <HAL_ADC_ConfigChannel+0x1e4>
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001caa:	fa93 f3a3 	rbit	r3, r3
 8001cae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001cb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001cba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001cc2:	2320      	movs	r3, #32
 8001cc4:	e004      	b.n	8001cd0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001cc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001cca:	fab3 f383 	clz	r3, r3
 8001cce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d106      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fbd7 	bl	8001490 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff fbbb 	bl	8001464 <LL_ADC_GetOffsetChannel>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d10a      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x222>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fbb0 	bl	8001464 <LL_ADC_GetOffsetChannel>
 8001d04:	4603      	mov	r3, r0
 8001d06:	0e9b      	lsrs	r3, r3, #26
 8001d08:	f003 021f 	and.w	r2, r3, #31
 8001d0c:	e01e      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x260>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2101      	movs	r1, #1
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff fba5 	bl	8001464 <LL_ADC_GetOffsetChannel>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d20:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d24:	fa93 f3a3 	rbit	r3, r3
 8001d28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001d2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001d34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001d3c:	2320      	movs	r3, #32
 8001d3e:	e004      	b.n	8001d4a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001d40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d44:	fab3 f383 	clz	r3, r3
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d105      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x278>
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	0e9b      	lsrs	r3, r3, #26
 8001d5e:	f003 031f 	and.w	r3, r3, #31
 8001d62:	e018      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x2aa>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d70:	fa93 f3a3 	rbit	r3, r3
 8001d74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001d78:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001d80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001d88:	2320      	movs	r3, #32
 8001d8a:	e004      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001d8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d90:	fab3 f383 	clz	r3, r3
 8001d94:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d106      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2101      	movs	r1, #1
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fb74 	bl	8001490 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2102      	movs	r1, #2
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fb58 	bl	8001464 <LL_ADC_GetOffsetChannel>
 8001db4:	4603      	mov	r3, r0
 8001db6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10a      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x2e8>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2102      	movs	r1, #2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff fb4d 	bl	8001464 <LL_ADC_GetOffsetChannel>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	0e9b      	lsrs	r3, r3, #26
 8001dce:	f003 021f 	and.w	r2, r3, #31
 8001dd2:	e01e      	b.n	8001e12 <HAL_ADC_ConfigChannel+0x326>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2102      	movs	r1, #2
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff fb42 	bl	8001464 <LL_ADC_GetOffsetChannel>
 8001de0:	4603      	mov	r3, r0
 8001de2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dea:	fa93 f3a3 	rbit	r3, r3
 8001dee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001df2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001df6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001dfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001e02:	2320      	movs	r3, #32
 8001e04:	e004      	b.n	8001e10 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001e06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e0a:	fab3 f383 	clz	r3, r3
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d105      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x33e>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	0e9b      	lsrs	r3, r3, #26
 8001e24:	f003 031f 	and.w	r3, r3, #31
 8001e28:	e016      	b.n	8001e58 <HAL_ADC_ConfigChannel+0x36c>
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e36:	fa93 f3a3 	rbit	r3, r3
 8001e3a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001e3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001e42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001e4a:	2320      	movs	r3, #32
 8001e4c:	e004      	b.n	8001e58 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001e4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e52:	fab3 f383 	clz	r3, r3
 8001e56:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d106      	bne.n	8001e6a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2200      	movs	r2, #0
 8001e62:	2102      	movs	r1, #2
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff fb13 	bl	8001490 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2103      	movs	r1, #3
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff faf7 	bl	8001464 <LL_ADC_GetOffsetChannel>
 8001e76:	4603      	mov	r3, r0
 8001e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d10a      	bne.n	8001e96 <HAL_ADC_ConfigChannel+0x3aa>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2103      	movs	r1, #3
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff faec 	bl	8001464 <LL_ADC_GetOffsetChannel>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	0e9b      	lsrs	r3, r3, #26
 8001e90:	f003 021f 	and.w	r2, r3, #31
 8001e94:	e017      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x3da>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2103      	movs	r1, #3
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff fae1 	bl	8001464 <LL_ADC_GetOffsetChannel>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ea8:	fa93 f3a3 	rbit	r3, r3
 8001eac:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001eae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001eb0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001eb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001eb8:	2320      	movs	r3, #32
 8001eba:	e003      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001ebc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ebe:	fab3 f383 	clz	r3, r3
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d105      	bne.n	8001ede <HAL_ADC_ConfigChannel+0x3f2>
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	0e9b      	lsrs	r3, r3, #26
 8001ed8:	f003 031f 	and.w	r3, r3, #31
 8001edc:	e011      	b.n	8001f02 <HAL_ADC_ConfigChannel+0x416>
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ee6:	fa93 f3a3 	rbit	r3, r3
 8001eea:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001eec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001eee:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001ef6:	2320      	movs	r3, #32
 8001ef8:	e003      	b.n	8001f02 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001efc:	fab3 f383 	clz	r3, r3
 8001f00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d106      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2103      	movs	r1, #3
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff fabe 	bl	8001490 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff fbeb 	bl	80016f4 <LL_ADC_IsEnabled>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f040 813d 	bne.w	80021a0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6818      	ldr	r0, [r3, #0]
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	6819      	ldr	r1, [r3, #0]
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	461a      	mov	r2, r3
 8001f34:	f7ff fb68 	bl	8001608 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	4aa2      	ldr	r2, [pc, #648]	; (80021c8 <HAL_ADC_ConfigChannel+0x6dc>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	f040 812e 	bne.w	80021a0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d10b      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x480>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	0e9b      	lsrs	r3, r3, #26
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	f003 031f 	and.w	r3, r3, #31
 8001f60:	2b09      	cmp	r3, #9
 8001f62:	bf94      	ite	ls
 8001f64:	2301      	movls	r3, #1
 8001f66:	2300      	movhi	r3, #0
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	e019      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x4b4>
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f74:	fa93 f3a3 	rbit	r3, r3
 8001f78:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001f7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f7c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001f7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001f84:	2320      	movs	r3, #32
 8001f86:	e003      	b.n	8001f90 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001f88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f8a:	fab3 f383 	clz	r3, r3
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	3301      	adds	r3, #1
 8001f92:	f003 031f 	and.w	r3, r3, #31
 8001f96:	2b09      	cmp	r3, #9
 8001f98:	bf94      	ite	ls
 8001f9a:	2301      	movls	r3, #1
 8001f9c:	2300      	movhi	r3, #0
 8001f9e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d079      	beq.n	8002098 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d107      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x4d4>
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	0e9b      	lsrs	r3, r3, #26
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	069b      	lsls	r3, r3, #26
 8001fba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fbe:	e015      	b.n	8001fec <HAL_ADC_ConfigChannel+0x500>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fc8:	fa93 f3a3 	rbit	r3, r3
 8001fcc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001fce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fd0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001fd8:	2320      	movs	r3, #32
 8001fda:	e003      	b.n	8001fe4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001fdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fde:	fab3 f383 	clz	r3, r3
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	069b      	lsls	r3, r3, #26
 8001fe8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d109      	bne.n	800200c <HAL_ADC_ConfigChannel+0x520>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	0e9b      	lsrs	r3, r3, #26
 8001ffe:	3301      	adds	r3, #1
 8002000:	f003 031f 	and.w	r3, r3, #31
 8002004:	2101      	movs	r1, #1
 8002006:	fa01 f303 	lsl.w	r3, r1, r3
 800200a:	e017      	b.n	800203c <HAL_ADC_ConfigChannel+0x550>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002012:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002014:	fa93 f3a3 	rbit	r3, r3
 8002018:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800201a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800201c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800201e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002024:	2320      	movs	r3, #32
 8002026:	e003      	b.n	8002030 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002028:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800202a:	fab3 f383 	clz	r3, r3
 800202e:	b2db      	uxtb	r3, r3
 8002030:	3301      	adds	r3, #1
 8002032:	f003 031f 	and.w	r3, r3, #31
 8002036:	2101      	movs	r1, #1
 8002038:	fa01 f303 	lsl.w	r3, r1, r3
 800203c:	ea42 0103 	orr.w	r1, r2, r3
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10a      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x576>
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	0e9b      	lsrs	r3, r3, #26
 8002052:	3301      	adds	r3, #1
 8002054:	f003 021f 	and.w	r2, r3, #31
 8002058:	4613      	mov	r3, r2
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	4413      	add	r3, r2
 800205e:	051b      	lsls	r3, r3, #20
 8002060:	e018      	b.n	8002094 <HAL_ADC_ConfigChannel+0x5a8>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800206a:	fa93 f3a3 	rbit	r3, r3
 800206e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002072:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800207a:	2320      	movs	r3, #32
 800207c:	e003      	b.n	8002086 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800207e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002080:	fab3 f383 	clz	r3, r3
 8002084:	b2db      	uxtb	r3, r3
 8002086:	3301      	adds	r3, #1
 8002088:	f003 021f 	and.w	r2, r3, #31
 800208c:	4613      	mov	r3, r2
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	4413      	add	r3, r2
 8002092:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002094:	430b      	orrs	r3, r1
 8002096:	e07e      	b.n	8002196 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d107      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x5c8>
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	0e9b      	lsrs	r3, r3, #26
 80020aa:	3301      	adds	r3, #1
 80020ac:	069b      	lsls	r3, r3, #26
 80020ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020b2:	e015      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x5f4>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020bc:	fa93 f3a3 	rbit	r3, r3
 80020c0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80020c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80020c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80020cc:	2320      	movs	r3, #32
 80020ce:	e003      	b.n	80020d8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80020d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d2:	fab3 f383 	clz	r3, r3
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	3301      	adds	r3, #1
 80020da:	069b      	lsls	r3, r3, #26
 80020dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d109      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x614>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	0e9b      	lsrs	r3, r3, #26
 80020f2:	3301      	adds	r3, #1
 80020f4:	f003 031f 	and.w	r3, r3, #31
 80020f8:	2101      	movs	r1, #1
 80020fa:	fa01 f303 	lsl.w	r3, r1, r3
 80020fe:	e017      	b.n	8002130 <HAL_ADC_ConfigChannel+0x644>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002106:	6a3b      	ldr	r3, [r7, #32]
 8002108:	fa93 f3a3 	rbit	r3, r3
 800210c:	61fb      	str	r3, [r7, #28]
  return result;
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002118:	2320      	movs	r3, #32
 800211a:	e003      	b.n	8002124 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	fab3 f383 	clz	r3, r3
 8002122:	b2db      	uxtb	r3, r3
 8002124:	3301      	adds	r3, #1
 8002126:	f003 031f 	and.w	r3, r3, #31
 800212a:	2101      	movs	r1, #1
 800212c:	fa01 f303 	lsl.w	r3, r1, r3
 8002130:	ea42 0103 	orr.w	r1, r2, r3
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10d      	bne.n	800215c <HAL_ADC_ConfigChannel+0x670>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	0e9b      	lsrs	r3, r3, #26
 8002146:	3301      	adds	r3, #1
 8002148:	f003 021f 	and.w	r2, r3, #31
 800214c:	4613      	mov	r3, r2
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	4413      	add	r3, r2
 8002152:	3b1e      	subs	r3, #30
 8002154:	051b      	lsls	r3, r3, #20
 8002156:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800215a:	e01b      	b.n	8002194 <HAL_ADC_ConfigChannel+0x6a8>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	fa93 f3a3 	rbit	r3, r3
 8002168:	613b      	str	r3, [r7, #16]
  return result;
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002174:	2320      	movs	r3, #32
 8002176:	e003      	b.n	8002180 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	fab3 f383 	clz	r3, r3
 800217e:	b2db      	uxtb	r3, r3
 8002180:	3301      	adds	r3, #1
 8002182:	f003 021f 	and.w	r2, r3, #31
 8002186:	4613      	mov	r3, r2
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	4413      	add	r3, r2
 800218c:	3b1e      	subs	r3, #30
 800218e:	051b      	lsls	r3, r3, #20
 8002190:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002194:	430b      	orrs	r3, r1
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	6892      	ldr	r2, [r2, #8]
 800219a:	4619      	mov	r1, r3
 800219c:	f7ff fa08 	bl	80015b0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4b09      	ldr	r3, [pc, #36]	; (80021cc <HAL_ADC_ConfigChannel+0x6e0>)
 80021a6:	4013      	ands	r3, r2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 80be 	beq.w	800232a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021b6:	d004      	beq.n	80021c2 <HAL_ADC_ConfigChannel+0x6d6>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a04      	ldr	r2, [pc, #16]	; (80021d0 <HAL_ADC_ConfigChannel+0x6e4>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d10a      	bne.n	80021d8 <HAL_ADC_ConfigChannel+0x6ec>
 80021c2:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <HAL_ADC_ConfigChannel+0x6e8>)
 80021c4:	e009      	b.n	80021da <HAL_ADC_ConfigChannel+0x6ee>
 80021c6:	bf00      	nop
 80021c8:	407f0000 	.word	0x407f0000
 80021cc:	80080000 	.word	0x80080000
 80021d0:	50000100 	.word	0x50000100
 80021d4:	50000300 	.word	0x50000300
 80021d8:	4b59      	ldr	r3, [pc, #356]	; (8002340 <HAL_ADC_ConfigChannel+0x854>)
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff f910 	bl	8001400 <LL_ADC_GetCommonPathInternalCh>
 80021e0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a56      	ldr	r2, [pc, #344]	; (8002344 <HAL_ADC_ConfigChannel+0x858>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d004      	beq.n	80021f8 <HAL_ADC_ConfigChannel+0x70c>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a55      	ldr	r2, [pc, #340]	; (8002348 <HAL_ADC_ConfigChannel+0x85c>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d13a      	bne.n	800226e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d134      	bne.n	800226e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800220c:	d005      	beq.n	800221a <HAL_ADC_ConfigChannel+0x72e>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a4e      	ldr	r2, [pc, #312]	; (800234c <HAL_ADC_ConfigChannel+0x860>)
 8002214:	4293      	cmp	r3, r2
 8002216:	f040 8085 	bne.w	8002324 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002222:	d004      	beq.n	800222e <HAL_ADC_ConfigChannel+0x742>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a49      	ldr	r2, [pc, #292]	; (8002350 <HAL_ADC_ConfigChannel+0x864>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d101      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x746>
 800222e:	4a49      	ldr	r2, [pc, #292]	; (8002354 <HAL_ADC_ConfigChannel+0x868>)
 8002230:	e000      	b.n	8002234 <HAL_ADC_ConfigChannel+0x748>
 8002232:	4a43      	ldr	r2, [pc, #268]	; (8002340 <HAL_ADC_ConfigChannel+0x854>)
 8002234:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002238:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800223c:	4619      	mov	r1, r3
 800223e:	4610      	mov	r0, r2
 8002240:	f7ff f8cb 	bl	80013da <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002244:	4b44      	ldr	r3, [pc, #272]	; (8002358 <HAL_ADC_ConfigChannel+0x86c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	099b      	lsrs	r3, r3, #6
 800224a:	4a44      	ldr	r2, [pc, #272]	; (800235c <HAL_ADC_ConfigChannel+0x870>)
 800224c:	fba2 2303 	umull	r2, r3, r2, r3
 8002250:	099b      	lsrs	r3, r3, #6
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	4613      	mov	r3, r2
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	4413      	add	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800225e:	e002      	b.n	8002266 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	3b01      	subs	r3, #1
 8002264:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1f9      	bne.n	8002260 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800226c:	e05a      	b.n	8002324 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a3b      	ldr	r2, [pc, #236]	; (8002360 <HAL_ADC_ConfigChannel+0x874>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d125      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x7d8>
 8002278:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800227c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d11f      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a31      	ldr	r2, [pc, #196]	; (8002350 <HAL_ADC_ConfigChannel+0x864>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d104      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x7ac>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a34      	ldr	r2, [pc, #208]	; (8002364 <HAL_ADC_ConfigChannel+0x878>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d047      	beq.n	8002328 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022a0:	d004      	beq.n	80022ac <HAL_ADC_ConfigChannel+0x7c0>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a2a      	ldr	r2, [pc, #168]	; (8002350 <HAL_ADC_ConfigChannel+0x864>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d101      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x7c4>
 80022ac:	4a29      	ldr	r2, [pc, #164]	; (8002354 <HAL_ADC_ConfigChannel+0x868>)
 80022ae:	e000      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x7c6>
 80022b0:	4a23      	ldr	r2, [pc, #140]	; (8002340 <HAL_ADC_ConfigChannel+0x854>)
 80022b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ba:	4619      	mov	r1, r3
 80022bc:	4610      	mov	r0, r2
 80022be:	f7ff f88c 	bl	80013da <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022c2:	e031      	b.n	8002328 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a27      	ldr	r2, [pc, #156]	; (8002368 <HAL_ADC_ConfigChannel+0x87c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d12d      	bne.n	800232a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80022ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d127      	bne.n	800232a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a1c      	ldr	r2, [pc, #112]	; (8002350 <HAL_ADC_ConfigChannel+0x864>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d022      	beq.n	800232a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022ec:	d004      	beq.n	80022f8 <HAL_ADC_ConfigChannel+0x80c>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a17      	ldr	r2, [pc, #92]	; (8002350 <HAL_ADC_ConfigChannel+0x864>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d101      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x810>
 80022f8:	4a16      	ldr	r2, [pc, #88]	; (8002354 <HAL_ADC_ConfigChannel+0x868>)
 80022fa:	e000      	b.n	80022fe <HAL_ADC_ConfigChannel+0x812>
 80022fc:	4a10      	ldr	r2, [pc, #64]	; (8002340 <HAL_ADC_ConfigChannel+0x854>)
 80022fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002302:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002306:	4619      	mov	r1, r3
 8002308:	4610      	mov	r0, r2
 800230a:	f7ff f866 	bl	80013da <LL_ADC_SetCommonPathInternalCh>
 800230e:	e00c      	b.n	800232a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002314:	f043 0220 	orr.w	r2, r3, #32
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002322:	e002      	b.n	800232a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002324:	bf00      	nop
 8002326:	e000      	b.n	800232a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002328:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002332:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002336:	4618      	mov	r0, r3
 8002338:	37d8      	adds	r7, #216	; 0xd8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	50000700 	.word	0x50000700
 8002344:	c3210000 	.word	0xc3210000
 8002348:	90c00010 	.word	0x90c00010
 800234c:	50000600 	.word	0x50000600
 8002350:	50000100 	.word	0x50000100
 8002354:	50000300 	.word	0x50000300
 8002358:	20000000 	.word	0x20000000
 800235c:	053e2d63 	.word	0x053e2d63
 8002360:	c7520000 	.word	0xc7520000
 8002364:	50000500 	.word	0x50000500
 8002368:	cb840000 	.word	0xcb840000

0800236c <LL_ADC_IsEnabled>:
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b01      	cmp	r3, #1
 800237e:	d101      	bne.n	8002384 <LL_ADC_IsEnabled+0x18>
 8002380:	2301      	movs	r3, #1
 8002382:	e000      	b.n	8002386 <LL_ADC_IsEnabled+0x1a>
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <LL_ADC_REG_IsConversionOngoing>:
{
 8002392:	b480      	push	{r7}
 8002394:	b083      	sub	sp, #12
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 0304 	and.w	r3, r3, #4
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	d101      	bne.n	80023aa <LL_ADC_REG_IsConversionOngoing+0x18>
 80023a6:	2301      	movs	r3, #1
 80023a8:	e000      	b.n	80023ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80023b8:	b590      	push	{r4, r7, lr}
 80023ba:	b0a1      	sub	sp, #132	; 0x84
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023c2:	2300      	movs	r3, #0
 80023c4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d101      	bne.n	80023d6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80023d2:	2302      	movs	r3, #2
 80023d4:	e0e7      	b.n	80025a6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80023de:	2300      	movs	r3, #0
 80023e0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80023e2:	2300      	movs	r3, #0
 80023e4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023ee:	d102      	bne.n	80023f6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80023f0:	4b6f      	ldr	r3, [pc, #444]	; (80025b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80023f2:	60bb      	str	r3, [r7, #8]
 80023f4:	e009      	b.n	800240a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a6e      	ldr	r2, [pc, #440]	; (80025b4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d102      	bne.n	8002406 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002400:	4b6d      	ldr	r3, [pc, #436]	; (80025b8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002402:	60bb      	str	r3, [r7, #8]
 8002404:	e001      	b.n	800240a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002406:	2300      	movs	r3, #0
 8002408:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10b      	bne.n	8002428 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002414:	f043 0220 	orr.w	r2, r3, #32
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e0be      	b.n	80025a6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff ffb1 	bl	8002392 <LL_ADC_REG_IsConversionOngoing>
 8002430:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff ffab 	bl	8002392 <LL_ADC_REG_IsConversionOngoing>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	f040 80a0 	bne.w	8002584 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002444:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002446:	2b00      	cmp	r3, #0
 8002448:	f040 809c 	bne.w	8002584 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002454:	d004      	beq.n	8002460 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a55      	ldr	r2, [pc, #340]	; (80025b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d101      	bne.n	8002464 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002460:	4b56      	ldr	r3, [pc, #344]	; (80025bc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002462:	e000      	b.n	8002466 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002464:	4b56      	ldr	r3, [pc, #344]	; (80025c0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002466:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d04b      	beq.n	8002508 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002470:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	6859      	ldr	r1, [r3, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002482:	035b      	lsls	r3, r3, #13
 8002484:	430b      	orrs	r3, r1
 8002486:	431a      	orrs	r2, r3
 8002488:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800248a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002494:	d004      	beq.n	80024a0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a45      	ldr	r2, [pc, #276]	; (80025b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d10f      	bne.n	80024c0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80024a0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80024a4:	f7ff ff62 	bl	800236c <LL_ADC_IsEnabled>
 80024a8:	4604      	mov	r4, r0
 80024aa:	4841      	ldr	r0, [pc, #260]	; (80025b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80024ac:	f7ff ff5e 	bl	800236c <LL_ADC_IsEnabled>
 80024b0:	4603      	mov	r3, r0
 80024b2:	4323      	orrs	r3, r4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	bf0c      	ite	eq
 80024b8:	2301      	moveq	r3, #1
 80024ba:	2300      	movne	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	e012      	b.n	80024e6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80024c0:	483c      	ldr	r0, [pc, #240]	; (80025b4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80024c2:	f7ff ff53 	bl	800236c <LL_ADC_IsEnabled>
 80024c6:	4604      	mov	r4, r0
 80024c8:	483b      	ldr	r0, [pc, #236]	; (80025b8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80024ca:	f7ff ff4f 	bl	800236c <LL_ADC_IsEnabled>
 80024ce:	4603      	mov	r3, r0
 80024d0:	431c      	orrs	r4, r3
 80024d2:	483c      	ldr	r0, [pc, #240]	; (80025c4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80024d4:	f7ff ff4a 	bl	800236c <LL_ADC_IsEnabled>
 80024d8:	4603      	mov	r3, r0
 80024da:	4323      	orrs	r3, r4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	bf0c      	ite	eq
 80024e0:	2301      	moveq	r3, #1
 80024e2:	2300      	movne	r3, #0
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d056      	beq.n	8002598 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80024ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80024f2:	f023 030f 	bic.w	r3, r3, #15
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	6811      	ldr	r1, [r2, #0]
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	6892      	ldr	r2, [r2, #8]
 80024fe:	430a      	orrs	r2, r1
 8002500:	431a      	orrs	r2, r3
 8002502:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002504:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002506:	e047      	b.n	8002598 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002508:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002510:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002512:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800251c:	d004      	beq.n	8002528 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a23      	ldr	r2, [pc, #140]	; (80025b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d10f      	bne.n	8002548 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002528:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800252c:	f7ff ff1e 	bl	800236c <LL_ADC_IsEnabled>
 8002530:	4604      	mov	r4, r0
 8002532:	481f      	ldr	r0, [pc, #124]	; (80025b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002534:	f7ff ff1a 	bl	800236c <LL_ADC_IsEnabled>
 8002538:	4603      	mov	r3, r0
 800253a:	4323      	orrs	r3, r4
 800253c:	2b00      	cmp	r3, #0
 800253e:	bf0c      	ite	eq
 8002540:	2301      	moveq	r3, #1
 8002542:	2300      	movne	r3, #0
 8002544:	b2db      	uxtb	r3, r3
 8002546:	e012      	b.n	800256e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002548:	481a      	ldr	r0, [pc, #104]	; (80025b4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800254a:	f7ff ff0f 	bl	800236c <LL_ADC_IsEnabled>
 800254e:	4604      	mov	r4, r0
 8002550:	4819      	ldr	r0, [pc, #100]	; (80025b8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002552:	f7ff ff0b 	bl	800236c <LL_ADC_IsEnabled>
 8002556:	4603      	mov	r3, r0
 8002558:	431c      	orrs	r4, r3
 800255a:	481a      	ldr	r0, [pc, #104]	; (80025c4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800255c:	f7ff ff06 	bl	800236c <LL_ADC_IsEnabled>
 8002560:	4603      	mov	r3, r0
 8002562:	4323      	orrs	r3, r4
 8002564:	2b00      	cmp	r3, #0
 8002566:	bf0c      	ite	eq
 8002568:	2301      	moveq	r3, #1
 800256a:	2300      	movne	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d012      	beq.n	8002598 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002572:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800257a:	f023 030f 	bic.w	r3, r3, #15
 800257e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002580:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002582:	e009      	b.n	8002598 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002588:	f043 0220 	orr.w	r2, r3, #32
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002596:	e000      	b.n	800259a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002598:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80025a2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3784      	adds	r7, #132	; 0x84
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd90      	pop	{r4, r7, pc}
 80025ae:	bf00      	nop
 80025b0:	50000100 	.word	0x50000100
 80025b4:	50000400 	.word	0x50000400
 80025b8:	50000500 	.word	0x50000500
 80025bc:	50000300 	.word	0x50000300
 80025c0:	50000700 	.word	0x50000700
 80025c4:	50000600 	.word	0x50000600

080025c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025d8:	4b0c      	ldr	r3, [pc, #48]	; (800260c <__NVIC_SetPriorityGrouping+0x44>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025e4:	4013      	ands	r3, r2
 80025e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025fa:	4a04      	ldr	r2, [pc, #16]	; (800260c <__NVIC_SetPriorityGrouping+0x44>)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	60d3      	str	r3, [r2, #12]
}
 8002600:	bf00      	nop
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002614:	4b04      	ldr	r3, [pc, #16]	; (8002628 <__NVIC_GetPriorityGrouping+0x18>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	0a1b      	lsrs	r3, r3, #8
 800261a:	f003 0307 	and.w	r3, r3, #7
}
 800261e:	4618      	mov	r0, r3
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	e000ed00 	.word	0xe000ed00

0800262c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263a:	2b00      	cmp	r3, #0
 800263c:	db0b      	blt.n	8002656 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	f003 021f 	and.w	r2, r3, #31
 8002644:	4907      	ldr	r1, [pc, #28]	; (8002664 <__NVIC_EnableIRQ+0x38>)
 8002646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264a:	095b      	lsrs	r3, r3, #5
 800264c:	2001      	movs	r0, #1
 800264e:	fa00 f202 	lsl.w	r2, r0, r2
 8002652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	e000e100 	.word	0xe000e100

08002668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	6039      	str	r1, [r7, #0]
 8002672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002678:	2b00      	cmp	r3, #0
 800267a:	db0a      	blt.n	8002692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	b2da      	uxtb	r2, r3
 8002680:	490c      	ldr	r1, [pc, #48]	; (80026b4 <__NVIC_SetPriority+0x4c>)
 8002682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002686:	0112      	lsls	r2, r2, #4
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	440b      	add	r3, r1
 800268c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002690:	e00a      	b.n	80026a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	b2da      	uxtb	r2, r3
 8002696:	4908      	ldr	r1, [pc, #32]	; (80026b8 <__NVIC_SetPriority+0x50>)
 8002698:	79fb      	ldrb	r3, [r7, #7]
 800269a:	f003 030f 	and.w	r3, r3, #15
 800269e:	3b04      	subs	r3, #4
 80026a0:	0112      	lsls	r2, r2, #4
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	440b      	add	r3, r1
 80026a6:	761a      	strb	r2, [r3, #24]
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	e000e100 	.word	0xe000e100
 80026b8:	e000ed00 	.word	0xe000ed00

080026bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026bc:	b480      	push	{r7}
 80026be:	b089      	sub	sp, #36	; 0x24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	f1c3 0307 	rsb	r3, r3, #7
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	bf28      	it	cs
 80026da:	2304      	movcs	r3, #4
 80026dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	3304      	adds	r3, #4
 80026e2:	2b06      	cmp	r3, #6
 80026e4:	d902      	bls.n	80026ec <NVIC_EncodePriority+0x30>
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	3b03      	subs	r3, #3
 80026ea:	e000      	b.n	80026ee <NVIC_EncodePriority+0x32>
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f0:	f04f 32ff 	mov.w	r2, #4294967295
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43da      	mvns	r2, r3
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	401a      	ands	r2, r3
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002704:	f04f 31ff 	mov.w	r1, #4294967295
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	fa01 f303 	lsl.w	r3, r1, r3
 800270e:	43d9      	mvns	r1, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002714:	4313      	orrs	r3, r2
         );
}
 8002716:	4618      	mov	r0, r3
 8002718:	3724      	adds	r7, #36	; 0x24
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff ff4c 	bl	80025c8 <__NVIC_SetPriorityGrouping>
}
 8002730:	bf00      	nop
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
 8002744:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002746:	f7ff ff63 	bl	8002610 <__NVIC_GetPriorityGrouping>
 800274a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	68b9      	ldr	r1, [r7, #8]
 8002750:	6978      	ldr	r0, [r7, #20]
 8002752:	f7ff ffb3 	bl	80026bc <NVIC_EncodePriority>
 8002756:	4602      	mov	r2, r0
 8002758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800275c:	4611      	mov	r1, r2
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff ff82 	bl	8002668 <__NVIC_SetPriority>
}
 8002764:	bf00      	nop
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff ff56 	bl	800262c <__NVIC_EnableIRQ>
}
 8002780:	bf00      	nop
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002788:	b480      	push	{r7}
 800278a:	b087      	sub	sp, #28
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002796:	e15a      	b.n	8002a4e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	2101      	movs	r1, #1
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	fa01 f303 	lsl.w	r3, r1, r3
 80027a4:	4013      	ands	r3, r2
 80027a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 814c 	beq.w	8002a48 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 0303 	and.w	r3, r3, #3
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d005      	beq.n	80027c8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d130      	bne.n	800282a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	2203      	movs	r2, #3
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	4013      	ands	r3, r2
 80027de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027fe:	2201      	movs	r2, #1
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	43db      	mvns	r3, r3
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	4013      	ands	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	091b      	lsrs	r3, r3, #4
 8002814:	f003 0201 	and.w	r2, r3, #1
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	4313      	orrs	r3, r2
 8002822:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	2b03      	cmp	r3, #3
 8002834:	d017      	beq.n	8002866 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	2203      	movs	r2, #3
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43db      	mvns	r3, r3
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4013      	ands	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	4313      	orrs	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d123      	bne.n	80028ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	08da      	lsrs	r2, r3, #3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3208      	adds	r2, #8
 800287a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800287e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	220f      	movs	r2, #15
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4013      	ands	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	691a      	ldr	r2, [r3, #16]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	08da      	lsrs	r2, r3, #3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3208      	adds	r2, #8
 80028b4:	6939      	ldr	r1, [r7, #16]
 80028b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	2203      	movs	r2, #3
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43db      	mvns	r3, r3
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	4013      	ands	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f003 0203 	and.w	r2, r3, #3
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 80a6 	beq.w	8002a48 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028fc:	4b5b      	ldr	r3, [pc, #364]	; (8002a6c <HAL_GPIO_Init+0x2e4>)
 80028fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002900:	4a5a      	ldr	r2, [pc, #360]	; (8002a6c <HAL_GPIO_Init+0x2e4>)
 8002902:	f043 0301 	orr.w	r3, r3, #1
 8002906:	6613      	str	r3, [r2, #96]	; 0x60
 8002908:	4b58      	ldr	r3, [pc, #352]	; (8002a6c <HAL_GPIO_Init+0x2e4>)
 800290a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002914:	4a56      	ldr	r2, [pc, #344]	; (8002a70 <HAL_GPIO_Init+0x2e8>)
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	089b      	lsrs	r3, r3, #2
 800291a:	3302      	adds	r3, #2
 800291c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002920:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f003 0303 	and.w	r3, r3, #3
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	220f      	movs	r2, #15
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	4013      	ands	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800293e:	d01f      	beq.n	8002980 <HAL_GPIO_Init+0x1f8>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a4c      	ldr	r2, [pc, #304]	; (8002a74 <HAL_GPIO_Init+0x2ec>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d019      	beq.n	800297c <HAL_GPIO_Init+0x1f4>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a4b      	ldr	r2, [pc, #300]	; (8002a78 <HAL_GPIO_Init+0x2f0>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d013      	beq.n	8002978 <HAL_GPIO_Init+0x1f0>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a4a      	ldr	r2, [pc, #296]	; (8002a7c <HAL_GPIO_Init+0x2f4>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d00d      	beq.n	8002974 <HAL_GPIO_Init+0x1ec>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a49      	ldr	r2, [pc, #292]	; (8002a80 <HAL_GPIO_Init+0x2f8>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d007      	beq.n	8002970 <HAL_GPIO_Init+0x1e8>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a48      	ldr	r2, [pc, #288]	; (8002a84 <HAL_GPIO_Init+0x2fc>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d101      	bne.n	800296c <HAL_GPIO_Init+0x1e4>
 8002968:	2305      	movs	r3, #5
 800296a:	e00a      	b.n	8002982 <HAL_GPIO_Init+0x1fa>
 800296c:	2306      	movs	r3, #6
 800296e:	e008      	b.n	8002982 <HAL_GPIO_Init+0x1fa>
 8002970:	2304      	movs	r3, #4
 8002972:	e006      	b.n	8002982 <HAL_GPIO_Init+0x1fa>
 8002974:	2303      	movs	r3, #3
 8002976:	e004      	b.n	8002982 <HAL_GPIO_Init+0x1fa>
 8002978:	2302      	movs	r3, #2
 800297a:	e002      	b.n	8002982 <HAL_GPIO_Init+0x1fa>
 800297c:	2301      	movs	r3, #1
 800297e:	e000      	b.n	8002982 <HAL_GPIO_Init+0x1fa>
 8002980:	2300      	movs	r3, #0
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	f002 0203 	and.w	r2, r2, #3
 8002988:	0092      	lsls	r2, r2, #2
 800298a:	4093      	lsls	r3, r2
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	4313      	orrs	r3, r2
 8002990:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002992:	4937      	ldr	r1, [pc, #220]	; (8002a70 <HAL_GPIO_Init+0x2e8>)
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	089b      	lsrs	r3, r3, #2
 8002998:	3302      	adds	r3, #2
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029a0:	4b39      	ldr	r3, [pc, #228]	; (8002a88 <HAL_GPIO_Init+0x300>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4013      	ands	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029c4:	4a30      	ldr	r2, [pc, #192]	; (8002a88 <HAL_GPIO_Init+0x300>)
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029ca:	4b2f      	ldr	r3, [pc, #188]	; (8002a88 <HAL_GPIO_Init+0x300>)
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	4013      	ands	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029ee:	4a26      	ldr	r2, [pc, #152]	; (8002a88 <HAL_GPIO_Init+0x300>)
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80029f4:	4b24      	ldr	r3, [pc, #144]	; (8002a88 <HAL_GPIO_Init+0x300>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	4013      	ands	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a18:	4a1b      	ldr	r2, [pc, #108]	; (8002a88 <HAL_GPIO_Init+0x300>)
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a1e:	4b1a      	ldr	r3, [pc, #104]	; (8002a88 <HAL_GPIO_Init+0x300>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	43db      	mvns	r3, r3
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a42:	4a11      	ldr	r2, [pc, #68]	; (8002a88 <HAL_GPIO_Init+0x300>)
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	fa22 f303 	lsr.w	r3, r2, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f47f ae9d 	bne.w	8002798 <HAL_GPIO_Init+0x10>
  }
}
 8002a5e:	bf00      	nop
 8002a60:	bf00      	nop
 8002a62:	371c      	adds	r7, #28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	40010000 	.word	0x40010000
 8002a74:	48000400 	.word	0x48000400
 8002a78:	48000800 	.word	0x48000800
 8002a7c:	48000c00 	.word	0x48000c00
 8002a80:	48001000 	.word	0x48001000
 8002a84:	48001400 	.word	0x48001400
 8002a88:	40010400 	.word	0x40010400

08002a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	807b      	strh	r3, [r7, #2]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a9c:	787b      	ldrb	r3, [r7, #1]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002aa2:	887a      	ldrh	r2, [r7, #2]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002aa8:	e002      	b.n	8002ab0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002aaa:	887a      	ldrh	r2, [r7, #2]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ac6:	4b08      	ldr	r3, [pc, #32]	; (8002ae8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ac8:	695a      	ldr	r2, [r3, #20]
 8002aca:	88fb      	ldrh	r3, [r7, #6]
 8002acc:	4013      	ands	r3, r2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d006      	beq.n	8002ae0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ad2:	4a05      	ldr	r2, [pc, #20]	; (8002ae8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ad4:	88fb      	ldrh	r3, [r7, #6]
 8002ad6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ad8:	88fb      	ldrh	r3, [r7, #6]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 f806 	bl	8002aec <HAL_GPIO_EXTI_Callback>
  }
}
 8002ae0:	bf00      	nop
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40010400 	.word	0x40010400

08002aec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
	...

08002b04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d141      	bne.n	8002b96 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b12:	4b4b      	ldr	r3, [pc, #300]	; (8002c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b1e:	d131      	bne.n	8002b84 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b20:	4b47      	ldr	r3, [pc, #284]	; (8002c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b26:	4a46      	ldr	r2, [pc, #280]	; (8002c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b30:	4b43      	ldr	r3, [pc, #268]	; (8002c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b38:	4a41      	ldr	r2, [pc, #260]	; (8002c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b40:	4b40      	ldr	r3, [pc, #256]	; (8002c44 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2232      	movs	r2, #50	; 0x32
 8002b46:	fb02 f303 	mul.w	r3, r2, r3
 8002b4a:	4a3f      	ldr	r2, [pc, #252]	; (8002c48 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b50:	0c9b      	lsrs	r3, r3, #18
 8002b52:	3301      	adds	r3, #1
 8002b54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b56:	e002      	b.n	8002b5e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b5e:	4b38      	ldr	r3, [pc, #224]	; (8002c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b6a:	d102      	bne.n	8002b72 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1f2      	bne.n	8002b58 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b72:	4b33      	ldr	r3, [pc, #204]	; (8002c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b7e:	d158      	bne.n	8002c32 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e057      	b.n	8002c34 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b84:	4b2e      	ldr	r3, [pc, #184]	; (8002c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b8a:	4a2d      	ldr	r2, [pc, #180]	; (8002c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002b94:	e04d      	b.n	8002c32 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b9c:	d141      	bne.n	8002c22 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b9e:	4b28      	ldr	r3, [pc, #160]	; (8002c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002baa:	d131      	bne.n	8002c10 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bac:	4b24      	ldr	r3, [pc, #144]	; (8002c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bb2:	4a23      	ldr	r2, [pc, #140]	; (8002c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bbc:	4b20      	ldr	r3, [pc, #128]	; (8002c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bc4:	4a1e      	ldr	r2, [pc, #120]	; (8002c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bcc:	4b1d      	ldr	r3, [pc, #116]	; (8002c44 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2232      	movs	r2, #50	; 0x32
 8002bd2:	fb02 f303 	mul.w	r3, r2, r3
 8002bd6:	4a1c      	ldr	r2, [pc, #112]	; (8002c48 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bdc:	0c9b      	lsrs	r3, r3, #18
 8002bde:	3301      	adds	r3, #1
 8002be0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002be2:	e002      	b.n	8002bea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bea:	4b15      	ldr	r3, [pc, #84]	; (8002c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bf6:	d102      	bne.n	8002bfe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1f2      	bne.n	8002be4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bfe:	4b10      	ldr	r3, [pc, #64]	; (8002c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c0a:	d112      	bne.n	8002c32 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e011      	b.n	8002c34 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c10:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c16:	4a0a      	ldr	r2, [pc, #40]	; (8002c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002c20:	e007      	b.n	8002c32 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c22:	4b07      	ldr	r3, [pc, #28]	; (8002c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c2a:	4a05      	ldr	r2, [pc, #20]	; (8002c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c30:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	40007000 	.word	0x40007000
 8002c44:	20000000 	.word	0x20000000
 8002c48:	431bde83 	.word	0x431bde83

08002c4c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002c50:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	4a04      	ldr	r2, [pc, #16]	; (8002c68 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002c56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c5a:	6093      	str	r3, [r2, #8]
}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40007000 	.word	0x40007000

08002c6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b088      	sub	sp, #32
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e306      	b.n	800328c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d075      	beq.n	8002d76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c8a:	4b97      	ldr	r3, [pc, #604]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 030c 	and.w	r3, r3, #12
 8002c92:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c94:	4b94      	ldr	r3, [pc, #592]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	2b0c      	cmp	r3, #12
 8002ca2:	d102      	bne.n	8002caa <HAL_RCC_OscConfig+0x3e>
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	d002      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x44>
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d10b      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb0:	4b8d      	ldr	r3, [pc, #564]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d05b      	beq.n	8002d74 <HAL_RCC_OscConfig+0x108>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d157      	bne.n	8002d74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e2e1      	b.n	800328c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd0:	d106      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x74>
 8002cd2:	4b85      	ldr	r3, [pc, #532]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a84      	ldr	r2, [pc, #528]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	e01d      	b.n	8002d1c <HAL_RCC_OscConfig+0xb0>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ce8:	d10c      	bne.n	8002d04 <HAL_RCC_OscConfig+0x98>
 8002cea:	4b7f      	ldr	r3, [pc, #508]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a7e      	ldr	r2, [pc, #504]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	4b7c      	ldr	r3, [pc, #496]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a7b      	ldr	r2, [pc, #492]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d00:	6013      	str	r3, [r2, #0]
 8002d02:	e00b      	b.n	8002d1c <HAL_RCC_OscConfig+0xb0>
 8002d04:	4b78      	ldr	r3, [pc, #480]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a77      	ldr	r2, [pc, #476]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d0e:	6013      	str	r3, [r2, #0]
 8002d10:	4b75      	ldr	r3, [pc, #468]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a74      	ldr	r2, [pc, #464]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d013      	beq.n	8002d4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d24:	f7fe fb3a 	bl	800139c <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d2c:	f7fe fb36 	bl	800139c <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b64      	cmp	r3, #100	; 0x64
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e2a6      	b.n	800328c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d3e:	4b6a      	ldr	r3, [pc, #424]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0f0      	beq.n	8002d2c <HAL_RCC_OscConfig+0xc0>
 8002d4a:	e014      	b.n	8002d76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4c:	f7fe fb26 	bl	800139c <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d54:	f7fe fb22 	bl	800139c <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b64      	cmp	r3, #100	; 0x64
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e292      	b.n	800328c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d66:	4b60      	ldr	r3, [pc, #384]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f0      	bne.n	8002d54 <HAL_RCC_OscConfig+0xe8>
 8002d72:	e000      	b.n	8002d76 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d075      	beq.n	8002e6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d82:	4b59      	ldr	r3, [pc, #356]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 030c 	and.w	r3, r3, #12
 8002d8a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d8c:	4b56      	ldr	r3, [pc, #344]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f003 0303 	and.w	r3, r3, #3
 8002d94:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	2b0c      	cmp	r3, #12
 8002d9a:	d102      	bne.n	8002da2 <HAL_RCC_OscConfig+0x136>
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d002      	beq.n	8002da8 <HAL_RCC_OscConfig+0x13c>
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	2b04      	cmp	r3, #4
 8002da6:	d11f      	bne.n	8002de8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002da8:	4b4f      	ldr	r3, [pc, #316]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d005      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x154>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e265      	b.n	800328c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc0:	4b49      	ldr	r3, [pc, #292]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	061b      	lsls	r3, r3, #24
 8002dce:	4946      	ldr	r1, [pc, #280]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002dd4:	4b45      	ldr	r3, [pc, #276]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fe f9cf 	bl	800117c <HAL_InitTick>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d043      	beq.n	8002e6c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e251      	b.n	800328c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d023      	beq.n	8002e38 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002df0:	4b3d      	ldr	r3, [pc, #244]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a3c      	ldr	r2, [pc, #240]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfc:	f7fe face 	bl	800139c <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e04:	f7fe faca 	bl	800139c <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e23a      	b.n	800328c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e16:	4b34      	ldr	r3, [pc, #208]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e22:	4b31      	ldr	r3, [pc, #196]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	061b      	lsls	r3, r3, #24
 8002e30:	492d      	ldr	r1, [pc, #180]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	604b      	str	r3, [r1, #4]
 8002e36:	e01a      	b.n	8002e6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e38:	4b2b      	ldr	r3, [pc, #172]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a2a      	ldr	r2, [pc, #168]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002e3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e44:	f7fe faaa 	bl	800139c <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e4c:	f7fe faa6 	bl	800139c <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e216      	b.n	800328c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e5e:	4b22      	ldr	r3, [pc, #136]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x1e0>
 8002e6a:	e000      	b.n	8002e6e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e6c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d041      	beq.n	8002efe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d01c      	beq.n	8002ebc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e82:	4b19      	ldr	r3, [pc, #100]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e88:	4a17      	ldr	r2, [pc, #92]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002e8a:	f043 0301 	orr.w	r3, r3, #1
 8002e8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e92:	f7fe fa83 	bl	800139c <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e98:	e008      	b.n	8002eac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e9a:	f7fe fa7f 	bl	800139c <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e1ef      	b.n	800328c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002eac:	4b0e      	ldr	r3, [pc, #56]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0ef      	beq.n	8002e9a <HAL_RCC_OscConfig+0x22e>
 8002eba:	e020      	b.n	8002efe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ebc:	4b0a      	ldr	r3, [pc, #40]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ec2:	4a09      	ldr	r2, [pc, #36]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002ec4:	f023 0301 	bic.w	r3, r3, #1
 8002ec8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ecc:	f7fe fa66 	bl	800139c <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ed2:	e00d      	b.n	8002ef0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed4:	f7fe fa62 	bl	800139c <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d906      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e1d2      	b.n	800328c <HAL_RCC_OscConfig+0x620>
 8002ee6:	bf00      	nop
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ef0:	4b8c      	ldr	r3, [pc, #560]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8002ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1ea      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0304 	and.w	r3, r3, #4
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 80a6 	beq.w	8003058 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f10:	4b84      	ldr	r3, [pc, #528]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8002f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_RCC_OscConfig+0x2b4>
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e000      	b.n	8002f22 <HAL_RCC_OscConfig+0x2b6>
 8002f20:	2300      	movs	r3, #0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00d      	beq.n	8002f42 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f26:	4b7f      	ldr	r3, [pc, #508]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8002f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2a:	4a7e      	ldr	r2, [pc, #504]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8002f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f30:	6593      	str	r3, [r2, #88]	; 0x58
 8002f32:	4b7c      	ldr	r3, [pc, #496]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8002f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f42:	4b79      	ldr	r3, [pc, #484]	; (8003128 <HAL_RCC_OscConfig+0x4bc>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d118      	bne.n	8002f80 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f4e:	4b76      	ldr	r3, [pc, #472]	; (8003128 <HAL_RCC_OscConfig+0x4bc>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a75      	ldr	r2, [pc, #468]	; (8003128 <HAL_RCC_OscConfig+0x4bc>)
 8002f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f5a:	f7fe fa1f 	bl	800139c <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f62:	f7fe fa1b 	bl	800139c <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e18b      	b.n	800328c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f74:	4b6c      	ldr	r3, [pc, #432]	; (8003128 <HAL_RCC_OscConfig+0x4bc>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0f0      	beq.n	8002f62 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d108      	bne.n	8002f9a <HAL_RCC_OscConfig+0x32e>
 8002f88:	4b66      	ldr	r3, [pc, #408]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8002f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8e:	4a65      	ldr	r2, [pc, #404]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f98:	e024      	b.n	8002fe4 <HAL_RCC_OscConfig+0x378>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	2b05      	cmp	r3, #5
 8002fa0:	d110      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x358>
 8002fa2:	4b60      	ldr	r3, [pc, #384]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8002fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa8:	4a5e      	ldr	r2, [pc, #376]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8002faa:	f043 0304 	orr.w	r3, r3, #4
 8002fae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fb2:	4b5c      	ldr	r3, [pc, #368]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8002fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb8:	4a5a      	ldr	r2, [pc, #360]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8002fba:	f043 0301 	orr.w	r3, r3, #1
 8002fbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fc2:	e00f      	b.n	8002fe4 <HAL_RCC_OscConfig+0x378>
 8002fc4:	4b57      	ldr	r3, [pc, #348]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8002fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fca:	4a56      	ldr	r2, [pc, #344]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8002fcc:	f023 0301 	bic.w	r3, r3, #1
 8002fd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fd4:	4b53      	ldr	r3, [pc, #332]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8002fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fda:	4a52      	ldr	r2, [pc, #328]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8002fdc:	f023 0304 	bic.w	r3, r3, #4
 8002fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d016      	beq.n	800301a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fec:	f7fe f9d6 	bl	800139c <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ff2:	e00a      	b.n	800300a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff4:	f7fe f9d2 	bl	800139c <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003002:	4293      	cmp	r3, r2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e140      	b.n	800328c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800300a:	4b46      	ldr	r3, [pc, #280]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 800300c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0ed      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x388>
 8003018:	e015      	b.n	8003046 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301a:	f7fe f9bf 	bl	800139c <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003020:	e00a      	b.n	8003038 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003022:	f7fe f9bb 	bl	800139c <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003030:	4293      	cmp	r3, r2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e129      	b.n	800328c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003038:	4b3a      	ldr	r3, [pc, #232]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 800303a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1ed      	bne.n	8003022 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003046:	7ffb      	ldrb	r3, [r7, #31]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d105      	bne.n	8003058 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800304c:	4b35      	ldr	r3, [pc, #212]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 800304e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003050:	4a34      	ldr	r2, [pc, #208]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8003052:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003056:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0320 	and.w	r3, r3, #32
 8003060:	2b00      	cmp	r3, #0
 8003062:	d03c      	beq.n	80030de <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d01c      	beq.n	80030a6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800306c:	4b2d      	ldr	r3, [pc, #180]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 800306e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003072:	4a2c      	ldr	r2, [pc, #176]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8003074:	f043 0301 	orr.w	r3, r3, #1
 8003078:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307c:	f7fe f98e 	bl	800139c <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003084:	f7fe f98a 	bl	800139c <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e0fa      	b.n	800328c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003096:	4b23      	ldr	r3, [pc, #140]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8003098:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0ef      	beq.n	8003084 <HAL_RCC_OscConfig+0x418>
 80030a4:	e01b      	b.n	80030de <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80030a6:	4b1f      	ldr	r3, [pc, #124]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 80030a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030ac:	4a1d      	ldr	r2, [pc, #116]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 80030ae:	f023 0301 	bic.w	r3, r3, #1
 80030b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b6:	f7fe f971 	bl	800139c <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030be:	f7fe f96d 	bl	800139c <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e0dd      	b.n	800328c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80030d0:	4b14      	ldr	r3, [pc, #80]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 80030d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1ef      	bne.n	80030be <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f000 80d1 	beq.w	800328a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030e8:	4b0e      	ldr	r3, [pc, #56]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 030c 	and.w	r3, r3, #12
 80030f0:	2b0c      	cmp	r3, #12
 80030f2:	f000 808b 	beq.w	800320c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d15e      	bne.n	80031bc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030fe:	4b09      	ldr	r3, [pc, #36]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a08      	ldr	r2, [pc, #32]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8003104:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003108:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310a:	f7fe f947 	bl	800139c <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003110:	e00c      	b.n	800312c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003112:	f7fe f943 	bl	800139c <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d905      	bls.n	800312c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e0b3      	b.n	800328c <HAL_RCC_OscConfig+0x620>
 8003124:	40021000 	.word	0x40021000
 8003128:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800312c:	4b59      	ldr	r3, [pc, #356]	; (8003294 <HAL_RCC_OscConfig+0x628>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1ec      	bne.n	8003112 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003138:	4b56      	ldr	r3, [pc, #344]	; (8003294 <HAL_RCC_OscConfig+0x628>)
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	4b56      	ldr	r3, [pc, #344]	; (8003298 <HAL_RCC_OscConfig+0x62c>)
 800313e:	4013      	ands	r3, r2
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	6a11      	ldr	r1, [r2, #32]
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003148:	3a01      	subs	r2, #1
 800314a:	0112      	lsls	r2, r2, #4
 800314c:	4311      	orrs	r1, r2
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003152:	0212      	lsls	r2, r2, #8
 8003154:	4311      	orrs	r1, r2
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800315a:	0852      	lsrs	r2, r2, #1
 800315c:	3a01      	subs	r2, #1
 800315e:	0552      	lsls	r2, r2, #21
 8003160:	4311      	orrs	r1, r2
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003166:	0852      	lsrs	r2, r2, #1
 8003168:	3a01      	subs	r2, #1
 800316a:	0652      	lsls	r2, r2, #25
 800316c:	4311      	orrs	r1, r2
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003172:	06d2      	lsls	r2, r2, #27
 8003174:	430a      	orrs	r2, r1
 8003176:	4947      	ldr	r1, [pc, #284]	; (8003294 <HAL_RCC_OscConfig+0x628>)
 8003178:	4313      	orrs	r3, r2
 800317a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800317c:	4b45      	ldr	r3, [pc, #276]	; (8003294 <HAL_RCC_OscConfig+0x628>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a44      	ldr	r2, [pc, #272]	; (8003294 <HAL_RCC_OscConfig+0x628>)
 8003182:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003186:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003188:	4b42      	ldr	r3, [pc, #264]	; (8003294 <HAL_RCC_OscConfig+0x628>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	4a41      	ldr	r2, [pc, #260]	; (8003294 <HAL_RCC_OscConfig+0x628>)
 800318e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003192:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003194:	f7fe f902 	bl	800139c <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800319c:	f7fe f8fe 	bl	800139c <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e06e      	b.n	800328c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ae:	4b39      	ldr	r3, [pc, #228]	; (8003294 <HAL_RCC_OscConfig+0x628>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0f0      	beq.n	800319c <HAL_RCC_OscConfig+0x530>
 80031ba:	e066      	b.n	800328a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031bc:	4b35      	ldr	r3, [pc, #212]	; (8003294 <HAL_RCC_OscConfig+0x628>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a34      	ldr	r2, [pc, #208]	; (8003294 <HAL_RCC_OscConfig+0x628>)
 80031c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031c6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80031c8:	4b32      	ldr	r3, [pc, #200]	; (8003294 <HAL_RCC_OscConfig+0x628>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	4a31      	ldr	r2, [pc, #196]	; (8003294 <HAL_RCC_OscConfig+0x628>)
 80031ce:	f023 0303 	bic.w	r3, r3, #3
 80031d2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80031d4:	4b2f      	ldr	r3, [pc, #188]	; (8003294 <HAL_RCC_OscConfig+0x628>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	4a2e      	ldr	r2, [pc, #184]	; (8003294 <HAL_RCC_OscConfig+0x628>)
 80031da:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80031de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e4:	f7fe f8da 	bl	800139c <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ec:	f7fe f8d6 	bl	800139c <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e046      	b.n	800328c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031fe:	4b25      	ldr	r3, [pc, #148]	; (8003294 <HAL_RCC_OscConfig+0x628>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1f0      	bne.n	80031ec <HAL_RCC_OscConfig+0x580>
 800320a:	e03e      	b.n	800328a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d101      	bne.n	8003218 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e039      	b.n	800328c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003218:	4b1e      	ldr	r3, [pc, #120]	; (8003294 <HAL_RCC_OscConfig+0x628>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f003 0203 	and.w	r2, r3, #3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	429a      	cmp	r2, r3
 800322a:	d12c      	bne.n	8003286 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	3b01      	subs	r3, #1
 8003238:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800323a:	429a      	cmp	r2, r3
 800323c:	d123      	bne.n	8003286 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003248:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800324a:	429a      	cmp	r2, r3
 800324c:	d11b      	bne.n	8003286 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800325a:	429a      	cmp	r2, r3
 800325c:	d113      	bne.n	8003286 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003268:	085b      	lsrs	r3, r3, #1
 800326a:	3b01      	subs	r3, #1
 800326c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800326e:	429a      	cmp	r2, r3
 8003270:	d109      	bne.n	8003286 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800327c:	085b      	lsrs	r3, r3, #1
 800327e:	3b01      	subs	r3, #1
 8003280:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003282:	429a      	cmp	r2, r3
 8003284:	d001      	beq.n	800328a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e000      	b.n	800328c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3720      	adds	r7, #32
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40021000 	.word	0x40021000
 8003298:	019f800c 	.word	0x019f800c

0800329c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e11e      	b.n	80034f2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032b4:	4b91      	ldr	r3, [pc, #580]	; (80034fc <HAL_RCC_ClockConfig+0x260>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 030f 	and.w	r3, r3, #15
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d910      	bls.n	80032e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032c2:	4b8e      	ldr	r3, [pc, #568]	; (80034fc <HAL_RCC_ClockConfig+0x260>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f023 020f 	bic.w	r2, r3, #15
 80032ca:	498c      	ldr	r1, [pc, #560]	; (80034fc <HAL_RCC_ClockConfig+0x260>)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032d2:	4b8a      	ldr	r3, [pc, #552]	; (80034fc <HAL_RCC_ClockConfig+0x260>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d001      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e106      	b.n	80034f2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d073      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	2b03      	cmp	r3, #3
 80032f6:	d129      	bne.n	800334c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032f8:	4b81      	ldr	r3, [pc, #516]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e0f4      	b.n	80034f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003308:	f000 f9d0 	bl	80036ac <RCC_GetSysClockFreqFromPLLSource>
 800330c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	4a7c      	ldr	r2, [pc, #496]	; (8003504 <HAL_RCC_ClockConfig+0x268>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d93f      	bls.n	8003396 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003316:	4b7a      	ldr	r3, [pc, #488]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d009      	beq.n	8003336 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800332a:	2b00      	cmp	r3, #0
 800332c:	d033      	beq.n	8003396 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003332:	2b00      	cmp	r3, #0
 8003334:	d12f      	bne.n	8003396 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003336:	4b72      	ldr	r3, [pc, #456]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800333e:	4a70      	ldr	r2, [pc, #448]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 8003340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003344:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003346:	2380      	movs	r3, #128	; 0x80
 8003348:	617b      	str	r3, [r7, #20]
 800334a:	e024      	b.n	8003396 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b02      	cmp	r3, #2
 8003352:	d107      	bne.n	8003364 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003354:	4b6a      	ldr	r3, [pc, #424]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d109      	bne.n	8003374 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e0c6      	b.n	80034f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003364:	4b66      	ldr	r3, [pc, #408]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e0be      	b.n	80034f2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003374:	f000 f8ce 	bl	8003514 <HAL_RCC_GetSysClockFreq>
 8003378:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	4a61      	ldr	r2, [pc, #388]	; (8003504 <HAL_RCC_ClockConfig+0x268>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d909      	bls.n	8003396 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003382:	4b5f      	ldr	r3, [pc, #380]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800338a:	4a5d      	ldr	r2, [pc, #372]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 800338c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003390:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003392:	2380      	movs	r3, #128	; 0x80
 8003394:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003396:	4b5a      	ldr	r3, [pc, #360]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f023 0203 	bic.w	r2, r3, #3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	4957      	ldr	r1, [pc, #348]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033a8:	f7fd fff8 	bl	800139c <HAL_GetTick>
 80033ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ae:	e00a      	b.n	80033c6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033b0:	f7fd fff4 	bl	800139c <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80033be:	4293      	cmp	r3, r2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e095      	b.n	80034f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c6:	4b4e      	ldr	r3, [pc, #312]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 020c 	and.w	r2, r3, #12
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d1eb      	bne.n	80033b0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d023      	beq.n	800342c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033f0:	4b43      	ldr	r3, [pc, #268]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	4a42      	ldr	r2, [pc, #264]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 80033f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033fa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	2b00      	cmp	r3, #0
 8003406:	d007      	beq.n	8003418 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003408:	4b3d      	ldr	r3, [pc, #244]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003410:	4a3b      	ldr	r2, [pc, #236]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 8003412:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003416:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003418:	4b39      	ldr	r3, [pc, #228]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	4936      	ldr	r1, [pc, #216]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 8003426:	4313      	orrs	r3, r2
 8003428:	608b      	str	r3, [r1, #8]
 800342a:	e008      	b.n	800343e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	2b80      	cmp	r3, #128	; 0x80
 8003430:	d105      	bne.n	800343e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003432:	4b33      	ldr	r3, [pc, #204]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	4a32      	ldr	r2, [pc, #200]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 8003438:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800343c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800343e:	4b2f      	ldr	r3, [pc, #188]	; (80034fc <HAL_RCC_ClockConfig+0x260>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 030f 	and.w	r3, r3, #15
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	429a      	cmp	r2, r3
 800344a:	d21d      	bcs.n	8003488 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800344c:	4b2b      	ldr	r3, [pc, #172]	; (80034fc <HAL_RCC_ClockConfig+0x260>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f023 020f 	bic.w	r2, r3, #15
 8003454:	4929      	ldr	r1, [pc, #164]	; (80034fc <HAL_RCC_ClockConfig+0x260>)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	4313      	orrs	r3, r2
 800345a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800345c:	f7fd ff9e 	bl	800139c <HAL_GetTick>
 8003460:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003462:	e00a      	b.n	800347a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003464:	f7fd ff9a 	bl	800139c <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003472:	4293      	cmp	r3, r2
 8003474:	d901      	bls.n	800347a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e03b      	b.n	80034f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800347a:	4b20      	ldr	r3, [pc, #128]	; (80034fc <HAL_RCC_ClockConfig+0x260>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	429a      	cmp	r2, r3
 8003486:	d1ed      	bne.n	8003464 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b00      	cmp	r3, #0
 8003492:	d008      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003494:	4b1a      	ldr	r3, [pc, #104]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	4917      	ldr	r1, [pc, #92]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d009      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034b2:	4b13      	ldr	r3, [pc, #76]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	490f      	ldr	r1, [pc, #60]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034c6:	f000 f825 	bl	8003514 <HAL_RCC_GetSysClockFreq>
 80034ca:	4602      	mov	r2, r0
 80034cc:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	091b      	lsrs	r3, r3, #4
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	490c      	ldr	r1, [pc, #48]	; (8003508 <HAL_RCC_ClockConfig+0x26c>)
 80034d8:	5ccb      	ldrb	r3, [r1, r3]
 80034da:	f003 031f 	and.w	r3, r3, #31
 80034de:	fa22 f303 	lsr.w	r3, r2, r3
 80034e2:	4a0a      	ldr	r2, [pc, #40]	; (800350c <HAL_RCC_ClockConfig+0x270>)
 80034e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80034e6:	4b0a      	ldr	r3, [pc, #40]	; (8003510 <HAL_RCC_ClockConfig+0x274>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fd fe46 	bl	800117c <HAL_InitTick>
 80034f0:	4603      	mov	r3, r0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40022000 	.word	0x40022000
 8003500:	40021000 	.word	0x40021000
 8003504:	04c4b400 	.word	0x04c4b400
 8003508:	08005e68 	.word	0x08005e68
 800350c:	20000000 	.word	0x20000000
 8003510:	20000004 	.word	0x20000004

08003514 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003514:	b480      	push	{r7}
 8003516:	b087      	sub	sp, #28
 8003518:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800351a:	4b2c      	ldr	r3, [pc, #176]	; (80035cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 030c 	and.w	r3, r3, #12
 8003522:	2b04      	cmp	r3, #4
 8003524:	d102      	bne.n	800352c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003526:	4b2a      	ldr	r3, [pc, #168]	; (80035d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003528:	613b      	str	r3, [r7, #16]
 800352a:	e047      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800352c:	4b27      	ldr	r3, [pc, #156]	; (80035cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 030c 	and.w	r3, r3, #12
 8003534:	2b08      	cmp	r3, #8
 8003536:	d102      	bne.n	800353e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003538:	4b26      	ldr	r3, [pc, #152]	; (80035d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800353a:	613b      	str	r3, [r7, #16]
 800353c:	e03e      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800353e:	4b23      	ldr	r3, [pc, #140]	; (80035cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 030c 	and.w	r3, r3, #12
 8003546:	2b0c      	cmp	r3, #12
 8003548:	d136      	bne.n	80035b8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800354a:	4b20      	ldr	r3, [pc, #128]	; (80035cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003554:	4b1d      	ldr	r3, [pc, #116]	; (80035cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	091b      	lsrs	r3, r3, #4
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	3301      	adds	r3, #1
 8003560:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2b03      	cmp	r3, #3
 8003566:	d10c      	bne.n	8003582 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003568:	4a1a      	ldr	r2, [pc, #104]	; (80035d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003570:	4a16      	ldr	r2, [pc, #88]	; (80035cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003572:	68d2      	ldr	r2, [r2, #12]
 8003574:	0a12      	lsrs	r2, r2, #8
 8003576:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800357a:	fb02 f303 	mul.w	r3, r2, r3
 800357e:	617b      	str	r3, [r7, #20]
      break;
 8003580:	e00c      	b.n	800359c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003582:	4a13      	ldr	r2, [pc, #76]	; (80035d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	fbb2 f3f3 	udiv	r3, r2, r3
 800358a:	4a10      	ldr	r2, [pc, #64]	; (80035cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800358c:	68d2      	ldr	r2, [r2, #12]
 800358e:	0a12      	lsrs	r2, r2, #8
 8003590:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003594:	fb02 f303 	mul.w	r3, r2, r3
 8003598:	617b      	str	r3, [r7, #20]
      break;
 800359a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800359c:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	0e5b      	lsrs	r3, r3, #25
 80035a2:	f003 0303 	and.w	r3, r3, #3
 80035a6:	3301      	adds	r3, #1
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	e001      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80035b8:	2300      	movs	r3, #0
 80035ba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80035bc:	693b      	ldr	r3, [r7, #16]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	371c      	adds	r7, #28
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40021000 	.word	0x40021000
 80035d0:	00f42400 	.word	0x00f42400
 80035d4:	016e3600 	.word	0x016e3600

080035d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035dc:	4b03      	ldr	r3, [pc, #12]	; (80035ec <HAL_RCC_GetHCLKFreq+0x14>)
 80035de:	681b      	ldr	r3, [r3, #0]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	20000000 	.word	0x20000000

080035f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80035f4:	f7ff fff0 	bl	80035d8 <HAL_RCC_GetHCLKFreq>
 80035f8:	4602      	mov	r2, r0
 80035fa:	4b06      	ldr	r3, [pc, #24]	; (8003614 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	0a1b      	lsrs	r3, r3, #8
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	4904      	ldr	r1, [pc, #16]	; (8003618 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003606:	5ccb      	ldrb	r3, [r1, r3]
 8003608:	f003 031f 	and.w	r3, r3, #31
 800360c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003610:	4618      	mov	r0, r3
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40021000 	.word	0x40021000
 8003618:	08005e78 	.word	0x08005e78

0800361c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003620:	f7ff ffda 	bl	80035d8 <HAL_RCC_GetHCLKFreq>
 8003624:	4602      	mov	r2, r0
 8003626:	4b06      	ldr	r3, [pc, #24]	; (8003640 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	0adb      	lsrs	r3, r3, #11
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	4904      	ldr	r1, [pc, #16]	; (8003644 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003632:	5ccb      	ldrb	r3, [r1, r3]
 8003634:	f003 031f 	and.w	r3, r3, #31
 8003638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800363c:	4618      	mov	r0, r3
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40021000 	.word	0x40021000
 8003644:	08005e78 	.word	0x08005e78

08003648 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	220f      	movs	r2, #15
 8003656:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003658:	4b12      	ldr	r3, [pc, #72]	; (80036a4 <HAL_RCC_GetClockConfig+0x5c>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 0203 	and.w	r2, r3, #3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003664:	4b0f      	ldr	r3, [pc, #60]	; (80036a4 <HAL_RCC_GetClockConfig+0x5c>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003670:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <HAL_RCC_GetClockConfig+0x5c>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800367c:	4b09      	ldr	r3, [pc, #36]	; (80036a4 <HAL_RCC_GetClockConfig+0x5c>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	08db      	lsrs	r3, r3, #3
 8003682:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800368a:	4b07      	ldr	r3, [pc, #28]	; (80036a8 <HAL_RCC_GetClockConfig+0x60>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 020f 	and.w	r2, r3, #15
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	601a      	str	r2, [r3, #0]
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	40021000 	.word	0x40021000
 80036a8:	40022000 	.word	0x40022000

080036ac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036b2:	4b1e      	ldr	r3, [pc, #120]	; (800372c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036bc:	4b1b      	ldr	r3, [pc, #108]	; (800372c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	091b      	lsrs	r3, r3, #4
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	3301      	adds	r3, #1
 80036c8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	2b03      	cmp	r3, #3
 80036ce:	d10c      	bne.n	80036ea <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036d0:	4a17      	ldr	r2, [pc, #92]	; (8003730 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d8:	4a14      	ldr	r2, [pc, #80]	; (800372c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036da:	68d2      	ldr	r2, [r2, #12]
 80036dc:	0a12      	lsrs	r2, r2, #8
 80036de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036e2:	fb02 f303 	mul.w	r3, r2, r3
 80036e6:	617b      	str	r3, [r7, #20]
    break;
 80036e8:	e00c      	b.n	8003704 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036ea:	4a12      	ldr	r2, [pc, #72]	; (8003734 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f2:	4a0e      	ldr	r2, [pc, #56]	; (800372c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036f4:	68d2      	ldr	r2, [r2, #12]
 80036f6:	0a12      	lsrs	r2, r2, #8
 80036f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036fc:	fb02 f303 	mul.w	r3, r2, r3
 8003700:	617b      	str	r3, [r7, #20]
    break;
 8003702:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003704:	4b09      	ldr	r3, [pc, #36]	; (800372c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	0e5b      	lsrs	r3, r3, #25
 800370a:	f003 0303 	and.w	r3, r3, #3
 800370e:	3301      	adds	r3, #1
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	fbb2 f3f3 	udiv	r3, r2, r3
 800371c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800371e:	687b      	ldr	r3, [r7, #4]
}
 8003720:	4618      	mov	r0, r3
 8003722:	371c      	adds	r7, #28
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	40021000 	.word	0x40021000
 8003730:	016e3600 	.word	0x016e3600
 8003734:	00f42400 	.word	0x00f42400

08003738 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003740:	2300      	movs	r3, #0
 8003742:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003744:	2300      	movs	r3, #0
 8003746:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 8098 	beq.w	8003886 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003756:	2300      	movs	r3, #0
 8003758:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800375a:	4b43      	ldr	r3, [pc, #268]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800375c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10d      	bne.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003766:	4b40      	ldr	r3, [pc, #256]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376a:	4a3f      	ldr	r2, [pc, #252]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800376c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003770:	6593      	str	r3, [r2, #88]	; 0x58
 8003772:	4b3d      	ldr	r3, [pc, #244]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377a:	60bb      	str	r3, [r7, #8]
 800377c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800377e:	2301      	movs	r3, #1
 8003780:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003782:	4b3a      	ldr	r3, [pc, #232]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a39      	ldr	r2, [pc, #228]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800378c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800378e:	f7fd fe05 	bl	800139c <HAL_GetTick>
 8003792:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003794:	e009      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003796:	f7fd fe01 	bl	800139c <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d902      	bls.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	74fb      	strb	r3, [r7, #19]
        break;
 80037a8:	e005      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037aa:	4b30      	ldr	r3, [pc, #192]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0ef      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80037b6:	7cfb      	ldrb	r3, [r7, #19]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d159      	bne.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037bc:	4b2a      	ldr	r3, [pc, #168]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d01e      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d019      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037d8:	4b23      	ldr	r3, [pc, #140]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037e4:	4b20      	ldr	r3, [pc, #128]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ea:	4a1f      	ldr	r2, [pc, #124]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037f4:	4b1c      	ldr	r3, [pc, #112]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fa:	4a1b      	ldr	r2, [pc, #108]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003800:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003804:	4a18      	ldr	r2, [pc, #96]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d016      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003816:	f7fd fdc1 	bl	800139c <HAL_GetTick>
 800381a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800381c:	e00b      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800381e:	f7fd fdbd 	bl	800139c <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	f241 3288 	movw	r2, #5000	; 0x1388
 800382c:	4293      	cmp	r3, r2
 800382e:	d902      	bls.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	74fb      	strb	r3, [r7, #19]
            break;
 8003834:	e006      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003836:	4b0c      	ldr	r3, [pc, #48]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0ec      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003844:	7cfb      	ldrb	r3, [r7, #19]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10b      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800384a:	4b07      	ldr	r3, [pc, #28]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800384c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003850:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003858:	4903      	ldr	r1, [pc, #12]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800385a:	4313      	orrs	r3, r2
 800385c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003860:	e008      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003862:	7cfb      	ldrb	r3, [r7, #19]
 8003864:	74bb      	strb	r3, [r7, #18]
 8003866:	e005      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003868:	40021000 	.word	0x40021000
 800386c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003870:	7cfb      	ldrb	r3, [r7, #19]
 8003872:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003874:	7c7b      	ldrb	r3, [r7, #17]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d105      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800387a:	4ba7      	ldr	r3, [pc, #668]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800387c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387e:	4aa6      	ldr	r2, [pc, #664]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003884:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00a      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003892:	4ba1      	ldr	r3, [pc, #644]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003898:	f023 0203 	bic.w	r2, r3, #3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	499d      	ldr	r1, [pc, #628]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00a      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038b4:	4b98      	ldr	r3, [pc, #608]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ba:	f023 020c 	bic.w	r2, r3, #12
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	4995      	ldr	r1, [pc, #596]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00a      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038d6:	4b90      	ldr	r3, [pc, #576]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	498c      	ldr	r1, [pc, #560]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0308 	and.w	r3, r3, #8
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00a      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038f8:	4b87      	ldr	r3, [pc, #540]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	4984      	ldr	r1, [pc, #528]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003908:	4313      	orrs	r3, r2
 800390a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0310 	and.w	r3, r3, #16
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00a      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800391a:	4b7f      	ldr	r3, [pc, #508]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800391c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003920:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	497b      	ldr	r1, [pc, #492]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800392a:	4313      	orrs	r3, r2
 800392c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0320 	and.w	r3, r3, #32
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00a      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800393c:	4b76      	ldr	r3, [pc, #472]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800393e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003942:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	4973      	ldr	r1, [pc, #460]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800394c:	4313      	orrs	r3, r2
 800394e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00a      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800395e:	4b6e      	ldr	r3, [pc, #440]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003964:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	69db      	ldr	r3, [r3, #28]
 800396c:	496a      	ldr	r1, [pc, #424]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800396e:	4313      	orrs	r3, r2
 8003970:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00a      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003980:	4b65      	ldr	r3, [pc, #404]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003986:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	4962      	ldr	r1, [pc, #392]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003990:	4313      	orrs	r3, r2
 8003992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039a2:	4b5d      	ldr	r3, [pc, #372]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	4959      	ldr	r1, [pc, #356]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00a      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80039c4:	4b54      	ldr	r3, [pc, #336]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039ca:	f023 0203 	bic.w	r2, r3, #3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d2:	4951      	ldr	r1, [pc, #324]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00a      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039e6:	4b4c      	ldr	r3, [pc, #304]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	4948      	ldr	r1, [pc, #288]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d015      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a08:	4b43      	ldr	r3, [pc, #268]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	4940      	ldr	r1, [pc, #256]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a26:	d105      	bne.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a28:	4b3b      	ldr	r3, [pc, #236]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	4a3a      	ldr	r2, [pc, #232]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a32:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d015      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a40:	4b35      	ldr	r3, [pc, #212]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4e:	4932      	ldr	r1, [pc, #200]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a5e:	d105      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a60:	4b2d      	ldr	r3, [pc, #180]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	4a2c      	ldr	r2, [pc, #176]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a6a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d015      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a78:	4b27      	ldr	r3, [pc, #156]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a86:	4924      	ldr	r1, [pc, #144]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a96:	d105      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a98:	4b1f      	ldr	r3, [pc, #124]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	4a1e      	ldr	r2, [pc, #120]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003aa2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d015      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ab0:	4b19      	ldr	r3, [pc, #100]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003abe:	4916      	ldr	r1, [pc, #88]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ace:	d105      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ad0:	4b11      	ldr	r3, [pc, #68]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	4a10      	ldr	r2, [pc, #64]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ada:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d019      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ae8:	4b0b      	ldr	r3, [pc, #44]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	4908      	ldr	r1, [pc, #32]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b06:	d109      	bne.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b08:	4b03      	ldr	r3, [pc, #12]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	4a02      	ldr	r2, [pc, #8]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b12:	60d3      	str	r3, [r2, #12]
 8003b14:	e002      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003b16:	bf00      	nop
 8003b18:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d015      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b28:	4b29      	ldr	r3, [pc, #164]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b36:	4926      	ldr	r1, [pc, #152]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b46:	d105      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b48:	4b21      	ldr	r3, [pc, #132]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	4a20      	ldr	r2, [pc, #128]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b52:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d015      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003b60:	4b1b      	ldr	r3, [pc, #108]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b66:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b6e:	4918      	ldr	r1, [pc, #96]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b7e:	d105      	bne.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b80:	4b13      	ldr	r3, [pc, #76]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	4a12      	ldr	r2, [pc, #72]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b8a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d015      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b98:	4b0d      	ldr	r3, [pc, #52]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba6:	490a      	ldr	r1, [pc, #40]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bb6:	d105      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bb8:	4b05      	ldr	r3, [pc, #20]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	4a04      	ldr	r2, [pc, #16]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bc2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003bc4:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3718      	adds	r7, #24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	40021000 	.word	0x40021000

08003bd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e049      	b.n	8003c7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d106      	bne.n	8003c00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f841 	bl	8003c82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2202      	movs	r2, #2
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3304      	adds	r3, #4
 8003c10:	4619      	mov	r1, r3
 8003c12:	4610      	mov	r0, r2
 8003c14:	f000 fbca 	bl	80043ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
	...

08003c98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d001      	beq.n	8003cb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e054      	b.n	8003d5a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68da      	ldr	r2, [r3, #12]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a26      	ldr	r2, [pc, #152]	; (8003d68 <HAL_TIM_Base_Start_IT+0xd0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d022      	beq.n	8003d18 <HAL_TIM_Base_Start_IT+0x80>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cda:	d01d      	beq.n	8003d18 <HAL_TIM_Base_Start_IT+0x80>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a22      	ldr	r2, [pc, #136]	; (8003d6c <HAL_TIM_Base_Start_IT+0xd4>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d018      	beq.n	8003d18 <HAL_TIM_Base_Start_IT+0x80>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a21      	ldr	r2, [pc, #132]	; (8003d70 <HAL_TIM_Base_Start_IT+0xd8>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d013      	beq.n	8003d18 <HAL_TIM_Base_Start_IT+0x80>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a1f      	ldr	r2, [pc, #124]	; (8003d74 <HAL_TIM_Base_Start_IT+0xdc>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d00e      	beq.n	8003d18 <HAL_TIM_Base_Start_IT+0x80>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a1e      	ldr	r2, [pc, #120]	; (8003d78 <HAL_TIM_Base_Start_IT+0xe0>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d009      	beq.n	8003d18 <HAL_TIM_Base_Start_IT+0x80>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a1c      	ldr	r2, [pc, #112]	; (8003d7c <HAL_TIM_Base_Start_IT+0xe4>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d004      	beq.n	8003d18 <HAL_TIM_Base_Start_IT+0x80>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a1b      	ldr	r2, [pc, #108]	; (8003d80 <HAL_TIM_Base_Start_IT+0xe8>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d115      	bne.n	8003d44 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689a      	ldr	r2, [r3, #8]
 8003d1e:	4b19      	ldr	r3, [pc, #100]	; (8003d84 <HAL_TIM_Base_Start_IT+0xec>)
 8003d20:	4013      	ands	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2b06      	cmp	r3, #6
 8003d28:	d015      	beq.n	8003d56 <HAL_TIM_Base_Start_IT+0xbe>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d30:	d011      	beq.n	8003d56 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f042 0201 	orr.w	r2, r2, #1
 8003d40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d42:	e008      	b.n	8003d56 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0201 	orr.w	r2, r2, #1
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	e000      	b.n	8003d58 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3714      	adds	r7, #20
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	40012c00 	.word	0x40012c00
 8003d6c:	40000400 	.word	0x40000400
 8003d70:	40000800 	.word	0x40000800
 8003d74:	40000c00 	.word	0x40000c00
 8003d78:	40013400 	.word	0x40013400
 8003d7c:	40014000 	.word	0x40014000
 8003d80:	40015000 	.word	0x40015000
 8003d84:	00010007 	.word	0x00010007

08003d88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e049      	b.n	8003e2e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d106      	bne.n	8003db4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7fd f862 	bl	8000e78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3304      	adds	r3, #4
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4610      	mov	r0, r2
 8003dc8:	f000 faf0 	bl	80043ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b082      	sub	sp, #8
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d122      	bne.n	8003e92 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d11b      	bne.n	8003e92 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f06f 0202 	mvn.w	r2, #2
 8003e62:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	f003 0303 	and.w	r3, r3, #3
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d003      	beq.n	8003e80 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 fa79 	bl	8004370 <HAL_TIM_IC_CaptureCallback>
 8003e7e:	e005      	b.n	8003e8c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 fa6b 	bl	800435c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 fa7c 	bl	8004384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d122      	bne.n	8003ee6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f003 0304 	and.w	r3, r3, #4
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	d11b      	bne.n	8003ee6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f06f 0204 	mvn.w	r2, #4
 8003eb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 fa4f 	bl	8004370 <HAL_TIM_IC_CaptureCallback>
 8003ed2:	e005      	b.n	8003ee0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 fa41 	bl	800435c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 fa52 	bl	8004384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	f003 0308 	and.w	r3, r3, #8
 8003ef0:	2b08      	cmp	r3, #8
 8003ef2:	d122      	bne.n	8003f3a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f003 0308 	and.w	r3, r3, #8
 8003efe:	2b08      	cmp	r3, #8
 8003f00:	d11b      	bne.n	8003f3a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f06f 0208 	mvn.w	r2, #8
 8003f0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2204      	movs	r2, #4
 8003f10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	69db      	ldr	r3, [r3, #28]
 8003f18:	f003 0303 	and.w	r3, r3, #3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d003      	beq.n	8003f28 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 fa25 	bl	8004370 <HAL_TIM_IC_CaptureCallback>
 8003f26:	e005      	b.n	8003f34 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 fa17 	bl	800435c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 fa28 	bl	8004384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	f003 0310 	and.w	r3, r3, #16
 8003f44:	2b10      	cmp	r3, #16
 8003f46:	d122      	bne.n	8003f8e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f003 0310 	and.w	r3, r3, #16
 8003f52:	2b10      	cmp	r3, #16
 8003f54:	d11b      	bne.n	8003f8e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f06f 0210 	mvn.w	r2, #16
 8003f5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2208      	movs	r2, #8
 8003f64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d003      	beq.n	8003f7c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f9fb 	bl	8004370 <HAL_TIM_IC_CaptureCallback>
 8003f7a:	e005      	b.n	8003f88 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f9ed 	bl	800435c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f9fe 	bl	8004384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d10e      	bne.n	8003fba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d107      	bne.n	8003fba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f06f 0201 	mvn.w	r2, #1
 8003fb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f7fc fe29 	bl	8000c0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc4:	2b80      	cmp	r3, #128	; 0x80
 8003fc6:	d10e      	bne.n	8003fe6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd2:	2b80      	cmp	r3, #128	; 0x80
 8003fd4:	d107      	bne.n	8003fe6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f001 f82b 	bl	800503c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ff4:	d10e      	bne.n	8004014 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004000:	2b80      	cmp	r3, #128	; 0x80
 8004002:	d107      	bne.n	8004014 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800400c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f001 f81e 	bl	8005050 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401e:	2b40      	cmp	r3, #64	; 0x40
 8004020:	d10e      	bne.n	8004040 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402c:	2b40      	cmp	r3, #64	; 0x40
 800402e:	d107      	bne.n	8004040 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f9ac 	bl	8004398 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	f003 0320 	and.w	r3, r3, #32
 800404a:	2b20      	cmp	r3, #32
 800404c:	d10e      	bne.n	800406c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	f003 0320 	and.w	r3, r3, #32
 8004058:	2b20      	cmp	r3, #32
 800405a:	d107      	bne.n	800406c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f06f 0220 	mvn.w	r2, #32
 8004064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 ffde 	bl	8005028 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800407a:	d10f      	bne.n	800409c <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004086:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800408a:	d107      	bne.n	800409c <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 ffe4 	bl	8005064 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040aa:	d10f      	bne.n	80040cc <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040ba:	d107      	bne.n	80040cc <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80040c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 ffd6 	bl	8005078 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040da:	d10f      	bne.n	80040fc <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040ea:	d107      	bne.n	80040fc <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80040f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 ffc8 	bl	800508c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004106:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800410a:	d10f      	bne.n	800412c <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004116:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800411a:	d107      	bne.n	800412c <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 ffba 	bl	80050a0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800412c:	bf00      	nop
 800412e:	3708      	adds	r7, #8
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004140:	2300      	movs	r3, #0
 8004142:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800414a:	2b01      	cmp	r3, #1
 800414c:	d101      	bne.n	8004152 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800414e:	2302      	movs	r3, #2
 8004150:	e0ff      	b.n	8004352 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b14      	cmp	r3, #20
 800415e:	f200 80f0 	bhi.w	8004342 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004162:	a201      	add	r2, pc, #4	; (adr r2, 8004168 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004168:	080041bd 	.word	0x080041bd
 800416c:	08004343 	.word	0x08004343
 8004170:	08004343 	.word	0x08004343
 8004174:	08004343 	.word	0x08004343
 8004178:	080041fd 	.word	0x080041fd
 800417c:	08004343 	.word	0x08004343
 8004180:	08004343 	.word	0x08004343
 8004184:	08004343 	.word	0x08004343
 8004188:	0800423f 	.word	0x0800423f
 800418c:	08004343 	.word	0x08004343
 8004190:	08004343 	.word	0x08004343
 8004194:	08004343 	.word	0x08004343
 8004198:	0800427f 	.word	0x0800427f
 800419c:	08004343 	.word	0x08004343
 80041a0:	08004343 	.word	0x08004343
 80041a4:	08004343 	.word	0x08004343
 80041a8:	080042c1 	.word	0x080042c1
 80041ac:	08004343 	.word	0x08004343
 80041b0:	08004343 	.word	0x08004343
 80041b4:	08004343 	.word	0x08004343
 80041b8:	08004301 	.word	0x08004301
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68b9      	ldr	r1, [r7, #8]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 f99a 	bl	80044fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	699a      	ldr	r2, [r3, #24]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0208 	orr.w	r2, r2, #8
 80041d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	699a      	ldr	r2, [r3, #24]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f022 0204 	bic.w	r2, r2, #4
 80041e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6999      	ldr	r1, [r3, #24]
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	691a      	ldr	r2, [r3, #16]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	619a      	str	r2, [r3, #24]
      break;
 80041fa:	e0a5      	b.n	8004348 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68b9      	ldr	r1, [r7, #8]
 8004202:	4618      	mov	r0, r3
 8004204:	f000 fa14 	bl	8004630 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699a      	ldr	r2, [r3, #24]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004216:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699a      	ldr	r2, [r3, #24]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004226:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6999      	ldr	r1, [r3, #24]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	021a      	lsls	r2, r3, #8
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	619a      	str	r2, [r3, #24]
      break;
 800423c:	e084      	b.n	8004348 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68b9      	ldr	r1, [r7, #8]
 8004244:	4618      	mov	r0, r3
 8004246:	f000 fa87 	bl	8004758 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	69da      	ldr	r2, [r3, #28]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f042 0208 	orr.w	r2, r2, #8
 8004258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	69da      	ldr	r2, [r3, #28]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 0204 	bic.w	r2, r2, #4
 8004268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	69d9      	ldr	r1, [r3, #28]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	691a      	ldr	r2, [r3, #16]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	61da      	str	r2, [r3, #28]
      break;
 800427c:	e064      	b.n	8004348 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68b9      	ldr	r1, [r7, #8]
 8004284:	4618      	mov	r0, r3
 8004286:	f000 faf9 	bl	800487c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	69da      	ldr	r2, [r3, #28]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004298:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	69da      	ldr	r2, [r3, #28]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	69d9      	ldr	r1, [r3, #28]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	021a      	lsls	r2, r3, #8
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	61da      	str	r2, [r3, #28]
      break;
 80042be:	e043      	b.n	8004348 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68b9      	ldr	r1, [r7, #8]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 fb6c 	bl	80049a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f042 0208 	orr.w	r2, r2, #8
 80042da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 0204 	bic.w	r2, r2, #4
 80042ea:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	691a      	ldr	r2, [r3, #16]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80042fe:	e023      	b.n	8004348 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68b9      	ldr	r1, [r7, #8]
 8004306:	4618      	mov	r0, r3
 8004308:	f000 fbb6 	bl	8004a78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800431a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800432a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	021a      	lsls	r2, r3, #8
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	430a      	orrs	r2, r1
 800433e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004340:	e002      	b.n	8004348 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	75fb      	strb	r3, [r7, #23]
      break;
 8004346:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004350:	7dfb      	ldrb	r3, [r7, #23]
}
 8004352:	4618      	mov	r0, r3
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop

0800435c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a46      	ldr	r2, [pc, #280]	; (80044d8 <TIM_Base_SetConfig+0x12c>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d017      	beq.n	80043f4 <TIM_Base_SetConfig+0x48>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ca:	d013      	beq.n	80043f4 <TIM_Base_SetConfig+0x48>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a43      	ldr	r2, [pc, #268]	; (80044dc <TIM_Base_SetConfig+0x130>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d00f      	beq.n	80043f4 <TIM_Base_SetConfig+0x48>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a42      	ldr	r2, [pc, #264]	; (80044e0 <TIM_Base_SetConfig+0x134>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d00b      	beq.n	80043f4 <TIM_Base_SetConfig+0x48>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a41      	ldr	r2, [pc, #260]	; (80044e4 <TIM_Base_SetConfig+0x138>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d007      	beq.n	80043f4 <TIM_Base_SetConfig+0x48>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a40      	ldr	r2, [pc, #256]	; (80044e8 <TIM_Base_SetConfig+0x13c>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d003      	beq.n	80043f4 <TIM_Base_SetConfig+0x48>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a3f      	ldr	r2, [pc, #252]	; (80044ec <TIM_Base_SetConfig+0x140>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d108      	bne.n	8004406 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	4313      	orrs	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a33      	ldr	r2, [pc, #204]	; (80044d8 <TIM_Base_SetConfig+0x12c>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d023      	beq.n	8004456 <TIM_Base_SetConfig+0xaa>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004414:	d01f      	beq.n	8004456 <TIM_Base_SetConfig+0xaa>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a30      	ldr	r2, [pc, #192]	; (80044dc <TIM_Base_SetConfig+0x130>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d01b      	beq.n	8004456 <TIM_Base_SetConfig+0xaa>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a2f      	ldr	r2, [pc, #188]	; (80044e0 <TIM_Base_SetConfig+0x134>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d017      	beq.n	8004456 <TIM_Base_SetConfig+0xaa>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a2e      	ldr	r2, [pc, #184]	; (80044e4 <TIM_Base_SetConfig+0x138>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d013      	beq.n	8004456 <TIM_Base_SetConfig+0xaa>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a2d      	ldr	r2, [pc, #180]	; (80044e8 <TIM_Base_SetConfig+0x13c>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d00f      	beq.n	8004456 <TIM_Base_SetConfig+0xaa>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a2d      	ldr	r2, [pc, #180]	; (80044f0 <TIM_Base_SetConfig+0x144>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d00b      	beq.n	8004456 <TIM_Base_SetConfig+0xaa>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a2c      	ldr	r2, [pc, #176]	; (80044f4 <TIM_Base_SetConfig+0x148>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d007      	beq.n	8004456 <TIM_Base_SetConfig+0xaa>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a2b      	ldr	r2, [pc, #172]	; (80044f8 <TIM_Base_SetConfig+0x14c>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d003      	beq.n	8004456 <TIM_Base_SetConfig+0xaa>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a26      	ldr	r2, [pc, #152]	; (80044ec <TIM_Base_SetConfig+0x140>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d108      	bne.n	8004468 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800445c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	4313      	orrs	r3, r2
 8004466:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	4313      	orrs	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a12      	ldr	r2, [pc, #72]	; (80044d8 <TIM_Base_SetConfig+0x12c>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d013      	beq.n	80044bc <TIM_Base_SetConfig+0x110>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a14      	ldr	r2, [pc, #80]	; (80044e8 <TIM_Base_SetConfig+0x13c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d00f      	beq.n	80044bc <TIM_Base_SetConfig+0x110>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a14      	ldr	r2, [pc, #80]	; (80044f0 <TIM_Base_SetConfig+0x144>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d00b      	beq.n	80044bc <TIM_Base_SetConfig+0x110>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a13      	ldr	r2, [pc, #76]	; (80044f4 <TIM_Base_SetConfig+0x148>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d007      	beq.n	80044bc <TIM_Base_SetConfig+0x110>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a12      	ldr	r2, [pc, #72]	; (80044f8 <TIM_Base_SetConfig+0x14c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d003      	beq.n	80044bc <TIM_Base_SetConfig+0x110>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a0d      	ldr	r2, [pc, #52]	; (80044ec <TIM_Base_SetConfig+0x140>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d103      	bne.n	80044c4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	691a      	ldr	r2, [r3, #16]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	615a      	str	r2, [r3, #20]
}
 80044ca:	bf00      	nop
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	40012c00 	.word	0x40012c00
 80044dc:	40000400 	.word	0x40000400
 80044e0:	40000800 	.word	0x40000800
 80044e4:	40000c00 	.word	0x40000c00
 80044e8:	40013400 	.word	0x40013400
 80044ec:	40015000 	.word	0x40015000
 80044f0:	40014000 	.word	0x40014000
 80044f4:	40014400 	.word	0x40014400
 80044f8:	40014800 	.word	0x40014800

080044fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b087      	sub	sp, #28
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	f023 0201 	bic.w	r2, r3, #1
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800452a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800452e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f023 0303 	bic.w	r3, r3, #3
 8004536:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	4313      	orrs	r3, r2
 8004540:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f023 0302 	bic.w	r3, r3, #2
 8004548:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	4313      	orrs	r3, r2
 8004552:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a30      	ldr	r2, [pc, #192]	; (8004618 <TIM_OC1_SetConfig+0x11c>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d013      	beq.n	8004584 <TIM_OC1_SetConfig+0x88>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a2f      	ldr	r2, [pc, #188]	; (800461c <TIM_OC1_SetConfig+0x120>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d00f      	beq.n	8004584 <TIM_OC1_SetConfig+0x88>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a2e      	ldr	r2, [pc, #184]	; (8004620 <TIM_OC1_SetConfig+0x124>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d00b      	beq.n	8004584 <TIM_OC1_SetConfig+0x88>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a2d      	ldr	r2, [pc, #180]	; (8004624 <TIM_OC1_SetConfig+0x128>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d007      	beq.n	8004584 <TIM_OC1_SetConfig+0x88>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a2c      	ldr	r2, [pc, #176]	; (8004628 <TIM_OC1_SetConfig+0x12c>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d003      	beq.n	8004584 <TIM_OC1_SetConfig+0x88>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a2b      	ldr	r2, [pc, #172]	; (800462c <TIM_OC1_SetConfig+0x130>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d10c      	bne.n	800459e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f023 0308 	bic.w	r3, r3, #8
 800458a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	4313      	orrs	r3, r2
 8004594:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f023 0304 	bic.w	r3, r3, #4
 800459c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a1d      	ldr	r2, [pc, #116]	; (8004618 <TIM_OC1_SetConfig+0x11c>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d013      	beq.n	80045ce <TIM_OC1_SetConfig+0xd2>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a1c      	ldr	r2, [pc, #112]	; (800461c <TIM_OC1_SetConfig+0x120>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d00f      	beq.n	80045ce <TIM_OC1_SetConfig+0xd2>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a1b      	ldr	r2, [pc, #108]	; (8004620 <TIM_OC1_SetConfig+0x124>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d00b      	beq.n	80045ce <TIM_OC1_SetConfig+0xd2>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a1a      	ldr	r2, [pc, #104]	; (8004624 <TIM_OC1_SetConfig+0x128>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d007      	beq.n	80045ce <TIM_OC1_SetConfig+0xd2>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a19      	ldr	r2, [pc, #100]	; (8004628 <TIM_OC1_SetConfig+0x12c>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d003      	beq.n	80045ce <TIM_OC1_SetConfig+0xd2>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a18      	ldr	r2, [pc, #96]	; (800462c <TIM_OC1_SetConfig+0x130>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d111      	bne.n	80045f2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	621a      	str	r2, [r3, #32]
}
 800460c:	bf00      	nop
 800460e:	371c      	adds	r7, #28
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	40012c00 	.word	0x40012c00
 800461c:	40013400 	.word	0x40013400
 8004620:	40014000 	.word	0x40014000
 8004624:	40014400 	.word	0x40014400
 8004628:	40014800 	.word	0x40014800
 800462c:	40015000 	.word	0x40015000

08004630 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004630:	b480      	push	{r7}
 8004632:	b087      	sub	sp, #28
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	f023 0210 	bic.w	r2, r3, #16
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800465e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800466a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	021b      	lsls	r3, r3, #8
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	4313      	orrs	r3, r2
 8004676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f023 0320 	bic.w	r3, r3, #32
 800467e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	011b      	lsls	r3, r3, #4
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	4313      	orrs	r3, r2
 800468a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a2c      	ldr	r2, [pc, #176]	; (8004740 <TIM_OC2_SetConfig+0x110>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d007      	beq.n	80046a4 <TIM_OC2_SetConfig+0x74>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a2b      	ldr	r2, [pc, #172]	; (8004744 <TIM_OC2_SetConfig+0x114>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d003      	beq.n	80046a4 <TIM_OC2_SetConfig+0x74>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a2a      	ldr	r2, [pc, #168]	; (8004748 <TIM_OC2_SetConfig+0x118>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d10d      	bne.n	80046c0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	011b      	lsls	r3, r3, #4
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a1f      	ldr	r2, [pc, #124]	; (8004740 <TIM_OC2_SetConfig+0x110>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d013      	beq.n	80046f0 <TIM_OC2_SetConfig+0xc0>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a1e      	ldr	r2, [pc, #120]	; (8004744 <TIM_OC2_SetConfig+0x114>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d00f      	beq.n	80046f0 <TIM_OC2_SetConfig+0xc0>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a1e      	ldr	r2, [pc, #120]	; (800474c <TIM_OC2_SetConfig+0x11c>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d00b      	beq.n	80046f0 <TIM_OC2_SetConfig+0xc0>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a1d      	ldr	r2, [pc, #116]	; (8004750 <TIM_OC2_SetConfig+0x120>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d007      	beq.n	80046f0 <TIM_OC2_SetConfig+0xc0>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a1c      	ldr	r2, [pc, #112]	; (8004754 <TIM_OC2_SetConfig+0x124>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d003      	beq.n	80046f0 <TIM_OC2_SetConfig+0xc0>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a17      	ldr	r2, [pc, #92]	; (8004748 <TIM_OC2_SetConfig+0x118>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d113      	bne.n	8004718 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	4313      	orrs	r3, r2
 800470a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	4313      	orrs	r3, r2
 8004716:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	621a      	str	r2, [r3, #32]
}
 8004732:	bf00      	nop
 8004734:	371c      	adds	r7, #28
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	40012c00 	.word	0x40012c00
 8004744:	40013400 	.word	0x40013400
 8004748:	40015000 	.word	0x40015000
 800474c:	40014000 	.word	0x40014000
 8004750:	40014400 	.word	0x40014400
 8004754:	40014800 	.word	0x40014800

08004758 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004758:	b480      	push	{r7}
 800475a:	b087      	sub	sp, #28
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800478a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f023 0303 	bic.w	r3, r3, #3
 8004792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	4313      	orrs	r3, r2
 800479c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	021b      	lsls	r3, r3, #8
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a2b      	ldr	r2, [pc, #172]	; (8004864 <TIM_OC3_SetConfig+0x10c>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d007      	beq.n	80047ca <TIM_OC3_SetConfig+0x72>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a2a      	ldr	r2, [pc, #168]	; (8004868 <TIM_OC3_SetConfig+0x110>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d003      	beq.n	80047ca <TIM_OC3_SetConfig+0x72>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a29      	ldr	r2, [pc, #164]	; (800486c <TIM_OC3_SetConfig+0x114>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d10d      	bne.n	80047e6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	021b      	lsls	r3, r3, #8
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	4313      	orrs	r3, r2
 80047dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a1e      	ldr	r2, [pc, #120]	; (8004864 <TIM_OC3_SetConfig+0x10c>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d013      	beq.n	8004816 <TIM_OC3_SetConfig+0xbe>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a1d      	ldr	r2, [pc, #116]	; (8004868 <TIM_OC3_SetConfig+0x110>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d00f      	beq.n	8004816 <TIM_OC3_SetConfig+0xbe>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a1d      	ldr	r2, [pc, #116]	; (8004870 <TIM_OC3_SetConfig+0x118>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d00b      	beq.n	8004816 <TIM_OC3_SetConfig+0xbe>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a1c      	ldr	r2, [pc, #112]	; (8004874 <TIM_OC3_SetConfig+0x11c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d007      	beq.n	8004816 <TIM_OC3_SetConfig+0xbe>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a1b      	ldr	r2, [pc, #108]	; (8004878 <TIM_OC3_SetConfig+0x120>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d003      	beq.n	8004816 <TIM_OC3_SetConfig+0xbe>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a16      	ldr	r2, [pc, #88]	; (800486c <TIM_OC3_SetConfig+0x114>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d113      	bne.n	800483e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800481c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004824:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	011b      	lsls	r3, r3, #4
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	4313      	orrs	r3, r2
 8004830:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	011b      	lsls	r3, r3, #4
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	4313      	orrs	r3, r2
 800483c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	621a      	str	r2, [r3, #32]
}
 8004858:	bf00      	nop
 800485a:	371c      	adds	r7, #28
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	40012c00 	.word	0x40012c00
 8004868:	40013400 	.word	0x40013400
 800486c:	40015000 	.word	0x40015000
 8004870:	40014000 	.word	0x40014000
 8004874:	40014400 	.word	0x40014400
 8004878:	40014800 	.word	0x40014800

0800487c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800487c:	b480      	push	{r7}
 800487e:	b087      	sub	sp, #28
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	021b      	lsls	r3, r3, #8
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	031b      	lsls	r3, r3, #12
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a2c      	ldr	r2, [pc, #176]	; (800498c <TIM_OC4_SetConfig+0x110>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d007      	beq.n	80048f0 <TIM_OC4_SetConfig+0x74>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a2b      	ldr	r2, [pc, #172]	; (8004990 <TIM_OC4_SetConfig+0x114>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d003      	beq.n	80048f0 <TIM_OC4_SetConfig+0x74>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a2a      	ldr	r2, [pc, #168]	; (8004994 <TIM_OC4_SetConfig+0x118>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d10d      	bne.n	800490c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80048f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	031b      	lsls	r3, r3, #12
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	4313      	orrs	r3, r2
 8004902:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800490a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a1f      	ldr	r2, [pc, #124]	; (800498c <TIM_OC4_SetConfig+0x110>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d013      	beq.n	800493c <TIM_OC4_SetConfig+0xc0>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a1e      	ldr	r2, [pc, #120]	; (8004990 <TIM_OC4_SetConfig+0x114>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d00f      	beq.n	800493c <TIM_OC4_SetConfig+0xc0>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a1e      	ldr	r2, [pc, #120]	; (8004998 <TIM_OC4_SetConfig+0x11c>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d00b      	beq.n	800493c <TIM_OC4_SetConfig+0xc0>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a1d      	ldr	r2, [pc, #116]	; (800499c <TIM_OC4_SetConfig+0x120>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d007      	beq.n	800493c <TIM_OC4_SetConfig+0xc0>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a1c      	ldr	r2, [pc, #112]	; (80049a0 <TIM_OC4_SetConfig+0x124>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d003      	beq.n	800493c <TIM_OC4_SetConfig+0xc0>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a17      	ldr	r2, [pc, #92]	; (8004994 <TIM_OC4_SetConfig+0x118>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d113      	bne.n	8004964 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004942:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800494a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	019b      	lsls	r3, r3, #6
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	4313      	orrs	r3, r2
 8004956:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	019b      	lsls	r3, r3, #6
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	4313      	orrs	r3, r2
 8004962:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685a      	ldr	r2, [r3, #4]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	621a      	str	r2, [r3, #32]
}
 800497e:	bf00      	nop
 8004980:	371c      	adds	r7, #28
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	40012c00 	.word	0x40012c00
 8004990:	40013400 	.word	0x40013400
 8004994:	40015000 	.word	0x40015000
 8004998:	40014000 	.word	0x40014000
 800499c:	40014400 	.word	0x40014400
 80049a0:	40014800 	.word	0x40014800

080049a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	4313      	orrs	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80049e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	041b      	lsls	r3, r3, #16
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a19      	ldr	r2, [pc, #100]	; (8004a60 <TIM_OC5_SetConfig+0xbc>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d013      	beq.n	8004a26 <TIM_OC5_SetConfig+0x82>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a18      	ldr	r2, [pc, #96]	; (8004a64 <TIM_OC5_SetConfig+0xc0>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d00f      	beq.n	8004a26 <TIM_OC5_SetConfig+0x82>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a17      	ldr	r2, [pc, #92]	; (8004a68 <TIM_OC5_SetConfig+0xc4>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d00b      	beq.n	8004a26 <TIM_OC5_SetConfig+0x82>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a16      	ldr	r2, [pc, #88]	; (8004a6c <TIM_OC5_SetConfig+0xc8>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d007      	beq.n	8004a26 <TIM_OC5_SetConfig+0x82>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a15      	ldr	r2, [pc, #84]	; (8004a70 <TIM_OC5_SetConfig+0xcc>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d003      	beq.n	8004a26 <TIM_OC5_SetConfig+0x82>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a14      	ldr	r2, [pc, #80]	; (8004a74 <TIM_OC5_SetConfig+0xd0>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d109      	bne.n	8004a3a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	021b      	lsls	r3, r3, #8
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	621a      	str	r2, [r3, #32]
}
 8004a54:	bf00      	nop
 8004a56:	371c      	adds	r7, #28
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	40012c00 	.word	0x40012c00
 8004a64:	40013400 	.word	0x40013400
 8004a68:	40014000 	.word	0x40014000
 8004a6c:	40014400 	.word	0x40014400
 8004a70:	40014800 	.word	0x40014800
 8004a74:	40015000 	.word	0x40015000

08004a78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	021b      	lsls	r3, r3, #8
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004abe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	051b      	lsls	r3, r3, #20
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a1a      	ldr	r2, [pc, #104]	; (8004b38 <TIM_OC6_SetConfig+0xc0>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d013      	beq.n	8004afc <TIM_OC6_SetConfig+0x84>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a19      	ldr	r2, [pc, #100]	; (8004b3c <TIM_OC6_SetConfig+0xc4>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d00f      	beq.n	8004afc <TIM_OC6_SetConfig+0x84>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a18      	ldr	r2, [pc, #96]	; (8004b40 <TIM_OC6_SetConfig+0xc8>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d00b      	beq.n	8004afc <TIM_OC6_SetConfig+0x84>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a17      	ldr	r2, [pc, #92]	; (8004b44 <TIM_OC6_SetConfig+0xcc>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d007      	beq.n	8004afc <TIM_OC6_SetConfig+0x84>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a16      	ldr	r2, [pc, #88]	; (8004b48 <TIM_OC6_SetConfig+0xd0>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d003      	beq.n	8004afc <TIM_OC6_SetConfig+0x84>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a15      	ldr	r2, [pc, #84]	; (8004b4c <TIM_OC6_SetConfig+0xd4>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d109      	bne.n	8004b10 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	029b      	lsls	r3, r3, #10
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	621a      	str	r2, [r3, #32]
}
 8004b2a:	bf00      	nop
 8004b2c:	371c      	adds	r7, #28
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	40012c00 	.word	0x40012c00
 8004b3c:	40013400 	.word	0x40013400
 8004b40:	40014000 	.word	0x40014000
 8004b44:	40014400 	.word	0x40014400
 8004b48:	40014800 	.word	0x40014800
 8004b4c:	40015000 	.word	0x40015000

08004b50 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
 8004b5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	f023 0201 	bic.w	r2, r3, #1
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	4a28      	ldr	r2, [pc, #160]	; (8004c1c <TIM_TI1_SetConfig+0xcc>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d01b      	beq.n	8004bb6 <TIM_TI1_SetConfig+0x66>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b84:	d017      	beq.n	8004bb6 <TIM_TI1_SetConfig+0x66>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	4a25      	ldr	r2, [pc, #148]	; (8004c20 <TIM_TI1_SetConfig+0xd0>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d013      	beq.n	8004bb6 <TIM_TI1_SetConfig+0x66>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4a24      	ldr	r2, [pc, #144]	; (8004c24 <TIM_TI1_SetConfig+0xd4>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d00f      	beq.n	8004bb6 <TIM_TI1_SetConfig+0x66>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	4a23      	ldr	r2, [pc, #140]	; (8004c28 <TIM_TI1_SetConfig+0xd8>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d00b      	beq.n	8004bb6 <TIM_TI1_SetConfig+0x66>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	4a22      	ldr	r2, [pc, #136]	; (8004c2c <TIM_TI1_SetConfig+0xdc>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d007      	beq.n	8004bb6 <TIM_TI1_SetConfig+0x66>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	4a21      	ldr	r2, [pc, #132]	; (8004c30 <TIM_TI1_SetConfig+0xe0>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d003      	beq.n	8004bb6 <TIM_TI1_SetConfig+0x66>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	4a20      	ldr	r2, [pc, #128]	; (8004c34 <TIM_TI1_SetConfig+0xe4>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d101      	bne.n	8004bba <TIM_TI1_SetConfig+0x6a>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e000      	b.n	8004bbc <TIM_TI1_SetConfig+0x6c>
 8004bba:	2300      	movs	r3, #0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d008      	beq.n	8004bd2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f023 0303 	bic.w	r3, r3, #3
 8004bc6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	617b      	str	r3, [r7, #20]
 8004bd0:	e003      	b.n	8004bda <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f043 0301 	orr.w	r3, r3, #1
 8004bd8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004be0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	011b      	lsls	r3, r3, #4
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	f023 030a 	bic.w	r3, r3, #10
 8004bf4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	f003 030a 	and.w	r3, r3, #10
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	621a      	str	r2, [r3, #32]
}
 8004c0e:	bf00      	nop
 8004c10:	371c      	adds	r7, #28
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	40012c00 	.word	0x40012c00
 8004c20:	40000400 	.word	0x40000400
 8004c24:	40000800 	.word	0x40000800
 8004c28:	40000c00 	.word	0x40000c00
 8004c2c:	40013400 	.word	0x40013400
 8004c30:	40014000 	.word	0x40014000
 8004c34:	40015000 	.word	0x40015000

08004c38 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b08a      	sub	sp, #40	; 0x28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e0a0      	b.n	8004d8e <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d106      	bne.n	8004c66 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f7fc f929 	bl	8000eb8 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2202      	movs	r2, #2
 8004c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	3304      	adds	r3, #4
 8004c76:	4619      	mov	r1, r3
 8004c78:	4610      	mov	r0, r2
 8004c7a:	f7ff fb97 	bl	80043ac <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6818      	ldr	r0, [r3, #0]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	6819      	ldr	r1, [r3, #0]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	2203      	movs	r2, #3
 8004c8c:	f7ff ff60 	bl	8004b50 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	699a      	ldr	r2, [r3, #24]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 020c 	bic.w	r2, r2, #12
 8004c9e:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6999      	ldr	r1, [r3, #24]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004cc0:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	6812      	ldr	r2, [r2, #0]
 8004ccc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd4:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ce4:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	6812      	ldr	r2, [r2, #0]
 8004cf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cf4:	f023 0307 	bic.w	r3, r3, #7
 8004cf8:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689a      	ldr	r2, [r3, #8]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f042 0204 	orr.w	r2, r2, #4
 8004d08:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8004d12:	2370      	movs	r3, #112	; 0x70
 8004d14:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004d16:	2300      	movs	r3, #0
 8004d18:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f107 020c 	add.w	r2, r7, #12
 8004d30:	4611      	mov	r1, r2
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7ff fc7c 	bl	8004630 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	6812      	ldr	r2, [r2, #0]
 8004d42:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d4a:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8004d5a:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3728      	adds	r7, #40	; 0x28
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
	...

08004d98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d101      	bne.n	8004db0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004dac:	2302      	movs	r3, #2
 8004dae:	e074      	b.n	8004e9a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a34      	ldr	r2, [pc, #208]	; (8004ea8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d009      	beq.n	8004dee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a33      	ldr	r2, [pc, #204]	; (8004eac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d004      	beq.n	8004dee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a31      	ldr	r2, [pc, #196]	; (8004eb0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d108      	bne.n	8004e00 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004df4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a21      	ldr	r2, [pc, #132]	; (8004ea8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d022      	beq.n	8004e6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e30:	d01d      	beq.n	8004e6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a1f      	ldr	r2, [pc, #124]	; (8004eb4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d018      	beq.n	8004e6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a1d      	ldr	r2, [pc, #116]	; (8004eb8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d013      	beq.n	8004e6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a1c      	ldr	r2, [pc, #112]	; (8004ebc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d00e      	beq.n	8004e6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a15      	ldr	r2, [pc, #84]	; (8004eac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d009      	beq.n	8004e6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a18      	ldr	r2, [pc, #96]	; (8004ec0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d004      	beq.n	8004e6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a11      	ldr	r2, [pc, #68]	; (8004eb0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d10c      	bne.n	8004e88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	40012c00 	.word	0x40012c00
 8004eac:	40013400 	.word	0x40013400
 8004eb0:	40015000 	.word	0x40015000
 8004eb4:	40000400 	.word	0x40000400
 8004eb8:	40000800 	.word	0x40000800
 8004ebc:	40000c00 	.word	0x40000c00
 8004ec0:	40014000 	.word	0x40014000

08004ec4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d101      	bne.n	8004ee0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004edc:	2302      	movs	r3, #2
 8004ede:	e096      	b.n	800500e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f46:	4313      	orrs	r3, r2
 8004f48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	041b      	lsls	r3, r3, #16
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a2f      	ldr	r2, [pc, #188]	; (800501c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d009      	beq.n	8004f78 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a2d      	ldr	r2, [pc, #180]	; (8005020 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d004      	beq.n	8004f78 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a2c      	ldr	r2, [pc, #176]	; (8005024 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d106      	bne.n	8004f86 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a24      	ldr	r2, [pc, #144]	; (800501c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d009      	beq.n	8004fa4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a22      	ldr	r2, [pc, #136]	; (8005020 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d004      	beq.n	8004fa4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a21      	ldr	r2, [pc, #132]	; (8005024 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d12b      	bne.n	8004ffc <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fae:	051b      	lsls	r3, r3, #20
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a11      	ldr	r2, [pc, #68]	; (800501c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d009      	beq.n	8004fee <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a10      	ldr	r2, [pc, #64]	; (8005020 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d004      	beq.n	8004fee <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a0e      	ldr	r2, [pc, #56]	; (8005024 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d106      	bne.n	8004ffc <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	40012c00 	.word	0x40012c00
 8005020:	40013400 	.word	0x40013400
 8005024:	40015000 	.word	0x40015000

08005028 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005094:	bf00      	nop
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e042      	b.n	800514c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d106      	bne.n	80050de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f7fb ffb7 	bl	800104c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2224      	movs	r2, #36	; 0x24
 80050e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 0201 	bic.w	r2, r2, #1
 80050f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f8c2 	bl	8005280 <UART_SetConfig>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d101      	bne.n	8005106 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e022      	b.n	800514c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510a:	2b00      	cmp	r3, #0
 800510c:	d002      	beq.n	8005114 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 fbb2 	bl	8005878 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005122:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689a      	ldr	r2, [r3, #8]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005132:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0201 	orr.w	r2, r2, #1
 8005142:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 fc39 	bl	80059bc <UART_CheckIdleState>
 800514a:	4603      	mov	r3, r0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b08a      	sub	sp, #40	; 0x28
 8005158:	af02      	add	r7, sp, #8
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	603b      	str	r3, [r7, #0]
 8005160:	4613      	mov	r3, r2
 8005162:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800516a:	2b20      	cmp	r3, #32
 800516c:	f040 8083 	bne.w	8005276 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d002      	beq.n	800517c <HAL_UART_Transmit+0x28>
 8005176:	88fb      	ldrh	r3, [r7, #6]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d101      	bne.n	8005180 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e07b      	b.n	8005278 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005186:	2b01      	cmp	r3, #1
 8005188:	d101      	bne.n	800518e <HAL_UART_Transmit+0x3a>
 800518a:	2302      	movs	r3, #2
 800518c:	e074      	b.n	8005278 <HAL_UART_Transmit+0x124>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2221      	movs	r2, #33	; 0x21
 80051a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051a6:	f7fc f8f9 	bl	800139c <HAL_GetTick>
 80051aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	88fa      	ldrh	r2, [r7, #6]
 80051b0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	88fa      	ldrh	r2, [r7, #6]
 80051b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c4:	d108      	bne.n	80051d8 <HAL_UART_Transmit+0x84>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d104      	bne.n	80051d8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80051ce:	2300      	movs	r3, #0
 80051d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	61bb      	str	r3, [r7, #24]
 80051d6:	e003      	b.n	80051e0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051dc:	2300      	movs	r3, #0
 80051de:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80051e8:	e02c      	b.n	8005244 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	2200      	movs	r2, #0
 80051f2:	2180      	movs	r1, #128	; 0x80
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f000 fc2c 	bl	8005a52 <UART_WaitOnFlagUntilTimeout>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d001      	beq.n	8005204 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e039      	b.n	8005278 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10b      	bne.n	8005222 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	461a      	mov	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005218:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	3302      	adds	r3, #2
 800521e:	61bb      	str	r3, [r7, #24]
 8005220:	e007      	b.n	8005232 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	781a      	ldrb	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	3301      	adds	r3, #1
 8005230:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005238:	b29b      	uxth	r3, r3
 800523a:	3b01      	subs	r3, #1
 800523c:	b29a      	uxth	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800524a:	b29b      	uxth	r3, r3
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1cc      	bne.n	80051ea <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	2200      	movs	r2, #0
 8005258:	2140      	movs	r1, #64	; 0x40
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 fbf9 	bl	8005a52 <UART_WaitOnFlagUntilTimeout>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e006      	b.n	8005278 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2220      	movs	r2, #32
 800526e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005272:	2300      	movs	r3, #0
 8005274:	e000      	b.n	8005278 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005276:	2302      	movs	r3, #2
  }
}
 8005278:	4618      	mov	r0, r3
 800527a:	3720      	adds	r7, #32
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005284:	b08c      	sub	sp, #48	; 0x30
 8005286:	af00      	add	r7, sp, #0
 8005288:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800528a:	2300      	movs	r3, #0
 800528c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	689a      	ldr	r2, [r3, #8]
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	431a      	orrs	r2, r3
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	431a      	orrs	r2, r3
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	69db      	ldr	r3, [r3, #28]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	4baa      	ldr	r3, [pc, #680]	; (8005558 <UART_SetConfig+0x2d8>)
 80052b0:	4013      	ands	r3, r2
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	6812      	ldr	r2, [r2, #0]
 80052b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052b8:	430b      	orrs	r3, r1
 80052ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	68da      	ldr	r2, [r3, #12]
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	430a      	orrs	r2, r1
 80052d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a9f      	ldr	r2, [pc, #636]	; (800555c <UART_SetConfig+0x2dc>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d004      	beq.n	80052ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052e8:	4313      	orrs	r3, r2
 80052ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80052f6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	6812      	ldr	r2, [r2, #0]
 80052fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005300:	430b      	orrs	r3, r1
 8005302:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530a:	f023 010f 	bic.w	r1, r3, #15
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a90      	ldr	r2, [pc, #576]	; (8005560 <UART_SetConfig+0x2e0>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d125      	bne.n	8005370 <UART_SetConfig+0xf0>
 8005324:	4b8f      	ldr	r3, [pc, #572]	; (8005564 <UART_SetConfig+0x2e4>)
 8005326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532a:	f003 0303 	and.w	r3, r3, #3
 800532e:	2b03      	cmp	r3, #3
 8005330:	d81a      	bhi.n	8005368 <UART_SetConfig+0xe8>
 8005332:	a201      	add	r2, pc, #4	; (adr r2, 8005338 <UART_SetConfig+0xb8>)
 8005334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005338:	08005349 	.word	0x08005349
 800533c:	08005359 	.word	0x08005359
 8005340:	08005351 	.word	0x08005351
 8005344:	08005361 	.word	0x08005361
 8005348:	2301      	movs	r3, #1
 800534a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800534e:	e116      	b.n	800557e <UART_SetConfig+0x2fe>
 8005350:	2302      	movs	r3, #2
 8005352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005356:	e112      	b.n	800557e <UART_SetConfig+0x2fe>
 8005358:	2304      	movs	r3, #4
 800535a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800535e:	e10e      	b.n	800557e <UART_SetConfig+0x2fe>
 8005360:	2308      	movs	r3, #8
 8005362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005366:	e10a      	b.n	800557e <UART_SetConfig+0x2fe>
 8005368:	2310      	movs	r3, #16
 800536a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800536e:	e106      	b.n	800557e <UART_SetConfig+0x2fe>
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a7c      	ldr	r2, [pc, #496]	; (8005568 <UART_SetConfig+0x2e8>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d138      	bne.n	80053ec <UART_SetConfig+0x16c>
 800537a:	4b7a      	ldr	r3, [pc, #488]	; (8005564 <UART_SetConfig+0x2e4>)
 800537c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005380:	f003 030c 	and.w	r3, r3, #12
 8005384:	2b0c      	cmp	r3, #12
 8005386:	d82d      	bhi.n	80053e4 <UART_SetConfig+0x164>
 8005388:	a201      	add	r2, pc, #4	; (adr r2, 8005390 <UART_SetConfig+0x110>)
 800538a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538e:	bf00      	nop
 8005390:	080053c5 	.word	0x080053c5
 8005394:	080053e5 	.word	0x080053e5
 8005398:	080053e5 	.word	0x080053e5
 800539c:	080053e5 	.word	0x080053e5
 80053a0:	080053d5 	.word	0x080053d5
 80053a4:	080053e5 	.word	0x080053e5
 80053a8:	080053e5 	.word	0x080053e5
 80053ac:	080053e5 	.word	0x080053e5
 80053b0:	080053cd 	.word	0x080053cd
 80053b4:	080053e5 	.word	0x080053e5
 80053b8:	080053e5 	.word	0x080053e5
 80053bc:	080053e5 	.word	0x080053e5
 80053c0:	080053dd 	.word	0x080053dd
 80053c4:	2300      	movs	r3, #0
 80053c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053ca:	e0d8      	b.n	800557e <UART_SetConfig+0x2fe>
 80053cc:	2302      	movs	r3, #2
 80053ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053d2:	e0d4      	b.n	800557e <UART_SetConfig+0x2fe>
 80053d4:	2304      	movs	r3, #4
 80053d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053da:	e0d0      	b.n	800557e <UART_SetConfig+0x2fe>
 80053dc:	2308      	movs	r3, #8
 80053de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053e2:	e0cc      	b.n	800557e <UART_SetConfig+0x2fe>
 80053e4:	2310      	movs	r3, #16
 80053e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053ea:	e0c8      	b.n	800557e <UART_SetConfig+0x2fe>
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a5e      	ldr	r2, [pc, #376]	; (800556c <UART_SetConfig+0x2ec>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d125      	bne.n	8005442 <UART_SetConfig+0x1c2>
 80053f6:	4b5b      	ldr	r3, [pc, #364]	; (8005564 <UART_SetConfig+0x2e4>)
 80053f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005400:	2b30      	cmp	r3, #48	; 0x30
 8005402:	d016      	beq.n	8005432 <UART_SetConfig+0x1b2>
 8005404:	2b30      	cmp	r3, #48	; 0x30
 8005406:	d818      	bhi.n	800543a <UART_SetConfig+0x1ba>
 8005408:	2b20      	cmp	r3, #32
 800540a:	d00a      	beq.n	8005422 <UART_SetConfig+0x1a2>
 800540c:	2b20      	cmp	r3, #32
 800540e:	d814      	bhi.n	800543a <UART_SetConfig+0x1ba>
 8005410:	2b00      	cmp	r3, #0
 8005412:	d002      	beq.n	800541a <UART_SetConfig+0x19a>
 8005414:	2b10      	cmp	r3, #16
 8005416:	d008      	beq.n	800542a <UART_SetConfig+0x1aa>
 8005418:	e00f      	b.n	800543a <UART_SetConfig+0x1ba>
 800541a:	2300      	movs	r3, #0
 800541c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005420:	e0ad      	b.n	800557e <UART_SetConfig+0x2fe>
 8005422:	2302      	movs	r3, #2
 8005424:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005428:	e0a9      	b.n	800557e <UART_SetConfig+0x2fe>
 800542a:	2304      	movs	r3, #4
 800542c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005430:	e0a5      	b.n	800557e <UART_SetConfig+0x2fe>
 8005432:	2308      	movs	r3, #8
 8005434:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005438:	e0a1      	b.n	800557e <UART_SetConfig+0x2fe>
 800543a:	2310      	movs	r3, #16
 800543c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005440:	e09d      	b.n	800557e <UART_SetConfig+0x2fe>
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a4a      	ldr	r2, [pc, #296]	; (8005570 <UART_SetConfig+0x2f0>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d125      	bne.n	8005498 <UART_SetConfig+0x218>
 800544c:	4b45      	ldr	r3, [pc, #276]	; (8005564 <UART_SetConfig+0x2e4>)
 800544e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005452:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005456:	2bc0      	cmp	r3, #192	; 0xc0
 8005458:	d016      	beq.n	8005488 <UART_SetConfig+0x208>
 800545a:	2bc0      	cmp	r3, #192	; 0xc0
 800545c:	d818      	bhi.n	8005490 <UART_SetConfig+0x210>
 800545e:	2b80      	cmp	r3, #128	; 0x80
 8005460:	d00a      	beq.n	8005478 <UART_SetConfig+0x1f8>
 8005462:	2b80      	cmp	r3, #128	; 0x80
 8005464:	d814      	bhi.n	8005490 <UART_SetConfig+0x210>
 8005466:	2b00      	cmp	r3, #0
 8005468:	d002      	beq.n	8005470 <UART_SetConfig+0x1f0>
 800546a:	2b40      	cmp	r3, #64	; 0x40
 800546c:	d008      	beq.n	8005480 <UART_SetConfig+0x200>
 800546e:	e00f      	b.n	8005490 <UART_SetConfig+0x210>
 8005470:	2300      	movs	r3, #0
 8005472:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005476:	e082      	b.n	800557e <UART_SetConfig+0x2fe>
 8005478:	2302      	movs	r3, #2
 800547a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800547e:	e07e      	b.n	800557e <UART_SetConfig+0x2fe>
 8005480:	2304      	movs	r3, #4
 8005482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005486:	e07a      	b.n	800557e <UART_SetConfig+0x2fe>
 8005488:	2308      	movs	r3, #8
 800548a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800548e:	e076      	b.n	800557e <UART_SetConfig+0x2fe>
 8005490:	2310      	movs	r3, #16
 8005492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005496:	e072      	b.n	800557e <UART_SetConfig+0x2fe>
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a35      	ldr	r2, [pc, #212]	; (8005574 <UART_SetConfig+0x2f4>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d12a      	bne.n	80054f8 <UART_SetConfig+0x278>
 80054a2:	4b30      	ldr	r3, [pc, #192]	; (8005564 <UART_SetConfig+0x2e4>)
 80054a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054b0:	d01a      	beq.n	80054e8 <UART_SetConfig+0x268>
 80054b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054b6:	d81b      	bhi.n	80054f0 <UART_SetConfig+0x270>
 80054b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054bc:	d00c      	beq.n	80054d8 <UART_SetConfig+0x258>
 80054be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054c2:	d815      	bhi.n	80054f0 <UART_SetConfig+0x270>
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d003      	beq.n	80054d0 <UART_SetConfig+0x250>
 80054c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054cc:	d008      	beq.n	80054e0 <UART_SetConfig+0x260>
 80054ce:	e00f      	b.n	80054f0 <UART_SetConfig+0x270>
 80054d0:	2300      	movs	r3, #0
 80054d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054d6:	e052      	b.n	800557e <UART_SetConfig+0x2fe>
 80054d8:	2302      	movs	r3, #2
 80054da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054de:	e04e      	b.n	800557e <UART_SetConfig+0x2fe>
 80054e0:	2304      	movs	r3, #4
 80054e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054e6:	e04a      	b.n	800557e <UART_SetConfig+0x2fe>
 80054e8:	2308      	movs	r3, #8
 80054ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054ee:	e046      	b.n	800557e <UART_SetConfig+0x2fe>
 80054f0:	2310      	movs	r3, #16
 80054f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054f6:	e042      	b.n	800557e <UART_SetConfig+0x2fe>
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a17      	ldr	r2, [pc, #92]	; (800555c <UART_SetConfig+0x2dc>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d13a      	bne.n	8005578 <UART_SetConfig+0x2f8>
 8005502:	4b18      	ldr	r3, [pc, #96]	; (8005564 <UART_SetConfig+0x2e4>)
 8005504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005508:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800550c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005510:	d01a      	beq.n	8005548 <UART_SetConfig+0x2c8>
 8005512:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005516:	d81b      	bhi.n	8005550 <UART_SetConfig+0x2d0>
 8005518:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800551c:	d00c      	beq.n	8005538 <UART_SetConfig+0x2b8>
 800551e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005522:	d815      	bhi.n	8005550 <UART_SetConfig+0x2d0>
 8005524:	2b00      	cmp	r3, #0
 8005526:	d003      	beq.n	8005530 <UART_SetConfig+0x2b0>
 8005528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800552c:	d008      	beq.n	8005540 <UART_SetConfig+0x2c0>
 800552e:	e00f      	b.n	8005550 <UART_SetConfig+0x2d0>
 8005530:	2300      	movs	r3, #0
 8005532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005536:	e022      	b.n	800557e <UART_SetConfig+0x2fe>
 8005538:	2302      	movs	r3, #2
 800553a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800553e:	e01e      	b.n	800557e <UART_SetConfig+0x2fe>
 8005540:	2304      	movs	r3, #4
 8005542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005546:	e01a      	b.n	800557e <UART_SetConfig+0x2fe>
 8005548:	2308      	movs	r3, #8
 800554a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800554e:	e016      	b.n	800557e <UART_SetConfig+0x2fe>
 8005550:	2310      	movs	r3, #16
 8005552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005556:	e012      	b.n	800557e <UART_SetConfig+0x2fe>
 8005558:	cfff69f3 	.word	0xcfff69f3
 800555c:	40008000 	.word	0x40008000
 8005560:	40013800 	.word	0x40013800
 8005564:	40021000 	.word	0x40021000
 8005568:	40004400 	.word	0x40004400
 800556c:	40004800 	.word	0x40004800
 8005570:	40004c00 	.word	0x40004c00
 8005574:	40005000 	.word	0x40005000
 8005578:	2310      	movs	r3, #16
 800557a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4aae      	ldr	r2, [pc, #696]	; (800583c <UART_SetConfig+0x5bc>)
 8005584:	4293      	cmp	r3, r2
 8005586:	f040 8097 	bne.w	80056b8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800558a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800558e:	2b08      	cmp	r3, #8
 8005590:	d823      	bhi.n	80055da <UART_SetConfig+0x35a>
 8005592:	a201      	add	r2, pc, #4	; (adr r2, 8005598 <UART_SetConfig+0x318>)
 8005594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005598:	080055bd 	.word	0x080055bd
 800559c:	080055db 	.word	0x080055db
 80055a0:	080055c5 	.word	0x080055c5
 80055a4:	080055db 	.word	0x080055db
 80055a8:	080055cb 	.word	0x080055cb
 80055ac:	080055db 	.word	0x080055db
 80055b0:	080055db 	.word	0x080055db
 80055b4:	080055db 	.word	0x080055db
 80055b8:	080055d3 	.word	0x080055d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055bc:	f7fe f818 	bl	80035f0 <HAL_RCC_GetPCLK1Freq>
 80055c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80055c2:	e010      	b.n	80055e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055c4:	4b9e      	ldr	r3, [pc, #632]	; (8005840 <UART_SetConfig+0x5c0>)
 80055c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80055c8:	e00d      	b.n	80055e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055ca:	f7fd ffa3 	bl	8003514 <HAL_RCC_GetSysClockFreq>
 80055ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80055d0:	e009      	b.n	80055e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80055d8:	e005      	b.n	80055e6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80055da:	2300      	movs	r3, #0
 80055dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80055e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f000 8130 	beq.w	800584e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f2:	4a94      	ldr	r2, [pc, #592]	; (8005844 <UART_SetConfig+0x5c4>)
 80055f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055f8:	461a      	mov	r2, r3
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005600:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	4613      	mov	r3, r2
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	4413      	add	r3, r2
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	429a      	cmp	r2, r3
 8005610:	d305      	bcc.n	800561e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005618:	69ba      	ldr	r2, [r7, #24]
 800561a:	429a      	cmp	r2, r3
 800561c:	d903      	bls.n	8005626 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005624:	e113      	b.n	800584e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	2200      	movs	r2, #0
 800562a:	60bb      	str	r3, [r7, #8]
 800562c:	60fa      	str	r2, [r7, #12]
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005632:	4a84      	ldr	r2, [pc, #528]	; (8005844 <UART_SetConfig+0x5c4>)
 8005634:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005638:	b29b      	uxth	r3, r3
 800563a:	2200      	movs	r2, #0
 800563c:	603b      	str	r3, [r7, #0]
 800563e:	607a      	str	r2, [r7, #4]
 8005640:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005644:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005648:	f7fa fdee 	bl	8000228 <__aeabi_uldivmod>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	4610      	mov	r0, r2
 8005652:	4619      	mov	r1, r3
 8005654:	f04f 0200 	mov.w	r2, #0
 8005658:	f04f 0300 	mov.w	r3, #0
 800565c:	020b      	lsls	r3, r1, #8
 800565e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005662:	0202      	lsls	r2, r0, #8
 8005664:	6979      	ldr	r1, [r7, #20]
 8005666:	6849      	ldr	r1, [r1, #4]
 8005668:	0849      	lsrs	r1, r1, #1
 800566a:	2000      	movs	r0, #0
 800566c:	460c      	mov	r4, r1
 800566e:	4605      	mov	r5, r0
 8005670:	eb12 0804 	adds.w	r8, r2, r4
 8005674:	eb43 0905 	adc.w	r9, r3, r5
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	469a      	mov	sl, r3
 8005680:	4693      	mov	fp, r2
 8005682:	4652      	mov	r2, sl
 8005684:	465b      	mov	r3, fp
 8005686:	4640      	mov	r0, r8
 8005688:	4649      	mov	r1, r9
 800568a:	f7fa fdcd 	bl	8000228 <__aeabi_uldivmod>
 800568e:	4602      	mov	r2, r0
 8005690:	460b      	mov	r3, r1
 8005692:	4613      	mov	r3, r2
 8005694:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800569c:	d308      	bcc.n	80056b0 <UART_SetConfig+0x430>
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056a4:	d204      	bcs.n	80056b0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6a3a      	ldr	r2, [r7, #32]
 80056ac:	60da      	str	r2, [r3, #12]
 80056ae:	e0ce      	b.n	800584e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80056b6:	e0ca      	b.n	800584e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	69db      	ldr	r3, [r3, #28]
 80056bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056c0:	d166      	bne.n	8005790 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80056c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80056c6:	2b08      	cmp	r3, #8
 80056c8:	d827      	bhi.n	800571a <UART_SetConfig+0x49a>
 80056ca:	a201      	add	r2, pc, #4	; (adr r2, 80056d0 <UART_SetConfig+0x450>)
 80056cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d0:	080056f5 	.word	0x080056f5
 80056d4:	080056fd 	.word	0x080056fd
 80056d8:	08005705 	.word	0x08005705
 80056dc:	0800571b 	.word	0x0800571b
 80056e0:	0800570b 	.word	0x0800570b
 80056e4:	0800571b 	.word	0x0800571b
 80056e8:	0800571b 	.word	0x0800571b
 80056ec:	0800571b 	.word	0x0800571b
 80056f0:	08005713 	.word	0x08005713
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056f4:	f7fd ff7c 	bl	80035f0 <HAL_RCC_GetPCLK1Freq>
 80056f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80056fa:	e014      	b.n	8005726 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056fc:	f7fd ff8e 	bl	800361c <HAL_RCC_GetPCLK2Freq>
 8005700:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005702:	e010      	b.n	8005726 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005704:	4b4e      	ldr	r3, [pc, #312]	; (8005840 <UART_SetConfig+0x5c0>)
 8005706:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005708:	e00d      	b.n	8005726 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800570a:	f7fd ff03 	bl	8003514 <HAL_RCC_GetSysClockFreq>
 800570e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005710:	e009      	b.n	8005726 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005712:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005716:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005718:	e005      	b.n	8005726 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800571a:	2300      	movs	r3, #0
 800571c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005724:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 8090 	beq.w	800584e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005732:	4a44      	ldr	r2, [pc, #272]	; (8005844 <UART_SetConfig+0x5c4>)
 8005734:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005738:	461a      	mov	r2, r3
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005740:	005a      	lsls	r2, r3, #1
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	085b      	lsrs	r3, r3, #1
 8005748:	441a      	add	r2, r3
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005752:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	2b0f      	cmp	r3, #15
 8005758:	d916      	bls.n	8005788 <UART_SetConfig+0x508>
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005760:	d212      	bcs.n	8005788 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005762:	6a3b      	ldr	r3, [r7, #32]
 8005764:	b29b      	uxth	r3, r3
 8005766:	f023 030f 	bic.w	r3, r3, #15
 800576a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	085b      	lsrs	r3, r3, #1
 8005770:	b29b      	uxth	r3, r3
 8005772:	f003 0307 	and.w	r3, r3, #7
 8005776:	b29a      	uxth	r2, r3
 8005778:	8bfb      	ldrh	r3, [r7, #30]
 800577a:	4313      	orrs	r3, r2
 800577c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	8bfa      	ldrh	r2, [r7, #30]
 8005784:	60da      	str	r2, [r3, #12]
 8005786:	e062      	b.n	800584e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800578e:	e05e      	b.n	800584e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005790:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005794:	2b08      	cmp	r3, #8
 8005796:	d828      	bhi.n	80057ea <UART_SetConfig+0x56a>
 8005798:	a201      	add	r2, pc, #4	; (adr r2, 80057a0 <UART_SetConfig+0x520>)
 800579a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579e:	bf00      	nop
 80057a0:	080057c5 	.word	0x080057c5
 80057a4:	080057cd 	.word	0x080057cd
 80057a8:	080057d5 	.word	0x080057d5
 80057ac:	080057eb 	.word	0x080057eb
 80057b0:	080057db 	.word	0x080057db
 80057b4:	080057eb 	.word	0x080057eb
 80057b8:	080057eb 	.word	0x080057eb
 80057bc:	080057eb 	.word	0x080057eb
 80057c0:	080057e3 	.word	0x080057e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057c4:	f7fd ff14 	bl	80035f0 <HAL_RCC_GetPCLK1Freq>
 80057c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80057ca:	e014      	b.n	80057f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057cc:	f7fd ff26 	bl	800361c <HAL_RCC_GetPCLK2Freq>
 80057d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80057d2:	e010      	b.n	80057f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057d4:	4b1a      	ldr	r3, [pc, #104]	; (8005840 <UART_SetConfig+0x5c0>)
 80057d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80057d8:	e00d      	b.n	80057f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057da:	f7fd fe9b 	bl	8003514 <HAL_RCC_GetSysClockFreq>
 80057de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80057e0:	e009      	b.n	80057f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80057e8:	e005      	b.n	80057f6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80057f4:	bf00      	nop
    }

    if (pclk != 0U)
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d028      	beq.n	800584e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005800:	4a10      	ldr	r2, [pc, #64]	; (8005844 <UART_SetConfig+0x5c4>)
 8005802:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005806:	461a      	mov	r2, r3
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	fbb3 f2f2 	udiv	r2, r3, r2
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	085b      	lsrs	r3, r3, #1
 8005814:	441a      	add	r2, r3
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	fbb2 f3f3 	udiv	r3, r2, r3
 800581e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005820:	6a3b      	ldr	r3, [r7, #32]
 8005822:	2b0f      	cmp	r3, #15
 8005824:	d910      	bls.n	8005848 <UART_SetConfig+0x5c8>
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800582c:	d20c      	bcs.n	8005848 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800582e:	6a3b      	ldr	r3, [r7, #32]
 8005830:	b29a      	uxth	r2, r3
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	60da      	str	r2, [r3, #12]
 8005838:	e009      	b.n	800584e <UART_SetConfig+0x5ce>
 800583a:	bf00      	nop
 800583c:	40008000 	.word	0x40008000
 8005840:	00f42400 	.word	0x00f42400
 8005844:	08005e80 	.word	0x08005e80
      }
      else
      {
        ret = HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	2201      	movs	r2, #1
 8005852:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	2201      	movs	r2, #1
 800585a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	2200      	movs	r2, #0
 8005862:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	2200      	movs	r2, #0
 8005868:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800586a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800586e:	4618      	mov	r0, r3
 8005870:	3730      	adds	r7, #48	; 0x30
 8005872:	46bd      	mov	sp, r7
 8005874:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005878 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005884:	f003 0301 	and.w	r3, r3, #1
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00a      	beq.n	80058a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	430a      	orrs	r2, r1
 80058a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a6:	f003 0302 	and.w	r3, r3, #2
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00a      	beq.n	80058c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	430a      	orrs	r2, r1
 80058c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c8:	f003 0304 	and.w	r3, r3, #4
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00a      	beq.n	80058e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	430a      	orrs	r2, r1
 80058e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ea:	f003 0308 	and.w	r3, r3, #8
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00a      	beq.n	8005908 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	430a      	orrs	r2, r1
 8005906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590c:	f003 0310 	and.w	r3, r3, #16
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00a      	beq.n	800592a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592e:	f003 0320 	and.w	r3, r3, #32
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00a      	beq.n	800594c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	430a      	orrs	r2, r1
 800594a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005954:	2b00      	cmp	r3, #0
 8005956:	d01a      	beq.n	800598e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	430a      	orrs	r2, r1
 800596c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005972:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005976:	d10a      	bne.n	800598e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	430a      	orrs	r2, r1
 800598c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00a      	beq.n	80059b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	430a      	orrs	r2, r1
 80059ae:	605a      	str	r2, [r3, #4]
  }
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af02      	add	r7, sp, #8
 80059c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059cc:	f7fb fce6 	bl	800139c <HAL_GetTick>
 80059d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0308 	and.w	r3, r3, #8
 80059dc:	2b08      	cmp	r3, #8
 80059de:	d10e      	bne.n	80059fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059e4:	9300      	str	r3, [sp, #0]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f82f 	bl	8005a52 <UART_WaitOnFlagUntilTimeout>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e025      	b.n	8005a4a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0304 	and.w	r3, r3, #4
 8005a08:	2b04      	cmp	r3, #4
 8005a0a:	d10e      	bne.n	8005a2a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a10:	9300      	str	r3, [sp, #0]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f819 	bl	8005a52 <UART_WaitOnFlagUntilTimeout>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e00f      	b.n	8005a4a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2220      	movs	r2, #32
 8005a2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2220      	movs	r2, #32
 8005a36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b09c      	sub	sp, #112	; 0x70
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	60f8      	str	r0, [r7, #12]
 8005a5a:	60b9      	str	r1, [r7, #8]
 8005a5c:	603b      	str	r3, [r7, #0]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a62:	e0a9      	b.n	8005bb8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a6a:	f000 80a5 	beq.w	8005bb8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a6e:	f7fb fc95 	bl	800139c <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d302      	bcc.n	8005a84 <UART_WaitOnFlagUntilTimeout+0x32>
 8005a7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d140      	bne.n	8005b06 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a8c:	e853 3f00 	ldrex	r3, [r3]
 8005a90:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a98:	667b      	str	r3, [r7, #100]	; 0x64
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005aa4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005aa8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005aaa:	e841 2300 	strex	r3, r2, [r1]
 8005aae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005ab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d1e6      	bne.n	8005a84 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	3308      	adds	r3, #8
 8005abc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ac0:	e853 3f00 	ldrex	r3, [r3]
 8005ac4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac8:	f023 0301 	bic.w	r3, r3, #1
 8005acc:	663b      	str	r3, [r7, #96]	; 0x60
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	3308      	adds	r3, #8
 8005ad4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ad6:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ad8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ada:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005adc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ade:	e841 2300 	strex	r3, r2, [r1]
 8005ae2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d1e5      	bne.n	8005ab6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2220      	movs	r2, #32
 8005aee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2220      	movs	r2, #32
 8005af6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e069      	b.n	8005bda <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0304 	and.w	r3, r3, #4
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d051      	beq.n	8005bb8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	69db      	ldr	r3, [r3, #28]
 8005b1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b22:	d149      	bne.n	8005bb8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b2c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b36:	e853 3f00 	ldrex	r3, [r3]
 8005b3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	461a      	mov	r2, r3
 8005b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b4c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b4e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b54:	e841 2300 	strex	r3, r2, [r1]
 8005b58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1e6      	bne.n	8005b2e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	3308      	adds	r3, #8
 8005b66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	e853 3f00 	ldrex	r3, [r3]
 8005b6e:	613b      	str	r3, [r7, #16]
   return(result);
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	f023 0301 	bic.w	r3, r3, #1
 8005b76:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	3308      	adds	r3, #8
 8005b7e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b80:	623a      	str	r2, [r7, #32]
 8005b82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b84:	69f9      	ldr	r1, [r7, #28]
 8005b86:	6a3a      	ldr	r2, [r7, #32]
 8005b88:	e841 2300 	strex	r3, r2, [r1]
 8005b8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1e5      	bne.n	8005b60 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2220      	movs	r2, #32
 8005b98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e010      	b.n	8005bda <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	69da      	ldr	r2, [r3, #28]
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	bf0c      	ite	eq
 8005bc8:	2301      	moveq	r3, #1
 8005bca:	2300      	movne	r3, #0
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	461a      	mov	r2, r3
 8005bd0:	79fb      	ldrb	r3, [r7, #7]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	f43f af46 	beq.w	8005a64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3770      	adds	r7, #112	; 0x70
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b085      	sub	sp, #20
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d101      	bne.n	8005bf8 <HAL_UARTEx_DisableFifoMode+0x16>
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e027      	b.n	8005c48 <HAL_UARTEx_DisableFifoMode+0x66>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2224      	movs	r2, #36	; 0x24
 8005c04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f022 0201 	bic.w	r2, r2, #1
 8005c1e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005c26:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3714      	adds	r7, #20
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d101      	bne.n	8005c6c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005c68:	2302      	movs	r3, #2
 8005c6a:	e02d      	b.n	8005cc8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2224      	movs	r2, #36	; 0x24
 8005c78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f022 0201 	bic.w	r2, r2, #1
 8005c92:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f84f 	bl	8005d4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2220      	movs	r2, #32
 8005cba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d101      	bne.n	8005ce8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	e02d      	b.n	8005d44 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2224      	movs	r2, #36	; 0x24
 8005cf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f022 0201 	bic.w	r2, r2, #1
 8005d0e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	430a      	orrs	r2, r1
 8005d22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 f811 	bl	8005d4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2220      	movs	r2, #32
 8005d36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d108      	bne.n	8005d6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005d6c:	e031      	b.n	8005dd2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005d6e:	2308      	movs	r3, #8
 8005d70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005d72:	2308      	movs	r3, #8
 8005d74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	0e5b      	lsrs	r3, r3, #25
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	0f5b      	lsrs	r3, r3, #29
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	f003 0307 	and.w	r3, r3, #7
 8005d94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d96:	7bbb      	ldrb	r3, [r7, #14]
 8005d98:	7b3a      	ldrb	r2, [r7, #12]
 8005d9a:	4911      	ldr	r1, [pc, #68]	; (8005de0 <UARTEx_SetNbDataToProcess+0x94>)
 8005d9c:	5c8a      	ldrb	r2, [r1, r2]
 8005d9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005da2:	7b3a      	ldrb	r2, [r7, #12]
 8005da4:	490f      	ldr	r1, [pc, #60]	; (8005de4 <UARTEx_SetNbDataToProcess+0x98>)
 8005da6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005da8:	fb93 f3f2 	sdiv	r3, r3, r2
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005db4:	7bfb      	ldrb	r3, [r7, #15]
 8005db6:	7b7a      	ldrb	r2, [r7, #13]
 8005db8:	4909      	ldr	r1, [pc, #36]	; (8005de0 <UARTEx_SetNbDataToProcess+0x94>)
 8005dba:	5c8a      	ldrb	r2, [r1, r2]
 8005dbc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005dc0:	7b7a      	ldrb	r2, [r7, #13]
 8005dc2:	4908      	ldr	r1, [pc, #32]	; (8005de4 <UARTEx_SetNbDataToProcess+0x98>)
 8005dc4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005dc6:	fb93 f3f2 	sdiv	r3, r3, r2
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005dd2:	bf00      	nop
 8005dd4:	3714      	adds	r7, #20
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	08005e98 	.word	0x08005e98
 8005de4:	08005ea0 	.word	0x08005ea0

08005de8 <memset>:
 8005de8:	4402      	add	r2, r0
 8005dea:	4603      	mov	r3, r0
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d100      	bne.n	8005df2 <memset+0xa>
 8005df0:	4770      	bx	lr
 8005df2:	f803 1b01 	strb.w	r1, [r3], #1
 8005df6:	e7f9      	b.n	8005dec <memset+0x4>

08005df8 <__libc_init_array>:
 8005df8:	b570      	push	{r4, r5, r6, lr}
 8005dfa:	4d0d      	ldr	r5, [pc, #52]	; (8005e30 <__libc_init_array+0x38>)
 8005dfc:	4c0d      	ldr	r4, [pc, #52]	; (8005e34 <__libc_init_array+0x3c>)
 8005dfe:	1b64      	subs	r4, r4, r5
 8005e00:	10a4      	asrs	r4, r4, #2
 8005e02:	2600      	movs	r6, #0
 8005e04:	42a6      	cmp	r6, r4
 8005e06:	d109      	bne.n	8005e1c <__libc_init_array+0x24>
 8005e08:	4d0b      	ldr	r5, [pc, #44]	; (8005e38 <__libc_init_array+0x40>)
 8005e0a:	4c0c      	ldr	r4, [pc, #48]	; (8005e3c <__libc_init_array+0x44>)
 8005e0c:	f000 f818 	bl	8005e40 <_init>
 8005e10:	1b64      	subs	r4, r4, r5
 8005e12:	10a4      	asrs	r4, r4, #2
 8005e14:	2600      	movs	r6, #0
 8005e16:	42a6      	cmp	r6, r4
 8005e18:	d105      	bne.n	8005e26 <__libc_init_array+0x2e>
 8005e1a:	bd70      	pop	{r4, r5, r6, pc}
 8005e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e20:	4798      	blx	r3
 8005e22:	3601      	adds	r6, #1
 8005e24:	e7ee      	b.n	8005e04 <__libc_init_array+0xc>
 8005e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e2a:	4798      	blx	r3
 8005e2c:	3601      	adds	r6, #1
 8005e2e:	e7f2      	b.n	8005e16 <__libc_init_array+0x1e>
 8005e30:	08005eb0 	.word	0x08005eb0
 8005e34:	08005eb0 	.word	0x08005eb0
 8005e38:	08005eb0 	.word	0x08005eb0
 8005e3c:	08005eb4 	.word	0x08005eb4

08005e40 <_init>:
 8005e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e42:	bf00      	nop
 8005e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e46:	bc08      	pop	{r3}
 8005e48:	469e      	mov	lr, r3
 8005e4a:	4770      	bx	lr

08005e4c <_fini>:
 8005e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e4e:	bf00      	nop
 8005e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e52:	bc08      	pop	{r3}
 8005e54:	469e      	mov	lr, r3
 8005e56:	4770      	bx	lr
